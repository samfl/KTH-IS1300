
UART_Hello_World.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000031a8  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000058  08003330  08003330  00013330  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003388  08003388  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08003388  08003388  00013388  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003390  08003390  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003390  08003390  00013390  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003394  08003394  00013394  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08003398  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000120  2000000c  080033a4  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000012c  080033a4  0002012c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000099cf  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000171d  00000000  00000000  00029a0b  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000880  00000000  00000000  0002b128  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000007a8  00000000  00000000  0002b9a8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0002591b  00000000  00000000  0002c150  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00007b6d  00000000  00000000  00051a6b  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000e732f  00000000  00000000  000595d8  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00140907  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000210c  00000000  00000000  00140984  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000000c 	.word	0x2000000c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08003318 	.word	0x08003318

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000010 	.word	0x20000010
 80001c4:	08003318 	.word	0x08003318

080001c8 <strlen>:
 80001c8:	4603      	mov	r3, r0
 80001ca:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ce:	2a00      	cmp	r2, #0
 80001d0:	d1fb      	bne.n	80001ca <strlen+0x2>
 80001d2:	1a18      	subs	r0, r3, r0
 80001d4:	3801      	subs	r0, #1
 80001d6:	4770      	bx	lr

080001d8 <__aeabi_uldivmod>:
 80001d8:	b953      	cbnz	r3, 80001f0 <__aeabi_uldivmod+0x18>
 80001da:	b94a      	cbnz	r2, 80001f0 <__aeabi_uldivmod+0x18>
 80001dc:	2900      	cmp	r1, #0
 80001de:	bf08      	it	eq
 80001e0:	2800      	cmpeq	r0, #0
 80001e2:	bf1c      	itt	ne
 80001e4:	f04f 31ff 	movne.w	r1, #4294967295
 80001e8:	f04f 30ff 	movne.w	r0, #4294967295
 80001ec:	f000 b972 	b.w	80004d4 <__aeabi_idiv0>
 80001f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f8:	f000 f806 	bl	8000208 <__udivmoddi4>
 80001fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000200:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000204:	b004      	add	sp, #16
 8000206:	4770      	bx	lr

08000208 <__udivmoddi4>:
 8000208:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800020c:	9e08      	ldr	r6, [sp, #32]
 800020e:	4604      	mov	r4, r0
 8000210:	4688      	mov	r8, r1
 8000212:	2b00      	cmp	r3, #0
 8000214:	d14b      	bne.n	80002ae <__udivmoddi4+0xa6>
 8000216:	428a      	cmp	r2, r1
 8000218:	4615      	mov	r5, r2
 800021a:	d967      	bls.n	80002ec <__udivmoddi4+0xe4>
 800021c:	fab2 f282 	clz	r2, r2
 8000220:	b14a      	cbz	r2, 8000236 <__udivmoddi4+0x2e>
 8000222:	f1c2 0720 	rsb	r7, r2, #32
 8000226:	fa01 f302 	lsl.w	r3, r1, r2
 800022a:	fa20 f707 	lsr.w	r7, r0, r7
 800022e:	4095      	lsls	r5, r2
 8000230:	ea47 0803 	orr.w	r8, r7, r3
 8000234:	4094      	lsls	r4, r2
 8000236:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800023a:	0c23      	lsrs	r3, r4, #16
 800023c:	fbb8 f7fe 	udiv	r7, r8, lr
 8000240:	fa1f fc85 	uxth.w	ip, r5
 8000244:	fb0e 8817 	mls	r8, lr, r7, r8
 8000248:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800024c:	fb07 f10c 	mul.w	r1, r7, ip
 8000250:	4299      	cmp	r1, r3
 8000252:	d909      	bls.n	8000268 <__udivmoddi4+0x60>
 8000254:	18eb      	adds	r3, r5, r3
 8000256:	f107 30ff 	add.w	r0, r7, #4294967295
 800025a:	f080 811b 	bcs.w	8000494 <__udivmoddi4+0x28c>
 800025e:	4299      	cmp	r1, r3
 8000260:	f240 8118 	bls.w	8000494 <__udivmoddi4+0x28c>
 8000264:	3f02      	subs	r7, #2
 8000266:	442b      	add	r3, r5
 8000268:	1a5b      	subs	r3, r3, r1
 800026a:	b2a4      	uxth	r4, r4
 800026c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000270:	fb0e 3310 	mls	r3, lr, r0, r3
 8000274:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000278:	fb00 fc0c 	mul.w	ip, r0, ip
 800027c:	45a4      	cmp	ip, r4
 800027e:	d909      	bls.n	8000294 <__udivmoddi4+0x8c>
 8000280:	192c      	adds	r4, r5, r4
 8000282:	f100 33ff 	add.w	r3, r0, #4294967295
 8000286:	f080 8107 	bcs.w	8000498 <__udivmoddi4+0x290>
 800028a:	45a4      	cmp	ip, r4
 800028c:	f240 8104 	bls.w	8000498 <__udivmoddi4+0x290>
 8000290:	3802      	subs	r0, #2
 8000292:	442c      	add	r4, r5
 8000294:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000298:	eba4 040c 	sub.w	r4, r4, ip
 800029c:	2700      	movs	r7, #0
 800029e:	b11e      	cbz	r6, 80002a8 <__udivmoddi4+0xa0>
 80002a0:	40d4      	lsrs	r4, r2
 80002a2:	2300      	movs	r3, #0
 80002a4:	e9c6 4300 	strd	r4, r3, [r6]
 80002a8:	4639      	mov	r1, r7
 80002aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ae:	428b      	cmp	r3, r1
 80002b0:	d909      	bls.n	80002c6 <__udivmoddi4+0xbe>
 80002b2:	2e00      	cmp	r6, #0
 80002b4:	f000 80eb 	beq.w	800048e <__udivmoddi4+0x286>
 80002b8:	2700      	movs	r7, #0
 80002ba:	e9c6 0100 	strd	r0, r1, [r6]
 80002be:	4638      	mov	r0, r7
 80002c0:	4639      	mov	r1, r7
 80002c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c6:	fab3 f783 	clz	r7, r3
 80002ca:	2f00      	cmp	r7, #0
 80002cc:	d147      	bne.n	800035e <__udivmoddi4+0x156>
 80002ce:	428b      	cmp	r3, r1
 80002d0:	d302      	bcc.n	80002d8 <__udivmoddi4+0xd0>
 80002d2:	4282      	cmp	r2, r0
 80002d4:	f200 80fa 	bhi.w	80004cc <__udivmoddi4+0x2c4>
 80002d8:	1a84      	subs	r4, r0, r2
 80002da:	eb61 0303 	sbc.w	r3, r1, r3
 80002de:	2001      	movs	r0, #1
 80002e0:	4698      	mov	r8, r3
 80002e2:	2e00      	cmp	r6, #0
 80002e4:	d0e0      	beq.n	80002a8 <__udivmoddi4+0xa0>
 80002e6:	e9c6 4800 	strd	r4, r8, [r6]
 80002ea:	e7dd      	b.n	80002a8 <__udivmoddi4+0xa0>
 80002ec:	b902      	cbnz	r2, 80002f0 <__udivmoddi4+0xe8>
 80002ee:	deff      	udf	#255	; 0xff
 80002f0:	fab2 f282 	clz	r2, r2
 80002f4:	2a00      	cmp	r2, #0
 80002f6:	f040 808f 	bne.w	8000418 <__udivmoddi4+0x210>
 80002fa:	1b49      	subs	r1, r1, r5
 80002fc:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000300:	fa1f f885 	uxth.w	r8, r5
 8000304:	2701      	movs	r7, #1
 8000306:	fbb1 fcfe 	udiv	ip, r1, lr
 800030a:	0c23      	lsrs	r3, r4, #16
 800030c:	fb0e 111c 	mls	r1, lr, ip, r1
 8000310:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000314:	fb08 f10c 	mul.w	r1, r8, ip
 8000318:	4299      	cmp	r1, r3
 800031a:	d907      	bls.n	800032c <__udivmoddi4+0x124>
 800031c:	18eb      	adds	r3, r5, r3
 800031e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000322:	d202      	bcs.n	800032a <__udivmoddi4+0x122>
 8000324:	4299      	cmp	r1, r3
 8000326:	f200 80cd 	bhi.w	80004c4 <__udivmoddi4+0x2bc>
 800032a:	4684      	mov	ip, r0
 800032c:	1a59      	subs	r1, r3, r1
 800032e:	b2a3      	uxth	r3, r4
 8000330:	fbb1 f0fe 	udiv	r0, r1, lr
 8000334:	fb0e 1410 	mls	r4, lr, r0, r1
 8000338:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 800033c:	fb08 f800 	mul.w	r8, r8, r0
 8000340:	45a0      	cmp	r8, r4
 8000342:	d907      	bls.n	8000354 <__udivmoddi4+0x14c>
 8000344:	192c      	adds	r4, r5, r4
 8000346:	f100 33ff 	add.w	r3, r0, #4294967295
 800034a:	d202      	bcs.n	8000352 <__udivmoddi4+0x14a>
 800034c:	45a0      	cmp	r8, r4
 800034e:	f200 80b6 	bhi.w	80004be <__udivmoddi4+0x2b6>
 8000352:	4618      	mov	r0, r3
 8000354:	eba4 0408 	sub.w	r4, r4, r8
 8000358:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800035c:	e79f      	b.n	800029e <__udivmoddi4+0x96>
 800035e:	f1c7 0c20 	rsb	ip, r7, #32
 8000362:	40bb      	lsls	r3, r7
 8000364:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000368:	ea4e 0e03 	orr.w	lr, lr, r3
 800036c:	fa01 f407 	lsl.w	r4, r1, r7
 8000370:	fa20 f50c 	lsr.w	r5, r0, ip
 8000374:	fa21 f30c 	lsr.w	r3, r1, ip
 8000378:	ea4f 481e 	mov.w	r8, lr, lsr #16
 800037c:	4325      	orrs	r5, r4
 800037e:	fbb3 f9f8 	udiv	r9, r3, r8
 8000382:	0c2c      	lsrs	r4, r5, #16
 8000384:	fb08 3319 	mls	r3, r8, r9, r3
 8000388:	fa1f fa8e 	uxth.w	sl, lr
 800038c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000390:	fb09 f40a 	mul.w	r4, r9, sl
 8000394:	429c      	cmp	r4, r3
 8000396:	fa02 f207 	lsl.w	r2, r2, r7
 800039a:	fa00 f107 	lsl.w	r1, r0, r7
 800039e:	d90b      	bls.n	80003b8 <__udivmoddi4+0x1b0>
 80003a0:	eb1e 0303 	adds.w	r3, lr, r3
 80003a4:	f109 30ff 	add.w	r0, r9, #4294967295
 80003a8:	f080 8087 	bcs.w	80004ba <__udivmoddi4+0x2b2>
 80003ac:	429c      	cmp	r4, r3
 80003ae:	f240 8084 	bls.w	80004ba <__udivmoddi4+0x2b2>
 80003b2:	f1a9 0902 	sub.w	r9, r9, #2
 80003b6:	4473      	add	r3, lr
 80003b8:	1b1b      	subs	r3, r3, r4
 80003ba:	b2ad      	uxth	r5, r5
 80003bc:	fbb3 f0f8 	udiv	r0, r3, r8
 80003c0:	fb08 3310 	mls	r3, r8, r0, r3
 80003c4:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80003c8:	fb00 fa0a 	mul.w	sl, r0, sl
 80003cc:	45a2      	cmp	sl, r4
 80003ce:	d908      	bls.n	80003e2 <__udivmoddi4+0x1da>
 80003d0:	eb1e 0404 	adds.w	r4, lr, r4
 80003d4:	f100 33ff 	add.w	r3, r0, #4294967295
 80003d8:	d26b      	bcs.n	80004b2 <__udivmoddi4+0x2aa>
 80003da:	45a2      	cmp	sl, r4
 80003dc:	d969      	bls.n	80004b2 <__udivmoddi4+0x2aa>
 80003de:	3802      	subs	r0, #2
 80003e0:	4474      	add	r4, lr
 80003e2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80003e6:	fba0 8902 	umull	r8, r9, r0, r2
 80003ea:	eba4 040a 	sub.w	r4, r4, sl
 80003ee:	454c      	cmp	r4, r9
 80003f0:	46c2      	mov	sl, r8
 80003f2:	464b      	mov	r3, r9
 80003f4:	d354      	bcc.n	80004a0 <__udivmoddi4+0x298>
 80003f6:	d051      	beq.n	800049c <__udivmoddi4+0x294>
 80003f8:	2e00      	cmp	r6, #0
 80003fa:	d069      	beq.n	80004d0 <__udivmoddi4+0x2c8>
 80003fc:	ebb1 050a 	subs.w	r5, r1, sl
 8000400:	eb64 0403 	sbc.w	r4, r4, r3
 8000404:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000408:	40fd      	lsrs	r5, r7
 800040a:	40fc      	lsrs	r4, r7
 800040c:	ea4c 0505 	orr.w	r5, ip, r5
 8000410:	e9c6 5400 	strd	r5, r4, [r6]
 8000414:	2700      	movs	r7, #0
 8000416:	e747      	b.n	80002a8 <__udivmoddi4+0xa0>
 8000418:	f1c2 0320 	rsb	r3, r2, #32
 800041c:	fa20 f703 	lsr.w	r7, r0, r3
 8000420:	4095      	lsls	r5, r2
 8000422:	fa01 f002 	lsl.w	r0, r1, r2
 8000426:	fa21 f303 	lsr.w	r3, r1, r3
 800042a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800042e:	4338      	orrs	r0, r7
 8000430:	0c01      	lsrs	r1, r0, #16
 8000432:	fbb3 f7fe 	udiv	r7, r3, lr
 8000436:	fa1f f885 	uxth.w	r8, r5
 800043a:	fb0e 3317 	mls	r3, lr, r7, r3
 800043e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000442:	fb07 f308 	mul.w	r3, r7, r8
 8000446:	428b      	cmp	r3, r1
 8000448:	fa04 f402 	lsl.w	r4, r4, r2
 800044c:	d907      	bls.n	800045e <__udivmoddi4+0x256>
 800044e:	1869      	adds	r1, r5, r1
 8000450:	f107 3cff 	add.w	ip, r7, #4294967295
 8000454:	d22f      	bcs.n	80004b6 <__udivmoddi4+0x2ae>
 8000456:	428b      	cmp	r3, r1
 8000458:	d92d      	bls.n	80004b6 <__udivmoddi4+0x2ae>
 800045a:	3f02      	subs	r7, #2
 800045c:	4429      	add	r1, r5
 800045e:	1acb      	subs	r3, r1, r3
 8000460:	b281      	uxth	r1, r0
 8000462:	fbb3 f0fe 	udiv	r0, r3, lr
 8000466:	fb0e 3310 	mls	r3, lr, r0, r3
 800046a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800046e:	fb00 f308 	mul.w	r3, r0, r8
 8000472:	428b      	cmp	r3, r1
 8000474:	d907      	bls.n	8000486 <__udivmoddi4+0x27e>
 8000476:	1869      	adds	r1, r5, r1
 8000478:	f100 3cff 	add.w	ip, r0, #4294967295
 800047c:	d217      	bcs.n	80004ae <__udivmoddi4+0x2a6>
 800047e:	428b      	cmp	r3, r1
 8000480:	d915      	bls.n	80004ae <__udivmoddi4+0x2a6>
 8000482:	3802      	subs	r0, #2
 8000484:	4429      	add	r1, r5
 8000486:	1ac9      	subs	r1, r1, r3
 8000488:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 800048c:	e73b      	b.n	8000306 <__udivmoddi4+0xfe>
 800048e:	4637      	mov	r7, r6
 8000490:	4630      	mov	r0, r6
 8000492:	e709      	b.n	80002a8 <__udivmoddi4+0xa0>
 8000494:	4607      	mov	r7, r0
 8000496:	e6e7      	b.n	8000268 <__udivmoddi4+0x60>
 8000498:	4618      	mov	r0, r3
 800049a:	e6fb      	b.n	8000294 <__udivmoddi4+0x8c>
 800049c:	4541      	cmp	r1, r8
 800049e:	d2ab      	bcs.n	80003f8 <__udivmoddi4+0x1f0>
 80004a0:	ebb8 0a02 	subs.w	sl, r8, r2
 80004a4:	eb69 020e 	sbc.w	r2, r9, lr
 80004a8:	3801      	subs	r0, #1
 80004aa:	4613      	mov	r3, r2
 80004ac:	e7a4      	b.n	80003f8 <__udivmoddi4+0x1f0>
 80004ae:	4660      	mov	r0, ip
 80004b0:	e7e9      	b.n	8000486 <__udivmoddi4+0x27e>
 80004b2:	4618      	mov	r0, r3
 80004b4:	e795      	b.n	80003e2 <__udivmoddi4+0x1da>
 80004b6:	4667      	mov	r7, ip
 80004b8:	e7d1      	b.n	800045e <__udivmoddi4+0x256>
 80004ba:	4681      	mov	r9, r0
 80004bc:	e77c      	b.n	80003b8 <__udivmoddi4+0x1b0>
 80004be:	3802      	subs	r0, #2
 80004c0:	442c      	add	r4, r5
 80004c2:	e747      	b.n	8000354 <__udivmoddi4+0x14c>
 80004c4:	f1ac 0c02 	sub.w	ip, ip, #2
 80004c8:	442b      	add	r3, r5
 80004ca:	e72f      	b.n	800032c <__udivmoddi4+0x124>
 80004cc:	4638      	mov	r0, r7
 80004ce:	e708      	b.n	80002e2 <__udivmoddi4+0xda>
 80004d0:	4637      	mov	r7, r6
 80004d2:	e6e9      	b.n	80002a8 <__udivmoddi4+0xa0>

080004d4 <__aeabi_idiv0>:
 80004d4:	4770      	bx	lr
 80004d6:	bf00      	nop

080004d8 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80004d8:	b580      	push	{r7, lr}
 80004da:	b08a      	sub	sp, #40	; 0x28
 80004dc:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80004de:	f107 0314 	add.w	r3, r7, #20
 80004e2:	2200      	movs	r2, #0
 80004e4:	601a      	str	r2, [r3, #0]
 80004e6:	605a      	str	r2, [r3, #4]
 80004e8:	609a      	str	r2, [r3, #8]
 80004ea:	60da      	str	r2, [r3, #12]
 80004ec:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80004ee:	4b31      	ldr	r3, [pc, #196]	; (80005b4 <MX_GPIO_Init+0xdc>)
 80004f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80004f2:	4a30      	ldr	r2, [pc, #192]	; (80005b4 <MX_GPIO_Init+0xdc>)
 80004f4:	f043 0304 	orr.w	r3, r3, #4
 80004f8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80004fa:	4b2e      	ldr	r3, [pc, #184]	; (80005b4 <MX_GPIO_Init+0xdc>)
 80004fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80004fe:	f003 0304 	and.w	r3, r3, #4
 8000502:	613b      	str	r3, [r7, #16]
 8000504:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000506:	4b2b      	ldr	r3, [pc, #172]	; (80005b4 <MX_GPIO_Init+0xdc>)
 8000508:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800050a:	4a2a      	ldr	r2, [pc, #168]	; (80005b4 <MX_GPIO_Init+0xdc>)
 800050c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000510:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000512:	4b28      	ldr	r3, [pc, #160]	; (80005b4 <MX_GPIO_Init+0xdc>)
 8000514:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000516:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800051a:	60fb      	str	r3, [r7, #12]
 800051c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800051e:	4b25      	ldr	r3, [pc, #148]	; (80005b4 <MX_GPIO_Init+0xdc>)
 8000520:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000522:	4a24      	ldr	r2, [pc, #144]	; (80005b4 <MX_GPIO_Init+0xdc>)
 8000524:	f043 0301 	orr.w	r3, r3, #1
 8000528:	64d3      	str	r3, [r2, #76]	; 0x4c
 800052a:	4b22      	ldr	r3, [pc, #136]	; (80005b4 <MX_GPIO_Init+0xdc>)
 800052c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800052e:	f003 0301 	and.w	r3, r3, #1
 8000532:	60bb      	str	r3, [r7, #8]
 8000534:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000536:	4b1f      	ldr	r3, [pc, #124]	; (80005b4 <MX_GPIO_Init+0xdc>)
 8000538:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800053a:	4a1e      	ldr	r2, [pc, #120]	; (80005b4 <MX_GPIO_Init+0xdc>)
 800053c:	f043 0308 	orr.w	r3, r3, #8
 8000540:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000542:	4b1c      	ldr	r3, [pc, #112]	; (80005b4 <MX_GPIO_Init+0xdc>)
 8000544:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000546:	f003 0308 	and.w	r3, r3, #8
 800054a:	607b      	str	r3, [r7, #4]
 800054c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800054e:	4b19      	ldr	r3, [pc, #100]	; (80005b4 <MX_GPIO_Init+0xdc>)
 8000550:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000552:	4a18      	ldr	r2, [pc, #96]	; (80005b4 <MX_GPIO_Init+0xdc>)
 8000554:	f043 0302 	orr.w	r3, r3, #2
 8000558:	64d3      	str	r3, [r2, #76]	; 0x4c
 800055a:	4b16      	ldr	r3, [pc, #88]	; (80005b4 <MX_GPIO_Init+0xdc>)
 800055c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800055e:	f003 0302 	and.w	r3, r3, #2
 8000562:	603b      	str	r3, [r7, #0]
 8000564:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000566:	2200      	movs	r2, #0
 8000568:	2120      	movs	r1, #32
 800056a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800056e:	f000 fda1 	bl	80010b4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000572:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000576:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000578:	4b0f      	ldr	r3, [pc, #60]	; (80005b8 <MX_GPIO_Init+0xe0>)
 800057a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800057c:	2300      	movs	r3, #0
 800057e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000580:	f107 0314 	add.w	r3, r7, #20
 8000584:	4619      	mov	r1, r3
 8000586:	480d      	ldr	r0, [pc, #52]	; (80005bc <MX_GPIO_Init+0xe4>)
 8000588:	f000 fbec 	bl	8000d64 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_Pin;
 800058c:	2320      	movs	r3, #32
 800058e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000590:	2301      	movs	r3, #1
 8000592:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000594:	2300      	movs	r3, #0
 8000596:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000598:	2300      	movs	r3, #0
 800059a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 800059c:	f107 0314 	add.w	r3, r7, #20
 80005a0:	4619      	mov	r1, r3
 80005a2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80005a6:	f000 fbdd 	bl	8000d64 <HAL_GPIO_Init>

}
 80005aa:	bf00      	nop
 80005ac:	3728      	adds	r7, #40	; 0x28
 80005ae:	46bd      	mov	sp, r7
 80005b0:	bd80      	pop	{r7, pc}
 80005b2:	bf00      	nop
 80005b4:	40021000 	.word	0x40021000
 80005b8:	10210000 	.word	0x10210000
 80005bc:	48000800 	.word	0x48000800

080005c0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005c0:	b580      	push	{r7, lr}
 80005c2:	b082      	sub	sp, #8
 80005c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
  uint8_t Tecken;
  char *hello = "Hello world!\n\r";
 80005c6:	4b22      	ldr	r3, [pc, #136]	; (8000650 <main+0x90>)
 80005c8:	607b      	str	r3, [r7, #4]
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005ca:	f000 fa6d 	bl	8000aa8 <HAL_Init>

  /* USER CODE BEGIN Init */
  SystemClock_Config();
 80005ce:	f000 f843 	bl	8000658 <SystemClock_Config>
  MX_GPIO_Init();
 80005d2:	f7ff ff81 	bl	80004d8 <MX_GPIO_Init>
  MX_UART5_Init();
 80005d6:	f000 f949 	bl	800086c <MX_UART5_Init>
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005da:	f000 f83d 	bl	8000658 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005de:	f7ff ff7b 	bl	80004d8 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80005e2:	f000 f973 	bl	80008cc <MX_USART2_UART_Init>
  MX_UART5_Init();
 80005e6:	f000 f941 	bl	800086c <MX_UART5_Init>
  /* USER CODE BEGIN 2 */
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  HAL_UART_Transmit(&huart5, (uint8_t*)hello, strlen(hello), 5000);
 80005ea:	6878      	ldr	r0, [r7, #4]
 80005ec:	f7ff fdec 	bl	80001c8 <strlen>
 80005f0:	4603      	mov	r3, r0
 80005f2:	b29a      	uxth	r2, r3
 80005f4:	f241 3388 	movw	r3, #5000	; 0x1388
 80005f8:	6879      	ldr	r1, [r7, #4]
 80005fa:	4816      	ldr	r0, [pc, #88]	; (8000654 <main+0x94>)
 80005fc:	f002 f888 	bl	8002710 <HAL_UART_Transmit>
  while (1)
  {
    /* USER CODE END WHILE */
	  HAL_UART_Receive(&huart5, &Tecken, 1, 5000);
 8000600:	1cf9      	adds	r1, r7, #3
 8000602:	f241 3388 	movw	r3, #5000	; 0x1388
 8000606:	2201      	movs	r2, #1
 8000608:	4812      	ldr	r0, [pc, #72]	; (8000654 <main+0x94>)
 800060a:	f002 f914 	bl	8002836 <HAL_UART_Receive>
	  HAL_UART_Transmit(&huart5, &Tecken, 1, 5000);
 800060e:	1cf9      	adds	r1, r7, #3
 8000610:	f241 3388 	movw	r3, #5000	; 0x1388
 8000614:	2201      	movs	r2, #1
 8000616:	480f      	ldr	r0, [pc, #60]	; (8000654 <main+0x94>)
 8000618:	f002 f87a 	bl	8002710 <HAL_UART_Transmit>
	  if (HAL_UART_Receive(&huart5, &Tecken, 1, 5000) != HAL_OK) {
 800061c:	1cf9      	adds	r1, r7, #3
 800061e:	f241 3388 	movw	r3, #5000	; 0x1388
 8000622:	2201      	movs	r2, #1
 8000624:	480b      	ldr	r0, [pc, #44]	; (8000654 <main+0x94>)
 8000626:	f002 f906 	bl	8002836 <HAL_UART_Receive>
 800062a:	4603      	mov	r3, r0
 800062c:	2b00      	cmp	r3, #0
 800062e:	d001      	beq.n	8000634 <main+0x74>
		  Error_Handler();
 8000630:	f000 f889 	bl	8000746 <Error_Handler>
	  }
	  if (HAL_UART_Transmit(&huart5, &Tecken, 1, 5000) != HAL_OK) {
 8000634:	1cf9      	adds	r1, r7, #3
 8000636:	f241 3388 	movw	r3, #5000	; 0x1388
 800063a:	2201      	movs	r2, #1
 800063c:	4805      	ldr	r0, [pc, #20]	; (8000654 <main+0x94>)
 800063e:	f002 f867 	bl	8002710 <HAL_UART_Transmit>
 8000642:	4603      	mov	r3, r0
 8000644:	2b00      	cmp	r3, #0
 8000646:	d0db      	beq.n	8000600 <main+0x40>
		  Error_Handler();
 8000648:	f000 f87d 	bl	8000746 <Error_Handler>
	  HAL_UART_Receive(&huart5, &Tecken, 1, 5000);
 800064c:	e7d8      	b.n	8000600 <main+0x40>
 800064e:	bf00      	nop
 8000650:	08003330 	.word	0x08003330
 8000654:	20000028 	.word	0x20000028

08000658 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000658:	b580      	push	{r7, lr}
 800065a:	b0b8      	sub	sp, #224	; 0xe0
 800065c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800065e:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000662:	2244      	movs	r2, #68	; 0x44
 8000664:	2100      	movs	r1, #0
 8000666:	4618      	mov	r0, r3
 8000668:	f002 fe4e 	bl	8003308 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800066c:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8000670:	2200      	movs	r2, #0
 8000672:	601a      	str	r2, [r3, #0]
 8000674:	605a      	str	r2, [r3, #4]
 8000676:	609a      	str	r2, [r3, #8]
 8000678:	60da      	str	r2, [r3, #12]
 800067a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800067c:	463b      	mov	r3, r7
 800067e:	2288      	movs	r2, #136	; 0x88
 8000680:	2100      	movs	r1, #0
 8000682:	4618      	mov	r0, r3
 8000684:	f002 fe40 	bl	8003308 <memset>

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000688:	2302      	movs	r3, #2
 800068a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800068e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000692:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000696:	2310      	movs	r3, #16
 8000698:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800069c:	2302      	movs	r3, #2
 800069e:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80006a2:	2302      	movs	r3, #2
 80006a4:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLM = 1;
 80006a8:	2301      	movs	r3, #1
 80006aa:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_OscInitStruct.PLL.PLLN = 10;
 80006ae:	230a      	movs	r3, #10
 80006b0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 80006b4:	2307      	movs	r3, #7
 80006b6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80006ba:	2302      	movs	r3, #2
 80006bc:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80006c0:	2302      	movs	r3, #2
 80006c2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006c6:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80006ca:	4618      	mov	r0, r3
 80006cc:	f000 fd6e 	bl	80011ac <HAL_RCC_OscConfig>
 80006d0:	4603      	mov	r3, r0
 80006d2:	2b00      	cmp	r3, #0
 80006d4:	d001      	beq.n	80006da <SystemClock_Config+0x82>
  {
    Error_Handler();
 80006d6:	f000 f836 	bl	8000746 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006da:	230f      	movs	r3, #15
 80006dc:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006e0:	2303      	movs	r3, #3
 80006e2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006e6:	2300      	movs	r3, #0
 80006e8:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80006ec:	2300      	movs	r3, #0
 80006ee:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80006f2:	2300      	movs	r3, #0
 80006f4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80006f8:	f107 0388 	add.w	r3, r7, #136	; 0x88
 80006fc:	2104      	movs	r1, #4
 80006fe:	4618      	mov	r0, r3
 8000700:	f001 f904 	bl	800190c <HAL_RCC_ClockConfig>
 8000704:	4603      	mov	r3, r0
 8000706:	2b00      	cmp	r3, #0
 8000708:	d001      	beq.n	800070e <SystemClock_Config+0xb6>
  {
    Error_Handler();
 800070a:	f000 f81c 	bl	8000746 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2|RCC_PERIPHCLK_UART5;
 800070e:	2312      	movs	r3, #18
 8000710:	603b      	str	r3, [r7, #0]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000712:	2300      	movs	r3, #0
 8000714:	63fb      	str	r3, [r7, #60]	; 0x3c
  PeriphClkInit.Uart5ClockSelection = RCC_UART5CLKSOURCE_PCLK1;
 8000716:	2300      	movs	r3, #0
 8000718:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800071a:	463b      	mov	r3, r7
 800071c:	4618      	mov	r0, r3
 800071e:	f001 faf9 	bl	8001d14 <HAL_RCCEx_PeriphCLKConfig>
 8000722:	4603      	mov	r3, r0
 8000724:	2b00      	cmp	r3, #0
 8000726:	d001      	beq.n	800072c <SystemClock_Config+0xd4>
  {
    Error_Handler();
 8000728:	f000 f80d 	bl	8000746 <Error_Handler>
  }
  /** Configure the main internal regulator output voltage 
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 800072c:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000730:	f000 fce6 	bl	8001100 <HAL_PWREx_ControlVoltageScaling>
 8000734:	4603      	mov	r3, r0
 8000736:	2b00      	cmp	r3, #0
 8000738:	d001      	beq.n	800073e <SystemClock_Config+0xe6>
  {
    Error_Handler();
 800073a:	f000 f804 	bl	8000746 <Error_Handler>
  }
}
 800073e:	bf00      	nop
 8000740:	37e0      	adds	r7, #224	; 0xe0
 8000742:	46bd      	mov	sp, r7
 8000744:	bd80      	pop	{r7, pc}

08000746 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000746:	b580      	push	{r7, lr}
 8000748:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
	HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_SET);
 800074a:	2201      	movs	r2, #1
 800074c:	2120      	movs	r1, #32
 800074e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000752:	f000 fcaf 	bl	80010b4 <HAL_GPIO_WritePin>
  /* USER CODE END Error_Handler_Debug */
}
 8000756:	bf00      	nop
 8000758:	bd80      	pop	{r7, pc}
	...

0800075c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800075c:	b480      	push	{r7}
 800075e:	b083      	sub	sp, #12
 8000760:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000762:	4b0f      	ldr	r3, [pc, #60]	; (80007a0 <HAL_MspInit+0x44>)
 8000764:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000766:	4a0e      	ldr	r2, [pc, #56]	; (80007a0 <HAL_MspInit+0x44>)
 8000768:	f043 0301 	orr.w	r3, r3, #1
 800076c:	6613      	str	r3, [r2, #96]	; 0x60
 800076e:	4b0c      	ldr	r3, [pc, #48]	; (80007a0 <HAL_MspInit+0x44>)
 8000770:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000772:	f003 0301 	and.w	r3, r3, #1
 8000776:	607b      	str	r3, [r7, #4]
 8000778:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800077a:	4b09      	ldr	r3, [pc, #36]	; (80007a0 <HAL_MspInit+0x44>)
 800077c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800077e:	4a08      	ldr	r2, [pc, #32]	; (80007a0 <HAL_MspInit+0x44>)
 8000780:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000784:	6593      	str	r3, [r2, #88]	; 0x58
 8000786:	4b06      	ldr	r3, [pc, #24]	; (80007a0 <HAL_MspInit+0x44>)
 8000788:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800078a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800078e:	603b      	str	r3, [r7, #0]
 8000790:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000792:	bf00      	nop
 8000794:	370c      	adds	r7, #12
 8000796:	46bd      	mov	sp, r7
 8000798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800079c:	4770      	bx	lr
 800079e:	bf00      	nop
 80007a0:	40021000 	.word	0x40021000

080007a4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80007a4:	b480      	push	{r7}
 80007a6:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80007a8:	bf00      	nop
 80007aa:	46bd      	mov	sp, r7
 80007ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007b0:	4770      	bx	lr

080007b2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80007b2:	b480      	push	{r7}
 80007b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80007b6:	e7fe      	b.n	80007b6 <HardFault_Handler+0x4>

080007b8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80007b8:	b480      	push	{r7}
 80007ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80007bc:	e7fe      	b.n	80007bc <MemManage_Handler+0x4>

080007be <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80007be:	b480      	push	{r7}
 80007c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80007c2:	e7fe      	b.n	80007c2 <BusFault_Handler+0x4>

080007c4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80007c4:	b480      	push	{r7}
 80007c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80007c8:	e7fe      	b.n	80007c8 <UsageFault_Handler+0x4>

080007ca <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80007ca:	b480      	push	{r7}
 80007cc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80007ce:	bf00      	nop
 80007d0:	46bd      	mov	sp, r7
 80007d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007d6:	4770      	bx	lr

080007d8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80007d8:	b480      	push	{r7}
 80007da:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80007dc:	bf00      	nop
 80007de:	46bd      	mov	sp, r7
 80007e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007e4:	4770      	bx	lr

080007e6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80007e6:	b480      	push	{r7}
 80007e8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80007ea:	bf00      	nop
 80007ec:	46bd      	mov	sp, r7
 80007ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007f2:	4770      	bx	lr

080007f4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80007f4:	b580      	push	{r7, lr}
 80007f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80007f8:	f000 f9b0 	bl	8000b5c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80007fc:	bf00      	nop
 80007fe:	bd80      	pop	{r7, pc}

08000800 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8000800:	b480      	push	{r7}
 8000802:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000804:	4b17      	ldr	r3, [pc, #92]	; (8000864 <SystemInit+0x64>)
 8000806:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800080a:	4a16      	ldr	r2, [pc, #88]	; (8000864 <SystemInit+0x64>)
 800080c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000810:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8000814:	4b14      	ldr	r3, [pc, #80]	; (8000868 <SystemInit+0x68>)
 8000816:	681b      	ldr	r3, [r3, #0]
 8000818:	4a13      	ldr	r2, [pc, #76]	; (8000868 <SystemInit+0x68>)
 800081a:	f043 0301 	orr.w	r3, r3, #1
 800081e:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 8000820:	4b11      	ldr	r3, [pc, #68]	; (8000868 <SystemInit+0x68>)
 8000822:	2200      	movs	r2, #0
 8000824:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 8000826:	4b10      	ldr	r3, [pc, #64]	; (8000868 <SystemInit+0x68>)
 8000828:	681b      	ldr	r3, [r3, #0]
 800082a:	4a0f      	ldr	r2, [pc, #60]	; (8000868 <SystemInit+0x68>)
 800082c:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 8000830:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 8000834:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 8000836:	4b0c      	ldr	r3, [pc, #48]	; (8000868 <SystemInit+0x68>)
 8000838:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800083c:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800083e:	4b0a      	ldr	r3, [pc, #40]	; (8000868 <SystemInit+0x68>)
 8000840:	681b      	ldr	r3, [r3, #0]
 8000842:	4a09      	ldr	r2, [pc, #36]	; (8000868 <SystemInit+0x68>)
 8000844:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000848:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 800084a:	4b07      	ldr	r3, [pc, #28]	; (8000868 <SystemInit+0x68>)
 800084c:	2200      	movs	r2, #0
 800084e:	619a      	str	r2, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000850:	4b04      	ldr	r3, [pc, #16]	; (8000864 <SystemInit+0x64>)
 8000852:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000856:	609a      	str	r2, [r3, #8]
#endif
}
 8000858:	bf00      	nop
 800085a:	46bd      	mov	sp, r7
 800085c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000860:	4770      	bx	lr
 8000862:	bf00      	nop
 8000864:	e000ed00 	.word	0xe000ed00
 8000868:	40021000 	.word	0x40021000

0800086c <MX_UART5_Init>:
UART_HandleTypeDef huart5;
UART_HandleTypeDef huart2;

/* UART5 init function */
void MX_UART5_Init(void)
{
 800086c:	b580      	push	{r7, lr}
 800086e:	af00      	add	r7, sp, #0

  huart5.Instance = UART5;
 8000870:	4b14      	ldr	r3, [pc, #80]	; (80008c4 <MX_UART5_Init+0x58>)
 8000872:	4a15      	ldr	r2, [pc, #84]	; (80008c8 <MX_UART5_Init+0x5c>)
 8000874:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 115200;
 8000876:	4b13      	ldr	r3, [pc, #76]	; (80008c4 <MX_UART5_Init+0x58>)
 8000878:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800087c:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 800087e:	4b11      	ldr	r3, [pc, #68]	; (80008c4 <MX_UART5_Init+0x58>)
 8000880:	2200      	movs	r2, #0
 8000882:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 8000884:	4b0f      	ldr	r3, [pc, #60]	; (80008c4 <MX_UART5_Init+0x58>)
 8000886:	2200      	movs	r2, #0
 8000888:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 800088a:	4b0e      	ldr	r3, [pc, #56]	; (80008c4 <MX_UART5_Init+0x58>)
 800088c:	2200      	movs	r2, #0
 800088e:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 8000890:	4b0c      	ldr	r3, [pc, #48]	; (80008c4 <MX_UART5_Init+0x58>)
 8000892:	220c      	movs	r2, #12
 8000894:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000896:	4b0b      	ldr	r3, [pc, #44]	; (80008c4 <MX_UART5_Init+0x58>)
 8000898:	2200      	movs	r2, #0
 800089a:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 800089c:	4b09      	ldr	r3, [pc, #36]	; (80008c4 <MX_UART5_Init+0x58>)
 800089e:	2200      	movs	r2, #0
 80008a0:	61da      	str	r2, [r3, #28]
  huart5.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80008a2:	4b08      	ldr	r3, [pc, #32]	; (80008c4 <MX_UART5_Init+0x58>)
 80008a4:	2200      	movs	r2, #0
 80008a6:	621a      	str	r2, [r3, #32]
  huart5.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80008a8:	4b06      	ldr	r3, [pc, #24]	; (80008c4 <MX_UART5_Init+0x58>)
 80008aa:	2200      	movs	r2, #0
 80008ac:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart5) != HAL_OK)
 80008ae:	4805      	ldr	r0, [pc, #20]	; (80008c4 <MX_UART5_Init+0x58>)
 80008b0:	f001 fee0 	bl	8002674 <HAL_UART_Init>
 80008b4:	4603      	mov	r3, r0
 80008b6:	2b00      	cmp	r3, #0
 80008b8:	d001      	beq.n	80008be <MX_UART5_Init+0x52>
  {
    Error_Handler();
 80008ba:	f7ff ff44 	bl	8000746 <Error_Handler>
  }

}
 80008be:	bf00      	nop
 80008c0:	bd80      	pop	{r7, pc}
 80008c2:	bf00      	nop
 80008c4:	20000028 	.word	0x20000028
 80008c8:	40005000 	.word	0x40005000

080008cc <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 80008cc:	b580      	push	{r7, lr}
 80008ce:	af00      	add	r7, sp, #0

  huart2.Instance = USART2;
 80008d0:	4b14      	ldr	r3, [pc, #80]	; (8000924 <MX_USART2_UART_Init+0x58>)
 80008d2:	4a15      	ldr	r2, [pc, #84]	; (8000928 <MX_USART2_UART_Init+0x5c>)
 80008d4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80008d6:	4b13      	ldr	r3, [pc, #76]	; (8000924 <MX_USART2_UART_Init+0x58>)
 80008d8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80008dc:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80008de:	4b11      	ldr	r3, [pc, #68]	; (8000924 <MX_USART2_UART_Init+0x58>)
 80008e0:	2200      	movs	r2, #0
 80008e2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80008e4:	4b0f      	ldr	r3, [pc, #60]	; (8000924 <MX_USART2_UART_Init+0x58>)
 80008e6:	2200      	movs	r2, #0
 80008e8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80008ea:	4b0e      	ldr	r3, [pc, #56]	; (8000924 <MX_USART2_UART_Init+0x58>)
 80008ec:	2200      	movs	r2, #0
 80008ee:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80008f0:	4b0c      	ldr	r3, [pc, #48]	; (8000924 <MX_USART2_UART_Init+0x58>)
 80008f2:	220c      	movs	r2, #12
 80008f4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80008f6:	4b0b      	ldr	r3, [pc, #44]	; (8000924 <MX_USART2_UART_Init+0x58>)
 80008f8:	2200      	movs	r2, #0
 80008fa:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80008fc:	4b09      	ldr	r3, [pc, #36]	; (8000924 <MX_USART2_UART_Init+0x58>)
 80008fe:	2200      	movs	r2, #0
 8000900:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000902:	4b08      	ldr	r3, [pc, #32]	; (8000924 <MX_USART2_UART_Init+0x58>)
 8000904:	2200      	movs	r2, #0
 8000906:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000908:	4b06      	ldr	r3, [pc, #24]	; (8000924 <MX_USART2_UART_Init+0x58>)
 800090a:	2200      	movs	r2, #0
 800090c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800090e:	4805      	ldr	r0, [pc, #20]	; (8000924 <MX_USART2_UART_Init+0x58>)
 8000910:	f001 feb0 	bl	8002674 <HAL_UART_Init>
 8000914:	4603      	mov	r3, r0
 8000916:	2b00      	cmp	r3, #0
 8000918:	d001      	beq.n	800091e <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 800091a:	f7ff ff14 	bl	8000746 <Error_Handler>
  }

}
 800091e:	bf00      	nop
 8000920:	bd80      	pop	{r7, pc}
 8000922:	bf00      	nop
 8000924:	200000a8 	.word	0x200000a8
 8000928:	40004400 	.word	0x40004400

0800092c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 800092c:	b580      	push	{r7, lr}
 800092e:	b08c      	sub	sp, #48	; 0x30
 8000930:	af00      	add	r7, sp, #0
 8000932:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000934:	f107 031c 	add.w	r3, r7, #28
 8000938:	2200      	movs	r2, #0
 800093a:	601a      	str	r2, [r3, #0]
 800093c:	605a      	str	r2, [r3, #4]
 800093e:	609a      	str	r2, [r3, #8]
 8000940:	60da      	str	r2, [r3, #12]
 8000942:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==UART5)
 8000944:	687b      	ldr	r3, [r7, #4]
 8000946:	681b      	ldr	r3, [r3, #0]
 8000948:	4a3d      	ldr	r2, [pc, #244]	; (8000a40 <HAL_UART_MspInit+0x114>)
 800094a:	4293      	cmp	r3, r2
 800094c:	d145      	bne.n	80009da <HAL_UART_MspInit+0xae>
  {
  /* USER CODE BEGIN UART5_MspInit 0 */

  /* USER CODE END UART5_MspInit 0 */
    /* UART5 clock enable */
    __HAL_RCC_UART5_CLK_ENABLE();
 800094e:	4b3d      	ldr	r3, [pc, #244]	; (8000a44 <HAL_UART_MspInit+0x118>)
 8000950:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000952:	4a3c      	ldr	r2, [pc, #240]	; (8000a44 <HAL_UART_MspInit+0x118>)
 8000954:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000958:	6593      	str	r3, [r2, #88]	; 0x58
 800095a:	4b3a      	ldr	r3, [pc, #232]	; (8000a44 <HAL_UART_MspInit+0x118>)
 800095c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800095e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000962:	61bb      	str	r3, [r7, #24]
 8000964:	69bb      	ldr	r3, [r7, #24]
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000966:	4b37      	ldr	r3, [pc, #220]	; (8000a44 <HAL_UART_MspInit+0x118>)
 8000968:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800096a:	4a36      	ldr	r2, [pc, #216]	; (8000a44 <HAL_UART_MspInit+0x118>)
 800096c:	f043 0304 	orr.w	r3, r3, #4
 8000970:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000972:	4b34      	ldr	r3, [pc, #208]	; (8000a44 <HAL_UART_MspInit+0x118>)
 8000974:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000976:	f003 0304 	and.w	r3, r3, #4
 800097a:	617b      	str	r3, [r7, #20]
 800097c:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800097e:	4b31      	ldr	r3, [pc, #196]	; (8000a44 <HAL_UART_MspInit+0x118>)
 8000980:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000982:	4a30      	ldr	r2, [pc, #192]	; (8000a44 <HAL_UART_MspInit+0x118>)
 8000984:	f043 0308 	orr.w	r3, r3, #8
 8000988:	64d3      	str	r3, [r2, #76]	; 0x4c
 800098a:	4b2e      	ldr	r3, [pc, #184]	; (8000a44 <HAL_UART_MspInit+0x118>)
 800098c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800098e:	f003 0308 	and.w	r3, r3, #8
 8000992:	613b      	str	r3, [r7, #16]
 8000994:	693b      	ldr	r3, [r7, #16]
    /**UART5 GPIO Configuration    
    PC12     ------> UART5_TX
    PD2     ------> UART5_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8000996:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800099a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800099c:	2302      	movs	r3, #2
 800099e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009a0:	2300      	movs	r3, #0
 80009a2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80009a4:	2303      	movs	r3, #3
 80009a6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 80009a8:	2308      	movs	r3, #8
 80009aa:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80009ac:	f107 031c 	add.w	r3, r7, #28
 80009b0:	4619      	mov	r1, r3
 80009b2:	4825      	ldr	r0, [pc, #148]	; (8000a48 <HAL_UART_MspInit+0x11c>)
 80009b4:	f000 f9d6 	bl	8000d64 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80009b8:	2304      	movs	r3, #4
 80009ba:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009bc:	2302      	movs	r3, #2
 80009be:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009c0:	2300      	movs	r3, #0
 80009c2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80009c4:	2303      	movs	r3, #3
 80009c6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 80009c8:	2308      	movs	r3, #8
 80009ca:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80009cc:	f107 031c 	add.w	r3, r7, #28
 80009d0:	4619      	mov	r1, r3
 80009d2:	481e      	ldr	r0, [pc, #120]	; (8000a4c <HAL_UART_MspInit+0x120>)
 80009d4:	f000 f9c6 	bl	8000d64 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 80009d8:	e02d      	b.n	8000a36 <HAL_UART_MspInit+0x10a>
  else if(uartHandle->Instance==USART2)
 80009da:	687b      	ldr	r3, [r7, #4]
 80009dc:	681b      	ldr	r3, [r3, #0]
 80009de:	4a1c      	ldr	r2, [pc, #112]	; (8000a50 <HAL_UART_MspInit+0x124>)
 80009e0:	4293      	cmp	r3, r2
 80009e2:	d128      	bne.n	8000a36 <HAL_UART_MspInit+0x10a>
    __HAL_RCC_USART2_CLK_ENABLE();
 80009e4:	4b17      	ldr	r3, [pc, #92]	; (8000a44 <HAL_UART_MspInit+0x118>)
 80009e6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80009e8:	4a16      	ldr	r2, [pc, #88]	; (8000a44 <HAL_UART_MspInit+0x118>)
 80009ea:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80009ee:	6593      	str	r3, [r2, #88]	; 0x58
 80009f0:	4b14      	ldr	r3, [pc, #80]	; (8000a44 <HAL_UART_MspInit+0x118>)
 80009f2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80009f4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80009f8:	60fb      	str	r3, [r7, #12]
 80009fa:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80009fc:	4b11      	ldr	r3, [pc, #68]	; (8000a44 <HAL_UART_MspInit+0x118>)
 80009fe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a00:	4a10      	ldr	r2, [pc, #64]	; (8000a44 <HAL_UART_MspInit+0x118>)
 8000a02:	f043 0301 	orr.w	r3, r3, #1
 8000a06:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000a08:	4b0e      	ldr	r3, [pc, #56]	; (8000a44 <HAL_UART_MspInit+0x118>)
 8000a0a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a0c:	f003 0301 	and.w	r3, r3, #1
 8000a10:	60bb      	str	r3, [r7, #8]
 8000a12:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000a14:	230c      	movs	r3, #12
 8000a16:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a18:	2302      	movs	r3, #2
 8000a1a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a1c:	2300      	movs	r3, #0
 8000a1e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a20:	2303      	movs	r3, #3
 8000a22:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000a24:	2307      	movs	r3, #7
 8000a26:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a28:	f107 031c 	add.w	r3, r7, #28
 8000a2c:	4619      	mov	r1, r3
 8000a2e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000a32:	f000 f997 	bl	8000d64 <HAL_GPIO_Init>
}
 8000a36:	bf00      	nop
 8000a38:	3730      	adds	r7, #48	; 0x30
 8000a3a:	46bd      	mov	sp, r7
 8000a3c:	bd80      	pop	{r7, pc}
 8000a3e:	bf00      	nop
 8000a40:	40005000 	.word	0x40005000
 8000a44:	40021000 	.word	0x40021000
 8000a48:	48000800 	.word	0x48000800
 8000a4c:	48000c00 	.word	0x48000c00
 8000a50:	40004400 	.word	0x40004400

08000a54 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000a54:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000a8c <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8000a58:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8000a5a:	e003      	b.n	8000a64 <LoopCopyDataInit>

08000a5c <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8000a5c:	4b0c      	ldr	r3, [pc, #48]	; (8000a90 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8000a5e:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8000a60:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8000a62:	3104      	adds	r1, #4

08000a64 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8000a64:	480b      	ldr	r0, [pc, #44]	; (8000a94 <LoopForever+0xa>)
	ldr	r3, =_edata
 8000a66:	4b0c      	ldr	r3, [pc, #48]	; (8000a98 <LoopForever+0xe>)
	adds	r2, r0, r1
 8000a68:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8000a6a:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8000a6c:	d3f6      	bcc.n	8000a5c <CopyDataInit>
	ldr	r2, =_sbss
 8000a6e:	4a0b      	ldr	r2, [pc, #44]	; (8000a9c <LoopForever+0x12>)
	b	LoopFillZerobss
 8000a70:	e002      	b.n	8000a78 <LoopFillZerobss>

08000a72 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8000a72:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8000a74:	f842 3b04 	str.w	r3, [r2], #4

08000a78 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8000a78:	4b09      	ldr	r3, [pc, #36]	; (8000aa0 <LoopForever+0x16>)
	cmp	r2, r3
 8000a7a:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8000a7c:	d3f9      	bcc.n	8000a72 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000a7e:	f7ff febf 	bl	8000800 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000a82:	f002 fc1d 	bl	80032c0 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000a86:	f7ff fd9b 	bl	80005c0 <main>

08000a8a <LoopForever>:

LoopForever:
    b LoopForever
 8000a8a:	e7fe      	b.n	8000a8a <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000a8c:	20018000 	.word	0x20018000
	ldr	r3, =_sidata
 8000a90:	08003398 	.word	0x08003398
	ldr	r0, =_sdata
 8000a94:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8000a98:	2000000c 	.word	0x2000000c
	ldr	r2, =_sbss
 8000a9c:	2000000c 	.word	0x2000000c
	ldr	r3, = _ebss
 8000aa0:	2000012c 	.word	0x2000012c

08000aa4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000aa4:	e7fe      	b.n	8000aa4 <ADC1_2_IRQHandler>
	...

08000aa8 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000aa8:	b580      	push	{r7, lr}
 8000aaa:	b082      	sub	sp, #8
 8000aac:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000aae:	2300      	movs	r3, #0
 8000ab0:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000ab2:	4b0c      	ldr	r3, [pc, #48]	; (8000ae4 <HAL_Init+0x3c>)
 8000ab4:	681b      	ldr	r3, [r3, #0]
 8000ab6:	4a0b      	ldr	r2, [pc, #44]	; (8000ae4 <HAL_Init+0x3c>)
 8000ab8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000abc:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000abe:	2003      	movs	r0, #3
 8000ac0:	f000 f91c 	bl	8000cfc <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000ac4:	2000      	movs	r0, #0
 8000ac6:	f000 f80f 	bl	8000ae8 <HAL_InitTick>
 8000aca:	4603      	mov	r3, r0
 8000acc:	2b00      	cmp	r3, #0
 8000ace:	d002      	beq.n	8000ad6 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8000ad0:	2301      	movs	r3, #1
 8000ad2:	71fb      	strb	r3, [r7, #7]
 8000ad4:	e001      	b.n	8000ada <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000ad6:	f7ff fe41 	bl	800075c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000ada:	79fb      	ldrb	r3, [r7, #7]
}
 8000adc:	4618      	mov	r0, r3
 8000ade:	3708      	adds	r7, #8
 8000ae0:	46bd      	mov	sp, r7
 8000ae2:	bd80      	pop	{r7, pc}
 8000ae4:	40022000 	.word	0x40022000

08000ae8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000ae8:	b580      	push	{r7, lr}
 8000aea:	b084      	sub	sp, #16
 8000aec:	af00      	add	r7, sp, #0
 8000aee:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000af0:	2300      	movs	r3, #0
 8000af2:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8000af4:	4b16      	ldr	r3, [pc, #88]	; (8000b50 <HAL_InitTick+0x68>)
 8000af6:	681b      	ldr	r3, [r3, #0]
 8000af8:	2b00      	cmp	r3, #0
 8000afa:	d022      	beq.n	8000b42 <HAL_InitTick+0x5a>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8000afc:	4b15      	ldr	r3, [pc, #84]	; (8000b54 <HAL_InitTick+0x6c>)
 8000afe:	681a      	ldr	r2, [r3, #0]
 8000b00:	4b13      	ldr	r3, [pc, #76]	; (8000b50 <HAL_InitTick+0x68>)
 8000b02:	681b      	ldr	r3, [r3, #0]
 8000b04:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000b08:	fbb1 f3f3 	udiv	r3, r1, r3
 8000b0c:	fbb2 f3f3 	udiv	r3, r2, r3
 8000b10:	4618      	mov	r0, r3
 8000b12:	f000 f91a 	bl	8000d4a <HAL_SYSTICK_Config>
 8000b16:	4603      	mov	r3, r0
 8000b18:	2b00      	cmp	r3, #0
 8000b1a:	d10f      	bne.n	8000b3c <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000b1c:	687b      	ldr	r3, [r7, #4]
 8000b1e:	2b0f      	cmp	r3, #15
 8000b20:	d809      	bhi.n	8000b36 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000b22:	2200      	movs	r2, #0
 8000b24:	6879      	ldr	r1, [r7, #4]
 8000b26:	f04f 30ff 	mov.w	r0, #4294967295
 8000b2a:	f000 f8f2 	bl	8000d12 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000b2e:	4a0a      	ldr	r2, [pc, #40]	; (8000b58 <HAL_InitTick+0x70>)
 8000b30:	687b      	ldr	r3, [r7, #4]
 8000b32:	6013      	str	r3, [r2, #0]
 8000b34:	e007      	b.n	8000b46 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8000b36:	2301      	movs	r3, #1
 8000b38:	73fb      	strb	r3, [r7, #15]
 8000b3a:	e004      	b.n	8000b46 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000b3c:	2301      	movs	r3, #1
 8000b3e:	73fb      	strb	r3, [r7, #15]
 8000b40:	e001      	b.n	8000b46 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000b42:	2301      	movs	r3, #1
 8000b44:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000b46:	7bfb      	ldrb	r3, [r7, #15]
}
 8000b48:	4618      	mov	r0, r3
 8000b4a:	3710      	adds	r7, #16
 8000b4c:	46bd      	mov	sp, r7
 8000b4e:	bd80      	pop	{r7, pc}
 8000b50:	20000008 	.word	0x20000008
 8000b54:	20000000 	.word	0x20000000
 8000b58:	20000004 	.word	0x20000004

08000b5c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000b5c:	b480      	push	{r7}
 8000b5e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000b60:	4b05      	ldr	r3, [pc, #20]	; (8000b78 <HAL_IncTick+0x1c>)
 8000b62:	681a      	ldr	r2, [r3, #0]
 8000b64:	4b05      	ldr	r3, [pc, #20]	; (8000b7c <HAL_IncTick+0x20>)
 8000b66:	681b      	ldr	r3, [r3, #0]
 8000b68:	4413      	add	r3, r2
 8000b6a:	4a03      	ldr	r2, [pc, #12]	; (8000b78 <HAL_IncTick+0x1c>)
 8000b6c:	6013      	str	r3, [r2, #0]
}
 8000b6e:	bf00      	nop
 8000b70:	46bd      	mov	sp, r7
 8000b72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b76:	4770      	bx	lr
 8000b78:	20000128 	.word	0x20000128
 8000b7c:	20000008 	.word	0x20000008

08000b80 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000b80:	b480      	push	{r7}
 8000b82:	af00      	add	r7, sp, #0
  return uwTick;
 8000b84:	4b03      	ldr	r3, [pc, #12]	; (8000b94 <HAL_GetTick+0x14>)
 8000b86:	681b      	ldr	r3, [r3, #0]
}
 8000b88:	4618      	mov	r0, r3
 8000b8a:	46bd      	mov	sp, r7
 8000b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b90:	4770      	bx	lr
 8000b92:	bf00      	nop
 8000b94:	20000128 	.word	0x20000128

08000b98 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000b98:	b480      	push	{r7}
 8000b9a:	b085      	sub	sp, #20
 8000b9c:	af00      	add	r7, sp, #0
 8000b9e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000ba0:	687b      	ldr	r3, [r7, #4]
 8000ba2:	f003 0307 	and.w	r3, r3, #7
 8000ba6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000ba8:	4b0c      	ldr	r3, [pc, #48]	; (8000bdc <__NVIC_SetPriorityGrouping+0x44>)
 8000baa:	68db      	ldr	r3, [r3, #12]
 8000bac:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000bae:	68ba      	ldr	r2, [r7, #8]
 8000bb0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000bb4:	4013      	ands	r3, r2
 8000bb6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000bb8:	68fb      	ldr	r3, [r7, #12]
 8000bba:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000bbc:	68bb      	ldr	r3, [r7, #8]
 8000bbe:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000bc0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000bc4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000bc8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000bca:	4a04      	ldr	r2, [pc, #16]	; (8000bdc <__NVIC_SetPriorityGrouping+0x44>)
 8000bcc:	68bb      	ldr	r3, [r7, #8]
 8000bce:	60d3      	str	r3, [r2, #12]
}
 8000bd0:	bf00      	nop
 8000bd2:	3714      	adds	r7, #20
 8000bd4:	46bd      	mov	sp, r7
 8000bd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bda:	4770      	bx	lr
 8000bdc:	e000ed00 	.word	0xe000ed00

08000be0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000be0:	b480      	push	{r7}
 8000be2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000be4:	4b04      	ldr	r3, [pc, #16]	; (8000bf8 <__NVIC_GetPriorityGrouping+0x18>)
 8000be6:	68db      	ldr	r3, [r3, #12]
 8000be8:	0a1b      	lsrs	r3, r3, #8
 8000bea:	f003 0307 	and.w	r3, r3, #7
}
 8000bee:	4618      	mov	r0, r3
 8000bf0:	46bd      	mov	sp, r7
 8000bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bf6:	4770      	bx	lr
 8000bf8:	e000ed00 	.word	0xe000ed00

08000bfc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000bfc:	b480      	push	{r7}
 8000bfe:	b083      	sub	sp, #12
 8000c00:	af00      	add	r7, sp, #0
 8000c02:	4603      	mov	r3, r0
 8000c04:	6039      	str	r1, [r7, #0]
 8000c06:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c08:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c0c:	2b00      	cmp	r3, #0
 8000c0e:	db0a      	blt.n	8000c26 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c10:	683b      	ldr	r3, [r7, #0]
 8000c12:	b2da      	uxtb	r2, r3
 8000c14:	490c      	ldr	r1, [pc, #48]	; (8000c48 <__NVIC_SetPriority+0x4c>)
 8000c16:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c1a:	0112      	lsls	r2, r2, #4
 8000c1c:	b2d2      	uxtb	r2, r2
 8000c1e:	440b      	add	r3, r1
 8000c20:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000c24:	e00a      	b.n	8000c3c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c26:	683b      	ldr	r3, [r7, #0]
 8000c28:	b2da      	uxtb	r2, r3
 8000c2a:	4908      	ldr	r1, [pc, #32]	; (8000c4c <__NVIC_SetPriority+0x50>)
 8000c2c:	79fb      	ldrb	r3, [r7, #7]
 8000c2e:	f003 030f 	and.w	r3, r3, #15
 8000c32:	3b04      	subs	r3, #4
 8000c34:	0112      	lsls	r2, r2, #4
 8000c36:	b2d2      	uxtb	r2, r2
 8000c38:	440b      	add	r3, r1
 8000c3a:	761a      	strb	r2, [r3, #24]
}
 8000c3c:	bf00      	nop
 8000c3e:	370c      	adds	r7, #12
 8000c40:	46bd      	mov	sp, r7
 8000c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c46:	4770      	bx	lr
 8000c48:	e000e100 	.word	0xe000e100
 8000c4c:	e000ed00 	.word	0xe000ed00

08000c50 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000c50:	b480      	push	{r7}
 8000c52:	b089      	sub	sp, #36	; 0x24
 8000c54:	af00      	add	r7, sp, #0
 8000c56:	60f8      	str	r0, [r7, #12]
 8000c58:	60b9      	str	r1, [r7, #8]
 8000c5a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000c5c:	68fb      	ldr	r3, [r7, #12]
 8000c5e:	f003 0307 	and.w	r3, r3, #7
 8000c62:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000c64:	69fb      	ldr	r3, [r7, #28]
 8000c66:	f1c3 0307 	rsb	r3, r3, #7
 8000c6a:	2b04      	cmp	r3, #4
 8000c6c:	bf28      	it	cs
 8000c6e:	2304      	movcs	r3, #4
 8000c70:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000c72:	69fb      	ldr	r3, [r7, #28]
 8000c74:	3304      	adds	r3, #4
 8000c76:	2b06      	cmp	r3, #6
 8000c78:	d902      	bls.n	8000c80 <NVIC_EncodePriority+0x30>
 8000c7a:	69fb      	ldr	r3, [r7, #28]
 8000c7c:	3b03      	subs	r3, #3
 8000c7e:	e000      	b.n	8000c82 <NVIC_EncodePriority+0x32>
 8000c80:	2300      	movs	r3, #0
 8000c82:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c84:	f04f 32ff 	mov.w	r2, #4294967295
 8000c88:	69bb      	ldr	r3, [r7, #24]
 8000c8a:	fa02 f303 	lsl.w	r3, r2, r3
 8000c8e:	43da      	mvns	r2, r3
 8000c90:	68bb      	ldr	r3, [r7, #8]
 8000c92:	401a      	ands	r2, r3
 8000c94:	697b      	ldr	r3, [r7, #20]
 8000c96:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000c98:	f04f 31ff 	mov.w	r1, #4294967295
 8000c9c:	697b      	ldr	r3, [r7, #20]
 8000c9e:	fa01 f303 	lsl.w	r3, r1, r3
 8000ca2:	43d9      	mvns	r1, r3
 8000ca4:	687b      	ldr	r3, [r7, #4]
 8000ca6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ca8:	4313      	orrs	r3, r2
         );
}
 8000caa:	4618      	mov	r0, r3
 8000cac:	3724      	adds	r7, #36	; 0x24
 8000cae:	46bd      	mov	sp, r7
 8000cb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cb4:	4770      	bx	lr
	...

08000cb8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000cb8:	b580      	push	{r7, lr}
 8000cba:	b082      	sub	sp, #8
 8000cbc:	af00      	add	r7, sp, #0
 8000cbe:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000cc0:	687b      	ldr	r3, [r7, #4]
 8000cc2:	3b01      	subs	r3, #1
 8000cc4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000cc8:	d301      	bcc.n	8000cce <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000cca:	2301      	movs	r3, #1
 8000ccc:	e00f      	b.n	8000cee <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000cce:	4a0a      	ldr	r2, [pc, #40]	; (8000cf8 <SysTick_Config+0x40>)
 8000cd0:	687b      	ldr	r3, [r7, #4]
 8000cd2:	3b01      	subs	r3, #1
 8000cd4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000cd6:	210f      	movs	r1, #15
 8000cd8:	f04f 30ff 	mov.w	r0, #4294967295
 8000cdc:	f7ff ff8e 	bl	8000bfc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000ce0:	4b05      	ldr	r3, [pc, #20]	; (8000cf8 <SysTick_Config+0x40>)
 8000ce2:	2200      	movs	r2, #0
 8000ce4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000ce6:	4b04      	ldr	r3, [pc, #16]	; (8000cf8 <SysTick_Config+0x40>)
 8000ce8:	2207      	movs	r2, #7
 8000cea:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000cec:	2300      	movs	r3, #0
}
 8000cee:	4618      	mov	r0, r3
 8000cf0:	3708      	adds	r7, #8
 8000cf2:	46bd      	mov	sp, r7
 8000cf4:	bd80      	pop	{r7, pc}
 8000cf6:	bf00      	nop
 8000cf8:	e000e010 	.word	0xe000e010

08000cfc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000cfc:	b580      	push	{r7, lr}
 8000cfe:	b082      	sub	sp, #8
 8000d00:	af00      	add	r7, sp, #0
 8000d02:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000d04:	6878      	ldr	r0, [r7, #4]
 8000d06:	f7ff ff47 	bl	8000b98 <__NVIC_SetPriorityGrouping>
}
 8000d0a:	bf00      	nop
 8000d0c:	3708      	adds	r7, #8
 8000d0e:	46bd      	mov	sp, r7
 8000d10:	bd80      	pop	{r7, pc}

08000d12 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000d12:	b580      	push	{r7, lr}
 8000d14:	b086      	sub	sp, #24
 8000d16:	af00      	add	r7, sp, #0
 8000d18:	4603      	mov	r3, r0
 8000d1a:	60b9      	str	r1, [r7, #8]
 8000d1c:	607a      	str	r2, [r7, #4]
 8000d1e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000d20:	2300      	movs	r3, #0
 8000d22:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000d24:	f7ff ff5c 	bl	8000be0 <__NVIC_GetPriorityGrouping>
 8000d28:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000d2a:	687a      	ldr	r2, [r7, #4]
 8000d2c:	68b9      	ldr	r1, [r7, #8]
 8000d2e:	6978      	ldr	r0, [r7, #20]
 8000d30:	f7ff ff8e 	bl	8000c50 <NVIC_EncodePriority>
 8000d34:	4602      	mov	r2, r0
 8000d36:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000d3a:	4611      	mov	r1, r2
 8000d3c:	4618      	mov	r0, r3
 8000d3e:	f7ff ff5d 	bl	8000bfc <__NVIC_SetPriority>
}
 8000d42:	bf00      	nop
 8000d44:	3718      	adds	r7, #24
 8000d46:	46bd      	mov	sp, r7
 8000d48:	bd80      	pop	{r7, pc}

08000d4a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000d4a:	b580      	push	{r7, lr}
 8000d4c:	b082      	sub	sp, #8
 8000d4e:	af00      	add	r7, sp, #0
 8000d50:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000d52:	6878      	ldr	r0, [r7, #4]
 8000d54:	f7ff ffb0 	bl	8000cb8 <SysTick_Config>
 8000d58:	4603      	mov	r3, r0
}
 8000d5a:	4618      	mov	r0, r3
 8000d5c:	3708      	adds	r7, #8
 8000d5e:	46bd      	mov	sp, r7
 8000d60:	bd80      	pop	{r7, pc}
	...

08000d64 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000d64:	b480      	push	{r7}
 8000d66:	b087      	sub	sp, #28
 8000d68:	af00      	add	r7, sp, #0
 8000d6a:	6078      	str	r0, [r7, #4]
 8000d6c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000d6e:	2300      	movs	r3, #0
 8000d70:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000d72:	e17f      	b.n	8001074 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000d74:	683b      	ldr	r3, [r7, #0]
 8000d76:	681a      	ldr	r2, [r3, #0]
 8000d78:	2101      	movs	r1, #1
 8000d7a:	697b      	ldr	r3, [r7, #20]
 8000d7c:	fa01 f303 	lsl.w	r3, r1, r3
 8000d80:	4013      	ands	r3, r2
 8000d82:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000d84:	68fb      	ldr	r3, [r7, #12]
 8000d86:	2b00      	cmp	r3, #0
 8000d88:	f000 8171 	beq.w	800106e <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000d8c:	683b      	ldr	r3, [r7, #0]
 8000d8e:	685b      	ldr	r3, [r3, #4]
 8000d90:	2b02      	cmp	r3, #2
 8000d92:	d003      	beq.n	8000d9c <HAL_GPIO_Init+0x38>
 8000d94:	683b      	ldr	r3, [r7, #0]
 8000d96:	685b      	ldr	r3, [r3, #4]
 8000d98:	2b12      	cmp	r3, #18
 8000d9a:	d123      	bne.n	8000de4 <HAL_GPIO_Init+0x80>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000d9c:	697b      	ldr	r3, [r7, #20]
 8000d9e:	08da      	lsrs	r2, r3, #3
 8000da0:	687b      	ldr	r3, [r7, #4]
 8000da2:	3208      	adds	r2, #8
 8000da4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000da8:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000daa:	697b      	ldr	r3, [r7, #20]
 8000dac:	f003 0307 	and.w	r3, r3, #7
 8000db0:	009b      	lsls	r3, r3, #2
 8000db2:	220f      	movs	r2, #15
 8000db4:	fa02 f303 	lsl.w	r3, r2, r3
 8000db8:	43db      	mvns	r3, r3
 8000dba:	693a      	ldr	r2, [r7, #16]
 8000dbc:	4013      	ands	r3, r2
 8000dbe:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000dc0:	683b      	ldr	r3, [r7, #0]
 8000dc2:	691a      	ldr	r2, [r3, #16]
 8000dc4:	697b      	ldr	r3, [r7, #20]
 8000dc6:	f003 0307 	and.w	r3, r3, #7
 8000dca:	009b      	lsls	r3, r3, #2
 8000dcc:	fa02 f303 	lsl.w	r3, r2, r3
 8000dd0:	693a      	ldr	r2, [r7, #16]
 8000dd2:	4313      	orrs	r3, r2
 8000dd4:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000dd6:	697b      	ldr	r3, [r7, #20]
 8000dd8:	08da      	lsrs	r2, r3, #3
 8000dda:	687b      	ldr	r3, [r7, #4]
 8000ddc:	3208      	adds	r2, #8
 8000dde:	6939      	ldr	r1, [r7, #16]
 8000de0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000de4:	687b      	ldr	r3, [r7, #4]
 8000de6:	681b      	ldr	r3, [r3, #0]
 8000de8:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8000dea:	697b      	ldr	r3, [r7, #20]
 8000dec:	005b      	lsls	r3, r3, #1
 8000dee:	2203      	movs	r2, #3
 8000df0:	fa02 f303 	lsl.w	r3, r2, r3
 8000df4:	43db      	mvns	r3, r3
 8000df6:	693a      	ldr	r2, [r7, #16]
 8000df8:	4013      	ands	r3, r2
 8000dfa:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000dfc:	683b      	ldr	r3, [r7, #0]
 8000dfe:	685b      	ldr	r3, [r3, #4]
 8000e00:	f003 0203 	and.w	r2, r3, #3
 8000e04:	697b      	ldr	r3, [r7, #20]
 8000e06:	005b      	lsls	r3, r3, #1
 8000e08:	fa02 f303 	lsl.w	r3, r2, r3
 8000e0c:	693a      	ldr	r2, [r7, #16]
 8000e0e:	4313      	orrs	r3, r2
 8000e10:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000e12:	687b      	ldr	r3, [r7, #4]
 8000e14:	693a      	ldr	r2, [r7, #16]
 8000e16:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000e18:	683b      	ldr	r3, [r7, #0]
 8000e1a:	685b      	ldr	r3, [r3, #4]
 8000e1c:	2b01      	cmp	r3, #1
 8000e1e:	d00b      	beq.n	8000e38 <HAL_GPIO_Init+0xd4>
 8000e20:	683b      	ldr	r3, [r7, #0]
 8000e22:	685b      	ldr	r3, [r3, #4]
 8000e24:	2b02      	cmp	r3, #2
 8000e26:	d007      	beq.n	8000e38 <HAL_GPIO_Init+0xd4>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000e28:	683b      	ldr	r3, [r7, #0]
 8000e2a:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000e2c:	2b11      	cmp	r3, #17
 8000e2e:	d003      	beq.n	8000e38 <HAL_GPIO_Init+0xd4>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000e30:	683b      	ldr	r3, [r7, #0]
 8000e32:	685b      	ldr	r3, [r3, #4]
 8000e34:	2b12      	cmp	r3, #18
 8000e36:	d130      	bne.n	8000e9a <HAL_GPIO_Init+0x136>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000e38:	687b      	ldr	r3, [r7, #4]
 8000e3a:	689b      	ldr	r3, [r3, #8]
 8000e3c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8000e3e:	697b      	ldr	r3, [r7, #20]
 8000e40:	005b      	lsls	r3, r3, #1
 8000e42:	2203      	movs	r2, #3
 8000e44:	fa02 f303 	lsl.w	r3, r2, r3
 8000e48:	43db      	mvns	r3, r3
 8000e4a:	693a      	ldr	r2, [r7, #16]
 8000e4c:	4013      	ands	r3, r2
 8000e4e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000e50:	683b      	ldr	r3, [r7, #0]
 8000e52:	68da      	ldr	r2, [r3, #12]
 8000e54:	697b      	ldr	r3, [r7, #20]
 8000e56:	005b      	lsls	r3, r3, #1
 8000e58:	fa02 f303 	lsl.w	r3, r2, r3
 8000e5c:	693a      	ldr	r2, [r7, #16]
 8000e5e:	4313      	orrs	r3, r2
 8000e60:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000e62:	687b      	ldr	r3, [r7, #4]
 8000e64:	693a      	ldr	r2, [r7, #16]
 8000e66:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000e68:	687b      	ldr	r3, [r7, #4]
 8000e6a:	685b      	ldr	r3, [r3, #4]
 8000e6c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000e6e:	2201      	movs	r2, #1
 8000e70:	697b      	ldr	r3, [r7, #20]
 8000e72:	fa02 f303 	lsl.w	r3, r2, r3
 8000e76:	43db      	mvns	r3, r3
 8000e78:	693a      	ldr	r2, [r7, #16]
 8000e7a:	4013      	ands	r3, r2
 8000e7c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8000e7e:	683b      	ldr	r3, [r7, #0]
 8000e80:	685b      	ldr	r3, [r3, #4]
 8000e82:	091b      	lsrs	r3, r3, #4
 8000e84:	f003 0201 	and.w	r2, r3, #1
 8000e88:	697b      	ldr	r3, [r7, #20]
 8000e8a:	fa02 f303 	lsl.w	r3, r2, r3
 8000e8e:	693a      	ldr	r2, [r7, #16]
 8000e90:	4313      	orrs	r3, r2
 8000e92:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000e94:	687b      	ldr	r3, [r7, #4]
 8000e96:	693a      	ldr	r2, [r7, #16]
 8000e98:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8000e9a:	683b      	ldr	r3, [r7, #0]
 8000e9c:	685b      	ldr	r3, [r3, #4]
 8000e9e:	f003 0303 	and.w	r3, r3, #3
 8000ea2:	2b03      	cmp	r3, #3
 8000ea4:	d118      	bne.n	8000ed8 <HAL_GPIO_Init+0x174>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8000ea6:	687b      	ldr	r3, [r7, #4]
 8000ea8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000eaa:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8000eac:	2201      	movs	r2, #1
 8000eae:	697b      	ldr	r3, [r7, #20]
 8000eb0:	fa02 f303 	lsl.w	r3, r2, r3
 8000eb4:	43db      	mvns	r3, r3
 8000eb6:	693a      	ldr	r2, [r7, #16]
 8000eb8:	4013      	ands	r3, r2
 8000eba:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & ANALOG_MODE) >> 3) << position);
 8000ebc:	683b      	ldr	r3, [r7, #0]
 8000ebe:	685b      	ldr	r3, [r3, #4]
 8000ec0:	08db      	lsrs	r3, r3, #3
 8000ec2:	f003 0201 	and.w	r2, r3, #1
 8000ec6:	697b      	ldr	r3, [r7, #20]
 8000ec8:	fa02 f303 	lsl.w	r3, r2, r3
 8000ecc:	693a      	ldr	r2, [r7, #16]
 8000ece:	4313      	orrs	r3, r2
 8000ed0:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8000ed2:	687b      	ldr	r3, [r7, #4]
 8000ed4:	693a      	ldr	r2, [r7, #16]
 8000ed6:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8000ed8:	687b      	ldr	r3, [r7, #4]
 8000eda:	68db      	ldr	r3, [r3, #12]
 8000edc:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8000ede:	697b      	ldr	r3, [r7, #20]
 8000ee0:	005b      	lsls	r3, r3, #1
 8000ee2:	2203      	movs	r2, #3
 8000ee4:	fa02 f303 	lsl.w	r3, r2, r3
 8000ee8:	43db      	mvns	r3, r3
 8000eea:	693a      	ldr	r2, [r7, #16]
 8000eec:	4013      	ands	r3, r2
 8000eee:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000ef0:	683b      	ldr	r3, [r7, #0]
 8000ef2:	689a      	ldr	r2, [r3, #8]
 8000ef4:	697b      	ldr	r3, [r7, #20]
 8000ef6:	005b      	lsls	r3, r3, #1
 8000ef8:	fa02 f303 	lsl.w	r3, r2, r3
 8000efc:	693a      	ldr	r2, [r7, #16]
 8000efe:	4313      	orrs	r3, r2
 8000f00:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8000f02:	687b      	ldr	r3, [r7, #4]
 8000f04:	693a      	ldr	r2, [r7, #16]
 8000f06:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000f08:	683b      	ldr	r3, [r7, #0]
 8000f0a:	685b      	ldr	r3, [r3, #4]
 8000f0c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f10:	2b00      	cmp	r3, #0
 8000f12:	f000 80ac 	beq.w	800106e <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f16:	4b5e      	ldr	r3, [pc, #376]	; (8001090 <HAL_GPIO_Init+0x32c>)
 8000f18:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000f1a:	4a5d      	ldr	r2, [pc, #372]	; (8001090 <HAL_GPIO_Init+0x32c>)
 8000f1c:	f043 0301 	orr.w	r3, r3, #1
 8000f20:	6613      	str	r3, [r2, #96]	; 0x60
 8000f22:	4b5b      	ldr	r3, [pc, #364]	; (8001090 <HAL_GPIO_Init+0x32c>)
 8000f24:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000f26:	f003 0301 	and.w	r3, r3, #1
 8000f2a:	60bb      	str	r3, [r7, #8]
 8000f2c:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000f2e:	4a59      	ldr	r2, [pc, #356]	; (8001094 <HAL_GPIO_Init+0x330>)
 8000f30:	697b      	ldr	r3, [r7, #20]
 8000f32:	089b      	lsrs	r3, r3, #2
 8000f34:	3302      	adds	r3, #2
 8000f36:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000f3a:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000f3c:	697b      	ldr	r3, [r7, #20]
 8000f3e:	f003 0303 	and.w	r3, r3, #3
 8000f42:	009b      	lsls	r3, r3, #2
 8000f44:	220f      	movs	r2, #15
 8000f46:	fa02 f303 	lsl.w	r3, r2, r3
 8000f4a:	43db      	mvns	r3, r3
 8000f4c:	693a      	ldr	r2, [r7, #16]
 8000f4e:	4013      	ands	r3, r2
 8000f50:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000f52:	687b      	ldr	r3, [r7, #4]
 8000f54:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8000f58:	d025      	beq.n	8000fa6 <HAL_GPIO_Init+0x242>
 8000f5a:	687b      	ldr	r3, [r7, #4]
 8000f5c:	4a4e      	ldr	r2, [pc, #312]	; (8001098 <HAL_GPIO_Init+0x334>)
 8000f5e:	4293      	cmp	r3, r2
 8000f60:	d01f      	beq.n	8000fa2 <HAL_GPIO_Init+0x23e>
 8000f62:	687b      	ldr	r3, [r7, #4]
 8000f64:	4a4d      	ldr	r2, [pc, #308]	; (800109c <HAL_GPIO_Init+0x338>)
 8000f66:	4293      	cmp	r3, r2
 8000f68:	d019      	beq.n	8000f9e <HAL_GPIO_Init+0x23a>
 8000f6a:	687b      	ldr	r3, [r7, #4]
 8000f6c:	4a4c      	ldr	r2, [pc, #304]	; (80010a0 <HAL_GPIO_Init+0x33c>)
 8000f6e:	4293      	cmp	r3, r2
 8000f70:	d013      	beq.n	8000f9a <HAL_GPIO_Init+0x236>
 8000f72:	687b      	ldr	r3, [r7, #4]
 8000f74:	4a4b      	ldr	r2, [pc, #300]	; (80010a4 <HAL_GPIO_Init+0x340>)
 8000f76:	4293      	cmp	r3, r2
 8000f78:	d00d      	beq.n	8000f96 <HAL_GPIO_Init+0x232>
 8000f7a:	687b      	ldr	r3, [r7, #4]
 8000f7c:	4a4a      	ldr	r2, [pc, #296]	; (80010a8 <HAL_GPIO_Init+0x344>)
 8000f7e:	4293      	cmp	r3, r2
 8000f80:	d007      	beq.n	8000f92 <HAL_GPIO_Init+0x22e>
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	4a49      	ldr	r2, [pc, #292]	; (80010ac <HAL_GPIO_Init+0x348>)
 8000f86:	4293      	cmp	r3, r2
 8000f88:	d101      	bne.n	8000f8e <HAL_GPIO_Init+0x22a>
 8000f8a:	2306      	movs	r3, #6
 8000f8c:	e00c      	b.n	8000fa8 <HAL_GPIO_Init+0x244>
 8000f8e:	2307      	movs	r3, #7
 8000f90:	e00a      	b.n	8000fa8 <HAL_GPIO_Init+0x244>
 8000f92:	2305      	movs	r3, #5
 8000f94:	e008      	b.n	8000fa8 <HAL_GPIO_Init+0x244>
 8000f96:	2304      	movs	r3, #4
 8000f98:	e006      	b.n	8000fa8 <HAL_GPIO_Init+0x244>
 8000f9a:	2303      	movs	r3, #3
 8000f9c:	e004      	b.n	8000fa8 <HAL_GPIO_Init+0x244>
 8000f9e:	2302      	movs	r3, #2
 8000fa0:	e002      	b.n	8000fa8 <HAL_GPIO_Init+0x244>
 8000fa2:	2301      	movs	r3, #1
 8000fa4:	e000      	b.n	8000fa8 <HAL_GPIO_Init+0x244>
 8000fa6:	2300      	movs	r3, #0
 8000fa8:	697a      	ldr	r2, [r7, #20]
 8000faa:	f002 0203 	and.w	r2, r2, #3
 8000fae:	0092      	lsls	r2, r2, #2
 8000fb0:	4093      	lsls	r3, r2
 8000fb2:	693a      	ldr	r2, [r7, #16]
 8000fb4:	4313      	orrs	r3, r2
 8000fb6:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000fb8:	4936      	ldr	r1, [pc, #216]	; (8001094 <HAL_GPIO_Init+0x330>)
 8000fba:	697b      	ldr	r3, [r7, #20]
 8000fbc:	089b      	lsrs	r3, r3, #2
 8000fbe:	3302      	adds	r3, #2
 8000fc0:	693a      	ldr	r2, [r7, #16]
 8000fc2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8000fc6:	4b3a      	ldr	r3, [pc, #232]	; (80010b0 <HAL_GPIO_Init+0x34c>)
 8000fc8:	681b      	ldr	r3, [r3, #0]
 8000fca:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000fcc:	68fb      	ldr	r3, [r7, #12]
 8000fce:	43db      	mvns	r3, r3
 8000fd0:	693a      	ldr	r2, [r7, #16]
 8000fd2:	4013      	ands	r3, r2
 8000fd4:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000fd6:	683b      	ldr	r3, [r7, #0]
 8000fd8:	685b      	ldr	r3, [r3, #4]
 8000fda:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000fde:	2b00      	cmp	r3, #0
 8000fe0:	d003      	beq.n	8000fea <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8000fe2:	693a      	ldr	r2, [r7, #16]
 8000fe4:	68fb      	ldr	r3, [r7, #12]
 8000fe6:	4313      	orrs	r3, r2
 8000fe8:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8000fea:	4a31      	ldr	r2, [pc, #196]	; (80010b0 <HAL_GPIO_Init+0x34c>)
 8000fec:	693b      	ldr	r3, [r7, #16]
 8000fee:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 8000ff0:	4b2f      	ldr	r3, [pc, #188]	; (80010b0 <HAL_GPIO_Init+0x34c>)
 8000ff2:	685b      	ldr	r3, [r3, #4]
 8000ff4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000ff6:	68fb      	ldr	r3, [r7, #12]
 8000ff8:	43db      	mvns	r3, r3
 8000ffa:	693a      	ldr	r2, [r7, #16]
 8000ffc:	4013      	ands	r3, r2
 8000ffe:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001000:	683b      	ldr	r3, [r7, #0]
 8001002:	685b      	ldr	r3, [r3, #4]
 8001004:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001008:	2b00      	cmp	r3, #0
 800100a:	d003      	beq.n	8001014 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 800100c:	693a      	ldr	r2, [r7, #16]
 800100e:	68fb      	ldr	r3, [r7, #12]
 8001010:	4313      	orrs	r3, r2
 8001012:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001014:	4a26      	ldr	r2, [pc, #152]	; (80010b0 <HAL_GPIO_Init+0x34c>)
 8001016:	693b      	ldr	r3, [r7, #16]
 8001018:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800101a:	4b25      	ldr	r3, [pc, #148]	; (80010b0 <HAL_GPIO_Init+0x34c>)
 800101c:	689b      	ldr	r3, [r3, #8]
 800101e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001020:	68fb      	ldr	r3, [r7, #12]
 8001022:	43db      	mvns	r3, r3
 8001024:	693a      	ldr	r2, [r7, #16]
 8001026:	4013      	ands	r3, r2
 8001028:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800102a:	683b      	ldr	r3, [r7, #0]
 800102c:	685b      	ldr	r3, [r3, #4]
 800102e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001032:	2b00      	cmp	r3, #0
 8001034:	d003      	beq.n	800103e <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8001036:	693a      	ldr	r2, [r7, #16]
 8001038:	68fb      	ldr	r3, [r7, #12]
 800103a:	4313      	orrs	r3, r2
 800103c:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800103e:	4a1c      	ldr	r2, [pc, #112]	; (80010b0 <HAL_GPIO_Init+0x34c>)
 8001040:	693b      	ldr	r3, [r7, #16]
 8001042:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001044:	4b1a      	ldr	r3, [pc, #104]	; (80010b0 <HAL_GPIO_Init+0x34c>)
 8001046:	68db      	ldr	r3, [r3, #12]
 8001048:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800104a:	68fb      	ldr	r3, [r7, #12]
 800104c:	43db      	mvns	r3, r3
 800104e:	693a      	ldr	r2, [r7, #16]
 8001050:	4013      	ands	r3, r2
 8001052:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001054:	683b      	ldr	r3, [r7, #0]
 8001056:	685b      	ldr	r3, [r3, #4]
 8001058:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800105c:	2b00      	cmp	r3, #0
 800105e:	d003      	beq.n	8001068 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8001060:	693a      	ldr	r2, [r7, #16]
 8001062:	68fb      	ldr	r3, [r7, #12]
 8001064:	4313      	orrs	r3, r2
 8001066:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001068:	4a11      	ldr	r2, [pc, #68]	; (80010b0 <HAL_GPIO_Init+0x34c>)
 800106a:	693b      	ldr	r3, [r7, #16]
 800106c:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 800106e:	697b      	ldr	r3, [r7, #20]
 8001070:	3301      	adds	r3, #1
 8001072:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001074:	683b      	ldr	r3, [r7, #0]
 8001076:	681a      	ldr	r2, [r3, #0]
 8001078:	697b      	ldr	r3, [r7, #20]
 800107a:	fa22 f303 	lsr.w	r3, r2, r3
 800107e:	2b00      	cmp	r3, #0
 8001080:	f47f ae78 	bne.w	8000d74 <HAL_GPIO_Init+0x10>
  }
}
 8001084:	bf00      	nop
 8001086:	371c      	adds	r7, #28
 8001088:	46bd      	mov	sp, r7
 800108a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800108e:	4770      	bx	lr
 8001090:	40021000 	.word	0x40021000
 8001094:	40010000 	.word	0x40010000
 8001098:	48000400 	.word	0x48000400
 800109c:	48000800 	.word	0x48000800
 80010a0:	48000c00 	.word	0x48000c00
 80010a4:	48001000 	.word	0x48001000
 80010a8:	48001400 	.word	0x48001400
 80010ac:	48001800 	.word	0x48001800
 80010b0:	40010400 	.word	0x40010400

080010b4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80010b4:	b480      	push	{r7}
 80010b6:	b083      	sub	sp, #12
 80010b8:	af00      	add	r7, sp, #0
 80010ba:	6078      	str	r0, [r7, #4]
 80010bc:	460b      	mov	r3, r1
 80010be:	807b      	strh	r3, [r7, #2]
 80010c0:	4613      	mov	r3, r2
 80010c2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80010c4:	787b      	ldrb	r3, [r7, #1]
 80010c6:	2b00      	cmp	r3, #0
 80010c8:	d003      	beq.n	80010d2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80010ca:	887a      	ldrh	r2, [r7, #2]
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80010d0:	e002      	b.n	80010d8 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80010d2:	887a      	ldrh	r2, [r7, #2]
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	629a      	str	r2, [r3, #40]	; 0x28
}
 80010d8:	bf00      	nop
 80010da:	370c      	adds	r7, #12
 80010dc:	46bd      	mov	sp, r7
 80010de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010e2:	4770      	bx	lr

080010e4 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_RANGE1 or PWR_REGULATOR_VOLTAGE_RANGE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80010e4:	b480      	push	{r7}
 80010e6:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80010e8:	4b04      	ldr	r3, [pc, #16]	; (80010fc <HAL_PWREx_GetVoltageRange+0x18>)
 80010ea:	681b      	ldr	r3, [r3, #0]
 80010ec:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 80010f0:	4618      	mov	r0, r3
 80010f2:	46bd      	mov	sp, r7
 80010f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010f8:	4770      	bx	lr
 80010fa:	bf00      	nop
 80010fc:	40007000 	.word	0x40007000

08001100 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001100:	b480      	push	{r7}
 8001102:	b085      	sub	sp, #20
 8001104:	af00      	add	r7, sp, #0
 8001106:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800110e:	d130      	bne.n	8001172 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8001110:	4b23      	ldr	r3, [pc, #140]	; (80011a0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001112:	681b      	ldr	r3, [r3, #0]
 8001114:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001118:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800111c:	d038      	beq.n	8001190 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800111e:	4b20      	ldr	r3, [pc, #128]	; (80011a0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001120:	681b      	ldr	r3, [r3, #0]
 8001122:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001126:	4a1e      	ldr	r2, [pc, #120]	; (80011a0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001128:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800112c:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800112e:	4b1d      	ldr	r3, [pc, #116]	; (80011a4 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8001130:	681b      	ldr	r3, [r3, #0]
 8001132:	2232      	movs	r2, #50	; 0x32
 8001134:	fb02 f303 	mul.w	r3, r2, r3
 8001138:	4a1b      	ldr	r2, [pc, #108]	; (80011a8 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800113a:	fba2 2303 	umull	r2, r3, r2, r3
 800113e:	0c9b      	lsrs	r3, r3, #18
 8001140:	3301      	adds	r3, #1
 8001142:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001144:	e002      	b.n	800114c <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8001146:	68fb      	ldr	r3, [r7, #12]
 8001148:	3b01      	subs	r3, #1
 800114a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800114c:	4b14      	ldr	r3, [pc, #80]	; (80011a0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800114e:	695b      	ldr	r3, [r3, #20]
 8001150:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001154:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001158:	d102      	bne.n	8001160 <HAL_PWREx_ControlVoltageScaling+0x60>
 800115a:	68fb      	ldr	r3, [r7, #12]
 800115c:	2b00      	cmp	r3, #0
 800115e:	d1f2      	bne.n	8001146 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001160:	4b0f      	ldr	r3, [pc, #60]	; (80011a0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001162:	695b      	ldr	r3, [r3, #20]
 8001164:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001168:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800116c:	d110      	bne.n	8001190 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 800116e:	2303      	movs	r3, #3
 8001170:	e00f      	b.n	8001192 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8001172:	4b0b      	ldr	r3, [pc, #44]	; (80011a0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001174:	681b      	ldr	r3, [r3, #0]
 8001176:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800117a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800117e:	d007      	beq.n	8001190 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001180:	4b07      	ldr	r3, [pc, #28]	; (80011a0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001182:	681b      	ldr	r3, [r3, #0]
 8001184:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001188:	4a05      	ldr	r2, [pc, #20]	; (80011a0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800118a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800118e:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8001190:	2300      	movs	r3, #0
}
 8001192:	4618      	mov	r0, r3
 8001194:	3714      	adds	r7, #20
 8001196:	46bd      	mov	sp, r7
 8001198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800119c:	4770      	bx	lr
 800119e:	bf00      	nop
 80011a0:	40007000 	.word	0x40007000
 80011a4:	20000000 	.word	0x20000000
 80011a8:	431bde83 	.word	0x431bde83

080011ac <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80011ac:	b580      	push	{r7, lr}
 80011ae:	b088      	sub	sp, #32
 80011b0:	af00      	add	r7, sp, #0
 80011b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	2b00      	cmp	r3, #0
 80011b8:	d101      	bne.n	80011be <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80011ba:	2301      	movs	r3, #1
 80011bc:	e39d      	b.n	80018fa <HAL_RCC_OscConfig+0x74e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80011be:	4ba4      	ldr	r3, [pc, #656]	; (8001450 <HAL_RCC_OscConfig+0x2a4>)
 80011c0:	689b      	ldr	r3, [r3, #8]
 80011c2:	f003 030c 	and.w	r3, r3, #12
 80011c6:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80011c8:	4ba1      	ldr	r3, [pc, #644]	; (8001450 <HAL_RCC_OscConfig+0x2a4>)
 80011ca:	68db      	ldr	r3, [r3, #12]
 80011cc:	f003 0303 	and.w	r3, r3, #3
 80011d0:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	681b      	ldr	r3, [r3, #0]
 80011d6:	f003 0310 	and.w	r3, r3, #16
 80011da:	2b00      	cmp	r3, #0
 80011dc:	f000 80e1 	beq.w	80013a2 <HAL_RCC_OscConfig+0x1f6>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80011e0:	69bb      	ldr	r3, [r7, #24]
 80011e2:	2b00      	cmp	r3, #0
 80011e4:	d007      	beq.n	80011f6 <HAL_RCC_OscConfig+0x4a>
 80011e6:	69bb      	ldr	r3, [r7, #24]
 80011e8:	2b0c      	cmp	r3, #12
 80011ea:	f040 8088 	bne.w	80012fe <HAL_RCC_OscConfig+0x152>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80011ee:	697b      	ldr	r3, [r7, #20]
 80011f0:	2b01      	cmp	r3, #1
 80011f2:	f040 8084 	bne.w	80012fe <HAL_RCC_OscConfig+0x152>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80011f6:	4b96      	ldr	r3, [pc, #600]	; (8001450 <HAL_RCC_OscConfig+0x2a4>)
 80011f8:	681b      	ldr	r3, [r3, #0]
 80011fa:	f003 0302 	and.w	r3, r3, #2
 80011fe:	2b00      	cmp	r3, #0
 8001200:	d005      	beq.n	800120e <HAL_RCC_OscConfig+0x62>
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	699b      	ldr	r3, [r3, #24]
 8001206:	2b00      	cmp	r3, #0
 8001208:	d101      	bne.n	800120e <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 800120a:	2301      	movs	r3, #1
 800120c:	e375      	b.n	80018fa <HAL_RCC_OscConfig+0x74e>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	6a1a      	ldr	r2, [r3, #32]
 8001212:	4b8f      	ldr	r3, [pc, #572]	; (8001450 <HAL_RCC_OscConfig+0x2a4>)
 8001214:	681b      	ldr	r3, [r3, #0]
 8001216:	f003 0308 	and.w	r3, r3, #8
 800121a:	2b00      	cmp	r3, #0
 800121c:	d004      	beq.n	8001228 <HAL_RCC_OscConfig+0x7c>
 800121e:	4b8c      	ldr	r3, [pc, #560]	; (8001450 <HAL_RCC_OscConfig+0x2a4>)
 8001220:	681b      	ldr	r3, [r3, #0]
 8001222:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001226:	e005      	b.n	8001234 <HAL_RCC_OscConfig+0x88>
 8001228:	4b89      	ldr	r3, [pc, #548]	; (8001450 <HAL_RCC_OscConfig+0x2a4>)
 800122a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800122e:	091b      	lsrs	r3, r3, #4
 8001230:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001234:	4293      	cmp	r3, r2
 8001236:	d223      	bcs.n	8001280 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	6a1b      	ldr	r3, [r3, #32]
 800123c:	4618      	mov	r0, r3
 800123e:	f000 fd09 	bl	8001c54 <RCC_SetFlashLatencyFromMSIRange>
 8001242:	4603      	mov	r3, r0
 8001244:	2b00      	cmp	r3, #0
 8001246:	d001      	beq.n	800124c <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8001248:	2301      	movs	r3, #1
 800124a:	e356      	b.n	80018fa <HAL_RCC_OscConfig+0x74e>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800124c:	4b80      	ldr	r3, [pc, #512]	; (8001450 <HAL_RCC_OscConfig+0x2a4>)
 800124e:	681b      	ldr	r3, [r3, #0]
 8001250:	4a7f      	ldr	r2, [pc, #508]	; (8001450 <HAL_RCC_OscConfig+0x2a4>)
 8001252:	f043 0308 	orr.w	r3, r3, #8
 8001256:	6013      	str	r3, [r2, #0]
 8001258:	4b7d      	ldr	r3, [pc, #500]	; (8001450 <HAL_RCC_OscConfig+0x2a4>)
 800125a:	681b      	ldr	r3, [r3, #0]
 800125c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	6a1b      	ldr	r3, [r3, #32]
 8001264:	497a      	ldr	r1, [pc, #488]	; (8001450 <HAL_RCC_OscConfig+0x2a4>)
 8001266:	4313      	orrs	r3, r2
 8001268:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800126a:	4b79      	ldr	r3, [pc, #484]	; (8001450 <HAL_RCC_OscConfig+0x2a4>)
 800126c:	685b      	ldr	r3, [r3, #4]
 800126e:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	69db      	ldr	r3, [r3, #28]
 8001276:	021b      	lsls	r3, r3, #8
 8001278:	4975      	ldr	r1, [pc, #468]	; (8001450 <HAL_RCC_OscConfig+0x2a4>)
 800127a:	4313      	orrs	r3, r2
 800127c:	604b      	str	r3, [r1, #4]
 800127e:	e022      	b.n	80012c6 <HAL_RCC_OscConfig+0x11a>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001280:	4b73      	ldr	r3, [pc, #460]	; (8001450 <HAL_RCC_OscConfig+0x2a4>)
 8001282:	681b      	ldr	r3, [r3, #0]
 8001284:	4a72      	ldr	r2, [pc, #456]	; (8001450 <HAL_RCC_OscConfig+0x2a4>)
 8001286:	f043 0308 	orr.w	r3, r3, #8
 800128a:	6013      	str	r3, [r2, #0]
 800128c:	4b70      	ldr	r3, [pc, #448]	; (8001450 <HAL_RCC_OscConfig+0x2a4>)
 800128e:	681b      	ldr	r3, [r3, #0]
 8001290:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	6a1b      	ldr	r3, [r3, #32]
 8001298:	496d      	ldr	r1, [pc, #436]	; (8001450 <HAL_RCC_OscConfig+0x2a4>)
 800129a:	4313      	orrs	r3, r2
 800129c:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800129e:	4b6c      	ldr	r3, [pc, #432]	; (8001450 <HAL_RCC_OscConfig+0x2a4>)
 80012a0:	685b      	ldr	r3, [r3, #4]
 80012a2:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	69db      	ldr	r3, [r3, #28]
 80012aa:	021b      	lsls	r3, r3, #8
 80012ac:	4968      	ldr	r1, [pc, #416]	; (8001450 <HAL_RCC_OscConfig+0x2a4>)
 80012ae:	4313      	orrs	r3, r2
 80012b0:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	6a1b      	ldr	r3, [r3, #32]
 80012b6:	4618      	mov	r0, r3
 80012b8:	f000 fccc 	bl	8001c54 <RCC_SetFlashLatencyFromMSIRange>
 80012bc:	4603      	mov	r3, r0
 80012be:	2b00      	cmp	r3, #0
 80012c0:	d001      	beq.n	80012c6 <HAL_RCC_OscConfig+0x11a>
          {
            return HAL_ERROR;
 80012c2:	2301      	movs	r3, #1
 80012c4:	e319      	b.n	80018fa <HAL_RCC_OscConfig+0x74e>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80012c6:	f000 fc03 	bl	8001ad0 <HAL_RCC_GetSysClockFreq>
 80012ca:	4601      	mov	r1, r0
 80012cc:	4b60      	ldr	r3, [pc, #384]	; (8001450 <HAL_RCC_OscConfig+0x2a4>)
 80012ce:	689b      	ldr	r3, [r3, #8]
 80012d0:	091b      	lsrs	r3, r3, #4
 80012d2:	f003 030f 	and.w	r3, r3, #15
 80012d6:	4a5f      	ldr	r2, [pc, #380]	; (8001454 <HAL_RCC_OscConfig+0x2a8>)
 80012d8:	5cd3      	ldrb	r3, [r2, r3]
 80012da:	f003 031f 	and.w	r3, r3, #31
 80012de:	fa21 f303 	lsr.w	r3, r1, r3
 80012e2:	4a5d      	ldr	r2, [pc, #372]	; (8001458 <HAL_RCC_OscConfig+0x2ac>)
 80012e4:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80012e6:	4b5d      	ldr	r3, [pc, #372]	; (800145c <HAL_RCC_OscConfig+0x2b0>)
 80012e8:	681b      	ldr	r3, [r3, #0]
 80012ea:	4618      	mov	r0, r3
 80012ec:	f7ff fbfc 	bl	8000ae8 <HAL_InitTick>
 80012f0:	4603      	mov	r3, r0
 80012f2:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80012f4:	7bfb      	ldrb	r3, [r7, #15]
 80012f6:	2b00      	cmp	r3, #0
 80012f8:	d052      	beq.n	80013a0 <HAL_RCC_OscConfig+0x1f4>
        {
          return status;
 80012fa:	7bfb      	ldrb	r3, [r7, #15]
 80012fc:	e2fd      	b.n	80018fa <HAL_RCC_OscConfig+0x74e>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	699b      	ldr	r3, [r3, #24]
 8001302:	2b00      	cmp	r3, #0
 8001304:	d032      	beq.n	800136c <HAL_RCC_OscConfig+0x1c0>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001306:	4b52      	ldr	r3, [pc, #328]	; (8001450 <HAL_RCC_OscConfig+0x2a4>)
 8001308:	681b      	ldr	r3, [r3, #0]
 800130a:	4a51      	ldr	r2, [pc, #324]	; (8001450 <HAL_RCC_OscConfig+0x2a4>)
 800130c:	f043 0301 	orr.w	r3, r3, #1
 8001310:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001312:	f7ff fc35 	bl	8000b80 <HAL_GetTick>
 8001316:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001318:	e008      	b.n	800132c <HAL_RCC_OscConfig+0x180>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800131a:	f7ff fc31 	bl	8000b80 <HAL_GetTick>
 800131e:	4602      	mov	r2, r0
 8001320:	693b      	ldr	r3, [r7, #16]
 8001322:	1ad3      	subs	r3, r2, r3
 8001324:	2b02      	cmp	r3, #2
 8001326:	d901      	bls.n	800132c <HAL_RCC_OscConfig+0x180>
          {
            return HAL_TIMEOUT;
 8001328:	2303      	movs	r3, #3
 800132a:	e2e6      	b.n	80018fa <HAL_RCC_OscConfig+0x74e>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800132c:	4b48      	ldr	r3, [pc, #288]	; (8001450 <HAL_RCC_OscConfig+0x2a4>)
 800132e:	681b      	ldr	r3, [r3, #0]
 8001330:	f003 0302 	and.w	r3, r3, #2
 8001334:	2b00      	cmp	r3, #0
 8001336:	d0f0      	beq.n	800131a <HAL_RCC_OscConfig+0x16e>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001338:	4b45      	ldr	r3, [pc, #276]	; (8001450 <HAL_RCC_OscConfig+0x2a4>)
 800133a:	681b      	ldr	r3, [r3, #0]
 800133c:	4a44      	ldr	r2, [pc, #272]	; (8001450 <HAL_RCC_OscConfig+0x2a4>)
 800133e:	f043 0308 	orr.w	r3, r3, #8
 8001342:	6013      	str	r3, [r2, #0]
 8001344:	4b42      	ldr	r3, [pc, #264]	; (8001450 <HAL_RCC_OscConfig+0x2a4>)
 8001346:	681b      	ldr	r3, [r3, #0]
 8001348:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	6a1b      	ldr	r3, [r3, #32]
 8001350:	493f      	ldr	r1, [pc, #252]	; (8001450 <HAL_RCC_OscConfig+0x2a4>)
 8001352:	4313      	orrs	r3, r2
 8001354:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001356:	4b3e      	ldr	r3, [pc, #248]	; (8001450 <HAL_RCC_OscConfig+0x2a4>)
 8001358:	685b      	ldr	r3, [r3, #4]
 800135a:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	69db      	ldr	r3, [r3, #28]
 8001362:	021b      	lsls	r3, r3, #8
 8001364:	493a      	ldr	r1, [pc, #232]	; (8001450 <HAL_RCC_OscConfig+0x2a4>)
 8001366:	4313      	orrs	r3, r2
 8001368:	604b      	str	r3, [r1, #4]
 800136a:	e01a      	b.n	80013a2 <HAL_RCC_OscConfig+0x1f6>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800136c:	4b38      	ldr	r3, [pc, #224]	; (8001450 <HAL_RCC_OscConfig+0x2a4>)
 800136e:	681b      	ldr	r3, [r3, #0]
 8001370:	4a37      	ldr	r2, [pc, #220]	; (8001450 <HAL_RCC_OscConfig+0x2a4>)
 8001372:	f023 0301 	bic.w	r3, r3, #1
 8001376:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001378:	f7ff fc02 	bl	8000b80 <HAL_GetTick>
 800137c:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800137e:	e008      	b.n	8001392 <HAL_RCC_OscConfig+0x1e6>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001380:	f7ff fbfe 	bl	8000b80 <HAL_GetTick>
 8001384:	4602      	mov	r2, r0
 8001386:	693b      	ldr	r3, [r7, #16]
 8001388:	1ad3      	subs	r3, r2, r3
 800138a:	2b02      	cmp	r3, #2
 800138c:	d901      	bls.n	8001392 <HAL_RCC_OscConfig+0x1e6>
          {
            return HAL_TIMEOUT;
 800138e:	2303      	movs	r3, #3
 8001390:	e2b3      	b.n	80018fa <HAL_RCC_OscConfig+0x74e>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001392:	4b2f      	ldr	r3, [pc, #188]	; (8001450 <HAL_RCC_OscConfig+0x2a4>)
 8001394:	681b      	ldr	r3, [r3, #0]
 8001396:	f003 0302 	and.w	r3, r3, #2
 800139a:	2b00      	cmp	r3, #0
 800139c:	d1f0      	bne.n	8001380 <HAL_RCC_OscConfig+0x1d4>
 800139e:	e000      	b.n	80013a2 <HAL_RCC_OscConfig+0x1f6>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80013a0:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	681b      	ldr	r3, [r3, #0]
 80013a6:	f003 0301 	and.w	r3, r3, #1
 80013aa:	2b00      	cmp	r3, #0
 80013ac:	d074      	beq.n	8001498 <HAL_RCC_OscConfig+0x2ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80013ae:	69bb      	ldr	r3, [r7, #24]
 80013b0:	2b08      	cmp	r3, #8
 80013b2:	d005      	beq.n	80013c0 <HAL_RCC_OscConfig+0x214>
 80013b4:	69bb      	ldr	r3, [r7, #24]
 80013b6:	2b0c      	cmp	r3, #12
 80013b8:	d10e      	bne.n	80013d8 <HAL_RCC_OscConfig+0x22c>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80013ba:	697b      	ldr	r3, [r7, #20]
 80013bc:	2b03      	cmp	r3, #3
 80013be:	d10b      	bne.n	80013d8 <HAL_RCC_OscConfig+0x22c>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80013c0:	4b23      	ldr	r3, [pc, #140]	; (8001450 <HAL_RCC_OscConfig+0x2a4>)
 80013c2:	681b      	ldr	r3, [r3, #0]
 80013c4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80013c8:	2b00      	cmp	r3, #0
 80013ca:	d064      	beq.n	8001496 <HAL_RCC_OscConfig+0x2ea>
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	685b      	ldr	r3, [r3, #4]
 80013d0:	2b00      	cmp	r3, #0
 80013d2:	d160      	bne.n	8001496 <HAL_RCC_OscConfig+0x2ea>
      {
        return HAL_ERROR;
 80013d4:	2301      	movs	r3, #1
 80013d6:	e290      	b.n	80018fa <HAL_RCC_OscConfig+0x74e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	685b      	ldr	r3, [r3, #4]
 80013dc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80013e0:	d106      	bne.n	80013f0 <HAL_RCC_OscConfig+0x244>
 80013e2:	4b1b      	ldr	r3, [pc, #108]	; (8001450 <HAL_RCC_OscConfig+0x2a4>)
 80013e4:	681b      	ldr	r3, [r3, #0]
 80013e6:	4a1a      	ldr	r2, [pc, #104]	; (8001450 <HAL_RCC_OscConfig+0x2a4>)
 80013e8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80013ec:	6013      	str	r3, [r2, #0]
 80013ee:	e01d      	b.n	800142c <HAL_RCC_OscConfig+0x280>
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	685b      	ldr	r3, [r3, #4]
 80013f4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80013f8:	d10c      	bne.n	8001414 <HAL_RCC_OscConfig+0x268>
 80013fa:	4b15      	ldr	r3, [pc, #84]	; (8001450 <HAL_RCC_OscConfig+0x2a4>)
 80013fc:	681b      	ldr	r3, [r3, #0]
 80013fe:	4a14      	ldr	r2, [pc, #80]	; (8001450 <HAL_RCC_OscConfig+0x2a4>)
 8001400:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001404:	6013      	str	r3, [r2, #0]
 8001406:	4b12      	ldr	r3, [pc, #72]	; (8001450 <HAL_RCC_OscConfig+0x2a4>)
 8001408:	681b      	ldr	r3, [r3, #0]
 800140a:	4a11      	ldr	r2, [pc, #68]	; (8001450 <HAL_RCC_OscConfig+0x2a4>)
 800140c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001410:	6013      	str	r3, [r2, #0]
 8001412:	e00b      	b.n	800142c <HAL_RCC_OscConfig+0x280>
 8001414:	4b0e      	ldr	r3, [pc, #56]	; (8001450 <HAL_RCC_OscConfig+0x2a4>)
 8001416:	681b      	ldr	r3, [r3, #0]
 8001418:	4a0d      	ldr	r2, [pc, #52]	; (8001450 <HAL_RCC_OscConfig+0x2a4>)
 800141a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800141e:	6013      	str	r3, [r2, #0]
 8001420:	4b0b      	ldr	r3, [pc, #44]	; (8001450 <HAL_RCC_OscConfig+0x2a4>)
 8001422:	681b      	ldr	r3, [r3, #0]
 8001424:	4a0a      	ldr	r2, [pc, #40]	; (8001450 <HAL_RCC_OscConfig+0x2a4>)
 8001426:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800142a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	685b      	ldr	r3, [r3, #4]
 8001430:	2b00      	cmp	r3, #0
 8001432:	d01c      	beq.n	800146e <HAL_RCC_OscConfig+0x2c2>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001434:	f7ff fba4 	bl	8000b80 <HAL_GetTick>
 8001438:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800143a:	e011      	b.n	8001460 <HAL_RCC_OscConfig+0x2b4>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800143c:	f7ff fba0 	bl	8000b80 <HAL_GetTick>
 8001440:	4602      	mov	r2, r0
 8001442:	693b      	ldr	r3, [r7, #16]
 8001444:	1ad3      	subs	r3, r2, r3
 8001446:	2b64      	cmp	r3, #100	; 0x64
 8001448:	d90a      	bls.n	8001460 <HAL_RCC_OscConfig+0x2b4>
          {
            return HAL_TIMEOUT;
 800144a:	2303      	movs	r3, #3
 800144c:	e255      	b.n	80018fa <HAL_RCC_OscConfig+0x74e>
 800144e:	bf00      	nop
 8001450:	40021000 	.word	0x40021000
 8001454:	08003340 	.word	0x08003340
 8001458:	20000000 	.word	0x20000000
 800145c:	20000004 	.word	0x20000004
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001460:	4bae      	ldr	r3, [pc, #696]	; (800171c <HAL_RCC_OscConfig+0x570>)
 8001462:	681b      	ldr	r3, [r3, #0]
 8001464:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001468:	2b00      	cmp	r3, #0
 800146a:	d0e7      	beq.n	800143c <HAL_RCC_OscConfig+0x290>
 800146c:	e014      	b.n	8001498 <HAL_RCC_OscConfig+0x2ec>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800146e:	f7ff fb87 	bl	8000b80 <HAL_GetTick>
 8001472:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001474:	e008      	b.n	8001488 <HAL_RCC_OscConfig+0x2dc>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001476:	f7ff fb83 	bl	8000b80 <HAL_GetTick>
 800147a:	4602      	mov	r2, r0
 800147c:	693b      	ldr	r3, [r7, #16]
 800147e:	1ad3      	subs	r3, r2, r3
 8001480:	2b64      	cmp	r3, #100	; 0x64
 8001482:	d901      	bls.n	8001488 <HAL_RCC_OscConfig+0x2dc>
          {
            return HAL_TIMEOUT;
 8001484:	2303      	movs	r3, #3
 8001486:	e238      	b.n	80018fa <HAL_RCC_OscConfig+0x74e>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001488:	4ba4      	ldr	r3, [pc, #656]	; (800171c <HAL_RCC_OscConfig+0x570>)
 800148a:	681b      	ldr	r3, [r3, #0]
 800148c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001490:	2b00      	cmp	r3, #0
 8001492:	d1f0      	bne.n	8001476 <HAL_RCC_OscConfig+0x2ca>
 8001494:	e000      	b.n	8001498 <HAL_RCC_OscConfig+0x2ec>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001496:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	681b      	ldr	r3, [r3, #0]
 800149c:	f003 0302 	and.w	r3, r3, #2
 80014a0:	2b00      	cmp	r3, #0
 80014a2:	d060      	beq.n	8001566 <HAL_RCC_OscConfig+0x3ba>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80014a4:	69bb      	ldr	r3, [r7, #24]
 80014a6:	2b04      	cmp	r3, #4
 80014a8:	d005      	beq.n	80014b6 <HAL_RCC_OscConfig+0x30a>
 80014aa:	69bb      	ldr	r3, [r7, #24]
 80014ac:	2b0c      	cmp	r3, #12
 80014ae:	d119      	bne.n	80014e4 <HAL_RCC_OscConfig+0x338>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80014b0:	697b      	ldr	r3, [r7, #20]
 80014b2:	2b02      	cmp	r3, #2
 80014b4:	d116      	bne.n	80014e4 <HAL_RCC_OscConfig+0x338>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80014b6:	4b99      	ldr	r3, [pc, #612]	; (800171c <HAL_RCC_OscConfig+0x570>)
 80014b8:	681b      	ldr	r3, [r3, #0]
 80014ba:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80014be:	2b00      	cmp	r3, #0
 80014c0:	d005      	beq.n	80014ce <HAL_RCC_OscConfig+0x322>
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	68db      	ldr	r3, [r3, #12]
 80014c6:	2b00      	cmp	r3, #0
 80014c8:	d101      	bne.n	80014ce <HAL_RCC_OscConfig+0x322>
      {
        return HAL_ERROR;
 80014ca:	2301      	movs	r3, #1
 80014cc:	e215      	b.n	80018fa <HAL_RCC_OscConfig+0x74e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80014ce:	4b93      	ldr	r3, [pc, #588]	; (800171c <HAL_RCC_OscConfig+0x570>)
 80014d0:	685b      	ldr	r3, [r3, #4]
 80014d2:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	691b      	ldr	r3, [r3, #16]
 80014da:	061b      	lsls	r3, r3, #24
 80014dc:	498f      	ldr	r1, [pc, #572]	; (800171c <HAL_RCC_OscConfig+0x570>)
 80014de:	4313      	orrs	r3, r2
 80014e0:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80014e2:	e040      	b.n	8001566 <HAL_RCC_OscConfig+0x3ba>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	68db      	ldr	r3, [r3, #12]
 80014e8:	2b00      	cmp	r3, #0
 80014ea:	d023      	beq.n	8001534 <HAL_RCC_OscConfig+0x388>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80014ec:	4b8b      	ldr	r3, [pc, #556]	; (800171c <HAL_RCC_OscConfig+0x570>)
 80014ee:	681b      	ldr	r3, [r3, #0]
 80014f0:	4a8a      	ldr	r2, [pc, #552]	; (800171c <HAL_RCC_OscConfig+0x570>)
 80014f2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80014f6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80014f8:	f7ff fb42 	bl	8000b80 <HAL_GetTick>
 80014fc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80014fe:	e008      	b.n	8001512 <HAL_RCC_OscConfig+0x366>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001500:	f7ff fb3e 	bl	8000b80 <HAL_GetTick>
 8001504:	4602      	mov	r2, r0
 8001506:	693b      	ldr	r3, [r7, #16]
 8001508:	1ad3      	subs	r3, r2, r3
 800150a:	2b02      	cmp	r3, #2
 800150c:	d901      	bls.n	8001512 <HAL_RCC_OscConfig+0x366>
          {
            return HAL_TIMEOUT;
 800150e:	2303      	movs	r3, #3
 8001510:	e1f3      	b.n	80018fa <HAL_RCC_OscConfig+0x74e>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001512:	4b82      	ldr	r3, [pc, #520]	; (800171c <HAL_RCC_OscConfig+0x570>)
 8001514:	681b      	ldr	r3, [r3, #0]
 8001516:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800151a:	2b00      	cmp	r3, #0
 800151c:	d0f0      	beq.n	8001500 <HAL_RCC_OscConfig+0x354>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800151e:	4b7f      	ldr	r3, [pc, #508]	; (800171c <HAL_RCC_OscConfig+0x570>)
 8001520:	685b      	ldr	r3, [r3, #4]
 8001522:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	691b      	ldr	r3, [r3, #16]
 800152a:	061b      	lsls	r3, r3, #24
 800152c:	497b      	ldr	r1, [pc, #492]	; (800171c <HAL_RCC_OscConfig+0x570>)
 800152e:	4313      	orrs	r3, r2
 8001530:	604b      	str	r3, [r1, #4]
 8001532:	e018      	b.n	8001566 <HAL_RCC_OscConfig+0x3ba>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001534:	4b79      	ldr	r3, [pc, #484]	; (800171c <HAL_RCC_OscConfig+0x570>)
 8001536:	681b      	ldr	r3, [r3, #0]
 8001538:	4a78      	ldr	r2, [pc, #480]	; (800171c <HAL_RCC_OscConfig+0x570>)
 800153a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800153e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001540:	f7ff fb1e 	bl	8000b80 <HAL_GetTick>
 8001544:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001546:	e008      	b.n	800155a <HAL_RCC_OscConfig+0x3ae>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001548:	f7ff fb1a 	bl	8000b80 <HAL_GetTick>
 800154c:	4602      	mov	r2, r0
 800154e:	693b      	ldr	r3, [r7, #16]
 8001550:	1ad3      	subs	r3, r2, r3
 8001552:	2b02      	cmp	r3, #2
 8001554:	d901      	bls.n	800155a <HAL_RCC_OscConfig+0x3ae>
          {
            return HAL_TIMEOUT;
 8001556:	2303      	movs	r3, #3
 8001558:	e1cf      	b.n	80018fa <HAL_RCC_OscConfig+0x74e>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800155a:	4b70      	ldr	r3, [pc, #448]	; (800171c <HAL_RCC_OscConfig+0x570>)
 800155c:	681b      	ldr	r3, [r3, #0]
 800155e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001562:	2b00      	cmp	r3, #0
 8001564:	d1f0      	bne.n	8001548 <HAL_RCC_OscConfig+0x39c>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	681b      	ldr	r3, [r3, #0]
 800156a:	f003 0308 	and.w	r3, r3, #8
 800156e:	2b00      	cmp	r3, #0
 8001570:	d03c      	beq.n	80015ec <HAL_RCC_OscConfig+0x440>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	695b      	ldr	r3, [r3, #20]
 8001576:	2b00      	cmp	r3, #0
 8001578:	d01c      	beq.n	80015b4 <HAL_RCC_OscConfig+0x408>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800157a:	4b68      	ldr	r3, [pc, #416]	; (800171c <HAL_RCC_OscConfig+0x570>)
 800157c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001580:	4a66      	ldr	r2, [pc, #408]	; (800171c <HAL_RCC_OscConfig+0x570>)
 8001582:	f043 0301 	orr.w	r3, r3, #1
 8001586:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800158a:	f7ff faf9 	bl	8000b80 <HAL_GetTick>
 800158e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001590:	e008      	b.n	80015a4 <HAL_RCC_OscConfig+0x3f8>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001592:	f7ff faf5 	bl	8000b80 <HAL_GetTick>
 8001596:	4602      	mov	r2, r0
 8001598:	693b      	ldr	r3, [r7, #16]
 800159a:	1ad3      	subs	r3, r2, r3
 800159c:	2b02      	cmp	r3, #2
 800159e:	d901      	bls.n	80015a4 <HAL_RCC_OscConfig+0x3f8>
        {
          return HAL_TIMEOUT;
 80015a0:	2303      	movs	r3, #3
 80015a2:	e1aa      	b.n	80018fa <HAL_RCC_OscConfig+0x74e>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80015a4:	4b5d      	ldr	r3, [pc, #372]	; (800171c <HAL_RCC_OscConfig+0x570>)
 80015a6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80015aa:	f003 0302 	and.w	r3, r3, #2
 80015ae:	2b00      	cmp	r3, #0
 80015b0:	d0ef      	beq.n	8001592 <HAL_RCC_OscConfig+0x3e6>
 80015b2:	e01b      	b.n	80015ec <HAL_RCC_OscConfig+0x440>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80015b4:	4b59      	ldr	r3, [pc, #356]	; (800171c <HAL_RCC_OscConfig+0x570>)
 80015b6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80015ba:	4a58      	ldr	r2, [pc, #352]	; (800171c <HAL_RCC_OscConfig+0x570>)
 80015bc:	f023 0301 	bic.w	r3, r3, #1
 80015c0:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80015c4:	f7ff fadc 	bl	8000b80 <HAL_GetTick>
 80015c8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80015ca:	e008      	b.n	80015de <HAL_RCC_OscConfig+0x432>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80015cc:	f7ff fad8 	bl	8000b80 <HAL_GetTick>
 80015d0:	4602      	mov	r2, r0
 80015d2:	693b      	ldr	r3, [r7, #16]
 80015d4:	1ad3      	subs	r3, r2, r3
 80015d6:	2b02      	cmp	r3, #2
 80015d8:	d901      	bls.n	80015de <HAL_RCC_OscConfig+0x432>
        {
          return HAL_TIMEOUT;
 80015da:	2303      	movs	r3, #3
 80015dc:	e18d      	b.n	80018fa <HAL_RCC_OscConfig+0x74e>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80015de:	4b4f      	ldr	r3, [pc, #316]	; (800171c <HAL_RCC_OscConfig+0x570>)
 80015e0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80015e4:	f003 0302 	and.w	r3, r3, #2
 80015e8:	2b00      	cmp	r3, #0
 80015ea:	d1ef      	bne.n	80015cc <HAL_RCC_OscConfig+0x420>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	681b      	ldr	r3, [r3, #0]
 80015f0:	f003 0304 	and.w	r3, r3, #4
 80015f4:	2b00      	cmp	r3, #0
 80015f6:	f000 80a5 	beq.w	8001744 <HAL_RCC_OscConfig+0x598>
  {
    FlagStatus       pwrclkchanged = RESET;
 80015fa:	2300      	movs	r3, #0
 80015fc:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80015fe:	4b47      	ldr	r3, [pc, #284]	; (800171c <HAL_RCC_OscConfig+0x570>)
 8001600:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001602:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001606:	2b00      	cmp	r3, #0
 8001608:	d10d      	bne.n	8001626 <HAL_RCC_OscConfig+0x47a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800160a:	4b44      	ldr	r3, [pc, #272]	; (800171c <HAL_RCC_OscConfig+0x570>)
 800160c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800160e:	4a43      	ldr	r2, [pc, #268]	; (800171c <HAL_RCC_OscConfig+0x570>)
 8001610:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001614:	6593      	str	r3, [r2, #88]	; 0x58
 8001616:	4b41      	ldr	r3, [pc, #260]	; (800171c <HAL_RCC_OscConfig+0x570>)
 8001618:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800161a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800161e:	60bb      	str	r3, [r7, #8]
 8001620:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001622:	2301      	movs	r3, #1
 8001624:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001626:	4b3e      	ldr	r3, [pc, #248]	; (8001720 <HAL_RCC_OscConfig+0x574>)
 8001628:	681b      	ldr	r3, [r3, #0]
 800162a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800162e:	2b00      	cmp	r3, #0
 8001630:	d118      	bne.n	8001664 <HAL_RCC_OscConfig+0x4b8>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001632:	4b3b      	ldr	r3, [pc, #236]	; (8001720 <HAL_RCC_OscConfig+0x574>)
 8001634:	681b      	ldr	r3, [r3, #0]
 8001636:	4a3a      	ldr	r2, [pc, #232]	; (8001720 <HAL_RCC_OscConfig+0x574>)
 8001638:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800163c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800163e:	f7ff fa9f 	bl	8000b80 <HAL_GetTick>
 8001642:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001644:	e008      	b.n	8001658 <HAL_RCC_OscConfig+0x4ac>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001646:	f7ff fa9b 	bl	8000b80 <HAL_GetTick>
 800164a:	4602      	mov	r2, r0
 800164c:	693b      	ldr	r3, [r7, #16]
 800164e:	1ad3      	subs	r3, r2, r3
 8001650:	2b02      	cmp	r3, #2
 8001652:	d901      	bls.n	8001658 <HAL_RCC_OscConfig+0x4ac>
        {
          return HAL_TIMEOUT;
 8001654:	2303      	movs	r3, #3
 8001656:	e150      	b.n	80018fa <HAL_RCC_OscConfig+0x74e>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001658:	4b31      	ldr	r3, [pc, #196]	; (8001720 <HAL_RCC_OscConfig+0x574>)
 800165a:	681b      	ldr	r3, [r3, #0]
 800165c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001660:	2b00      	cmp	r3, #0
 8001662:	d0f0      	beq.n	8001646 <HAL_RCC_OscConfig+0x49a>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	689b      	ldr	r3, [r3, #8]
 8001668:	2b01      	cmp	r3, #1
 800166a:	d108      	bne.n	800167e <HAL_RCC_OscConfig+0x4d2>
 800166c:	4b2b      	ldr	r3, [pc, #172]	; (800171c <HAL_RCC_OscConfig+0x570>)
 800166e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001672:	4a2a      	ldr	r2, [pc, #168]	; (800171c <HAL_RCC_OscConfig+0x570>)
 8001674:	f043 0301 	orr.w	r3, r3, #1
 8001678:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800167c:	e024      	b.n	80016c8 <HAL_RCC_OscConfig+0x51c>
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	689b      	ldr	r3, [r3, #8]
 8001682:	2b05      	cmp	r3, #5
 8001684:	d110      	bne.n	80016a8 <HAL_RCC_OscConfig+0x4fc>
 8001686:	4b25      	ldr	r3, [pc, #148]	; (800171c <HAL_RCC_OscConfig+0x570>)
 8001688:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800168c:	4a23      	ldr	r2, [pc, #140]	; (800171c <HAL_RCC_OscConfig+0x570>)
 800168e:	f043 0304 	orr.w	r3, r3, #4
 8001692:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001696:	4b21      	ldr	r3, [pc, #132]	; (800171c <HAL_RCC_OscConfig+0x570>)
 8001698:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800169c:	4a1f      	ldr	r2, [pc, #124]	; (800171c <HAL_RCC_OscConfig+0x570>)
 800169e:	f043 0301 	orr.w	r3, r3, #1
 80016a2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80016a6:	e00f      	b.n	80016c8 <HAL_RCC_OscConfig+0x51c>
 80016a8:	4b1c      	ldr	r3, [pc, #112]	; (800171c <HAL_RCC_OscConfig+0x570>)
 80016aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80016ae:	4a1b      	ldr	r2, [pc, #108]	; (800171c <HAL_RCC_OscConfig+0x570>)
 80016b0:	f023 0301 	bic.w	r3, r3, #1
 80016b4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80016b8:	4b18      	ldr	r3, [pc, #96]	; (800171c <HAL_RCC_OscConfig+0x570>)
 80016ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80016be:	4a17      	ldr	r2, [pc, #92]	; (800171c <HAL_RCC_OscConfig+0x570>)
 80016c0:	f023 0304 	bic.w	r3, r3, #4
 80016c4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	689b      	ldr	r3, [r3, #8]
 80016cc:	2b00      	cmp	r3, #0
 80016ce:	d016      	beq.n	80016fe <HAL_RCC_OscConfig+0x552>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80016d0:	f7ff fa56 	bl	8000b80 <HAL_GetTick>
 80016d4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80016d6:	e00a      	b.n	80016ee <HAL_RCC_OscConfig+0x542>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80016d8:	f7ff fa52 	bl	8000b80 <HAL_GetTick>
 80016dc:	4602      	mov	r2, r0
 80016de:	693b      	ldr	r3, [r7, #16]
 80016e0:	1ad3      	subs	r3, r2, r3
 80016e2:	f241 3288 	movw	r2, #5000	; 0x1388
 80016e6:	4293      	cmp	r3, r2
 80016e8:	d901      	bls.n	80016ee <HAL_RCC_OscConfig+0x542>
        {
          return HAL_TIMEOUT;
 80016ea:	2303      	movs	r3, #3
 80016ec:	e105      	b.n	80018fa <HAL_RCC_OscConfig+0x74e>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80016ee:	4b0b      	ldr	r3, [pc, #44]	; (800171c <HAL_RCC_OscConfig+0x570>)
 80016f0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80016f4:	f003 0302 	and.w	r3, r3, #2
 80016f8:	2b00      	cmp	r3, #0
 80016fa:	d0ed      	beq.n	80016d8 <HAL_RCC_OscConfig+0x52c>
 80016fc:	e019      	b.n	8001732 <HAL_RCC_OscConfig+0x586>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80016fe:	f7ff fa3f 	bl	8000b80 <HAL_GetTick>
 8001702:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001704:	e00e      	b.n	8001724 <HAL_RCC_OscConfig+0x578>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001706:	f7ff fa3b 	bl	8000b80 <HAL_GetTick>
 800170a:	4602      	mov	r2, r0
 800170c:	693b      	ldr	r3, [r7, #16]
 800170e:	1ad3      	subs	r3, r2, r3
 8001710:	f241 3288 	movw	r2, #5000	; 0x1388
 8001714:	4293      	cmp	r3, r2
 8001716:	d905      	bls.n	8001724 <HAL_RCC_OscConfig+0x578>
        {
          return HAL_TIMEOUT;
 8001718:	2303      	movs	r3, #3
 800171a:	e0ee      	b.n	80018fa <HAL_RCC_OscConfig+0x74e>
 800171c:	40021000 	.word	0x40021000
 8001720:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001724:	4b77      	ldr	r3, [pc, #476]	; (8001904 <HAL_RCC_OscConfig+0x758>)
 8001726:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800172a:	f003 0302 	and.w	r3, r3, #2
 800172e:	2b00      	cmp	r3, #0
 8001730:	d1e9      	bne.n	8001706 <HAL_RCC_OscConfig+0x55a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001732:	7ffb      	ldrb	r3, [r7, #31]
 8001734:	2b01      	cmp	r3, #1
 8001736:	d105      	bne.n	8001744 <HAL_RCC_OscConfig+0x598>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001738:	4b72      	ldr	r3, [pc, #456]	; (8001904 <HAL_RCC_OscConfig+0x758>)
 800173a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800173c:	4a71      	ldr	r2, [pc, #452]	; (8001904 <HAL_RCC_OscConfig+0x758>)
 800173e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001742:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001748:	2b00      	cmp	r3, #0
 800174a:	f000 80d5 	beq.w	80018f8 <HAL_RCC_OscConfig+0x74c>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_CFGR_SWS_PLL)
 800174e:	69bb      	ldr	r3, [r7, #24]
 8001750:	2b0c      	cmp	r3, #12
 8001752:	f000 808e 	beq.w	8001872 <HAL_RCC_OscConfig+0x6c6>
    {
      if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800175a:	2b02      	cmp	r3, #2
 800175c:	d15b      	bne.n	8001816 <HAL_RCC_OscConfig+0x66a>
#endif /* RCC_PLLP_SUPPORT */
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800175e:	4b69      	ldr	r3, [pc, #420]	; (8001904 <HAL_RCC_OscConfig+0x758>)
 8001760:	681b      	ldr	r3, [r3, #0]
 8001762:	4a68      	ldr	r2, [pc, #416]	; (8001904 <HAL_RCC_OscConfig+0x758>)
 8001764:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001768:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800176a:	f7ff fa09 	bl	8000b80 <HAL_GetTick>
 800176e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001770:	e008      	b.n	8001784 <HAL_RCC_OscConfig+0x5d8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001772:	f7ff fa05 	bl	8000b80 <HAL_GetTick>
 8001776:	4602      	mov	r2, r0
 8001778:	693b      	ldr	r3, [r7, #16]
 800177a:	1ad3      	subs	r3, r2, r3
 800177c:	2b02      	cmp	r3, #2
 800177e:	d901      	bls.n	8001784 <HAL_RCC_OscConfig+0x5d8>
          {
            return HAL_TIMEOUT;
 8001780:	2303      	movs	r3, #3
 8001782:	e0ba      	b.n	80018fa <HAL_RCC_OscConfig+0x74e>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001784:	4b5f      	ldr	r3, [pc, #380]	; (8001904 <HAL_RCC_OscConfig+0x758>)
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800178c:	2b00      	cmp	r3, #0
 800178e:	d1f0      	bne.n	8001772 <HAL_RCC_OscConfig+0x5c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001790:	4b5c      	ldr	r3, [pc, #368]	; (8001904 <HAL_RCC_OscConfig+0x758>)
 8001792:	68da      	ldr	r2, [r3, #12]
 8001794:	4b5c      	ldr	r3, [pc, #368]	; (8001908 <HAL_RCC_OscConfig+0x75c>)
 8001796:	4013      	ands	r3, r2
 8001798:	687a      	ldr	r2, [r7, #4]
 800179a:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 800179c:	687a      	ldr	r2, [r7, #4]
 800179e:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80017a0:	3a01      	subs	r2, #1
 80017a2:	0112      	lsls	r2, r2, #4
 80017a4:	4311      	orrs	r1, r2
 80017a6:	687a      	ldr	r2, [r7, #4]
 80017a8:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80017aa:	0212      	lsls	r2, r2, #8
 80017ac:	4311      	orrs	r1, r2
 80017ae:	687a      	ldr	r2, [r7, #4]
 80017b0:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80017b2:	0852      	lsrs	r2, r2, #1
 80017b4:	3a01      	subs	r2, #1
 80017b6:	0552      	lsls	r2, r2, #21
 80017b8:	4311      	orrs	r1, r2
 80017ba:	687a      	ldr	r2, [r7, #4]
 80017bc:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80017be:	0852      	lsrs	r2, r2, #1
 80017c0:	3a01      	subs	r2, #1
 80017c2:	0652      	lsls	r2, r2, #25
 80017c4:	4311      	orrs	r1, r2
 80017c6:	687a      	ldr	r2, [r7, #4]
 80017c8:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80017ca:	0912      	lsrs	r2, r2, #4
 80017cc:	0452      	lsls	r2, r2, #17
 80017ce:	430a      	orrs	r2, r1
 80017d0:	494c      	ldr	r1, [pc, #304]	; (8001904 <HAL_RCC_OscConfig+0x758>)
 80017d2:	4313      	orrs	r3, r2
 80017d4:	60cb      	str	r3, [r1, #12]
#endif
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80017d6:	4b4b      	ldr	r3, [pc, #300]	; (8001904 <HAL_RCC_OscConfig+0x758>)
 80017d8:	681b      	ldr	r3, [r3, #0]
 80017da:	4a4a      	ldr	r2, [pc, #296]	; (8001904 <HAL_RCC_OscConfig+0x758>)
 80017dc:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80017e0:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80017e2:	4b48      	ldr	r3, [pc, #288]	; (8001904 <HAL_RCC_OscConfig+0x758>)
 80017e4:	68db      	ldr	r3, [r3, #12]
 80017e6:	4a47      	ldr	r2, [pc, #284]	; (8001904 <HAL_RCC_OscConfig+0x758>)
 80017e8:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80017ec:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80017ee:	f7ff f9c7 	bl	8000b80 <HAL_GetTick>
 80017f2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80017f4:	e008      	b.n	8001808 <HAL_RCC_OscConfig+0x65c>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80017f6:	f7ff f9c3 	bl	8000b80 <HAL_GetTick>
 80017fa:	4602      	mov	r2, r0
 80017fc:	693b      	ldr	r3, [r7, #16]
 80017fe:	1ad3      	subs	r3, r2, r3
 8001800:	2b02      	cmp	r3, #2
 8001802:	d901      	bls.n	8001808 <HAL_RCC_OscConfig+0x65c>
          {
            return HAL_TIMEOUT;
 8001804:	2303      	movs	r3, #3
 8001806:	e078      	b.n	80018fa <HAL_RCC_OscConfig+0x74e>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001808:	4b3e      	ldr	r3, [pc, #248]	; (8001904 <HAL_RCC_OscConfig+0x758>)
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001810:	2b00      	cmp	r3, #0
 8001812:	d0f0      	beq.n	80017f6 <HAL_RCC_OscConfig+0x64a>
 8001814:	e070      	b.n	80018f8 <HAL_RCC_OscConfig+0x74c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001816:	4b3b      	ldr	r3, [pc, #236]	; (8001904 <HAL_RCC_OscConfig+0x758>)
 8001818:	681b      	ldr	r3, [r3, #0]
 800181a:	4a3a      	ldr	r2, [pc, #232]	; (8001904 <HAL_RCC_OscConfig+0x758>)
 800181c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001820:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 8001822:	4b38      	ldr	r3, [pc, #224]	; (8001904 <HAL_RCC_OscConfig+0x758>)
 8001824:	681b      	ldr	r3, [r3, #0]
 8001826:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 800182a:	2b00      	cmp	r3, #0
 800182c:	d105      	bne.n	800183a <HAL_RCC_OscConfig+0x68e>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 800182e:	4b35      	ldr	r3, [pc, #212]	; (8001904 <HAL_RCC_OscConfig+0x758>)
 8001830:	68db      	ldr	r3, [r3, #12]
 8001832:	4a34      	ldr	r2, [pc, #208]	; (8001904 <HAL_RCC_OscConfig+0x758>)
 8001834:	f023 0303 	bic.w	r3, r3, #3
 8001838:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 800183a:	4b32      	ldr	r3, [pc, #200]	; (8001904 <HAL_RCC_OscConfig+0x758>)
 800183c:	68db      	ldr	r3, [r3, #12]
 800183e:	4a31      	ldr	r2, [pc, #196]	; (8001904 <HAL_RCC_OscConfig+0x758>)
 8001840:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8001844:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001848:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800184a:	f7ff f999 	bl	8000b80 <HAL_GetTick>
 800184e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001850:	e008      	b.n	8001864 <HAL_RCC_OscConfig+0x6b8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001852:	f7ff f995 	bl	8000b80 <HAL_GetTick>
 8001856:	4602      	mov	r2, r0
 8001858:	693b      	ldr	r3, [r7, #16]
 800185a:	1ad3      	subs	r3, r2, r3
 800185c:	2b02      	cmp	r3, #2
 800185e:	d901      	bls.n	8001864 <HAL_RCC_OscConfig+0x6b8>
          {
            return HAL_TIMEOUT;
 8001860:	2303      	movs	r3, #3
 8001862:	e04a      	b.n	80018fa <HAL_RCC_OscConfig+0x74e>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001864:	4b27      	ldr	r3, [pc, #156]	; (8001904 <HAL_RCC_OscConfig+0x758>)
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800186c:	2b00      	cmp	r3, #0
 800186e:	d1f0      	bne.n	8001852 <HAL_RCC_OscConfig+0x6a6>
 8001870:	e042      	b.n	80018f8 <HAL_RCC_OscConfig+0x74c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001876:	2b01      	cmp	r3, #1
 8001878:	d101      	bne.n	800187e <HAL_RCC_OscConfig+0x6d2>
      {
        return HAL_ERROR;
 800187a:	2301      	movs	r3, #1
 800187c:	e03d      	b.n	80018fa <HAL_RCC_OscConfig+0x74e>
      }
      else
      {
        pll_config = RCC->PLLCFGR;
 800187e:	4b21      	ldr	r3, [pc, #132]	; (8001904 <HAL_RCC_OscConfig+0x758>)
 8001880:	68db      	ldr	r3, [r3, #12]
 8001882:	617b      	str	r3, [r7, #20]
        /* Do not return HAL_ERROR if request repeats the current configuration */
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001884:	697b      	ldr	r3, [r7, #20]
 8001886:	f003 0203 	and.w	r2, r3, #3
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800188e:	429a      	cmp	r2, r3
 8001890:	d130      	bne.n	80018f4 <HAL_RCC_OscConfig+0x748>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001892:	697b      	ldr	r3, [r7, #20]
 8001894:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800189c:	3b01      	subs	r3, #1
 800189e:	011b      	lsls	r3, r3, #4
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80018a0:	429a      	cmp	r2, r3
 80018a2:	d127      	bne.n	80018f4 <HAL_RCC_OscConfig+0x748>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80018a4:	697b      	ldr	r3, [r7, #20]
 80018a6:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80018ae:	021b      	lsls	r3, r3, #8
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80018b0:	429a      	cmp	r2, r3
 80018b2:	d11f      	bne.n	80018f4 <HAL_RCC_OscConfig+0x748>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80018b4:	697b      	ldr	r3, [r7, #20]
 80018b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80018ba:	687a      	ldr	r2, [r7, #4]
 80018bc:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80018be:	2a07      	cmp	r2, #7
 80018c0:	bf14      	ite	ne
 80018c2:	2201      	movne	r2, #1
 80018c4:	2200      	moveq	r2, #0
 80018c6:	b2d2      	uxtb	r2, r2
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80018c8:	4293      	cmp	r3, r2
 80018ca:	d113      	bne.n	80018f4 <HAL_RCC_OscConfig+0x748>
#endif
#endif
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80018cc:	697b      	ldr	r3, [r7, #20]
 80018ce:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80018d6:	085b      	lsrs	r3, r3, #1
 80018d8:	3b01      	subs	r3, #1
 80018da:	055b      	lsls	r3, r3, #21
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80018dc:	429a      	cmp	r2, r3
 80018de:	d109      	bne.n	80018f4 <HAL_RCC_OscConfig+0x748>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80018e0:	697b      	ldr	r3, [r7, #20]
 80018e2:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018ea:	085b      	lsrs	r3, r3, #1
 80018ec:	3b01      	subs	r3, #1
 80018ee:	065b      	lsls	r3, r3, #25
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80018f0:	429a      	cmp	r2, r3
 80018f2:	d001      	beq.n	80018f8 <HAL_RCC_OscConfig+0x74c>
        {
          return HAL_ERROR;
 80018f4:	2301      	movs	r3, #1
 80018f6:	e000      	b.n	80018fa <HAL_RCC_OscConfig+0x74e>
        }
      }
    }
  }
  return HAL_OK;
 80018f8:	2300      	movs	r3, #0
}
 80018fa:	4618      	mov	r0, r3
 80018fc:	3720      	adds	r7, #32
 80018fe:	46bd      	mov	sp, r7
 8001900:	bd80      	pop	{r7, pc}
 8001902:	bf00      	nop
 8001904:	40021000 	.word	0x40021000
 8001908:	f99d808c 	.word	0xf99d808c

0800190c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800190c:	b580      	push	{r7, lr}
 800190e:	b084      	sub	sp, #16
 8001910:	af00      	add	r7, sp, #0
 8001912:	6078      	str	r0, [r7, #4]
 8001914:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	2b00      	cmp	r3, #0
 800191a:	d101      	bne.n	8001920 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800191c:	2301      	movs	r3, #1
 800191e:	e0c8      	b.n	8001ab2 <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001920:	4b66      	ldr	r3, [pc, #408]	; (8001abc <HAL_RCC_ClockConfig+0x1b0>)
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	f003 0307 	and.w	r3, r3, #7
 8001928:	683a      	ldr	r2, [r7, #0]
 800192a:	429a      	cmp	r2, r3
 800192c:	d910      	bls.n	8001950 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800192e:	4b63      	ldr	r3, [pc, #396]	; (8001abc <HAL_RCC_ClockConfig+0x1b0>)
 8001930:	681b      	ldr	r3, [r3, #0]
 8001932:	f023 0207 	bic.w	r2, r3, #7
 8001936:	4961      	ldr	r1, [pc, #388]	; (8001abc <HAL_RCC_ClockConfig+0x1b0>)
 8001938:	683b      	ldr	r3, [r7, #0]
 800193a:	4313      	orrs	r3, r2
 800193c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800193e:	4b5f      	ldr	r3, [pc, #380]	; (8001abc <HAL_RCC_ClockConfig+0x1b0>)
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	f003 0307 	and.w	r3, r3, #7
 8001946:	683a      	ldr	r2, [r7, #0]
 8001948:	429a      	cmp	r2, r3
 800194a:	d001      	beq.n	8001950 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800194c:	2301      	movs	r3, #1
 800194e:	e0b0      	b.n	8001ab2 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	681b      	ldr	r3, [r3, #0]
 8001954:	f003 0301 	and.w	r3, r3, #1
 8001958:	2b00      	cmp	r3, #0
 800195a:	d04c      	beq.n	80019f6 <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	685b      	ldr	r3, [r3, #4]
 8001960:	2b03      	cmp	r3, #3
 8001962:	d107      	bne.n	8001974 <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001964:	4b56      	ldr	r3, [pc, #344]	; (8001ac0 <HAL_RCC_ClockConfig+0x1b4>)
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800196c:	2b00      	cmp	r3, #0
 800196e:	d121      	bne.n	80019b4 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 8001970:	2301      	movs	r3, #1
 8001972:	e09e      	b.n	8001ab2 <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	685b      	ldr	r3, [r3, #4]
 8001978:	2b02      	cmp	r3, #2
 800197a:	d107      	bne.n	800198c <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800197c:	4b50      	ldr	r3, [pc, #320]	; (8001ac0 <HAL_RCC_ClockConfig+0x1b4>)
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001984:	2b00      	cmp	r3, #0
 8001986:	d115      	bne.n	80019b4 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8001988:	2301      	movs	r3, #1
 800198a:	e092      	b.n	8001ab2 <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	685b      	ldr	r3, [r3, #4]
 8001990:	2b00      	cmp	r3, #0
 8001992:	d107      	bne.n	80019a4 <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001994:	4b4a      	ldr	r3, [pc, #296]	; (8001ac0 <HAL_RCC_ClockConfig+0x1b4>)
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	f003 0302 	and.w	r3, r3, #2
 800199c:	2b00      	cmp	r3, #0
 800199e:	d109      	bne.n	80019b4 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 80019a0:	2301      	movs	r3, #1
 80019a2:	e086      	b.n	8001ab2 <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80019a4:	4b46      	ldr	r3, [pc, #280]	; (8001ac0 <HAL_RCC_ClockConfig+0x1b4>)
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80019ac:	2b00      	cmp	r3, #0
 80019ae:	d101      	bne.n	80019b4 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 80019b0:	2301      	movs	r3, #1
 80019b2:	e07e      	b.n	8001ab2 <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80019b4:	4b42      	ldr	r3, [pc, #264]	; (8001ac0 <HAL_RCC_ClockConfig+0x1b4>)
 80019b6:	689b      	ldr	r3, [r3, #8]
 80019b8:	f023 0203 	bic.w	r2, r3, #3
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	685b      	ldr	r3, [r3, #4]
 80019c0:	493f      	ldr	r1, [pc, #252]	; (8001ac0 <HAL_RCC_ClockConfig+0x1b4>)
 80019c2:	4313      	orrs	r3, r2
 80019c4:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80019c6:	f7ff f8db 	bl	8000b80 <HAL_GetTick>
 80019ca:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80019cc:	e00a      	b.n	80019e4 <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80019ce:	f7ff f8d7 	bl	8000b80 <HAL_GetTick>
 80019d2:	4602      	mov	r2, r0
 80019d4:	68fb      	ldr	r3, [r7, #12]
 80019d6:	1ad3      	subs	r3, r2, r3
 80019d8:	f241 3288 	movw	r2, #5000	; 0x1388
 80019dc:	4293      	cmp	r3, r2
 80019de:	d901      	bls.n	80019e4 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 80019e0:	2303      	movs	r3, #3
 80019e2:	e066      	b.n	8001ab2 <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80019e4:	4b36      	ldr	r3, [pc, #216]	; (8001ac0 <HAL_RCC_ClockConfig+0x1b4>)
 80019e6:	689b      	ldr	r3, [r3, #8]
 80019e8:	f003 020c 	and.w	r2, r3, #12
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	685b      	ldr	r3, [r3, #4]
 80019f0:	009b      	lsls	r3, r3, #2
 80019f2:	429a      	cmp	r2, r3
 80019f4:	d1eb      	bne.n	80019ce <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	681b      	ldr	r3, [r3, #0]
 80019fa:	f003 0302 	and.w	r3, r3, #2
 80019fe:	2b00      	cmp	r3, #0
 8001a00:	d008      	beq.n	8001a14 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001a02:	4b2f      	ldr	r3, [pc, #188]	; (8001ac0 <HAL_RCC_ClockConfig+0x1b4>)
 8001a04:	689b      	ldr	r3, [r3, #8]
 8001a06:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	689b      	ldr	r3, [r3, #8]
 8001a0e:	492c      	ldr	r1, [pc, #176]	; (8001ac0 <HAL_RCC_ClockConfig+0x1b4>)
 8001a10:	4313      	orrs	r3, r2
 8001a12:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001a14:	4b29      	ldr	r3, [pc, #164]	; (8001abc <HAL_RCC_ClockConfig+0x1b0>)
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	f003 0307 	and.w	r3, r3, #7
 8001a1c:	683a      	ldr	r2, [r7, #0]
 8001a1e:	429a      	cmp	r2, r3
 8001a20:	d210      	bcs.n	8001a44 <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001a22:	4b26      	ldr	r3, [pc, #152]	; (8001abc <HAL_RCC_ClockConfig+0x1b0>)
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	f023 0207 	bic.w	r2, r3, #7
 8001a2a:	4924      	ldr	r1, [pc, #144]	; (8001abc <HAL_RCC_ClockConfig+0x1b0>)
 8001a2c:	683b      	ldr	r3, [r7, #0]
 8001a2e:	4313      	orrs	r3, r2
 8001a30:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001a32:	4b22      	ldr	r3, [pc, #136]	; (8001abc <HAL_RCC_ClockConfig+0x1b0>)
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	f003 0307 	and.w	r3, r3, #7
 8001a3a:	683a      	ldr	r2, [r7, #0]
 8001a3c:	429a      	cmp	r2, r3
 8001a3e:	d001      	beq.n	8001a44 <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 8001a40:	2301      	movs	r3, #1
 8001a42:	e036      	b.n	8001ab2 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	f003 0304 	and.w	r3, r3, #4
 8001a4c:	2b00      	cmp	r3, #0
 8001a4e:	d008      	beq.n	8001a62 <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001a50:	4b1b      	ldr	r3, [pc, #108]	; (8001ac0 <HAL_RCC_ClockConfig+0x1b4>)
 8001a52:	689b      	ldr	r3, [r3, #8]
 8001a54:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	68db      	ldr	r3, [r3, #12]
 8001a5c:	4918      	ldr	r1, [pc, #96]	; (8001ac0 <HAL_RCC_ClockConfig+0x1b4>)
 8001a5e:	4313      	orrs	r3, r2
 8001a60:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	f003 0308 	and.w	r3, r3, #8
 8001a6a:	2b00      	cmp	r3, #0
 8001a6c:	d009      	beq.n	8001a82 <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001a6e:	4b14      	ldr	r3, [pc, #80]	; (8001ac0 <HAL_RCC_ClockConfig+0x1b4>)
 8001a70:	689b      	ldr	r3, [r3, #8]
 8001a72:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	691b      	ldr	r3, [r3, #16]
 8001a7a:	00db      	lsls	r3, r3, #3
 8001a7c:	4910      	ldr	r1, [pc, #64]	; (8001ac0 <HAL_RCC_ClockConfig+0x1b4>)
 8001a7e:	4313      	orrs	r3, r2
 8001a80:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001a82:	f000 f825 	bl	8001ad0 <HAL_RCC_GetSysClockFreq>
 8001a86:	4601      	mov	r1, r0
 8001a88:	4b0d      	ldr	r3, [pc, #52]	; (8001ac0 <HAL_RCC_ClockConfig+0x1b4>)
 8001a8a:	689b      	ldr	r3, [r3, #8]
 8001a8c:	091b      	lsrs	r3, r3, #4
 8001a8e:	f003 030f 	and.w	r3, r3, #15
 8001a92:	4a0c      	ldr	r2, [pc, #48]	; (8001ac4 <HAL_RCC_ClockConfig+0x1b8>)
 8001a94:	5cd3      	ldrb	r3, [r2, r3]
 8001a96:	f003 031f 	and.w	r3, r3, #31
 8001a9a:	fa21 f303 	lsr.w	r3, r1, r3
 8001a9e:	4a0a      	ldr	r2, [pc, #40]	; (8001ac8 <HAL_RCC_ClockConfig+0x1bc>)
 8001aa0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8001aa2:	4b0a      	ldr	r3, [pc, #40]	; (8001acc <HAL_RCC_ClockConfig+0x1c0>)
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	4618      	mov	r0, r3
 8001aa8:	f7ff f81e 	bl	8000ae8 <HAL_InitTick>
 8001aac:	4603      	mov	r3, r0
 8001aae:	72fb      	strb	r3, [r7, #11]

  return status;
 8001ab0:	7afb      	ldrb	r3, [r7, #11]
}
 8001ab2:	4618      	mov	r0, r3
 8001ab4:	3710      	adds	r7, #16
 8001ab6:	46bd      	mov	sp, r7
 8001ab8:	bd80      	pop	{r7, pc}
 8001aba:	bf00      	nop
 8001abc:	40022000 	.word	0x40022000
 8001ac0:	40021000 	.word	0x40021000
 8001ac4:	08003340 	.word	0x08003340
 8001ac8:	20000000 	.word	0x20000000
 8001acc:	20000004 	.word	0x20000004

08001ad0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001ad0:	b480      	push	{r7}
 8001ad2:	b089      	sub	sp, #36	; 0x24
 8001ad4:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8001ad6:	2300      	movs	r3, #0
 8001ad8:	61fb      	str	r3, [r7, #28]
 8001ada:	2300      	movs	r3, #0
 8001adc:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001ade:	4b3d      	ldr	r3, [pc, #244]	; (8001bd4 <HAL_RCC_GetSysClockFreq+0x104>)
 8001ae0:	689b      	ldr	r3, [r3, #8]
 8001ae2:	f003 030c 	and.w	r3, r3, #12
 8001ae6:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001ae8:	4b3a      	ldr	r3, [pc, #232]	; (8001bd4 <HAL_RCC_GetSysClockFreq+0x104>)
 8001aea:	68db      	ldr	r3, [r3, #12]
 8001aec:	f003 0303 	and.w	r3, r3, #3
 8001af0:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001af2:	693b      	ldr	r3, [r7, #16]
 8001af4:	2b00      	cmp	r3, #0
 8001af6:	d005      	beq.n	8001b04 <HAL_RCC_GetSysClockFreq+0x34>
 8001af8:	693b      	ldr	r3, [r7, #16]
 8001afa:	2b0c      	cmp	r3, #12
 8001afc:	d121      	bne.n	8001b42 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8001afe:	68fb      	ldr	r3, [r7, #12]
 8001b00:	2b01      	cmp	r3, #1
 8001b02:	d11e      	bne.n	8001b42 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8001b04:	4b33      	ldr	r3, [pc, #204]	; (8001bd4 <HAL_RCC_GetSysClockFreq+0x104>)
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	f003 0308 	and.w	r3, r3, #8
 8001b0c:	2b00      	cmp	r3, #0
 8001b0e:	d107      	bne.n	8001b20 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8001b10:	4b30      	ldr	r3, [pc, #192]	; (8001bd4 <HAL_RCC_GetSysClockFreq+0x104>)
 8001b12:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001b16:	0a1b      	lsrs	r3, r3, #8
 8001b18:	f003 030f 	and.w	r3, r3, #15
 8001b1c:	61fb      	str	r3, [r7, #28]
 8001b1e:	e005      	b.n	8001b2c <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8001b20:	4b2c      	ldr	r3, [pc, #176]	; (8001bd4 <HAL_RCC_GetSysClockFreq+0x104>)
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	091b      	lsrs	r3, r3, #4
 8001b26:	f003 030f 	and.w	r3, r3, #15
 8001b2a:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8001b2c:	4a2a      	ldr	r2, [pc, #168]	; (8001bd8 <HAL_RCC_GetSysClockFreq+0x108>)
 8001b2e:	69fb      	ldr	r3, [r7, #28]
 8001b30:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001b34:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001b36:	693b      	ldr	r3, [r7, #16]
 8001b38:	2b00      	cmp	r3, #0
 8001b3a:	d10d      	bne.n	8001b58 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8001b3c:	69fb      	ldr	r3, [r7, #28]
 8001b3e:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001b40:	e00a      	b.n	8001b58 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8001b42:	693b      	ldr	r3, [r7, #16]
 8001b44:	2b04      	cmp	r3, #4
 8001b46:	d102      	bne.n	8001b4e <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8001b48:	4b24      	ldr	r3, [pc, #144]	; (8001bdc <HAL_RCC_GetSysClockFreq+0x10c>)
 8001b4a:	61bb      	str	r3, [r7, #24]
 8001b4c:	e004      	b.n	8001b58 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8001b4e:	693b      	ldr	r3, [r7, #16]
 8001b50:	2b08      	cmp	r3, #8
 8001b52:	d101      	bne.n	8001b58 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001b54:	4b22      	ldr	r3, [pc, #136]	; (8001be0 <HAL_RCC_GetSysClockFreq+0x110>)
 8001b56:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8001b58:	693b      	ldr	r3, [r7, #16]
 8001b5a:	2b0c      	cmp	r3, #12
 8001b5c:	d133      	bne.n	8001bc6 <HAL_RCC_GetSysClockFreq+0xf6>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001b5e:	4b1d      	ldr	r3, [pc, #116]	; (8001bd4 <HAL_RCC_GetSysClockFreq+0x104>)
 8001b60:	68db      	ldr	r3, [r3, #12]
 8001b62:	f003 0303 	and.w	r3, r3, #3
 8001b66:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8001b68:	68bb      	ldr	r3, [r7, #8]
 8001b6a:	2b02      	cmp	r3, #2
 8001b6c:	d002      	beq.n	8001b74 <HAL_RCC_GetSysClockFreq+0xa4>
 8001b6e:	2b03      	cmp	r3, #3
 8001b70:	d003      	beq.n	8001b7a <HAL_RCC_GetSysClockFreq+0xaa>
 8001b72:	e005      	b.n	8001b80 <HAL_RCC_GetSysClockFreq+0xb0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8001b74:	4b19      	ldr	r3, [pc, #100]	; (8001bdc <HAL_RCC_GetSysClockFreq+0x10c>)
 8001b76:	617b      	str	r3, [r7, #20]
      break;
 8001b78:	e005      	b.n	8001b86 <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8001b7a:	4b19      	ldr	r3, [pc, #100]	; (8001be0 <HAL_RCC_GetSysClockFreq+0x110>)
 8001b7c:	617b      	str	r3, [r7, #20]
      break;
 8001b7e:	e002      	b.n	8001b86 <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8001b80:	69fb      	ldr	r3, [r7, #28]
 8001b82:	617b      	str	r3, [r7, #20]
      break;
 8001b84:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001b86:	4b13      	ldr	r3, [pc, #76]	; (8001bd4 <HAL_RCC_GetSysClockFreq+0x104>)
 8001b88:	68db      	ldr	r3, [r3, #12]
 8001b8a:	091b      	lsrs	r3, r3, #4
 8001b8c:	f003 0307 	and.w	r3, r3, #7
 8001b90:	3301      	adds	r3, #1
 8001b92:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8001b94:	4b0f      	ldr	r3, [pc, #60]	; (8001bd4 <HAL_RCC_GetSysClockFreq+0x104>)
 8001b96:	68db      	ldr	r3, [r3, #12]
 8001b98:	0a1b      	lsrs	r3, r3, #8
 8001b9a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001b9e:	697a      	ldr	r2, [r7, #20]
 8001ba0:	fb02 f203 	mul.w	r2, r2, r3
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	fbb2 f3f3 	udiv	r3, r2, r3
 8001baa:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001bac:	4b09      	ldr	r3, [pc, #36]	; (8001bd4 <HAL_RCC_GetSysClockFreq+0x104>)
 8001bae:	68db      	ldr	r3, [r3, #12]
 8001bb0:	0e5b      	lsrs	r3, r3, #25
 8001bb2:	f003 0303 	and.w	r3, r3, #3
 8001bb6:	3301      	adds	r3, #1
 8001bb8:	005b      	lsls	r3, r3, #1
 8001bba:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8001bbc:	697a      	ldr	r2, [r7, #20]
 8001bbe:	683b      	ldr	r3, [r7, #0]
 8001bc0:	fbb2 f3f3 	udiv	r3, r2, r3
 8001bc4:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8001bc6:	69bb      	ldr	r3, [r7, #24]
}
 8001bc8:	4618      	mov	r0, r3
 8001bca:	3724      	adds	r7, #36	; 0x24
 8001bcc:	46bd      	mov	sp, r7
 8001bce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bd2:	4770      	bx	lr
 8001bd4:	40021000 	.word	0x40021000
 8001bd8:	08003358 	.word	0x08003358
 8001bdc:	00f42400 	.word	0x00f42400
 8001be0:	007a1200 	.word	0x007a1200

08001be4 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001be4:	b480      	push	{r7}
 8001be6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001be8:	4b03      	ldr	r3, [pc, #12]	; (8001bf8 <HAL_RCC_GetHCLKFreq+0x14>)
 8001bea:	681b      	ldr	r3, [r3, #0]
}
 8001bec:	4618      	mov	r0, r3
 8001bee:	46bd      	mov	sp, r7
 8001bf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bf4:	4770      	bx	lr
 8001bf6:	bf00      	nop
 8001bf8:	20000000 	.word	0x20000000

08001bfc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001bfc:	b580      	push	{r7, lr}
 8001bfe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8001c00:	f7ff fff0 	bl	8001be4 <HAL_RCC_GetHCLKFreq>
 8001c04:	4601      	mov	r1, r0
 8001c06:	4b06      	ldr	r3, [pc, #24]	; (8001c20 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001c08:	689b      	ldr	r3, [r3, #8]
 8001c0a:	0a1b      	lsrs	r3, r3, #8
 8001c0c:	f003 0307 	and.w	r3, r3, #7
 8001c10:	4a04      	ldr	r2, [pc, #16]	; (8001c24 <HAL_RCC_GetPCLK1Freq+0x28>)
 8001c12:	5cd3      	ldrb	r3, [r2, r3]
 8001c14:	f003 031f 	and.w	r3, r3, #31
 8001c18:	fa21 f303 	lsr.w	r3, r1, r3
}
 8001c1c:	4618      	mov	r0, r3
 8001c1e:	bd80      	pop	{r7, pc}
 8001c20:	40021000 	.word	0x40021000
 8001c24:	08003350 	.word	0x08003350

08001c28 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001c28:	b580      	push	{r7, lr}
 8001c2a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8001c2c:	f7ff ffda 	bl	8001be4 <HAL_RCC_GetHCLKFreq>
 8001c30:	4601      	mov	r1, r0
 8001c32:	4b06      	ldr	r3, [pc, #24]	; (8001c4c <HAL_RCC_GetPCLK2Freq+0x24>)
 8001c34:	689b      	ldr	r3, [r3, #8]
 8001c36:	0adb      	lsrs	r3, r3, #11
 8001c38:	f003 0307 	and.w	r3, r3, #7
 8001c3c:	4a04      	ldr	r2, [pc, #16]	; (8001c50 <HAL_RCC_GetPCLK2Freq+0x28>)
 8001c3e:	5cd3      	ldrb	r3, [r2, r3]
 8001c40:	f003 031f 	and.w	r3, r3, #31
 8001c44:	fa21 f303 	lsr.w	r3, r1, r3
}
 8001c48:	4618      	mov	r0, r3
 8001c4a:	bd80      	pop	{r7, pc}
 8001c4c:	40021000 	.word	0x40021000
 8001c50:	08003350 	.word	0x08003350

08001c54 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8001c54:	b580      	push	{r7, lr}
 8001c56:	b086      	sub	sp, #24
 8001c58:	af00      	add	r7, sp, #0
 8001c5a:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8001c5c:	2300      	movs	r3, #0
 8001c5e:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8001c60:	4b2a      	ldr	r3, [pc, #168]	; (8001d0c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001c62:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c64:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c68:	2b00      	cmp	r3, #0
 8001c6a:	d003      	beq.n	8001c74 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8001c6c:	f7ff fa3a 	bl	80010e4 <HAL_PWREx_GetVoltageRange>
 8001c70:	6178      	str	r0, [r7, #20]
 8001c72:	e014      	b.n	8001c9e <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8001c74:	4b25      	ldr	r3, [pc, #148]	; (8001d0c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001c76:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c78:	4a24      	ldr	r2, [pc, #144]	; (8001d0c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001c7a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001c7e:	6593      	str	r3, [r2, #88]	; 0x58
 8001c80:	4b22      	ldr	r3, [pc, #136]	; (8001d0c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001c82:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c84:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c88:	60fb      	str	r3, [r7, #12]
 8001c8a:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8001c8c:	f7ff fa2a 	bl	80010e4 <HAL_PWREx_GetVoltageRange>
 8001c90:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8001c92:	4b1e      	ldr	r3, [pc, #120]	; (8001d0c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001c94:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c96:	4a1d      	ldr	r2, [pc, #116]	; (8001d0c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001c98:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001c9c:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001c9e:	697b      	ldr	r3, [r7, #20]
 8001ca0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001ca4:	d10b      	bne.n	8001cbe <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	2b80      	cmp	r3, #128	; 0x80
 8001caa:	d919      	bls.n	8001ce0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	2ba0      	cmp	r3, #160	; 0xa0
 8001cb0:	d902      	bls.n	8001cb8 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8001cb2:	2302      	movs	r3, #2
 8001cb4:	613b      	str	r3, [r7, #16]
 8001cb6:	e013      	b.n	8001ce0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001cb8:	2301      	movs	r3, #1
 8001cba:	613b      	str	r3, [r7, #16]
 8001cbc:	e010      	b.n	8001ce0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	2b80      	cmp	r3, #128	; 0x80
 8001cc2:	d902      	bls.n	8001cca <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8001cc4:	2303      	movs	r3, #3
 8001cc6:	613b      	str	r3, [r7, #16]
 8001cc8:	e00a      	b.n	8001ce0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	2b80      	cmp	r3, #128	; 0x80
 8001cce:	d102      	bne.n	8001cd6 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8001cd0:	2302      	movs	r3, #2
 8001cd2:	613b      	str	r3, [r7, #16]
 8001cd4:	e004      	b.n	8001ce0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	2b70      	cmp	r3, #112	; 0x70
 8001cda:	d101      	bne.n	8001ce0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001cdc:	2301      	movs	r3, #1
 8001cde:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8001ce0:	4b0b      	ldr	r3, [pc, #44]	; (8001d10 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	f023 0207 	bic.w	r2, r3, #7
 8001ce8:	4909      	ldr	r1, [pc, #36]	; (8001d10 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001cea:	693b      	ldr	r3, [r7, #16]
 8001cec:	4313      	orrs	r3, r2
 8001cee:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8001cf0:	4b07      	ldr	r3, [pc, #28]	; (8001d10 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	f003 0307 	and.w	r3, r3, #7
 8001cf8:	693a      	ldr	r2, [r7, #16]
 8001cfa:	429a      	cmp	r2, r3
 8001cfc:	d001      	beq.n	8001d02 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8001cfe:	2301      	movs	r3, #1
 8001d00:	e000      	b.n	8001d04 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8001d02:	2300      	movs	r3, #0
}
 8001d04:	4618      	mov	r0, r3
 8001d06:	3718      	adds	r7, #24
 8001d08:	46bd      	mov	sp, r7
 8001d0a:	bd80      	pop	{r7, pc}
 8001d0c:	40021000 	.word	0x40021000
 8001d10:	40022000 	.word	0x40022000

08001d14 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001d14:	b580      	push	{r7, lr}
 8001d16:	b086      	sub	sp, #24
 8001d18:	af00      	add	r7, sp, #0
 8001d1a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8001d1c:	2300      	movs	r3, #0
 8001d1e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8001d20:	2300      	movs	r3, #0
 8001d22:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001d2c:	2b00      	cmp	r3, #0
 8001d2e:	d03f      	beq.n	8001db0 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8001d34:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001d38:	d01c      	beq.n	8001d74 <HAL_RCCEx_PeriphCLKConfig+0x60>
 8001d3a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001d3e:	d802      	bhi.n	8001d46 <HAL_RCCEx_PeriphCLKConfig+0x32>
 8001d40:	2b00      	cmp	r3, #0
 8001d42:	d00e      	beq.n	8001d62 <HAL_RCCEx_PeriphCLKConfig+0x4e>
 8001d44:	e01f      	b.n	8001d86 <HAL_RCCEx_PeriphCLKConfig+0x72>
 8001d46:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8001d4a:	d003      	beq.n	8001d54 <HAL_RCCEx_PeriphCLKConfig+0x40>
 8001d4c:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8001d50:	d01c      	beq.n	8001d8c <HAL_RCCEx_PeriphCLKConfig+0x78>
 8001d52:	e018      	b.n	8001d86 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8001d54:	4b85      	ldr	r3, [pc, #532]	; (8001f6c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8001d56:	68db      	ldr	r3, [r3, #12]
 8001d58:	4a84      	ldr	r2, [pc, #528]	; (8001f6c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8001d5a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001d5e:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8001d60:	e015      	b.n	8001d8e <HAL_RCCEx_PeriphCLKConfig+0x7a>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	3304      	adds	r3, #4
 8001d66:	2100      	movs	r1, #0
 8001d68:	4618      	mov	r0, r3
 8001d6a:	f000 fab9 	bl	80022e0 <RCCEx_PLLSAI1_Config>
 8001d6e:	4603      	mov	r3, r0
 8001d70:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8001d72:	e00c      	b.n	8001d8e <HAL_RCCEx_PeriphCLKConfig+0x7a>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	3320      	adds	r3, #32
 8001d78:	2100      	movs	r1, #0
 8001d7a:	4618      	mov	r0, r3
 8001d7c:	f000 fba0 	bl	80024c0 <RCCEx_PLLSAI2_Config>
 8001d80:	4603      	mov	r3, r0
 8001d82:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8001d84:	e003      	b.n	8001d8e <HAL_RCCEx_PeriphCLKConfig+0x7a>
#endif /* STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8001d86:	2301      	movs	r3, #1
 8001d88:	74fb      	strb	r3, [r7, #19]
      break;
 8001d8a:	e000      	b.n	8001d8e <HAL_RCCEx_PeriphCLKConfig+0x7a>
      break;
 8001d8c:	bf00      	nop
    }

    if(ret == HAL_OK)
 8001d8e:	7cfb      	ldrb	r3, [r7, #19]
 8001d90:	2b00      	cmp	r3, #0
 8001d92:	d10b      	bne.n	8001dac <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8001d94:	4b75      	ldr	r3, [pc, #468]	; (8001f6c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8001d96:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001d9a:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8001da2:	4972      	ldr	r1, [pc, #456]	; (8001f6c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8001da4:	4313      	orrs	r3, r2
 8001da6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8001daa:	e001      	b.n	8001db0 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8001dac:	7cfb      	ldrb	r3, [r7, #19]
 8001dae:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001db8:	2b00      	cmp	r3, #0
 8001dba:	d03f      	beq.n	8001e3c <HAL_RCCEx_PeriphCLKConfig+0x128>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8001dc0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001dc4:	d01c      	beq.n	8001e00 <HAL_RCCEx_PeriphCLKConfig+0xec>
 8001dc6:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001dca:	d802      	bhi.n	8001dd2 <HAL_RCCEx_PeriphCLKConfig+0xbe>
 8001dcc:	2b00      	cmp	r3, #0
 8001dce:	d00e      	beq.n	8001dee <HAL_RCCEx_PeriphCLKConfig+0xda>
 8001dd0:	e01f      	b.n	8001e12 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8001dd2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8001dd6:	d003      	beq.n	8001de0 <HAL_RCCEx_PeriphCLKConfig+0xcc>
 8001dd8:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8001ddc:	d01c      	beq.n	8001e18 <HAL_RCCEx_PeriphCLKConfig+0x104>
 8001dde:	e018      	b.n	8001e12 <HAL_RCCEx_PeriphCLKConfig+0xfe>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8001de0:	4b62      	ldr	r3, [pc, #392]	; (8001f6c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8001de2:	68db      	ldr	r3, [r3, #12]
 8001de4:	4a61      	ldr	r2, [pc, #388]	; (8001f6c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8001de6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001dea:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8001dec:	e015      	b.n	8001e1a <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	3304      	adds	r3, #4
 8001df2:	2100      	movs	r1, #0
 8001df4:	4618      	mov	r0, r3
 8001df6:	f000 fa73 	bl	80022e0 <RCCEx_PLLSAI1_Config>
 8001dfa:	4603      	mov	r3, r0
 8001dfc:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8001dfe:	e00c      	b.n	8001e1a <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	3320      	adds	r3, #32
 8001e04:	2100      	movs	r1, #0
 8001e06:	4618      	mov	r0, r3
 8001e08:	f000 fb5a 	bl	80024c0 <RCCEx_PLLSAI2_Config>
 8001e0c:	4603      	mov	r3, r0
 8001e0e:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8001e10:	e003      	b.n	8001e1a <HAL_RCCEx_PeriphCLKConfig+0x106>
#endif /* STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8001e12:	2301      	movs	r3, #1
 8001e14:	74fb      	strb	r3, [r7, #19]
      break;
 8001e16:	e000      	b.n	8001e1a <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 8001e18:	bf00      	nop
    }

    if(ret == HAL_OK)
 8001e1a:	7cfb      	ldrb	r3, [r7, #19]
 8001e1c:	2b00      	cmp	r3, #0
 8001e1e:	d10b      	bne.n	8001e38 <HAL_RCCEx_PeriphCLKConfig+0x124>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8001e20:	4b52      	ldr	r3, [pc, #328]	; (8001f6c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8001e22:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001e26:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8001e2e:	494f      	ldr	r1, [pc, #316]	; (8001f6c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8001e30:	4313      	orrs	r3, r2
 8001e32:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8001e36:	e001      	b.n	8001e3c <HAL_RCCEx_PeriphCLKConfig+0x128>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8001e38:	7cfb      	ldrb	r3, [r7, #19]
 8001e3a:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e44:	2b00      	cmp	r3, #0
 8001e46:	f000 80a0 	beq.w	8001f8a <HAL_RCCEx_PeriphCLKConfig+0x276>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001e4a:	2300      	movs	r3, #0
 8001e4c:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8001e4e:	4b47      	ldr	r3, [pc, #284]	; (8001f6c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8001e50:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e52:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e56:	2b00      	cmp	r3, #0
 8001e58:	d101      	bne.n	8001e5e <HAL_RCCEx_PeriphCLKConfig+0x14a>
 8001e5a:	2301      	movs	r3, #1
 8001e5c:	e000      	b.n	8001e60 <HAL_RCCEx_PeriphCLKConfig+0x14c>
 8001e5e:	2300      	movs	r3, #0
 8001e60:	2b00      	cmp	r3, #0
 8001e62:	d00d      	beq.n	8001e80 <HAL_RCCEx_PeriphCLKConfig+0x16c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001e64:	4b41      	ldr	r3, [pc, #260]	; (8001f6c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8001e66:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e68:	4a40      	ldr	r2, [pc, #256]	; (8001f6c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8001e6a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001e6e:	6593      	str	r3, [r2, #88]	; 0x58
 8001e70:	4b3e      	ldr	r3, [pc, #248]	; (8001f6c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8001e72:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e74:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e78:	60bb      	str	r3, [r7, #8]
 8001e7a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001e7c:	2301      	movs	r3, #1
 8001e7e:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001e80:	4b3b      	ldr	r3, [pc, #236]	; (8001f70 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	4a3a      	ldr	r2, [pc, #232]	; (8001f70 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8001e86:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001e8a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8001e8c:	f7fe fe78 	bl	8000b80 <HAL_GetTick>
 8001e90:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8001e92:	e009      	b.n	8001ea8 <HAL_RCCEx_PeriphCLKConfig+0x194>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001e94:	f7fe fe74 	bl	8000b80 <HAL_GetTick>
 8001e98:	4602      	mov	r2, r0
 8001e9a:	68fb      	ldr	r3, [r7, #12]
 8001e9c:	1ad3      	subs	r3, r2, r3
 8001e9e:	2b02      	cmp	r3, #2
 8001ea0:	d902      	bls.n	8001ea8 <HAL_RCCEx_PeriphCLKConfig+0x194>
      {
        ret = HAL_TIMEOUT;
 8001ea2:	2303      	movs	r3, #3
 8001ea4:	74fb      	strb	r3, [r7, #19]
        break;
 8001ea6:	e005      	b.n	8001eb4 <HAL_RCCEx_PeriphCLKConfig+0x1a0>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8001ea8:	4b31      	ldr	r3, [pc, #196]	; (8001f70 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001eb0:	2b00      	cmp	r3, #0
 8001eb2:	d0ef      	beq.n	8001e94 <HAL_RCCEx_PeriphCLKConfig+0x180>
      }
    }

    if(ret == HAL_OK)
 8001eb4:	7cfb      	ldrb	r3, [r7, #19]
 8001eb6:	2b00      	cmp	r3, #0
 8001eb8:	d15c      	bne.n	8001f74 <HAL_RCCEx_PeriphCLKConfig+0x260>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8001eba:	4b2c      	ldr	r3, [pc, #176]	; (8001f6c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8001ebc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001ec0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001ec4:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8001ec6:	697b      	ldr	r3, [r7, #20]
 8001ec8:	2b00      	cmp	r3, #0
 8001eca:	d01f      	beq.n	8001f0c <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001ed2:	697a      	ldr	r2, [r7, #20]
 8001ed4:	429a      	cmp	r2, r3
 8001ed6:	d019      	beq.n	8001f0c <HAL_RCCEx_PeriphCLKConfig+0x1f8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8001ed8:	4b24      	ldr	r3, [pc, #144]	; (8001f6c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8001eda:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001ede:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001ee2:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8001ee4:	4b21      	ldr	r3, [pc, #132]	; (8001f6c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8001ee6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001eea:	4a20      	ldr	r2, [pc, #128]	; (8001f6c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8001eec:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001ef0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8001ef4:	4b1d      	ldr	r3, [pc, #116]	; (8001f6c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8001ef6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001efa:	4a1c      	ldr	r2, [pc, #112]	; (8001f6c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8001efc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001f00:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8001f04:	4a19      	ldr	r2, [pc, #100]	; (8001f6c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8001f06:	697b      	ldr	r3, [r7, #20]
 8001f08:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8001f0c:	697b      	ldr	r3, [r7, #20]
 8001f0e:	f003 0301 	and.w	r3, r3, #1
 8001f12:	2b00      	cmp	r3, #0
 8001f14:	d016      	beq.n	8001f44 <HAL_RCCEx_PeriphCLKConfig+0x230>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f16:	f7fe fe33 	bl	8000b80 <HAL_GetTick>
 8001f1a:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001f1c:	e00b      	b.n	8001f36 <HAL_RCCEx_PeriphCLKConfig+0x222>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001f1e:	f7fe fe2f 	bl	8000b80 <HAL_GetTick>
 8001f22:	4602      	mov	r2, r0
 8001f24:	68fb      	ldr	r3, [r7, #12]
 8001f26:	1ad3      	subs	r3, r2, r3
 8001f28:	f241 3288 	movw	r2, #5000	; 0x1388
 8001f2c:	4293      	cmp	r3, r2
 8001f2e:	d902      	bls.n	8001f36 <HAL_RCCEx_PeriphCLKConfig+0x222>
          {
            ret = HAL_TIMEOUT;
 8001f30:	2303      	movs	r3, #3
 8001f32:	74fb      	strb	r3, [r7, #19]
            break;
 8001f34:	e006      	b.n	8001f44 <HAL_RCCEx_PeriphCLKConfig+0x230>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001f36:	4b0d      	ldr	r3, [pc, #52]	; (8001f6c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8001f38:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001f3c:	f003 0302 	and.w	r3, r3, #2
 8001f40:	2b00      	cmp	r3, #0
 8001f42:	d0ec      	beq.n	8001f1e <HAL_RCCEx_PeriphCLKConfig+0x20a>
          }
        }
      }

      if(ret == HAL_OK)
 8001f44:	7cfb      	ldrb	r3, [r7, #19]
 8001f46:	2b00      	cmp	r3, #0
 8001f48:	d10c      	bne.n	8001f64 <HAL_RCCEx_PeriphCLKConfig+0x250>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001f4a:	4b08      	ldr	r3, [pc, #32]	; (8001f6c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8001f4c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001f50:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001f5a:	4904      	ldr	r1, [pc, #16]	; (8001f6c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8001f5c:	4313      	orrs	r3, r2
 8001f5e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8001f62:	e009      	b.n	8001f78 <HAL_RCCEx_PeriphCLKConfig+0x264>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8001f64:	7cfb      	ldrb	r3, [r7, #19]
 8001f66:	74bb      	strb	r3, [r7, #18]
 8001f68:	e006      	b.n	8001f78 <HAL_RCCEx_PeriphCLKConfig+0x264>
 8001f6a:	bf00      	nop
 8001f6c:	40021000 	.word	0x40021000
 8001f70:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8001f74:	7cfb      	ldrb	r3, [r7, #19]
 8001f76:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001f78:	7c7b      	ldrb	r3, [r7, #17]
 8001f7a:	2b01      	cmp	r3, #1
 8001f7c:	d105      	bne.n	8001f8a <HAL_RCCEx_PeriphCLKConfig+0x276>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001f7e:	4b9e      	ldr	r3, [pc, #632]	; (80021f8 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8001f80:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f82:	4a9d      	ldr	r2, [pc, #628]	; (80021f8 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8001f84:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001f88:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	f003 0301 	and.w	r3, r3, #1
 8001f92:	2b00      	cmp	r3, #0
 8001f94:	d00a      	beq.n	8001fac <HAL_RCCEx_PeriphCLKConfig+0x298>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8001f96:	4b98      	ldr	r3, [pc, #608]	; (80021f8 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8001f98:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001f9c:	f023 0203 	bic.w	r2, r3, #3
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001fa4:	4994      	ldr	r1, [pc, #592]	; (80021f8 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8001fa6:	4313      	orrs	r3, r2
 8001fa8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	f003 0302 	and.w	r3, r3, #2
 8001fb4:	2b00      	cmp	r3, #0
 8001fb6:	d00a      	beq.n	8001fce <HAL_RCCEx_PeriphCLKConfig+0x2ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8001fb8:	4b8f      	ldr	r3, [pc, #572]	; (80021f8 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8001fba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001fbe:	f023 020c 	bic.w	r2, r3, #12
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001fc6:	498c      	ldr	r1, [pc, #560]	; (80021f8 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8001fc8:	4313      	orrs	r3, r2
 8001fca:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	f003 0304 	and.w	r3, r3, #4
 8001fd6:	2b00      	cmp	r3, #0
 8001fd8:	d00a      	beq.n	8001ff0 <HAL_RCCEx_PeriphCLKConfig+0x2dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8001fda:	4b87      	ldr	r3, [pc, #540]	; (80021f8 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8001fdc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001fe0:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fe8:	4983      	ldr	r1, [pc, #524]	; (80021f8 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8001fea:	4313      	orrs	r3, r2
 8001fec:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	f003 0308 	and.w	r3, r3, #8
 8001ff8:	2b00      	cmp	r3, #0
 8001ffa:	d00a      	beq.n	8002012 <HAL_RCCEx_PeriphCLKConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8001ffc:	4b7e      	ldr	r3, [pc, #504]	; (80021f8 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8001ffe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002002:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800200a:	497b      	ldr	r1, [pc, #492]	; (80021f8 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800200c:	4313      	orrs	r3, r2
 800200e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	f003 0310 	and.w	r3, r3, #16
 800201a:	2b00      	cmp	r3, #0
 800201c:	d00a      	beq.n	8002034 <HAL_RCCEx_PeriphCLKConfig+0x320>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800201e:	4b76      	ldr	r3, [pc, #472]	; (80021f8 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002020:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002024:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800202c:	4972      	ldr	r1, [pc, #456]	; (80021f8 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800202e:	4313      	orrs	r3, r2
 8002030:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	f003 0320 	and.w	r3, r3, #32
 800203c:	2b00      	cmp	r3, #0
 800203e:	d00a      	beq.n	8002056 <HAL_RCCEx_PeriphCLKConfig+0x342>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002040:	4b6d      	ldr	r3, [pc, #436]	; (80021f8 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002042:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002046:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800204e:	496a      	ldr	r1, [pc, #424]	; (80021f8 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002050:	4313      	orrs	r3, r2
 8002052:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800205e:	2b00      	cmp	r3, #0
 8002060:	d00a      	beq.n	8002078 <HAL_RCCEx_PeriphCLKConfig+0x364>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002062:	4b65      	ldr	r3, [pc, #404]	; (80021f8 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002064:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002068:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002070:	4961      	ldr	r1, [pc, #388]	; (80021f8 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002072:	4313      	orrs	r3, r2
 8002074:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002080:	2b00      	cmp	r3, #0
 8002082:	d00a      	beq.n	800209a <HAL_RCCEx_PeriphCLKConfig+0x386>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002084:	4b5c      	ldr	r3, [pc, #368]	; (80021f8 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002086:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800208a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002092:	4959      	ldr	r1, [pc, #356]	; (80021f8 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002094:	4313      	orrs	r3, r2
 8002096:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80020a2:	2b00      	cmp	r3, #0
 80020a4:	d00a      	beq.n	80020bc <HAL_RCCEx_PeriphCLKConfig+0x3a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80020a6:	4b54      	ldr	r3, [pc, #336]	; (80021f8 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80020a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80020ac:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80020b4:	4950      	ldr	r1, [pc, #320]	; (80021f8 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80020b6:	4313      	orrs	r3, r2
 80020b8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80020c4:	2b00      	cmp	r3, #0
 80020c6:	d00a      	beq.n	80020de <HAL_RCCEx_PeriphCLKConfig+0x3ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80020c8:	4b4b      	ldr	r3, [pc, #300]	; (80021f8 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80020ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80020ce:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80020d6:	4948      	ldr	r1, [pc, #288]	; (80021f8 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80020d8:	4313      	orrs	r3, r2
 80020da:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80020e6:	2b00      	cmp	r3, #0
 80020e8:	d00a      	beq.n	8002100 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80020ea:	4b43      	ldr	r3, [pc, #268]	; (80021f8 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80020ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80020f0:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80020f8:	493f      	ldr	r1, [pc, #252]	; (80021f8 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80020fa:	4313      	orrs	r3, r2
 80020fc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002108:	2b00      	cmp	r3, #0
 800210a:	d028      	beq.n	800215e <HAL_RCCEx_PeriphCLKConfig+0x44a>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800210c:	4b3a      	ldr	r3, [pc, #232]	; (80021f8 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800210e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002112:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800211a:	4937      	ldr	r1, [pc, #220]	; (80021f8 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800211c:	4313      	orrs	r3, r2
 800211e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002126:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800212a:	d106      	bne.n	800213a <HAL_RCCEx_PeriphCLKConfig+0x426>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800212c:	4b32      	ldr	r3, [pc, #200]	; (80021f8 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800212e:	68db      	ldr	r3, [r3, #12]
 8002130:	4a31      	ldr	r2, [pc, #196]	; (80021f8 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002132:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002136:	60d3      	str	r3, [r2, #12]
 8002138:	e011      	b.n	800215e <HAL_RCCEx_PeriphCLKConfig+0x44a>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800213e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002142:	d10c      	bne.n	800215e <HAL_RCCEx_PeriphCLKConfig+0x44a>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	3304      	adds	r3, #4
 8002148:	2101      	movs	r1, #1
 800214a:	4618      	mov	r0, r3
 800214c:	f000 f8c8 	bl	80022e0 <RCCEx_PLLSAI1_Config>
 8002150:	4603      	mov	r3, r0
 8002152:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8002154:	7cfb      	ldrb	r3, [r7, #19]
 8002156:	2b00      	cmp	r3, #0
 8002158:	d001      	beq.n	800215e <HAL_RCCEx_PeriphCLKConfig+0x44a>
        {
          /* set overall return value */
          status = ret;
 800215a:	7cfb      	ldrb	r3, [r7, #19]
 800215c:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002166:	2b00      	cmp	r3, #0
 8002168:	d028      	beq.n	80021bc <HAL_RCCEx_PeriphCLKConfig+0x4a8>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800216a:	4b23      	ldr	r3, [pc, #140]	; (80021f8 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800216c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002170:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002178:	491f      	ldr	r1, [pc, #124]	; (80021f8 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800217a:	4313      	orrs	r3, r2
 800217c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002184:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002188:	d106      	bne.n	8002198 <HAL_RCCEx_PeriphCLKConfig+0x484>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800218a:	4b1b      	ldr	r3, [pc, #108]	; (80021f8 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800218c:	68db      	ldr	r3, [r3, #12]
 800218e:	4a1a      	ldr	r2, [pc, #104]	; (80021f8 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002190:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002194:	60d3      	str	r3, [r2, #12]
 8002196:	e011      	b.n	80021bc <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800219c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80021a0:	d10c      	bne.n	80021bc <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	3304      	adds	r3, #4
 80021a6:	2101      	movs	r1, #1
 80021a8:	4618      	mov	r0, r3
 80021aa:	f000 f899 	bl	80022e0 <RCCEx_PLLSAI1_Config>
 80021ae:	4603      	mov	r3, r0
 80021b0:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80021b2:	7cfb      	ldrb	r3, [r7, #19]
 80021b4:	2b00      	cmp	r3, #0
 80021b6:	d001      	beq.n	80021bc <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* set overall return value */
        status = ret;
 80021b8:	7cfb      	ldrb	r3, [r7, #19]
 80021ba:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80021c4:	2b00      	cmp	r3, #0
 80021c6:	d02b      	beq.n	8002220 <HAL_RCCEx_PeriphCLKConfig+0x50c>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80021c8:	4b0b      	ldr	r3, [pc, #44]	; (80021f8 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80021ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80021ce:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80021d6:	4908      	ldr	r1, [pc, #32]	; (80021f8 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80021d8:	4313      	orrs	r3, r2
 80021da:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80021e2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80021e6:	d109      	bne.n	80021fc <HAL_RCCEx_PeriphCLKConfig+0x4e8>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80021e8:	4b03      	ldr	r3, [pc, #12]	; (80021f8 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80021ea:	68db      	ldr	r3, [r3, #12]
 80021ec:	4a02      	ldr	r2, [pc, #8]	; (80021f8 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80021ee:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80021f2:	60d3      	str	r3, [r2, #12]
 80021f4:	e014      	b.n	8002220 <HAL_RCCEx_PeriphCLKConfig+0x50c>
 80021f6:	bf00      	nop
 80021f8:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002200:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002204:	d10c      	bne.n	8002220 <HAL_RCCEx_PeriphCLKConfig+0x50c>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	3304      	adds	r3, #4
 800220a:	2101      	movs	r1, #1
 800220c:	4618      	mov	r0, r3
 800220e:	f000 f867 	bl	80022e0 <RCCEx_PLLSAI1_Config>
 8002212:	4603      	mov	r3, r0
 8002214:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002216:	7cfb      	ldrb	r3, [r7, #19]
 8002218:	2b00      	cmp	r3, #0
 800221a:	d001      	beq.n	8002220 <HAL_RCCEx_PeriphCLKConfig+0x50c>
      {
        /* set overall return value */
        status = ret;
 800221c:	7cfb      	ldrb	r3, [r7, #19]
 800221e:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002228:	2b00      	cmp	r3, #0
 800222a:	d02f      	beq.n	800228c <HAL_RCCEx_PeriphCLKConfig+0x578>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800222c:	4b2b      	ldr	r3, [pc, #172]	; (80022dc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800222e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002232:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800223a:	4928      	ldr	r1, [pc, #160]	; (80022dc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800223c:	4313      	orrs	r3, r2
 800223e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002246:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800224a:	d10d      	bne.n	8002268 <HAL_RCCEx_PeriphCLKConfig+0x554>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	3304      	adds	r3, #4
 8002250:	2102      	movs	r1, #2
 8002252:	4618      	mov	r0, r3
 8002254:	f000 f844 	bl	80022e0 <RCCEx_PLLSAI1_Config>
 8002258:	4603      	mov	r3, r0
 800225a:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800225c:	7cfb      	ldrb	r3, [r7, #19]
 800225e:	2b00      	cmp	r3, #0
 8002260:	d014      	beq.n	800228c <HAL_RCCEx_PeriphCLKConfig+0x578>
      {
        /* set overall return value */
        status = ret;
 8002262:	7cfb      	ldrb	r3, [r7, #19]
 8002264:	74bb      	strb	r3, [r7, #18]
 8002266:	e011      	b.n	800228c <HAL_RCCEx_PeriphCLKConfig+0x578>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800226c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002270:	d10c      	bne.n	800228c <HAL_RCCEx_PeriphCLKConfig+0x578>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	3320      	adds	r3, #32
 8002276:	2102      	movs	r1, #2
 8002278:	4618      	mov	r0, r3
 800227a:	f000 f921 	bl	80024c0 <RCCEx_PLLSAI2_Config>
 800227e:	4603      	mov	r3, r0
 8002280:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002282:	7cfb      	ldrb	r3, [r7, #19]
 8002284:	2b00      	cmp	r3, #0
 8002286:	d001      	beq.n	800228c <HAL_RCCEx_PeriphCLKConfig+0x578>
      {
        /* set overall return value */
        status = ret;
 8002288:	7cfb      	ldrb	r3, [r7, #19]
 800228a:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002294:	2b00      	cmp	r3, #0
 8002296:	d00a      	beq.n	80022ae <HAL_RCCEx_PeriphCLKConfig+0x59a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8002298:	4b10      	ldr	r3, [pc, #64]	; (80022dc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800229a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800229e:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80022a6:	490d      	ldr	r1, [pc, #52]	; (80022dc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80022a8:	4313      	orrs	r3, r2
 80022aa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80022b6:	2b00      	cmp	r3, #0
 80022b8:	d00b      	beq.n	80022d2 <HAL_RCCEx_PeriphCLKConfig+0x5be>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80022ba:	4b08      	ldr	r3, [pc, #32]	; (80022dc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80022bc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80022c0:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80022ca:	4904      	ldr	r1, [pc, #16]	; (80022dc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80022cc:	4313      	orrs	r3, r2
 80022ce:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 80022d2:	7cbb      	ldrb	r3, [r7, #18]
}
 80022d4:	4618      	mov	r0, r3
 80022d6:	3718      	adds	r7, #24
 80022d8:	46bd      	mov	sp, r7
 80022da:	bd80      	pop	{r7, pc}
 80022dc:	40021000 	.word	0x40021000

080022e0 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80022e0:	b580      	push	{r7, lr}
 80022e2:	b084      	sub	sp, #16
 80022e4:	af00      	add	r7, sp, #0
 80022e6:	6078      	str	r0, [r7, #4]
 80022e8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80022ea:	2300      	movs	r3, #0
 80022ec:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80022ee:	4b73      	ldr	r3, [pc, #460]	; (80024bc <RCCEx_PLLSAI1_Config+0x1dc>)
 80022f0:	68db      	ldr	r3, [r3, #12]
 80022f2:	f003 0303 	and.w	r3, r3, #3
 80022f6:	2b00      	cmp	r3, #0
 80022f8:	d018      	beq.n	800232c <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80022fa:	4b70      	ldr	r3, [pc, #448]	; (80024bc <RCCEx_PLLSAI1_Config+0x1dc>)
 80022fc:	68db      	ldr	r3, [r3, #12]
 80022fe:	f003 0203 	and.w	r2, r3, #3
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	429a      	cmp	r2, r3
 8002308:	d10d      	bne.n	8002326 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	681b      	ldr	r3, [r3, #0]
       ||
 800230e:	2b00      	cmp	r3, #0
 8002310:	d009      	beq.n	8002326 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8002312:	4b6a      	ldr	r3, [pc, #424]	; (80024bc <RCCEx_PLLSAI1_Config+0x1dc>)
 8002314:	68db      	ldr	r3, [r3, #12]
 8002316:	091b      	lsrs	r3, r3, #4
 8002318:	f003 0307 	and.w	r3, r3, #7
 800231c:	1c5a      	adds	r2, r3, #1
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	685b      	ldr	r3, [r3, #4]
       ||
 8002322:	429a      	cmp	r2, r3
 8002324:	d044      	beq.n	80023b0 <RCCEx_PLLSAI1_Config+0xd0>
#endif
      )
    {
      status = HAL_ERROR;
 8002326:	2301      	movs	r3, #1
 8002328:	73fb      	strb	r3, [r7, #15]
 800232a:	e041      	b.n	80023b0 <RCCEx_PLLSAI1_Config+0xd0>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	2b02      	cmp	r3, #2
 8002332:	d00c      	beq.n	800234e <RCCEx_PLLSAI1_Config+0x6e>
 8002334:	2b03      	cmp	r3, #3
 8002336:	d013      	beq.n	8002360 <RCCEx_PLLSAI1_Config+0x80>
 8002338:	2b01      	cmp	r3, #1
 800233a:	d120      	bne.n	800237e <RCCEx_PLLSAI1_Config+0x9e>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800233c:	4b5f      	ldr	r3, [pc, #380]	; (80024bc <RCCEx_PLLSAI1_Config+0x1dc>)
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	f003 0302 	and.w	r3, r3, #2
 8002344:	2b00      	cmp	r3, #0
 8002346:	d11d      	bne.n	8002384 <RCCEx_PLLSAI1_Config+0xa4>
      {
        status = HAL_ERROR;
 8002348:	2301      	movs	r3, #1
 800234a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800234c:	e01a      	b.n	8002384 <RCCEx_PLLSAI1_Config+0xa4>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800234e:	4b5b      	ldr	r3, [pc, #364]	; (80024bc <RCCEx_PLLSAI1_Config+0x1dc>)
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002356:	2b00      	cmp	r3, #0
 8002358:	d116      	bne.n	8002388 <RCCEx_PLLSAI1_Config+0xa8>
      {
        status = HAL_ERROR;
 800235a:	2301      	movs	r3, #1
 800235c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800235e:	e013      	b.n	8002388 <RCCEx_PLLSAI1_Config+0xa8>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002360:	4b56      	ldr	r3, [pc, #344]	; (80024bc <RCCEx_PLLSAI1_Config+0x1dc>)
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002368:	2b00      	cmp	r3, #0
 800236a:	d10f      	bne.n	800238c <RCCEx_PLLSAI1_Config+0xac>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800236c:	4b53      	ldr	r3, [pc, #332]	; (80024bc <RCCEx_PLLSAI1_Config+0x1dc>)
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002374:	2b00      	cmp	r3, #0
 8002376:	d109      	bne.n	800238c <RCCEx_PLLSAI1_Config+0xac>
        {
          status = HAL_ERROR;
 8002378:	2301      	movs	r3, #1
 800237a:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800237c:	e006      	b.n	800238c <RCCEx_PLLSAI1_Config+0xac>
    default:
      status = HAL_ERROR;
 800237e:	2301      	movs	r3, #1
 8002380:	73fb      	strb	r3, [r7, #15]
      break;
 8002382:	e004      	b.n	800238e <RCCEx_PLLSAI1_Config+0xae>
      break;
 8002384:	bf00      	nop
 8002386:	e002      	b.n	800238e <RCCEx_PLLSAI1_Config+0xae>
      break;
 8002388:	bf00      	nop
 800238a:	e000      	b.n	800238e <RCCEx_PLLSAI1_Config+0xae>
      break;
 800238c:	bf00      	nop
    }

    if(status == HAL_OK)
 800238e:	7bfb      	ldrb	r3, [r7, #15]
 8002390:	2b00      	cmp	r3, #0
 8002392:	d10d      	bne.n	80023b0 <RCCEx_PLLSAI1_Config+0xd0>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8002394:	4b49      	ldr	r3, [pc, #292]	; (80024bc <RCCEx_PLLSAI1_Config+0x1dc>)
 8002396:	68db      	ldr	r3, [r3, #12]
 8002398:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	6819      	ldr	r1, [r3, #0]
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	685b      	ldr	r3, [r3, #4]
 80023a4:	3b01      	subs	r3, #1
 80023a6:	011b      	lsls	r3, r3, #4
 80023a8:	430b      	orrs	r3, r1
 80023aa:	4944      	ldr	r1, [pc, #272]	; (80024bc <RCCEx_PLLSAI1_Config+0x1dc>)
 80023ac:	4313      	orrs	r3, r2
 80023ae:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80023b0:	7bfb      	ldrb	r3, [r7, #15]
 80023b2:	2b00      	cmp	r3, #0
 80023b4:	d17d      	bne.n	80024b2 <RCCEx_PLLSAI1_Config+0x1d2>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80023b6:	4b41      	ldr	r3, [pc, #260]	; (80024bc <RCCEx_PLLSAI1_Config+0x1dc>)
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	4a40      	ldr	r2, [pc, #256]	; (80024bc <RCCEx_PLLSAI1_Config+0x1dc>)
 80023bc:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80023c0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80023c2:	f7fe fbdd 	bl	8000b80 <HAL_GetTick>
 80023c6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80023c8:	e009      	b.n	80023de <RCCEx_PLLSAI1_Config+0xfe>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80023ca:	f7fe fbd9 	bl	8000b80 <HAL_GetTick>
 80023ce:	4602      	mov	r2, r0
 80023d0:	68bb      	ldr	r3, [r7, #8]
 80023d2:	1ad3      	subs	r3, r2, r3
 80023d4:	2b02      	cmp	r3, #2
 80023d6:	d902      	bls.n	80023de <RCCEx_PLLSAI1_Config+0xfe>
      {
        status = HAL_TIMEOUT;
 80023d8:	2303      	movs	r3, #3
 80023da:	73fb      	strb	r3, [r7, #15]
        break;
 80023dc:	e005      	b.n	80023ea <RCCEx_PLLSAI1_Config+0x10a>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80023de:	4b37      	ldr	r3, [pc, #220]	; (80024bc <RCCEx_PLLSAI1_Config+0x1dc>)
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80023e6:	2b00      	cmp	r3, #0
 80023e8:	d1ef      	bne.n	80023ca <RCCEx_PLLSAI1_Config+0xea>
      }
    }

    if(status == HAL_OK)
 80023ea:	7bfb      	ldrb	r3, [r7, #15]
 80023ec:	2b00      	cmp	r3, #0
 80023ee:	d160      	bne.n	80024b2 <RCCEx_PLLSAI1_Config+0x1d2>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80023f0:	683b      	ldr	r3, [r7, #0]
 80023f2:	2b00      	cmp	r3, #0
 80023f4:	d111      	bne.n	800241a <RCCEx_PLLSAI1_Config+0x13a>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80023f6:	4b31      	ldr	r3, [pc, #196]	; (80024bc <RCCEx_PLLSAI1_Config+0x1dc>)
 80023f8:	691b      	ldr	r3, [r3, #16]
 80023fa:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 80023fe:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002402:	687a      	ldr	r2, [r7, #4]
 8002404:	6892      	ldr	r2, [r2, #8]
 8002406:	0211      	lsls	r1, r2, #8
 8002408:	687a      	ldr	r2, [r7, #4]
 800240a:	68d2      	ldr	r2, [r2, #12]
 800240c:	0912      	lsrs	r2, r2, #4
 800240e:	0452      	lsls	r2, r2, #17
 8002410:	430a      	orrs	r2, r1
 8002412:	492a      	ldr	r1, [pc, #168]	; (80024bc <RCCEx_PLLSAI1_Config+0x1dc>)
 8002414:	4313      	orrs	r3, r2
 8002416:	610b      	str	r3, [r1, #16]
 8002418:	e027      	b.n	800246a <RCCEx_PLLSAI1_Config+0x18a>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 800241a:	683b      	ldr	r3, [r7, #0]
 800241c:	2b01      	cmp	r3, #1
 800241e:	d112      	bne.n	8002446 <RCCEx_PLLSAI1_Config+0x166>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002420:	4b26      	ldr	r3, [pc, #152]	; (80024bc <RCCEx_PLLSAI1_Config+0x1dc>)
 8002422:	691b      	ldr	r3, [r3, #16]
 8002424:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8002428:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800242c:	687a      	ldr	r2, [r7, #4]
 800242e:	6892      	ldr	r2, [r2, #8]
 8002430:	0211      	lsls	r1, r2, #8
 8002432:	687a      	ldr	r2, [r7, #4]
 8002434:	6912      	ldr	r2, [r2, #16]
 8002436:	0852      	lsrs	r2, r2, #1
 8002438:	3a01      	subs	r2, #1
 800243a:	0552      	lsls	r2, r2, #21
 800243c:	430a      	orrs	r2, r1
 800243e:	491f      	ldr	r1, [pc, #124]	; (80024bc <RCCEx_PLLSAI1_Config+0x1dc>)
 8002440:	4313      	orrs	r3, r2
 8002442:	610b      	str	r3, [r1, #16]
 8002444:	e011      	b.n	800246a <RCCEx_PLLSAI1_Config+0x18a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002446:	4b1d      	ldr	r3, [pc, #116]	; (80024bc <RCCEx_PLLSAI1_Config+0x1dc>)
 8002448:	691b      	ldr	r3, [r3, #16]
 800244a:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 800244e:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002452:	687a      	ldr	r2, [r7, #4]
 8002454:	6892      	ldr	r2, [r2, #8]
 8002456:	0211      	lsls	r1, r2, #8
 8002458:	687a      	ldr	r2, [r7, #4]
 800245a:	6952      	ldr	r2, [r2, #20]
 800245c:	0852      	lsrs	r2, r2, #1
 800245e:	3a01      	subs	r2, #1
 8002460:	0652      	lsls	r2, r2, #25
 8002462:	430a      	orrs	r2, r1
 8002464:	4915      	ldr	r1, [pc, #84]	; (80024bc <RCCEx_PLLSAI1_Config+0x1dc>)
 8002466:	4313      	orrs	r3, r2
 8002468:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 800246a:	4b14      	ldr	r3, [pc, #80]	; (80024bc <RCCEx_PLLSAI1_Config+0x1dc>)
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	4a13      	ldr	r2, [pc, #76]	; (80024bc <RCCEx_PLLSAI1_Config+0x1dc>)
 8002470:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002474:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002476:	f7fe fb83 	bl	8000b80 <HAL_GetTick>
 800247a:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800247c:	e009      	b.n	8002492 <RCCEx_PLLSAI1_Config+0x1b2>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800247e:	f7fe fb7f 	bl	8000b80 <HAL_GetTick>
 8002482:	4602      	mov	r2, r0
 8002484:	68bb      	ldr	r3, [r7, #8]
 8002486:	1ad3      	subs	r3, r2, r3
 8002488:	2b02      	cmp	r3, #2
 800248a:	d902      	bls.n	8002492 <RCCEx_PLLSAI1_Config+0x1b2>
        {
          status = HAL_TIMEOUT;
 800248c:	2303      	movs	r3, #3
 800248e:	73fb      	strb	r3, [r7, #15]
          break;
 8002490:	e005      	b.n	800249e <RCCEx_PLLSAI1_Config+0x1be>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002492:	4b0a      	ldr	r3, [pc, #40]	; (80024bc <RCCEx_PLLSAI1_Config+0x1dc>)
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800249a:	2b00      	cmp	r3, #0
 800249c:	d0ef      	beq.n	800247e <RCCEx_PLLSAI1_Config+0x19e>
        }
      }

      if(status == HAL_OK)
 800249e:	7bfb      	ldrb	r3, [r7, #15]
 80024a0:	2b00      	cmp	r3, #0
 80024a2:	d106      	bne.n	80024b2 <RCCEx_PLLSAI1_Config+0x1d2>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80024a4:	4b05      	ldr	r3, [pc, #20]	; (80024bc <RCCEx_PLLSAI1_Config+0x1dc>)
 80024a6:	691a      	ldr	r2, [r3, #16]
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	699b      	ldr	r3, [r3, #24]
 80024ac:	4903      	ldr	r1, [pc, #12]	; (80024bc <RCCEx_PLLSAI1_Config+0x1dc>)
 80024ae:	4313      	orrs	r3, r2
 80024b0:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 80024b2:	7bfb      	ldrb	r3, [r7, #15]
}
 80024b4:	4618      	mov	r0, r3
 80024b6:	3710      	adds	r7, #16
 80024b8:	46bd      	mov	sp, r7
 80024ba:	bd80      	pop	{r7, pc}
 80024bc:	40021000 	.word	0x40021000

080024c0 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 80024c0:	b580      	push	{r7, lr}
 80024c2:	b084      	sub	sp, #16
 80024c4:	af00      	add	r7, sp, #0
 80024c6:	6078      	str	r0, [r7, #4]
 80024c8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80024ca:	2300      	movs	r3, #0
 80024cc:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80024ce:	4b68      	ldr	r3, [pc, #416]	; (8002670 <RCCEx_PLLSAI2_Config+0x1b0>)
 80024d0:	68db      	ldr	r3, [r3, #12]
 80024d2:	f003 0303 	and.w	r3, r3, #3
 80024d6:	2b00      	cmp	r3, #0
 80024d8:	d018      	beq.n	800250c <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 80024da:	4b65      	ldr	r3, [pc, #404]	; (8002670 <RCCEx_PLLSAI2_Config+0x1b0>)
 80024dc:	68db      	ldr	r3, [r3, #12]
 80024de:	f003 0203 	and.w	r2, r3, #3
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	429a      	cmp	r2, r3
 80024e8:	d10d      	bne.n	8002506 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	681b      	ldr	r3, [r3, #0]
       ||
 80024ee:	2b00      	cmp	r3, #0
 80024f0:	d009      	beq.n	8002506 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 80024f2:	4b5f      	ldr	r3, [pc, #380]	; (8002670 <RCCEx_PLLSAI2_Config+0x1b0>)
 80024f4:	68db      	ldr	r3, [r3, #12]
 80024f6:	091b      	lsrs	r3, r3, #4
 80024f8:	f003 0307 	and.w	r3, r3, #7
 80024fc:	1c5a      	adds	r2, r3, #1
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	685b      	ldr	r3, [r3, #4]
       ||
 8002502:	429a      	cmp	r2, r3
 8002504:	d044      	beq.n	8002590 <RCCEx_PLLSAI2_Config+0xd0>
#endif
      )
    {
      status = HAL_ERROR;
 8002506:	2301      	movs	r3, #1
 8002508:	73fb      	strb	r3, [r7, #15]
 800250a:	e041      	b.n	8002590 <RCCEx_PLLSAI2_Config+0xd0>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	2b02      	cmp	r3, #2
 8002512:	d00c      	beq.n	800252e <RCCEx_PLLSAI2_Config+0x6e>
 8002514:	2b03      	cmp	r3, #3
 8002516:	d013      	beq.n	8002540 <RCCEx_PLLSAI2_Config+0x80>
 8002518:	2b01      	cmp	r3, #1
 800251a:	d120      	bne.n	800255e <RCCEx_PLLSAI2_Config+0x9e>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800251c:	4b54      	ldr	r3, [pc, #336]	; (8002670 <RCCEx_PLLSAI2_Config+0x1b0>)
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	f003 0302 	and.w	r3, r3, #2
 8002524:	2b00      	cmp	r3, #0
 8002526:	d11d      	bne.n	8002564 <RCCEx_PLLSAI2_Config+0xa4>
      {
        status = HAL_ERROR;
 8002528:	2301      	movs	r3, #1
 800252a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800252c:	e01a      	b.n	8002564 <RCCEx_PLLSAI2_Config+0xa4>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800252e:	4b50      	ldr	r3, [pc, #320]	; (8002670 <RCCEx_PLLSAI2_Config+0x1b0>)
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002536:	2b00      	cmp	r3, #0
 8002538:	d116      	bne.n	8002568 <RCCEx_PLLSAI2_Config+0xa8>
      {
        status = HAL_ERROR;
 800253a:	2301      	movs	r3, #1
 800253c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800253e:	e013      	b.n	8002568 <RCCEx_PLLSAI2_Config+0xa8>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002540:	4b4b      	ldr	r3, [pc, #300]	; (8002670 <RCCEx_PLLSAI2_Config+0x1b0>)
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002548:	2b00      	cmp	r3, #0
 800254a:	d10f      	bne.n	800256c <RCCEx_PLLSAI2_Config+0xac>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800254c:	4b48      	ldr	r3, [pc, #288]	; (8002670 <RCCEx_PLLSAI2_Config+0x1b0>)
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002554:	2b00      	cmp	r3, #0
 8002556:	d109      	bne.n	800256c <RCCEx_PLLSAI2_Config+0xac>
        {
          status = HAL_ERROR;
 8002558:	2301      	movs	r3, #1
 800255a:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800255c:	e006      	b.n	800256c <RCCEx_PLLSAI2_Config+0xac>
    default:
      status = HAL_ERROR;
 800255e:	2301      	movs	r3, #1
 8002560:	73fb      	strb	r3, [r7, #15]
      break;
 8002562:	e004      	b.n	800256e <RCCEx_PLLSAI2_Config+0xae>
      break;
 8002564:	bf00      	nop
 8002566:	e002      	b.n	800256e <RCCEx_PLLSAI2_Config+0xae>
      break;
 8002568:	bf00      	nop
 800256a:	e000      	b.n	800256e <RCCEx_PLLSAI2_Config+0xae>
      break;
 800256c:	bf00      	nop
    }

    if(status == HAL_OK)
 800256e:	7bfb      	ldrb	r3, [r7, #15]
 8002570:	2b00      	cmp	r3, #0
 8002572:	d10d      	bne.n	8002590 <RCCEx_PLLSAI2_Config+0xd0>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8002574:	4b3e      	ldr	r3, [pc, #248]	; (8002670 <RCCEx_PLLSAI2_Config+0x1b0>)
 8002576:	68db      	ldr	r3, [r3, #12]
 8002578:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	6819      	ldr	r1, [r3, #0]
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	685b      	ldr	r3, [r3, #4]
 8002584:	3b01      	subs	r3, #1
 8002586:	011b      	lsls	r3, r3, #4
 8002588:	430b      	orrs	r3, r1
 800258a:	4939      	ldr	r1, [pc, #228]	; (8002670 <RCCEx_PLLSAI2_Config+0x1b0>)
 800258c:	4313      	orrs	r3, r2
 800258e:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8002590:	7bfb      	ldrb	r3, [r7, #15]
 8002592:	2b00      	cmp	r3, #0
 8002594:	d167      	bne.n	8002666 <RCCEx_PLLSAI2_Config+0x1a6>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8002596:	4b36      	ldr	r3, [pc, #216]	; (8002670 <RCCEx_PLLSAI2_Config+0x1b0>)
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	4a35      	ldr	r2, [pc, #212]	; (8002670 <RCCEx_PLLSAI2_Config+0x1b0>)
 800259c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80025a0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80025a2:	f7fe faed 	bl	8000b80 <HAL_GetTick>
 80025a6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80025a8:	e009      	b.n	80025be <RCCEx_PLLSAI2_Config+0xfe>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80025aa:	f7fe fae9 	bl	8000b80 <HAL_GetTick>
 80025ae:	4602      	mov	r2, r0
 80025b0:	68bb      	ldr	r3, [r7, #8]
 80025b2:	1ad3      	subs	r3, r2, r3
 80025b4:	2b02      	cmp	r3, #2
 80025b6:	d902      	bls.n	80025be <RCCEx_PLLSAI2_Config+0xfe>
      {
        status = HAL_TIMEOUT;
 80025b8:	2303      	movs	r3, #3
 80025ba:	73fb      	strb	r3, [r7, #15]
        break;
 80025bc:	e005      	b.n	80025ca <RCCEx_PLLSAI2_Config+0x10a>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80025be:	4b2c      	ldr	r3, [pc, #176]	; (8002670 <RCCEx_PLLSAI2_Config+0x1b0>)
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80025c6:	2b00      	cmp	r3, #0
 80025c8:	d1ef      	bne.n	80025aa <RCCEx_PLLSAI2_Config+0xea>
      }
    }

    if(status == HAL_OK)
 80025ca:	7bfb      	ldrb	r3, [r7, #15]
 80025cc:	2b00      	cmp	r3, #0
 80025ce:	d14a      	bne.n	8002666 <RCCEx_PLLSAI2_Config+0x1a6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80025d0:	683b      	ldr	r3, [r7, #0]
 80025d2:	2b00      	cmp	r3, #0
 80025d4:	d111      	bne.n	80025fa <RCCEx_PLLSAI2_Config+0x13a>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80025d6:	4b26      	ldr	r3, [pc, #152]	; (8002670 <RCCEx_PLLSAI2_Config+0x1b0>)
 80025d8:	695b      	ldr	r3, [r3, #20]
 80025da:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 80025de:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80025e2:	687a      	ldr	r2, [r7, #4]
 80025e4:	6892      	ldr	r2, [r2, #8]
 80025e6:	0211      	lsls	r1, r2, #8
 80025e8:	687a      	ldr	r2, [r7, #4]
 80025ea:	68d2      	ldr	r2, [r2, #12]
 80025ec:	0912      	lsrs	r2, r2, #4
 80025ee:	0452      	lsls	r2, r2, #17
 80025f0:	430a      	orrs	r2, r1
 80025f2:	491f      	ldr	r1, [pc, #124]	; (8002670 <RCCEx_PLLSAI2_Config+0x1b0>)
 80025f4:	4313      	orrs	r3, r2
 80025f6:	614b      	str	r3, [r1, #20]
 80025f8:	e011      	b.n	800261e <RCCEx_PLLSAI2_Config+0x15e>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80025fa:	4b1d      	ldr	r3, [pc, #116]	; (8002670 <RCCEx_PLLSAI2_Config+0x1b0>)
 80025fc:	695b      	ldr	r3, [r3, #20]
 80025fe:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8002602:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002606:	687a      	ldr	r2, [r7, #4]
 8002608:	6892      	ldr	r2, [r2, #8]
 800260a:	0211      	lsls	r1, r2, #8
 800260c:	687a      	ldr	r2, [r7, #4]
 800260e:	6912      	ldr	r2, [r2, #16]
 8002610:	0852      	lsrs	r2, r2, #1
 8002612:	3a01      	subs	r2, #1
 8002614:	0652      	lsls	r2, r2, #25
 8002616:	430a      	orrs	r2, r1
 8002618:	4915      	ldr	r1, [pc, #84]	; (8002670 <RCCEx_PLLSAI2_Config+0x1b0>)
 800261a:	4313      	orrs	r3, r2
 800261c:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 800261e:	4b14      	ldr	r3, [pc, #80]	; (8002670 <RCCEx_PLLSAI2_Config+0x1b0>)
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	4a13      	ldr	r2, [pc, #76]	; (8002670 <RCCEx_PLLSAI2_Config+0x1b0>)
 8002624:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002628:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800262a:	f7fe faa9 	bl	8000b80 <HAL_GetTick>
 800262e:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8002630:	e009      	b.n	8002646 <RCCEx_PLLSAI2_Config+0x186>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8002632:	f7fe faa5 	bl	8000b80 <HAL_GetTick>
 8002636:	4602      	mov	r2, r0
 8002638:	68bb      	ldr	r3, [r7, #8]
 800263a:	1ad3      	subs	r3, r2, r3
 800263c:	2b02      	cmp	r3, #2
 800263e:	d902      	bls.n	8002646 <RCCEx_PLLSAI2_Config+0x186>
        {
          status = HAL_TIMEOUT;
 8002640:	2303      	movs	r3, #3
 8002642:	73fb      	strb	r3, [r7, #15]
          break;
 8002644:	e005      	b.n	8002652 <RCCEx_PLLSAI2_Config+0x192>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8002646:	4b0a      	ldr	r3, [pc, #40]	; (8002670 <RCCEx_PLLSAI2_Config+0x1b0>)
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800264e:	2b00      	cmp	r3, #0
 8002650:	d0ef      	beq.n	8002632 <RCCEx_PLLSAI2_Config+0x172>
        }
      }

      if(status == HAL_OK)
 8002652:	7bfb      	ldrb	r3, [r7, #15]
 8002654:	2b00      	cmp	r3, #0
 8002656:	d106      	bne.n	8002666 <RCCEx_PLLSAI2_Config+0x1a6>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8002658:	4b05      	ldr	r3, [pc, #20]	; (8002670 <RCCEx_PLLSAI2_Config+0x1b0>)
 800265a:	695a      	ldr	r2, [r3, #20]
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	695b      	ldr	r3, [r3, #20]
 8002660:	4903      	ldr	r1, [pc, #12]	; (8002670 <RCCEx_PLLSAI2_Config+0x1b0>)
 8002662:	4313      	orrs	r3, r2
 8002664:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8002666:	7bfb      	ldrb	r3, [r7, #15]
}
 8002668:	4618      	mov	r0, r3
 800266a:	3710      	adds	r7, #16
 800266c:	46bd      	mov	sp, r7
 800266e:	bd80      	pop	{r7, pc}
 8002670:	40021000 	.word	0x40021000

08002674 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002674:	b580      	push	{r7, lr}
 8002676:	b082      	sub	sp, #8
 8002678:	af00      	add	r7, sp, #0
 800267a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	2b00      	cmp	r3, #0
 8002680:	d101      	bne.n	8002686 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002682:	2301      	movs	r3, #1
 8002684:	e040      	b.n	8002708 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800268a:	2b00      	cmp	r3, #0
 800268c:	d106      	bne.n	800269c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	2200      	movs	r2, #0
 8002692:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002696:	6878      	ldr	r0, [r7, #4]
 8002698:	f7fe f948 	bl	800092c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	2224      	movs	r2, #36	; 0x24
 80026a0:	675a      	str	r2, [r3, #116]	; 0x74

  __HAL_UART_DISABLE(huart);
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	681a      	ldr	r2, [r3, #0]
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	f022 0201 	bic.w	r2, r2, #1
 80026b0:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80026b2:	6878      	ldr	r0, [r7, #4]
 80026b4:	f000 f98c 	bl	80029d0 <UART_SetConfig>
 80026b8:	4603      	mov	r3, r0
 80026ba:	2b01      	cmp	r3, #1
 80026bc:	d101      	bne.n	80026c2 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 80026be:	2301      	movs	r3, #1
 80026c0:	e022      	b.n	8002708 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026c6:	2b00      	cmp	r3, #0
 80026c8:	d002      	beq.n	80026d0 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80026ca:	6878      	ldr	r0, [r7, #4]
 80026cc:	f000 fcc8 	bl	8003060 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	685a      	ldr	r2, [r3, #4]
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80026de:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	689a      	ldr	r2, [r3, #8]
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80026ee:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	681a      	ldr	r2, [r3, #0]
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	f042 0201 	orr.w	r2, r2, #1
 80026fe:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002700:	6878      	ldr	r0, [r7, #4]
 8002702:	f000 fd4f 	bl	80031a4 <UART_CheckIdleState>
 8002706:	4603      	mov	r3, r0
}
 8002708:	4618      	mov	r0, r3
 800270a:	3708      	adds	r7, #8
 800270c:	46bd      	mov	sp, r7
 800270e:	bd80      	pop	{r7, pc}

08002710 <HAL_UART_Transmit>:
  * @param Size    Amount of data to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002710:	b580      	push	{r7, lr}
 8002712:	b08a      	sub	sp, #40	; 0x28
 8002714:	af02      	add	r7, sp, #8
 8002716:	60f8      	str	r0, [r7, #12]
 8002718:	60b9      	str	r1, [r7, #8]
 800271a:	603b      	str	r3, [r7, #0]
 800271c:	4613      	mov	r3, r2
 800271e:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002720:	68fb      	ldr	r3, [r7, #12]
 8002722:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002724:	2b20      	cmp	r3, #32
 8002726:	f040 8081 	bne.w	800282c <HAL_UART_Transmit+0x11c>
  {
    if ((pData == NULL) || (Size == 0U))
 800272a:	68bb      	ldr	r3, [r7, #8]
 800272c:	2b00      	cmp	r3, #0
 800272e:	d002      	beq.n	8002736 <HAL_UART_Transmit+0x26>
 8002730:	88fb      	ldrh	r3, [r7, #6]
 8002732:	2b00      	cmp	r3, #0
 8002734:	d101      	bne.n	800273a <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8002736:	2301      	movs	r3, #1
 8002738:	e079      	b.n	800282e <HAL_UART_Transmit+0x11e>
    }

    __HAL_LOCK(huart);
 800273a:	68fb      	ldr	r3, [r7, #12]
 800273c:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 8002740:	2b01      	cmp	r3, #1
 8002742:	d101      	bne.n	8002748 <HAL_UART_Transmit+0x38>
 8002744:	2302      	movs	r3, #2
 8002746:	e072      	b.n	800282e <HAL_UART_Transmit+0x11e>
 8002748:	68fb      	ldr	r3, [r7, #12]
 800274a:	2201      	movs	r2, #1
 800274c:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002750:	68fb      	ldr	r3, [r7, #12]
 8002752:	2200      	movs	r2, #0
 8002754:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002756:	68fb      	ldr	r3, [r7, #12]
 8002758:	2221      	movs	r2, #33	; 0x21
 800275a:	675a      	str	r2, [r3, #116]	; 0x74

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 800275c:	f7fe fa10 	bl	8000b80 <HAL_GetTick>
 8002760:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8002762:	68fb      	ldr	r3, [r7, #12]
 8002764:	88fa      	ldrh	r2, [r7, #6]
 8002766:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 800276a:	68fb      	ldr	r3, [r7, #12]
 800276c:	88fa      	ldrh	r2, [r7, #6]
 800276e:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002772:	68fb      	ldr	r3, [r7, #12]
 8002774:	689b      	ldr	r3, [r3, #8]
 8002776:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800277a:	d108      	bne.n	800278e <HAL_UART_Transmit+0x7e>
 800277c:	68fb      	ldr	r3, [r7, #12]
 800277e:	691b      	ldr	r3, [r3, #16]
 8002780:	2b00      	cmp	r3, #0
 8002782:	d104      	bne.n	800278e <HAL_UART_Transmit+0x7e>
    {
      pdata8bits  = NULL;
 8002784:	2300      	movs	r3, #0
 8002786:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8002788:	68bb      	ldr	r3, [r7, #8]
 800278a:	61bb      	str	r3, [r7, #24]
 800278c:	e003      	b.n	8002796 <HAL_UART_Transmit+0x86>
    }
    else
    {
      pdata8bits  = pData;
 800278e:	68bb      	ldr	r3, [r7, #8]
 8002790:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002792:	2300      	movs	r3, #0
 8002794:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8002796:	e02d      	b.n	80027f4 <HAL_UART_Transmit+0xe4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002798:	683b      	ldr	r3, [r7, #0]
 800279a:	9300      	str	r3, [sp, #0]
 800279c:	697b      	ldr	r3, [r7, #20]
 800279e:	2200      	movs	r2, #0
 80027a0:	2180      	movs	r1, #128	; 0x80
 80027a2:	68f8      	ldr	r0, [r7, #12]
 80027a4:	f000 fd43 	bl	800322e <UART_WaitOnFlagUntilTimeout>
 80027a8:	4603      	mov	r3, r0
 80027aa:	2b00      	cmp	r3, #0
 80027ac:	d001      	beq.n	80027b2 <HAL_UART_Transmit+0xa2>
      {
        return HAL_TIMEOUT;
 80027ae:	2303      	movs	r3, #3
 80027b0:	e03d      	b.n	800282e <HAL_UART_Transmit+0x11e>
      }
      if (pdata8bits == NULL)
 80027b2:	69fb      	ldr	r3, [r7, #28]
 80027b4:	2b00      	cmp	r3, #0
 80027b6:	d10b      	bne.n	80027d0 <HAL_UART_Transmit+0xc0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80027b8:	69bb      	ldr	r3, [r7, #24]
 80027ba:	881a      	ldrh	r2, [r3, #0]
 80027bc:	68fb      	ldr	r3, [r7, #12]
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80027c4:	b292      	uxth	r2, r2
 80027c6:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80027c8:	69bb      	ldr	r3, [r7, #24]
 80027ca:	3302      	adds	r3, #2
 80027cc:	61bb      	str	r3, [r7, #24]
 80027ce:	e008      	b.n	80027e2 <HAL_UART_Transmit+0xd2>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80027d0:	69fb      	ldr	r3, [r7, #28]
 80027d2:	781a      	ldrb	r2, [r3, #0]
 80027d4:	68fb      	ldr	r3, [r7, #12]
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	b292      	uxth	r2, r2
 80027da:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80027dc:	69fb      	ldr	r3, [r7, #28]
 80027de:	3301      	adds	r3, #1
 80027e0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80027e2:	68fb      	ldr	r3, [r7, #12]
 80027e4:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80027e8:	b29b      	uxth	r3, r3
 80027ea:	3b01      	subs	r3, #1
 80027ec:	b29a      	uxth	r2, r3
 80027ee:	68fb      	ldr	r3, [r7, #12]
 80027f0:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 80027f4:	68fb      	ldr	r3, [r7, #12]
 80027f6:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80027fa:	b29b      	uxth	r3, r3
 80027fc:	2b00      	cmp	r3, #0
 80027fe:	d1cb      	bne.n	8002798 <HAL_UART_Transmit+0x88>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002800:	683b      	ldr	r3, [r7, #0]
 8002802:	9300      	str	r3, [sp, #0]
 8002804:	697b      	ldr	r3, [r7, #20]
 8002806:	2200      	movs	r2, #0
 8002808:	2140      	movs	r1, #64	; 0x40
 800280a:	68f8      	ldr	r0, [r7, #12]
 800280c:	f000 fd0f 	bl	800322e <UART_WaitOnFlagUntilTimeout>
 8002810:	4603      	mov	r3, r0
 8002812:	2b00      	cmp	r3, #0
 8002814:	d001      	beq.n	800281a <HAL_UART_Transmit+0x10a>
    {
      return HAL_TIMEOUT;
 8002816:	2303      	movs	r3, #3
 8002818:	e009      	b.n	800282e <HAL_UART_Transmit+0x11e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800281a:	68fb      	ldr	r3, [r7, #12]
 800281c:	2220      	movs	r2, #32
 800281e:	675a      	str	r2, [r3, #116]	; 0x74

    __HAL_UNLOCK(huart);
 8002820:	68fb      	ldr	r3, [r7, #12]
 8002822:	2200      	movs	r2, #0
 8002824:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    return HAL_OK;
 8002828:	2300      	movs	r3, #0
 800282a:	e000      	b.n	800282e <HAL_UART_Transmit+0x11e>
  }
  else
  {
    return HAL_BUSY;
 800282c:	2302      	movs	r3, #2
  }
}
 800282e:	4618      	mov	r0, r3
 8002830:	3720      	adds	r7, #32
 8002832:	46bd      	mov	sp, r7
 8002834:	bd80      	pop	{r7, pc}

08002836 <HAL_UART_Receive>:
  * @param Size    Amount of data to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002836:	b580      	push	{r7, lr}
 8002838:	b08a      	sub	sp, #40	; 0x28
 800283a:	af02      	add	r7, sp, #8
 800283c:	60f8      	str	r0, [r7, #12]
 800283e:	60b9      	str	r1, [r7, #8]
 8002840:	603b      	str	r3, [r7, #0]
 8002842:	4613      	mov	r3, r2
 8002844:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8002846:	68fb      	ldr	r3, [r7, #12]
 8002848:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800284a:	2b20      	cmp	r3, #32
 800284c:	f040 80bb 	bne.w	80029c6 <HAL_UART_Receive+0x190>
  {
    if ((pData == NULL) || (Size == 0U))
 8002850:	68bb      	ldr	r3, [r7, #8]
 8002852:	2b00      	cmp	r3, #0
 8002854:	d002      	beq.n	800285c <HAL_UART_Receive+0x26>
 8002856:	88fb      	ldrh	r3, [r7, #6]
 8002858:	2b00      	cmp	r3, #0
 800285a:	d101      	bne.n	8002860 <HAL_UART_Receive+0x2a>
    {
      return  HAL_ERROR;
 800285c:	2301      	movs	r3, #1
 800285e:	e0b3      	b.n	80029c8 <HAL_UART_Receive+0x192>
    }

    __HAL_LOCK(huart);
 8002860:	68fb      	ldr	r3, [r7, #12]
 8002862:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 8002866:	2b01      	cmp	r3, #1
 8002868:	d101      	bne.n	800286e <HAL_UART_Receive+0x38>
 800286a:	2302      	movs	r3, #2
 800286c:	e0ac      	b.n	80029c8 <HAL_UART_Receive+0x192>
 800286e:	68fb      	ldr	r3, [r7, #12]
 8002870:	2201      	movs	r2, #1
 8002872:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002876:	68fb      	ldr	r3, [r7, #12]
 8002878:	2200      	movs	r2, #0
 800287a:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800287c:	68fb      	ldr	r3, [r7, #12]
 800287e:	2222      	movs	r2, #34	; 0x22
 8002880:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 8002882:	f7fe f97d 	bl	8000b80 <HAL_GetTick>
 8002886:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 8002888:	68fb      	ldr	r3, [r7, #12]
 800288a:	88fa      	ldrh	r2, [r7, #6]
 800288c:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
    huart->RxXferCount = Size;
 8002890:	68fb      	ldr	r3, [r7, #12]
 8002892:	88fa      	ldrh	r2, [r7, #6]
 8002894:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8002898:	68fb      	ldr	r3, [r7, #12]
 800289a:	689b      	ldr	r3, [r3, #8]
 800289c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80028a0:	d10e      	bne.n	80028c0 <HAL_UART_Receive+0x8a>
 80028a2:	68fb      	ldr	r3, [r7, #12]
 80028a4:	691b      	ldr	r3, [r3, #16]
 80028a6:	2b00      	cmp	r3, #0
 80028a8:	d105      	bne.n	80028b6 <HAL_UART_Receive+0x80>
 80028aa:	68fb      	ldr	r3, [r7, #12]
 80028ac:	f240 12ff 	movw	r2, #511	; 0x1ff
 80028b0:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80028b4:	e02d      	b.n	8002912 <HAL_UART_Receive+0xdc>
 80028b6:	68fb      	ldr	r3, [r7, #12]
 80028b8:	22ff      	movs	r2, #255	; 0xff
 80028ba:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80028be:	e028      	b.n	8002912 <HAL_UART_Receive+0xdc>
 80028c0:	68fb      	ldr	r3, [r7, #12]
 80028c2:	689b      	ldr	r3, [r3, #8]
 80028c4:	2b00      	cmp	r3, #0
 80028c6:	d10d      	bne.n	80028e4 <HAL_UART_Receive+0xae>
 80028c8:	68fb      	ldr	r3, [r7, #12]
 80028ca:	691b      	ldr	r3, [r3, #16]
 80028cc:	2b00      	cmp	r3, #0
 80028ce:	d104      	bne.n	80028da <HAL_UART_Receive+0xa4>
 80028d0:	68fb      	ldr	r3, [r7, #12]
 80028d2:	22ff      	movs	r2, #255	; 0xff
 80028d4:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80028d8:	e01b      	b.n	8002912 <HAL_UART_Receive+0xdc>
 80028da:	68fb      	ldr	r3, [r7, #12]
 80028dc:	227f      	movs	r2, #127	; 0x7f
 80028de:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80028e2:	e016      	b.n	8002912 <HAL_UART_Receive+0xdc>
 80028e4:	68fb      	ldr	r3, [r7, #12]
 80028e6:	689b      	ldr	r3, [r3, #8]
 80028e8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80028ec:	d10d      	bne.n	800290a <HAL_UART_Receive+0xd4>
 80028ee:	68fb      	ldr	r3, [r7, #12]
 80028f0:	691b      	ldr	r3, [r3, #16]
 80028f2:	2b00      	cmp	r3, #0
 80028f4:	d104      	bne.n	8002900 <HAL_UART_Receive+0xca>
 80028f6:	68fb      	ldr	r3, [r7, #12]
 80028f8:	227f      	movs	r2, #127	; 0x7f
 80028fa:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80028fe:	e008      	b.n	8002912 <HAL_UART_Receive+0xdc>
 8002900:	68fb      	ldr	r3, [r7, #12]
 8002902:	223f      	movs	r2, #63	; 0x3f
 8002904:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8002908:	e003      	b.n	8002912 <HAL_UART_Receive+0xdc>
 800290a:	68fb      	ldr	r3, [r7, #12]
 800290c:	2200      	movs	r2, #0
 800290e:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    uhMask = huart->Mask;
 8002912:	68fb      	ldr	r3, [r7, #12]
 8002914:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8002918:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800291a:	68fb      	ldr	r3, [r7, #12]
 800291c:	689b      	ldr	r3, [r3, #8]
 800291e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002922:	d108      	bne.n	8002936 <HAL_UART_Receive+0x100>
 8002924:	68fb      	ldr	r3, [r7, #12]
 8002926:	691b      	ldr	r3, [r3, #16]
 8002928:	2b00      	cmp	r3, #0
 800292a:	d104      	bne.n	8002936 <HAL_UART_Receive+0x100>
    {
      pdata8bits  = NULL;
 800292c:	2300      	movs	r3, #0
 800292e:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8002930:	68bb      	ldr	r3, [r7, #8]
 8002932:	61bb      	str	r3, [r7, #24]
 8002934:	e003      	b.n	800293e <HAL_UART_Receive+0x108>
    }
    else
    {
      pdata8bits  = pData;
 8002936:	68bb      	ldr	r3, [r7, #8]
 8002938:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800293a:	2300      	movs	r3, #0
 800293c:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 800293e:	e033      	b.n	80029a8 <HAL_UART_Receive+0x172>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8002940:	683b      	ldr	r3, [r7, #0]
 8002942:	9300      	str	r3, [sp, #0]
 8002944:	697b      	ldr	r3, [r7, #20]
 8002946:	2200      	movs	r2, #0
 8002948:	2120      	movs	r1, #32
 800294a:	68f8      	ldr	r0, [r7, #12]
 800294c:	f000 fc6f 	bl	800322e <UART_WaitOnFlagUntilTimeout>
 8002950:	4603      	mov	r3, r0
 8002952:	2b00      	cmp	r3, #0
 8002954:	d001      	beq.n	800295a <HAL_UART_Receive+0x124>
      {
        return HAL_TIMEOUT;
 8002956:	2303      	movs	r3, #3
 8002958:	e036      	b.n	80029c8 <HAL_UART_Receive+0x192>
      }
      if (pdata8bits == NULL)
 800295a:	69fb      	ldr	r3, [r7, #28]
 800295c:	2b00      	cmp	r3, #0
 800295e:	d10c      	bne.n	800297a <HAL_UART_Receive+0x144>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8002960:	68fb      	ldr	r3, [r7, #12]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8002966:	b29a      	uxth	r2, r3
 8002968:	8a7b      	ldrh	r3, [r7, #18]
 800296a:	4013      	ands	r3, r2
 800296c:	b29a      	uxth	r2, r3
 800296e:	69bb      	ldr	r3, [r7, #24]
 8002970:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8002972:	69bb      	ldr	r3, [r7, #24]
 8002974:	3302      	adds	r3, #2
 8002976:	61bb      	str	r3, [r7, #24]
 8002978:	e00d      	b.n	8002996 <HAL_UART_Receive+0x160>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 800297a:	68fb      	ldr	r3, [r7, #12]
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8002980:	b29b      	uxth	r3, r3
 8002982:	b2da      	uxtb	r2, r3
 8002984:	8a7b      	ldrh	r3, [r7, #18]
 8002986:	b2db      	uxtb	r3, r3
 8002988:	4013      	ands	r3, r2
 800298a:	b2da      	uxtb	r2, r3
 800298c:	69fb      	ldr	r3, [r7, #28]
 800298e:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 8002990:	69fb      	ldr	r3, [r7, #28]
 8002992:	3301      	adds	r3, #1
 8002994:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8002996:	68fb      	ldr	r3, [r7, #12]
 8002998:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800299c:	b29b      	uxth	r3, r3
 800299e:	3b01      	subs	r3, #1
 80029a0:	b29a      	uxth	r2, r3
 80029a2:	68fb      	ldr	r3, [r7, #12]
 80029a4:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    while (huart->RxXferCount > 0U)
 80029a8:	68fb      	ldr	r3, [r7, #12]
 80029aa:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80029ae:	b29b      	uxth	r3, r3
 80029b0:	2b00      	cmp	r3, #0
 80029b2:	d1c5      	bne.n	8002940 <HAL_UART_Receive+0x10a>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80029b4:	68fb      	ldr	r3, [r7, #12]
 80029b6:	2220      	movs	r2, #32
 80029b8:	679a      	str	r2, [r3, #120]	; 0x78

    __HAL_UNLOCK(huart);
 80029ba:	68fb      	ldr	r3, [r7, #12]
 80029bc:	2200      	movs	r2, #0
 80029be:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    return HAL_OK;
 80029c2:	2300      	movs	r3, #0
 80029c4:	e000      	b.n	80029c8 <HAL_UART_Receive+0x192>
  }
  else
  {
    return HAL_BUSY;
 80029c6:	2302      	movs	r3, #2
  }
}
 80029c8:	4618      	mov	r0, r3
 80029ca:	3720      	adds	r7, #32
 80029cc:	46bd      	mov	sp, r7
 80029ce:	bd80      	pop	{r7, pc}

080029d0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80029d0:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 80029d4:	b088      	sub	sp, #32
 80029d6:	af00      	add	r7, sp, #0
 80029d8:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 80029da:	2300      	movs	r3, #0
 80029dc:	617b      	str	r3, [r7, #20]
  HAL_StatusTypeDef ret               = HAL_OK;
 80029de:	2300      	movs	r3, #0
 80029e0:	74fb      	strb	r3, [r7, #19]
  uint32_t lpuart_ker_ck_pres         = 0x00000000U;
 80029e2:	2300      	movs	r3, #0
 80029e4:	60fb      	str	r3, [r7, #12]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	689a      	ldr	r2, [r3, #8]
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	691b      	ldr	r3, [r3, #16]
 80029ee:	431a      	orrs	r2, r3
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	695b      	ldr	r3, [r3, #20]
 80029f4:	431a      	orrs	r2, r3
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	69db      	ldr	r3, [r3, #28]
 80029fa:	4313      	orrs	r3, r2
 80029fc:	61fb      	str	r3, [r7, #28]
#if defined(USART_CR1_FIFOEN)
  tmpreg |= (uint32_t)huart->FifoMode;
#endif /* USART_CR1_FIFOEN */
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	681a      	ldr	r2, [r3, #0]
 8002a04:	4bac      	ldr	r3, [pc, #688]	; (8002cb8 <UART_SetConfig+0x2e8>)
 8002a06:	4013      	ands	r3, r2
 8002a08:	687a      	ldr	r2, [r7, #4]
 8002a0a:	6812      	ldr	r2, [r2, #0]
 8002a0c:	69f9      	ldr	r1, [r7, #28]
 8002a0e:	430b      	orrs	r3, r1
 8002a10:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	685b      	ldr	r3, [r3, #4]
 8002a18:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	68da      	ldr	r2, [r3, #12]
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	430a      	orrs	r2, r1
 8002a26:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	699b      	ldr	r3, [r3, #24]
 8002a2c:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	4aa2      	ldr	r2, [pc, #648]	; (8002cbc <UART_SetConfig+0x2ec>)
 8002a34:	4293      	cmp	r3, r2
 8002a36:	d004      	beq.n	8002a42 <UART_SetConfig+0x72>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	6a1b      	ldr	r3, [r3, #32]
 8002a3c:	69fa      	ldr	r2, [r7, #28]
 8002a3e:	4313      	orrs	r3, r2
 8002a40:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	689b      	ldr	r3, [r3, #8]
 8002a48:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	69fa      	ldr	r2, [r7, #28]
 8002a52:	430a      	orrs	r2, r1
 8002a54:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	4a99      	ldr	r2, [pc, #612]	; (8002cc0 <UART_SetConfig+0x2f0>)
 8002a5c:	4293      	cmp	r3, r2
 8002a5e:	d121      	bne.n	8002aa4 <UART_SetConfig+0xd4>
 8002a60:	4b98      	ldr	r3, [pc, #608]	; (8002cc4 <UART_SetConfig+0x2f4>)
 8002a62:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a66:	f003 0303 	and.w	r3, r3, #3
 8002a6a:	2b03      	cmp	r3, #3
 8002a6c:	d816      	bhi.n	8002a9c <UART_SetConfig+0xcc>
 8002a6e:	a201      	add	r2, pc, #4	; (adr r2, 8002a74 <UART_SetConfig+0xa4>)
 8002a70:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002a74:	08002a85 	.word	0x08002a85
 8002a78:	08002a91 	.word	0x08002a91
 8002a7c:	08002a8b 	.word	0x08002a8b
 8002a80:	08002a97 	.word	0x08002a97
 8002a84:	2301      	movs	r3, #1
 8002a86:	76fb      	strb	r3, [r7, #27]
 8002a88:	e0e8      	b.n	8002c5c <UART_SetConfig+0x28c>
 8002a8a:	2302      	movs	r3, #2
 8002a8c:	76fb      	strb	r3, [r7, #27]
 8002a8e:	e0e5      	b.n	8002c5c <UART_SetConfig+0x28c>
 8002a90:	2304      	movs	r3, #4
 8002a92:	76fb      	strb	r3, [r7, #27]
 8002a94:	e0e2      	b.n	8002c5c <UART_SetConfig+0x28c>
 8002a96:	2308      	movs	r3, #8
 8002a98:	76fb      	strb	r3, [r7, #27]
 8002a9a:	e0df      	b.n	8002c5c <UART_SetConfig+0x28c>
 8002a9c:	2310      	movs	r3, #16
 8002a9e:	76fb      	strb	r3, [r7, #27]
 8002aa0:	bf00      	nop
 8002aa2:	e0db      	b.n	8002c5c <UART_SetConfig+0x28c>
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	4a87      	ldr	r2, [pc, #540]	; (8002cc8 <UART_SetConfig+0x2f8>)
 8002aaa:	4293      	cmp	r3, r2
 8002aac:	d134      	bne.n	8002b18 <UART_SetConfig+0x148>
 8002aae:	4b85      	ldr	r3, [pc, #532]	; (8002cc4 <UART_SetConfig+0x2f4>)
 8002ab0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002ab4:	f003 030c 	and.w	r3, r3, #12
 8002ab8:	2b0c      	cmp	r3, #12
 8002aba:	d829      	bhi.n	8002b10 <UART_SetConfig+0x140>
 8002abc:	a201      	add	r2, pc, #4	; (adr r2, 8002ac4 <UART_SetConfig+0xf4>)
 8002abe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002ac2:	bf00      	nop
 8002ac4:	08002af9 	.word	0x08002af9
 8002ac8:	08002b11 	.word	0x08002b11
 8002acc:	08002b11 	.word	0x08002b11
 8002ad0:	08002b11 	.word	0x08002b11
 8002ad4:	08002b05 	.word	0x08002b05
 8002ad8:	08002b11 	.word	0x08002b11
 8002adc:	08002b11 	.word	0x08002b11
 8002ae0:	08002b11 	.word	0x08002b11
 8002ae4:	08002aff 	.word	0x08002aff
 8002ae8:	08002b11 	.word	0x08002b11
 8002aec:	08002b11 	.word	0x08002b11
 8002af0:	08002b11 	.word	0x08002b11
 8002af4:	08002b0b 	.word	0x08002b0b
 8002af8:	2300      	movs	r3, #0
 8002afa:	76fb      	strb	r3, [r7, #27]
 8002afc:	e0ae      	b.n	8002c5c <UART_SetConfig+0x28c>
 8002afe:	2302      	movs	r3, #2
 8002b00:	76fb      	strb	r3, [r7, #27]
 8002b02:	e0ab      	b.n	8002c5c <UART_SetConfig+0x28c>
 8002b04:	2304      	movs	r3, #4
 8002b06:	76fb      	strb	r3, [r7, #27]
 8002b08:	e0a8      	b.n	8002c5c <UART_SetConfig+0x28c>
 8002b0a:	2308      	movs	r3, #8
 8002b0c:	76fb      	strb	r3, [r7, #27]
 8002b0e:	e0a5      	b.n	8002c5c <UART_SetConfig+0x28c>
 8002b10:	2310      	movs	r3, #16
 8002b12:	76fb      	strb	r3, [r7, #27]
 8002b14:	bf00      	nop
 8002b16:	e0a1      	b.n	8002c5c <UART_SetConfig+0x28c>
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	4a6b      	ldr	r2, [pc, #428]	; (8002ccc <UART_SetConfig+0x2fc>)
 8002b1e:	4293      	cmp	r3, r2
 8002b20:	d120      	bne.n	8002b64 <UART_SetConfig+0x194>
 8002b22:	4b68      	ldr	r3, [pc, #416]	; (8002cc4 <UART_SetConfig+0x2f4>)
 8002b24:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b28:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8002b2c:	2b10      	cmp	r3, #16
 8002b2e:	d00f      	beq.n	8002b50 <UART_SetConfig+0x180>
 8002b30:	2b10      	cmp	r3, #16
 8002b32:	d802      	bhi.n	8002b3a <UART_SetConfig+0x16a>
 8002b34:	2b00      	cmp	r3, #0
 8002b36:	d005      	beq.n	8002b44 <UART_SetConfig+0x174>
 8002b38:	e010      	b.n	8002b5c <UART_SetConfig+0x18c>
 8002b3a:	2b20      	cmp	r3, #32
 8002b3c:	d005      	beq.n	8002b4a <UART_SetConfig+0x17a>
 8002b3e:	2b30      	cmp	r3, #48	; 0x30
 8002b40:	d009      	beq.n	8002b56 <UART_SetConfig+0x186>
 8002b42:	e00b      	b.n	8002b5c <UART_SetConfig+0x18c>
 8002b44:	2300      	movs	r3, #0
 8002b46:	76fb      	strb	r3, [r7, #27]
 8002b48:	e088      	b.n	8002c5c <UART_SetConfig+0x28c>
 8002b4a:	2302      	movs	r3, #2
 8002b4c:	76fb      	strb	r3, [r7, #27]
 8002b4e:	e085      	b.n	8002c5c <UART_SetConfig+0x28c>
 8002b50:	2304      	movs	r3, #4
 8002b52:	76fb      	strb	r3, [r7, #27]
 8002b54:	e082      	b.n	8002c5c <UART_SetConfig+0x28c>
 8002b56:	2308      	movs	r3, #8
 8002b58:	76fb      	strb	r3, [r7, #27]
 8002b5a:	e07f      	b.n	8002c5c <UART_SetConfig+0x28c>
 8002b5c:	2310      	movs	r3, #16
 8002b5e:	76fb      	strb	r3, [r7, #27]
 8002b60:	bf00      	nop
 8002b62:	e07b      	b.n	8002c5c <UART_SetConfig+0x28c>
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	4a59      	ldr	r2, [pc, #356]	; (8002cd0 <UART_SetConfig+0x300>)
 8002b6a:	4293      	cmp	r3, r2
 8002b6c:	d120      	bne.n	8002bb0 <UART_SetConfig+0x1e0>
 8002b6e:	4b55      	ldr	r3, [pc, #340]	; (8002cc4 <UART_SetConfig+0x2f4>)
 8002b70:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b74:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8002b78:	2b40      	cmp	r3, #64	; 0x40
 8002b7a:	d00f      	beq.n	8002b9c <UART_SetConfig+0x1cc>
 8002b7c:	2b40      	cmp	r3, #64	; 0x40
 8002b7e:	d802      	bhi.n	8002b86 <UART_SetConfig+0x1b6>
 8002b80:	2b00      	cmp	r3, #0
 8002b82:	d005      	beq.n	8002b90 <UART_SetConfig+0x1c0>
 8002b84:	e010      	b.n	8002ba8 <UART_SetConfig+0x1d8>
 8002b86:	2b80      	cmp	r3, #128	; 0x80
 8002b88:	d005      	beq.n	8002b96 <UART_SetConfig+0x1c6>
 8002b8a:	2bc0      	cmp	r3, #192	; 0xc0
 8002b8c:	d009      	beq.n	8002ba2 <UART_SetConfig+0x1d2>
 8002b8e:	e00b      	b.n	8002ba8 <UART_SetConfig+0x1d8>
 8002b90:	2300      	movs	r3, #0
 8002b92:	76fb      	strb	r3, [r7, #27]
 8002b94:	e062      	b.n	8002c5c <UART_SetConfig+0x28c>
 8002b96:	2302      	movs	r3, #2
 8002b98:	76fb      	strb	r3, [r7, #27]
 8002b9a:	e05f      	b.n	8002c5c <UART_SetConfig+0x28c>
 8002b9c:	2304      	movs	r3, #4
 8002b9e:	76fb      	strb	r3, [r7, #27]
 8002ba0:	e05c      	b.n	8002c5c <UART_SetConfig+0x28c>
 8002ba2:	2308      	movs	r3, #8
 8002ba4:	76fb      	strb	r3, [r7, #27]
 8002ba6:	e059      	b.n	8002c5c <UART_SetConfig+0x28c>
 8002ba8:	2310      	movs	r3, #16
 8002baa:	76fb      	strb	r3, [r7, #27]
 8002bac:	bf00      	nop
 8002bae:	e055      	b.n	8002c5c <UART_SetConfig+0x28c>
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	4a47      	ldr	r2, [pc, #284]	; (8002cd4 <UART_SetConfig+0x304>)
 8002bb6:	4293      	cmp	r3, r2
 8002bb8:	d124      	bne.n	8002c04 <UART_SetConfig+0x234>
 8002bba:	4b42      	ldr	r3, [pc, #264]	; (8002cc4 <UART_SetConfig+0x2f4>)
 8002bbc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002bc0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002bc4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002bc8:	d012      	beq.n	8002bf0 <UART_SetConfig+0x220>
 8002bca:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002bce:	d802      	bhi.n	8002bd6 <UART_SetConfig+0x206>
 8002bd0:	2b00      	cmp	r3, #0
 8002bd2:	d007      	beq.n	8002be4 <UART_SetConfig+0x214>
 8002bd4:	e012      	b.n	8002bfc <UART_SetConfig+0x22c>
 8002bd6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002bda:	d006      	beq.n	8002bea <UART_SetConfig+0x21a>
 8002bdc:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002be0:	d009      	beq.n	8002bf6 <UART_SetConfig+0x226>
 8002be2:	e00b      	b.n	8002bfc <UART_SetConfig+0x22c>
 8002be4:	2300      	movs	r3, #0
 8002be6:	76fb      	strb	r3, [r7, #27]
 8002be8:	e038      	b.n	8002c5c <UART_SetConfig+0x28c>
 8002bea:	2302      	movs	r3, #2
 8002bec:	76fb      	strb	r3, [r7, #27]
 8002bee:	e035      	b.n	8002c5c <UART_SetConfig+0x28c>
 8002bf0:	2304      	movs	r3, #4
 8002bf2:	76fb      	strb	r3, [r7, #27]
 8002bf4:	e032      	b.n	8002c5c <UART_SetConfig+0x28c>
 8002bf6:	2308      	movs	r3, #8
 8002bf8:	76fb      	strb	r3, [r7, #27]
 8002bfa:	e02f      	b.n	8002c5c <UART_SetConfig+0x28c>
 8002bfc:	2310      	movs	r3, #16
 8002bfe:	76fb      	strb	r3, [r7, #27]
 8002c00:	bf00      	nop
 8002c02:	e02b      	b.n	8002c5c <UART_SetConfig+0x28c>
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	4a2c      	ldr	r2, [pc, #176]	; (8002cbc <UART_SetConfig+0x2ec>)
 8002c0a:	4293      	cmp	r3, r2
 8002c0c:	d124      	bne.n	8002c58 <UART_SetConfig+0x288>
 8002c0e:	4b2d      	ldr	r3, [pc, #180]	; (8002cc4 <UART_SetConfig+0x2f4>)
 8002c10:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002c14:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8002c18:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002c1c:	d012      	beq.n	8002c44 <UART_SetConfig+0x274>
 8002c1e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002c22:	d802      	bhi.n	8002c2a <UART_SetConfig+0x25a>
 8002c24:	2b00      	cmp	r3, #0
 8002c26:	d007      	beq.n	8002c38 <UART_SetConfig+0x268>
 8002c28:	e012      	b.n	8002c50 <UART_SetConfig+0x280>
 8002c2a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002c2e:	d006      	beq.n	8002c3e <UART_SetConfig+0x26e>
 8002c30:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8002c34:	d009      	beq.n	8002c4a <UART_SetConfig+0x27a>
 8002c36:	e00b      	b.n	8002c50 <UART_SetConfig+0x280>
 8002c38:	2300      	movs	r3, #0
 8002c3a:	76fb      	strb	r3, [r7, #27]
 8002c3c:	e00e      	b.n	8002c5c <UART_SetConfig+0x28c>
 8002c3e:	2302      	movs	r3, #2
 8002c40:	76fb      	strb	r3, [r7, #27]
 8002c42:	e00b      	b.n	8002c5c <UART_SetConfig+0x28c>
 8002c44:	2304      	movs	r3, #4
 8002c46:	76fb      	strb	r3, [r7, #27]
 8002c48:	e008      	b.n	8002c5c <UART_SetConfig+0x28c>
 8002c4a:	2308      	movs	r3, #8
 8002c4c:	76fb      	strb	r3, [r7, #27]
 8002c4e:	e005      	b.n	8002c5c <UART_SetConfig+0x28c>
 8002c50:	2310      	movs	r3, #16
 8002c52:	76fb      	strb	r3, [r7, #27]
 8002c54:	bf00      	nop
 8002c56:	e001      	b.n	8002c5c <UART_SetConfig+0x28c>
 8002c58:	2310      	movs	r3, #16
 8002c5a:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	4a16      	ldr	r2, [pc, #88]	; (8002cbc <UART_SetConfig+0x2ec>)
 8002c62:	4293      	cmp	r3, r2
 8002c64:	f040 80fa 	bne.w	8002e5c <UART_SetConfig+0x48c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8002c68:	7efb      	ldrb	r3, [r7, #27]
 8002c6a:	2b08      	cmp	r3, #8
 8002c6c:	d836      	bhi.n	8002cdc <UART_SetConfig+0x30c>
 8002c6e:	a201      	add	r2, pc, #4	; (adr r2, 8002c74 <UART_SetConfig+0x2a4>)
 8002c70:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002c74:	08002c99 	.word	0x08002c99
 8002c78:	08002cdd 	.word	0x08002cdd
 8002c7c:	08002ca1 	.word	0x08002ca1
 8002c80:	08002cdd 	.word	0x08002cdd
 8002c84:	08002ca7 	.word	0x08002ca7
 8002c88:	08002cdd 	.word	0x08002cdd
 8002c8c:	08002cdd 	.word	0x08002cdd
 8002c90:	08002cdd 	.word	0x08002cdd
 8002c94:	08002caf 	.word	0x08002caf
    {
      case UART_CLOCKSOURCE_PCLK1:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = (HAL_RCC_GetPCLK1Freq() / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
#else
        lpuart_ker_ck_pres = HAL_RCC_GetPCLK1Freq();
 8002c98:	f7fe ffb0 	bl	8001bfc <HAL_RCC_GetPCLK1Freq>
 8002c9c:	60f8      	str	r0, [r7, #12]
#endif /* USART_PRESC_PRESCALER */
        break;
 8002c9e:	e020      	b.n	8002ce2 <UART_SetConfig+0x312>
      case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = ((uint32_t)HSI_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
#else
        lpuart_ker_ck_pres = (uint32_t)HSI_VALUE;
 8002ca0:	4b0d      	ldr	r3, [pc, #52]	; (8002cd8 <UART_SetConfig+0x308>)
 8002ca2:	60fb      	str	r3, [r7, #12]
#endif /* USART_PRESC_PRESCALER */
        break;
 8002ca4:	e01d      	b.n	8002ce2 <UART_SetConfig+0x312>
      case UART_CLOCKSOURCE_SYSCLK:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = (HAL_RCC_GetSysClockFreq() / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
#else
        lpuart_ker_ck_pres = HAL_RCC_GetSysClockFreq();
 8002ca6:	f7fe ff13 	bl	8001ad0 <HAL_RCC_GetSysClockFreq>
 8002caa:	60f8      	str	r0, [r7, #12]
#endif /* USART_PRESC_PRESCALER */
        break;
 8002cac:	e019      	b.n	8002ce2 <UART_SetConfig+0x312>
      case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = ((uint32_t)LSE_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
#else
        lpuart_ker_ck_pres = (uint32_t)LSE_VALUE;
 8002cae:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002cb2:	60fb      	str	r3, [r7, #12]
#endif /* USART_PRESC_PRESCALER */
        break;
 8002cb4:	e015      	b.n	8002ce2 <UART_SetConfig+0x312>
 8002cb6:	bf00      	nop
 8002cb8:	efff69f3 	.word	0xefff69f3
 8002cbc:	40008000 	.word	0x40008000
 8002cc0:	40013800 	.word	0x40013800
 8002cc4:	40021000 	.word	0x40021000
 8002cc8:	40004400 	.word	0x40004400
 8002ccc:	40004800 	.word	0x40004800
 8002cd0:	40004c00 	.word	0x40004c00
 8002cd4:	40005000 	.word	0x40005000
 8002cd8:	00f42400 	.word	0x00f42400
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 8002cdc:	2301      	movs	r3, #1
 8002cde:	74fb      	strb	r3, [r7, #19]
        break;
 8002ce0:	bf00      	nop
    }

    /* if proper clock source reported */
    if (lpuart_ker_ck_pres != 0U)
 8002ce2:	68fb      	ldr	r3, [r7, #12]
 8002ce4:	2b00      	cmp	r3, #0
 8002ce6:	f000 81ac 	beq.w	8003042 <UART_SetConfig+0x672>
    {
      /* ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	685a      	ldr	r2, [r3, #4]
 8002cee:	4613      	mov	r3, r2
 8002cf0:	005b      	lsls	r3, r3, #1
 8002cf2:	4413      	add	r3, r2
 8002cf4:	68fa      	ldr	r2, [r7, #12]
 8002cf6:	429a      	cmp	r2, r3
 8002cf8:	d305      	bcc.n	8002d06 <UART_SetConfig+0x336>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	685b      	ldr	r3, [r3, #4]
 8002cfe:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8002d00:	68fa      	ldr	r2, [r7, #12]
 8002d02:	429a      	cmp	r2, r3
 8002d04:	d902      	bls.n	8002d0c <UART_SetConfig+0x33c>
      {
        ret = HAL_ERROR;
 8002d06:	2301      	movs	r3, #1
 8002d08:	74fb      	strb	r3, [r7, #19]
 8002d0a:	e19a      	b.n	8003042 <UART_SetConfig+0x672>
      }
      else
      {
        switch (clocksource)
 8002d0c:	7efb      	ldrb	r3, [r7, #27]
 8002d0e:	2b08      	cmp	r3, #8
 8002d10:	f200 8091 	bhi.w	8002e36 <UART_SetConfig+0x466>
 8002d14:	a201      	add	r2, pc, #4	; (adr r2, 8002d1c <UART_SetConfig+0x34c>)
 8002d16:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002d1a:	bf00      	nop
 8002d1c:	08002d41 	.word	0x08002d41
 8002d20:	08002e37 	.word	0x08002e37
 8002d24:	08002d8d 	.word	0x08002d8d
 8002d28:	08002e37 	.word	0x08002e37
 8002d2c:	08002dc1 	.word	0x08002dc1
 8002d30:	08002e37 	.word	0x08002e37
 8002d34:	08002e37 	.word	0x08002e37
 8002d38:	08002e37 	.word	0x08002e37
 8002d3c:	08002e0d 	.word	0x08002e0d
        {
          case UART_CLOCKSOURCE_PCLK1:
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8002d40:	f7fe ff5c 	bl	8001bfc <HAL_RCC_GetPCLK1Freq>
 8002d44:	4603      	mov	r3, r0
 8002d46:	4619      	mov	r1, r3
 8002d48:	f04f 0200 	mov.w	r2, #0
 8002d4c:	f04f 0300 	mov.w	r3, #0
 8002d50:	f04f 0400 	mov.w	r4, #0
 8002d54:	0214      	lsls	r4, r2, #8
 8002d56:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 8002d5a:	020b      	lsls	r3, r1, #8
 8002d5c:	687a      	ldr	r2, [r7, #4]
 8002d5e:	6852      	ldr	r2, [r2, #4]
 8002d60:	0852      	lsrs	r2, r2, #1
 8002d62:	4611      	mov	r1, r2
 8002d64:	f04f 0200 	mov.w	r2, #0
 8002d68:	eb13 0b01 	adds.w	fp, r3, r1
 8002d6c:	eb44 0c02 	adc.w	ip, r4, r2
 8002d70:	4658      	mov	r0, fp
 8002d72:	4661      	mov	r1, ip
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	685b      	ldr	r3, [r3, #4]
 8002d78:	f04f 0400 	mov.w	r4, #0
 8002d7c:	461a      	mov	r2, r3
 8002d7e:	4623      	mov	r3, r4
 8002d80:	f7fd fa2a 	bl	80001d8 <__aeabi_uldivmod>
 8002d84:	4603      	mov	r3, r0
 8002d86:	460c      	mov	r4, r1
 8002d88:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
            break;
 8002d8a:	e057      	b.n	8002e3c <UART_SetConfig+0x46c>
          case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate));
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	685b      	ldr	r3, [r3, #4]
 8002d90:	085b      	lsrs	r3, r3, #1
 8002d92:	f04f 0400 	mov.w	r4, #0
 8002d96:	49b1      	ldr	r1, [pc, #708]	; (800305c <UART_SetConfig+0x68c>)
 8002d98:	f04f 0200 	mov.w	r2, #0
 8002d9c:	eb13 0b01 	adds.w	fp, r3, r1
 8002da0:	eb44 0c02 	adc.w	ip, r4, r2
 8002da4:	4658      	mov	r0, fp
 8002da6:	4661      	mov	r1, ip
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	685b      	ldr	r3, [r3, #4]
 8002dac:	f04f 0400 	mov.w	r4, #0
 8002db0:	461a      	mov	r2, r3
 8002db2:	4623      	mov	r3, r4
 8002db4:	f7fd fa10 	bl	80001d8 <__aeabi_uldivmod>
 8002db8:	4603      	mov	r3, r0
 8002dba:	460c      	mov	r4, r1
 8002dbc:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
            break;
 8002dbe:	e03d      	b.n	8002e3c <UART_SetConfig+0x46c>
          case UART_CLOCKSOURCE_SYSCLK:
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8002dc0:	f7fe fe86 	bl	8001ad0 <HAL_RCC_GetSysClockFreq>
 8002dc4:	4603      	mov	r3, r0
 8002dc6:	4619      	mov	r1, r3
 8002dc8:	f04f 0200 	mov.w	r2, #0
 8002dcc:	f04f 0300 	mov.w	r3, #0
 8002dd0:	f04f 0400 	mov.w	r4, #0
 8002dd4:	0214      	lsls	r4, r2, #8
 8002dd6:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 8002dda:	020b      	lsls	r3, r1, #8
 8002ddc:	687a      	ldr	r2, [r7, #4]
 8002dde:	6852      	ldr	r2, [r2, #4]
 8002de0:	0852      	lsrs	r2, r2, #1
 8002de2:	4611      	mov	r1, r2
 8002de4:	f04f 0200 	mov.w	r2, #0
 8002de8:	eb13 0b01 	adds.w	fp, r3, r1
 8002dec:	eb44 0c02 	adc.w	ip, r4, r2
 8002df0:	4658      	mov	r0, fp
 8002df2:	4661      	mov	r1, ip
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	685b      	ldr	r3, [r3, #4]
 8002df8:	f04f 0400 	mov.w	r4, #0
 8002dfc:	461a      	mov	r2, r3
 8002dfe:	4623      	mov	r3, r4
 8002e00:	f7fd f9ea 	bl	80001d8 <__aeabi_uldivmod>
 8002e04:	4603      	mov	r3, r0
 8002e06:	460c      	mov	r4, r1
 8002e08:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
            break;
 8002e0a:	e017      	b.n	8002e3c <UART_SetConfig+0x46c>
          case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate));
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	685b      	ldr	r3, [r3, #4]
 8002e10:	085b      	lsrs	r3, r3, #1
 8002e12:	f04f 0400 	mov.w	r4, #0
 8002e16:	f513 0000 	adds.w	r0, r3, #8388608	; 0x800000
 8002e1a:	f144 0100 	adc.w	r1, r4, #0
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	685b      	ldr	r3, [r3, #4]
 8002e22:	f04f 0400 	mov.w	r4, #0
 8002e26:	461a      	mov	r2, r3
 8002e28:	4623      	mov	r3, r4
 8002e2a:	f7fd f9d5 	bl	80001d8 <__aeabi_uldivmod>
 8002e2e:	4603      	mov	r3, r0
 8002e30:	460c      	mov	r4, r1
 8002e32:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
            break;
 8002e34:	e002      	b.n	8002e3c <UART_SetConfig+0x46c>
          case UART_CLOCKSOURCE_UNDEFINED:
          default:
            ret = HAL_ERROR;
 8002e36:	2301      	movs	r3, #1
 8002e38:	74fb      	strb	r3, [r7, #19]
            break;
 8002e3a:	bf00      	nop
        }

        /* It is forbidden to write values lower than 0x300 in the LPUART_BRR register */
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8002e3c:	697b      	ldr	r3, [r7, #20]
 8002e3e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002e42:	d308      	bcc.n	8002e56 <UART_SetConfig+0x486>
 8002e44:	697b      	ldr	r3, [r7, #20]
 8002e46:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002e4a:	d204      	bcs.n	8002e56 <UART_SetConfig+0x486>
        {
          huart->Instance->BRR = usartdiv;
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	697a      	ldr	r2, [r7, #20]
 8002e52:	60da      	str	r2, [r3, #12]
 8002e54:	e0f5      	b.n	8003042 <UART_SetConfig+0x672>
        }
        else
        {
          ret = HAL_ERROR;
 8002e56:	2301      	movs	r3, #1
 8002e58:	74fb      	strb	r3, [r7, #19]
 8002e5a:	e0f2      	b.n	8003042 <UART_SetConfig+0x672>
        }
      } /*   if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) || (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (lpuart_ker_ck_pres != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	69db      	ldr	r3, [r3, #28]
 8002e60:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002e64:	d17f      	bne.n	8002f66 <UART_SetConfig+0x596>
  {
    switch (clocksource)
 8002e66:	7efb      	ldrb	r3, [r7, #27]
 8002e68:	2b08      	cmp	r3, #8
 8002e6a:	d85c      	bhi.n	8002f26 <UART_SetConfig+0x556>
 8002e6c:	a201      	add	r2, pc, #4	; (adr r2, 8002e74 <UART_SetConfig+0x4a4>)
 8002e6e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002e72:	bf00      	nop
 8002e74:	08002e99 	.word	0x08002e99
 8002e78:	08002eb7 	.word	0x08002eb7
 8002e7c:	08002ed5 	.word	0x08002ed5
 8002e80:	08002f27 	.word	0x08002f27
 8002e84:	08002ef1 	.word	0x08002ef1
 8002e88:	08002f27 	.word	0x08002f27
 8002e8c:	08002f27 	.word	0x08002f27
 8002e90:	08002f27 	.word	0x08002f27
 8002e94:	08002f0f 	.word	0x08002f0f
    {
      case UART_CLOCKSOURCE_PCLK1:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8002e98:	f7fe feb0 	bl	8001bfc <HAL_RCC_GetPCLK1Freq>
 8002e9c:	4603      	mov	r3, r0
 8002e9e:	005a      	lsls	r2, r3, #1
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	685b      	ldr	r3, [r3, #4]
 8002ea4:	085b      	lsrs	r3, r3, #1
 8002ea6:	441a      	add	r2, r3
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	685b      	ldr	r3, [r3, #4]
 8002eac:	fbb2 f3f3 	udiv	r3, r2, r3
 8002eb0:	b29b      	uxth	r3, r3
 8002eb2:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 8002eb4:	e03a      	b.n	8002f2c <UART_SetConfig+0x55c>
      case UART_CLOCKSOURCE_PCLK2:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 8002eb6:	f7fe feb7 	bl	8001c28 <HAL_RCC_GetPCLK2Freq>
 8002eba:	4603      	mov	r3, r0
 8002ebc:	005a      	lsls	r2, r3, #1
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	685b      	ldr	r3, [r3, #4]
 8002ec2:	085b      	lsrs	r3, r3, #1
 8002ec4:	441a      	add	r2, r3
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	685b      	ldr	r3, [r3, #4]
 8002eca:	fbb2 f3f3 	udiv	r3, r2, r3
 8002ece:	b29b      	uxth	r3, r3
 8002ed0:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 8002ed2:	e02b      	b.n	8002f2c <UART_SetConfig+0x55c>
      case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	685b      	ldr	r3, [r3, #4]
 8002ed8:	085b      	lsrs	r3, r3, #1
 8002eda:	f103 73f4 	add.w	r3, r3, #31981568	; 0x1e80000
 8002ede:	f503 4390 	add.w	r3, r3, #18432	; 0x4800
 8002ee2:	687a      	ldr	r2, [r7, #4]
 8002ee4:	6852      	ldr	r2, [r2, #4]
 8002ee6:	fbb3 f3f2 	udiv	r3, r3, r2
 8002eea:	b29b      	uxth	r3, r3
 8002eec:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 8002eee:	e01d      	b.n	8002f2c <UART_SetConfig+0x55c>
      case UART_CLOCKSOURCE_SYSCLK:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8002ef0:	f7fe fdee 	bl	8001ad0 <HAL_RCC_GetSysClockFreq>
 8002ef4:	4603      	mov	r3, r0
 8002ef6:	005a      	lsls	r2, r3, #1
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	685b      	ldr	r3, [r3, #4]
 8002efc:	085b      	lsrs	r3, r3, #1
 8002efe:	441a      	add	r2, r3
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	685b      	ldr	r3, [r3, #4]
 8002f04:	fbb2 f3f3 	udiv	r3, r2, r3
 8002f08:	b29b      	uxth	r3, r3
 8002f0a:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 8002f0c:	e00e      	b.n	8002f2c <UART_SetConfig+0x55c>
      case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	685b      	ldr	r3, [r3, #4]
 8002f12:	085b      	lsrs	r3, r3, #1
 8002f14:	f503 3280 	add.w	r2, r3, #65536	; 0x10000
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	685b      	ldr	r3, [r3, #4]
 8002f1c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002f20:	b29b      	uxth	r3, r3
 8002f22:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 8002f24:	e002      	b.n	8002f2c <UART_SetConfig+0x55c>
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 8002f26:	2301      	movs	r3, #1
 8002f28:	74fb      	strb	r3, [r7, #19]
        break;
 8002f2a:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002f2c:	697b      	ldr	r3, [r7, #20]
 8002f2e:	2b0f      	cmp	r3, #15
 8002f30:	d916      	bls.n	8002f60 <UART_SetConfig+0x590>
 8002f32:	697b      	ldr	r3, [r7, #20]
 8002f34:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002f38:	d212      	bcs.n	8002f60 <UART_SetConfig+0x590>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8002f3a:	697b      	ldr	r3, [r7, #20]
 8002f3c:	b29b      	uxth	r3, r3
 8002f3e:	f023 030f 	bic.w	r3, r3, #15
 8002f42:	817b      	strh	r3, [r7, #10]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8002f44:	697b      	ldr	r3, [r7, #20]
 8002f46:	085b      	lsrs	r3, r3, #1
 8002f48:	b29b      	uxth	r3, r3
 8002f4a:	f003 0307 	and.w	r3, r3, #7
 8002f4e:	b29a      	uxth	r2, r3
 8002f50:	897b      	ldrh	r3, [r7, #10]
 8002f52:	4313      	orrs	r3, r2
 8002f54:	817b      	strh	r3, [r7, #10]
      huart->Instance->BRR = brrtemp;
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	897a      	ldrh	r2, [r7, #10]
 8002f5c:	60da      	str	r2, [r3, #12]
 8002f5e:	e070      	b.n	8003042 <UART_SetConfig+0x672>
    }
    else
    {
      ret = HAL_ERROR;
 8002f60:	2301      	movs	r3, #1
 8002f62:	74fb      	strb	r3, [r7, #19]
 8002f64:	e06d      	b.n	8003042 <UART_SetConfig+0x672>
    }
  }
  else
  {
    switch (clocksource)
 8002f66:	7efb      	ldrb	r3, [r7, #27]
 8002f68:	2b08      	cmp	r3, #8
 8002f6a:	d859      	bhi.n	8003020 <UART_SetConfig+0x650>
 8002f6c:	a201      	add	r2, pc, #4	; (adr r2, 8002f74 <UART_SetConfig+0x5a4>)
 8002f6e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002f72:	bf00      	nop
 8002f74:	08002f99 	.word	0x08002f99
 8002f78:	08002fb5 	.word	0x08002fb5
 8002f7c:	08002fd1 	.word	0x08002fd1
 8002f80:	08003021 	.word	0x08003021
 8002f84:	08002fed 	.word	0x08002fed
 8002f88:	08003021 	.word	0x08003021
 8002f8c:	08003021 	.word	0x08003021
 8002f90:	08003021 	.word	0x08003021
 8002f94:	08003009 	.word	0x08003009
    {
      case UART_CLOCKSOURCE_PCLK1:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8002f98:	f7fe fe30 	bl	8001bfc <HAL_RCC_GetPCLK1Freq>
 8002f9c:	4602      	mov	r2, r0
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	685b      	ldr	r3, [r3, #4]
 8002fa2:	085b      	lsrs	r3, r3, #1
 8002fa4:	441a      	add	r2, r3
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	685b      	ldr	r3, [r3, #4]
 8002faa:	fbb2 f3f3 	udiv	r3, r2, r3
 8002fae:	b29b      	uxth	r3, r3
 8002fb0:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 8002fb2:	e038      	b.n	8003026 <UART_SetConfig+0x656>
      case UART_CLOCKSOURCE_PCLK2:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 8002fb4:	f7fe fe38 	bl	8001c28 <HAL_RCC_GetPCLK2Freq>
 8002fb8:	4602      	mov	r2, r0
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	685b      	ldr	r3, [r3, #4]
 8002fbe:	085b      	lsrs	r3, r3, #1
 8002fc0:	441a      	add	r2, r3
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	685b      	ldr	r3, [r3, #4]
 8002fc6:	fbb2 f3f3 	udiv	r3, r2, r3
 8002fca:	b29b      	uxth	r3, r3
 8002fcc:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 8002fce:	e02a      	b.n	8003026 <UART_SetConfig+0x656>
      case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	685b      	ldr	r3, [r3, #4]
 8002fd4:	085b      	lsrs	r3, r3, #1
 8002fd6:	f503 0374 	add.w	r3, r3, #15990784	; 0xf40000
 8002fda:	f503 5310 	add.w	r3, r3, #9216	; 0x2400
 8002fde:	687a      	ldr	r2, [r7, #4]
 8002fe0:	6852      	ldr	r2, [r2, #4]
 8002fe2:	fbb3 f3f2 	udiv	r3, r3, r2
 8002fe6:	b29b      	uxth	r3, r3
 8002fe8:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 8002fea:	e01c      	b.n	8003026 <UART_SetConfig+0x656>
      case UART_CLOCKSOURCE_SYSCLK:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8002fec:	f7fe fd70 	bl	8001ad0 <HAL_RCC_GetSysClockFreq>
 8002ff0:	4602      	mov	r2, r0
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	685b      	ldr	r3, [r3, #4]
 8002ff6:	085b      	lsrs	r3, r3, #1
 8002ff8:	441a      	add	r2, r3
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	685b      	ldr	r3, [r3, #4]
 8002ffe:	fbb2 f3f3 	udiv	r3, r2, r3
 8003002:	b29b      	uxth	r3, r3
 8003004:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 8003006:	e00e      	b.n	8003026 <UART_SetConfig+0x656>
      case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	685b      	ldr	r3, [r3, #4]
 800300c:	085b      	lsrs	r3, r3, #1
 800300e:	f503 4200 	add.w	r2, r3, #32768	; 0x8000
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	685b      	ldr	r3, [r3, #4]
 8003016:	fbb2 f3f3 	udiv	r3, r2, r3
 800301a:	b29b      	uxth	r3, r3
 800301c:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 800301e:	e002      	b.n	8003026 <UART_SetConfig+0x656>
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 8003020:	2301      	movs	r3, #1
 8003022:	74fb      	strb	r3, [r7, #19]
        break;
 8003024:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003026:	697b      	ldr	r3, [r7, #20]
 8003028:	2b0f      	cmp	r3, #15
 800302a:	d908      	bls.n	800303e <UART_SetConfig+0x66e>
 800302c:	697b      	ldr	r3, [r7, #20]
 800302e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003032:	d204      	bcs.n	800303e <UART_SetConfig+0x66e>
    {
      huart->Instance->BRR = usartdiv;
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	697a      	ldr	r2, [r7, #20]
 800303a:	60da      	str	r2, [r3, #12]
 800303c:	e001      	b.n	8003042 <UART_SetConfig+0x672>
    }
    else
    {
      ret = HAL_ERROR;
 800303e:	2301      	movs	r3, #1
 8003040:	74fb      	strb	r3, [r7, #19]
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	2200      	movs	r2, #0
 8003046:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	2200      	movs	r2, #0
 800304c:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 800304e:	7cfb      	ldrb	r3, [r7, #19]
}
 8003050:	4618      	mov	r0, r3
 8003052:	3720      	adds	r7, #32
 8003054:	46bd      	mov	sp, r7
 8003056:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}
 800305a:	bf00      	nop
 800305c:	f4240000 	.word	0xf4240000

08003060 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003060:	b480      	push	{r7}
 8003062:	b083      	sub	sp, #12
 8003064:	af00      	add	r7, sp, #0
 8003066:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800306c:	f003 0301 	and.w	r3, r3, #1
 8003070:	2b00      	cmp	r3, #0
 8003072:	d00a      	beq.n	800308a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	685b      	ldr	r3, [r3, #4]
 800307a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	430a      	orrs	r2, r1
 8003088:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800308e:	f003 0302 	and.w	r3, r3, #2
 8003092:	2b00      	cmp	r3, #0
 8003094:	d00a      	beq.n	80030ac <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	685b      	ldr	r3, [r3, #4]
 800309c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	430a      	orrs	r2, r1
 80030aa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030b0:	f003 0304 	and.w	r3, r3, #4
 80030b4:	2b00      	cmp	r3, #0
 80030b6:	d00a      	beq.n	80030ce <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	685b      	ldr	r3, [r3, #4]
 80030be:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	430a      	orrs	r2, r1
 80030cc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030d2:	f003 0308 	and.w	r3, r3, #8
 80030d6:	2b00      	cmp	r3, #0
 80030d8:	d00a      	beq.n	80030f0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	685b      	ldr	r3, [r3, #4]
 80030e0:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	430a      	orrs	r2, r1
 80030ee:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030f4:	f003 0310 	and.w	r3, r3, #16
 80030f8:	2b00      	cmp	r3, #0
 80030fa:	d00a      	beq.n	8003112 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	689b      	ldr	r3, [r3, #8]
 8003102:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	430a      	orrs	r2, r1
 8003110:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003116:	f003 0320 	and.w	r3, r3, #32
 800311a:	2b00      	cmp	r3, #0
 800311c:	d00a      	beq.n	8003134 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	689b      	ldr	r3, [r3, #8]
 8003124:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	430a      	orrs	r2, r1
 8003132:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003138:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800313c:	2b00      	cmp	r3, #0
 800313e:	d01a      	beq.n	8003176 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	685b      	ldr	r3, [r3, #4]
 8003146:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	430a      	orrs	r2, r1
 8003154:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800315a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800315e:	d10a      	bne.n	8003176 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	685b      	ldr	r3, [r3, #4]
 8003166:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	430a      	orrs	r2, r1
 8003174:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800317a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800317e:	2b00      	cmp	r3, #0
 8003180:	d00a      	beq.n	8003198 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	685b      	ldr	r3, [r3, #4]
 8003188:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	430a      	orrs	r2, r1
 8003196:	605a      	str	r2, [r3, #4]
  }
}
 8003198:	bf00      	nop
 800319a:	370c      	adds	r7, #12
 800319c:	46bd      	mov	sp, r7
 800319e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031a2:	4770      	bx	lr

080031a4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80031a4:	b580      	push	{r7, lr}
 80031a6:	b086      	sub	sp, #24
 80031a8:	af02      	add	r7, sp, #8
 80031aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	2200      	movs	r2, #0
 80031b0:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 80031b2:	f7fd fce5 	bl	8000b80 <HAL_GetTick>
 80031b6:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	f003 0308 	and.w	r3, r3, #8
 80031c2:	2b08      	cmp	r3, #8
 80031c4:	d10e      	bne.n	80031e4 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80031c6:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80031ca:	9300      	str	r3, [sp, #0]
 80031cc:	68fb      	ldr	r3, [r7, #12]
 80031ce:	2200      	movs	r2, #0
 80031d0:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80031d4:	6878      	ldr	r0, [r7, #4]
 80031d6:	f000 f82a 	bl	800322e <UART_WaitOnFlagUntilTimeout>
 80031da:	4603      	mov	r3, r0
 80031dc:	2b00      	cmp	r3, #0
 80031de:	d001      	beq.n	80031e4 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80031e0:	2303      	movs	r3, #3
 80031e2:	e020      	b.n	8003226 <UART_CheckIdleState+0x82>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	f003 0304 	and.w	r3, r3, #4
 80031ee:	2b04      	cmp	r3, #4
 80031f0:	d10e      	bne.n	8003210 <UART_CheckIdleState+0x6c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80031f2:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80031f6:	9300      	str	r3, [sp, #0]
 80031f8:	68fb      	ldr	r3, [r7, #12]
 80031fa:	2200      	movs	r2, #0
 80031fc:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8003200:	6878      	ldr	r0, [r7, #4]
 8003202:	f000 f814 	bl	800322e <UART_WaitOnFlagUntilTimeout>
 8003206:	4603      	mov	r3, r0
 8003208:	2b00      	cmp	r3, #0
 800320a:	d001      	beq.n	8003210 <UART_CheckIdleState+0x6c>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800320c:	2303      	movs	r3, #3
 800320e:	e00a      	b.n	8003226 <UART_CheckIdleState+0x82>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	2220      	movs	r2, #32
 8003214:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	2220      	movs	r2, #32
 800321a:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UNLOCK(huart);
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	2200      	movs	r2, #0
 8003220:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 8003224:	2300      	movs	r3, #0
}
 8003226:	4618      	mov	r0, r3
 8003228:	3710      	adds	r7, #16
 800322a:	46bd      	mov	sp, r7
 800322c:	bd80      	pop	{r7, pc}

0800322e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800322e:	b580      	push	{r7, lr}
 8003230:	b084      	sub	sp, #16
 8003232:	af00      	add	r7, sp, #0
 8003234:	60f8      	str	r0, [r7, #12]
 8003236:	60b9      	str	r1, [r7, #8]
 8003238:	603b      	str	r3, [r7, #0]
 800323a:	4613      	mov	r3, r2
 800323c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800323e:	e02a      	b.n	8003296 <UART_WaitOnFlagUntilTimeout+0x68>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003240:	69bb      	ldr	r3, [r7, #24]
 8003242:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003246:	d026      	beq.n	8003296 <UART_WaitOnFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003248:	f7fd fc9a 	bl	8000b80 <HAL_GetTick>
 800324c:	4602      	mov	r2, r0
 800324e:	683b      	ldr	r3, [r7, #0]
 8003250:	1ad3      	subs	r3, r2, r3
 8003252:	69ba      	ldr	r2, [r7, #24]
 8003254:	429a      	cmp	r2, r3
 8003256:	d302      	bcc.n	800325e <UART_WaitOnFlagUntilTimeout+0x30>
 8003258:	69bb      	ldr	r3, [r7, #24]
 800325a:	2b00      	cmp	r3, #0
 800325c:	d11b      	bne.n	8003296 <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800325e:	68fb      	ldr	r3, [r7, #12]
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	681a      	ldr	r2, [r3, #0]
 8003264:	68fb      	ldr	r3, [r7, #12]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800326c:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800326e:	68fb      	ldr	r3, [r7, #12]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	689a      	ldr	r2, [r3, #8]
 8003274:	68fb      	ldr	r3, [r7, #12]
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	f022 0201 	bic.w	r2, r2, #1
 800327c:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 800327e:	68fb      	ldr	r3, [r7, #12]
 8003280:	2220      	movs	r2, #32
 8003282:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 8003284:	68fb      	ldr	r3, [r7, #12]
 8003286:	2220      	movs	r2, #32
 8003288:	679a      	str	r2, [r3, #120]	; 0x78

        __HAL_UNLOCK(huart);
 800328a:	68fb      	ldr	r3, [r7, #12]
 800328c:	2200      	movs	r2, #0
 800328e:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        return HAL_TIMEOUT;
 8003292:	2303      	movs	r3, #3
 8003294:	e00f      	b.n	80032b6 <UART_WaitOnFlagUntilTimeout+0x88>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003296:	68fb      	ldr	r3, [r7, #12]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	69da      	ldr	r2, [r3, #28]
 800329c:	68bb      	ldr	r3, [r7, #8]
 800329e:	4013      	ands	r3, r2
 80032a0:	68ba      	ldr	r2, [r7, #8]
 80032a2:	429a      	cmp	r2, r3
 80032a4:	bf0c      	ite	eq
 80032a6:	2301      	moveq	r3, #1
 80032a8:	2300      	movne	r3, #0
 80032aa:	b2db      	uxtb	r3, r3
 80032ac:	461a      	mov	r2, r3
 80032ae:	79fb      	ldrb	r3, [r7, #7]
 80032b0:	429a      	cmp	r2, r3
 80032b2:	d0c5      	beq.n	8003240 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80032b4:	2300      	movs	r3, #0
}
 80032b6:	4618      	mov	r0, r3
 80032b8:	3710      	adds	r7, #16
 80032ba:	46bd      	mov	sp, r7
 80032bc:	bd80      	pop	{r7, pc}
	...

080032c0 <__libc_init_array>:
 80032c0:	b570      	push	{r4, r5, r6, lr}
 80032c2:	4e0d      	ldr	r6, [pc, #52]	; (80032f8 <__libc_init_array+0x38>)
 80032c4:	4c0d      	ldr	r4, [pc, #52]	; (80032fc <__libc_init_array+0x3c>)
 80032c6:	1ba4      	subs	r4, r4, r6
 80032c8:	10a4      	asrs	r4, r4, #2
 80032ca:	2500      	movs	r5, #0
 80032cc:	42a5      	cmp	r5, r4
 80032ce:	d109      	bne.n	80032e4 <__libc_init_array+0x24>
 80032d0:	4e0b      	ldr	r6, [pc, #44]	; (8003300 <__libc_init_array+0x40>)
 80032d2:	4c0c      	ldr	r4, [pc, #48]	; (8003304 <__libc_init_array+0x44>)
 80032d4:	f000 f820 	bl	8003318 <_init>
 80032d8:	1ba4      	subs	r4, r4, r6
 80032da:	10a4      	asrs	r4, r4, #2
 80032dc:	2500      	movs	r5, #0
 80032de:	42a5      	cmp	r5, r4
 80032e0:	d105      	bne.n	80032ee <__libc_init_array+0x2e>
 80032e2:	bd70      	pop	{r4, r5, r6, pc}
 80032e4:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80032e8:	4798      	blx	r3
 80032ea:	3501      	adds	r5, #1
 80032ec:	e7ee      	b.n	80032cc <__libc_init_array+0xc>
 80032ee:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80032f2:	4798      	blx	r3
 80032f4:	3501      	adds	r5, #1
 80032f6:	e7f2      	b.n	80032de <__libc_init_array+0x1e>
 80032f8:	08003390 	.word	0x08003390
 80032fc:	08003390 	.word	0x08003390
 8003300:	08003390 	.word	0x08003390
 8003304:	08003394 	.word	0x08003394

08003308 <memset>:
 8003308:	4402      	add	r2, r0
 800330a:	4603      	mov	r3, r0
 800330c:	4293      	cmp	r3, r2
 800330e:	d100      	bne.n	8003312 <memset+0xa>
 8003310:	4770      	bx	lr
 8003312:	f803 1b01 	strb.w	r1, [r3], #1
 8003316:	e7f9      	b.n	800330c <memset+0x4>

08003318 <_init>:
 8003318:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800331a:	bf00      	nop
 800331c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800331e:	bc08      	pop	{r3}
 8003320:	469e      	mov	lr, r3
 8003322:	4770      	bx	lr

08003324 <_fini>:
 8003324:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003326:	bf00      	nop
 8003328:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800332a:	bc08      	pop	{r3}
 800332c:	469e      	mov	lr, r3
 800332e:	4770      	bx	lr
