
Project_1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003fc8  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000005c  08004150  08004150  00014150  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080041ac  080041ac  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  080041ac  080041ac  000141ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080041b4  080041b4  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080041b4  080041b4  000141b4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080041b8  080041b8  000141b8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  080041bc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000250  2000000c  080041c8  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000025c  080041c8  0002025c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001100d  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000241a  00000000  00000000  00031049  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000e30  00000000  00000000  00033468  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000ce8  00000000  00000000  00034298  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00026429  00000000  00000000  00034f80  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000d247  00000000  00000000  0005b3a9  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000ea8f4  00000000  00000000  000685f0  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00152ee4  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003940  00000000  00000000  00152f60  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000000c 	.word	0x2000000c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08004138 	.word	0x08004138

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000010 	.word	0x20000010
 80001c4:	08004138 	.word	0x08004138

080001c8 <strcmp>:
 80001c8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001cc:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001d0:	2a01      	cmp	r2, #1
 80001d2:	bf28      	it	cs
 80001d4:	429a      	cmpcs	r2, r3
 80001d6:	d0f7      	beq.n	80001c8 <strcmp>
 80001d8:	1ad0      	subs	r0, r2, r3
 80001da:	4770      	bx	lr

080001dc <__aeabi_uldivmod>:
 80001dc:	b953      	cbnz	r3, 80001f4 <__aeabi_uldivmod+0x18>
 80001de:	b94a      	cbnz	r2, 80001f4 <__aeabi_uldivmod+0x18>
 80001e0:	2900      	cmp	r1, #0
 80001e2:	bf08      	it	eq
 80001e4:	2800      	cmpeq	r0, #0
 80001e6:	bf1c      	itt	ne
 80001e8:	f04f 31ff 	movne.w	r1, #4294967295
 80001ec:	f04f 30ff 	movne.w	r0, #4294967295
 80001f0:	f000 b972 	b.w	80004d8 <__aeabi_idiv0>
 80001f4:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001fc:	f000 f806 	bl	800020c <__udivmoddi4>
 8000200:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000204:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000208:	b004      	add	sp, #16
 800020a:	4770      	bx	lr

0800020c <__udivmoddi4>:
 800020c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000210:	9e08      	ldr	r6, [sp, #32]
 8000212:	4604      	mov	r4, r0
 8000214:	4688      	mov	r8, r1
 8000216:	2b00      	cmp	r3, #0
 8000218:	d14b      	bne.n	80002b2 <__udivmoddi4+0xa6>
 800021a:	428a      	cmp	r2, r1
 800021c:	4615      	mov	r5, r2
 800021e:	d967      	bls.n	80002f0 <__udivmoddi4+0xe4>
 8000220:	fab2 f282 	clz	r2, r2
 8000224:	b14a      	cbz	r2, 800023a <__udivmoddi4+0x2e>
 8000226:	f1c2 0720 	rsb	r7, r2, #32
 800022a:	fa01 f302 	lsl.w	r3, r1, r2
 800022e:	fa20 f707 	lsr.w	r7, r0, r7
 8000232:	4095      	lsls	r5, r2
 8000234:	ea47 0803 	orr.w	r8, r7, r3
 8000238:	4094      	lsls	r4, r2
 800023a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800023e:	0c23      	lsrs	r3, r4, #16
 8000240:	fbb8 f7fe 	udiv	r7, r8, lr
 8000244:	fa1f fc85 	uxth.w	ip, r5
 8000248:	fb0e 8817 	mls	r8, lr, r7, r8
 800024c:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000250:	fb07 f10c 	mul.w	r1, r7, ip
 8000254:	4299      	cmp	r1, r3
 8000256:	d909      	bls.n	800026c <__udivmoddi4+0x60>
 8000258:	18eb      	adds	r3, r5, r3
 800025a:	f107 30ff 	add.w	r0, r7, #4294967295
 800025e:	f080 811b 	bcs.w	8000498 <__udivmoddi4+0x28c>
 8000262:	4299      	cmp	r1, r3
 8000264:	f240 8118 	bls.w	8000498 <__udivmoddi4+0x28c>
 8000268:	3f02      	subs	r7, #2
 800026a:	442b      	add	r3, r5
 800026c:	1a5b      	subs	r3, r3, r1
 800026e:	b2a4      	uxth	r4, r4
 8000270:	fbb3 f0fe 	udiv	r0, r3, lr
 8000274:	fb0e 3310 	mls	r3, lr, r0, r3
 8000278:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800027c:	fb00 fc0c 	mul.w	ip, r0, ip
 8000280:	45a4      	cmp	ip, r4
 8000282:	d909      	bls.n	8000298 <__udivmoddi4+0x8c>
 8000284:	192c      	adds	r4, r5, r4
 8000286:	f100 33ff 	add.w	r3, r0, #4294967295
 800028a:	f080 8107 	bcs.w	800049c <__udivmoddi4+0x290>
 800028e:	45a4      	cmp	ip, r4
 8000290:	f240 8104 	bls.w	800049c <__udivmoddi4+0x290>
 8000294:	3802      	subs	r0, #2
 8000296:	442c      	add	r4, r5
 8000298:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 800029c:	eba4 040c 	sub.w	r4, r4, ip
 80002a0:	2700      	movs	r7, #0
 80002a2:	b11e      	cbz	r6, 80002ac <__udivmoddi4+0xa0>
 80002a4:	40d4      	lsrs	r4, r2
 80002a6:	2300      	movs	r3, #0
 80002a8:	e9c6 4300 	strd	r4, r3, [r6]
 80002ac:	4639      	mov	r1, r7
 80002ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b2:	428b      	cmp	r3, r1
 80002b4:	d909      	bls.n	80002ca <__udivmoddi4+0xbe>
 80002b6:	2e00      	cmp	r6, #0
 80002b8:	f000 80eb 	beq.w	8000492 <__udivmoddi4+0x286>
 80002bc:	2700      	movs	r7, #0
 80002be:	e9c6 0100 	strd	r0, r1, [r6]
 80002c2:	4638      	mov	r0, r7
 80002c4:	4639      	mov	r1, r7
 80002c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ca:	fab3 f783 	clz	r7, r3
 80002ce:	2f00      	cmp	r7, #0
 80002d0:	d147      	bne.n	8000362 <__udivmoddi4+0x156>
 80002d2:	428b      	cmp	r3, r1
 80002d4:	d302      	bcc.n	80002dc <__udivmoddi4+0xd0>
 80002d6:	4282      	cmp	r2, r0
 80002d8:	f200 80fa 	bhi.w	80004d0 <__udivmoddi4+0x2c4>
 80002dc:	1a84      	subs	r4, r0, r2
 80002de:	eb61 0303 	sbc.w	r3, r1, r3
 80002e2:	2001      	movs	r0, #1
 80002e4:	4698      	mov	r8, r3
 80002e6:	2e00      	cmp	r6, #0
 80002e8:	d0e0      	beq.n	80002ac <__udivmoddi4+0xa0>
 80002ea:	e9c6 4800 	strd	r4, r8, [r6]
 80002ee:	e7dd      	b.n	80002ac <__udivmoddi4+0xa0>
 80002f0:	b902      	cbnz	r2, 80002f4 <__udivmoddi4+0xe8>
 80002f2:	deff      	udf	#255	; 0xff
 80002f4:	fab2 f282 	clz	r2, r2
 80002f8:	2a00      	cmp	r2, #0
 80002fa:	f040 808f 	bne.w	800041c <__udivmoddi4+0x210>
 80002fe:	1b49      	subs	r1, r1, r5
 8000300:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000304:	fa1f f885 	uxth.w	r8, r5
 8000308:	2701      	movs	r7, #1
 800030a:	fbb1 fcfe 	udiv	ip, r1, lr
 800030e:	0c23      	lsrs	r3, r4, #16
 8000310:	fb0e 111c 	mls	r1, lr, ip, r1
 8000314:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000318:	fb08 f10c 	mul.w	r1, r8, ip
 800031c:	4299      	cmp	r1, r3
 800031e:	d907      	bls.n	8000330 <__udivmoddi4+0x124>
 8000320:	18eb      	adds	r3, r5, r3
 8000322:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000326:	d202      	bcs.n	800032e <__udivmoddi4+0x122>
 8000328:	4299      	cmp	r1, r3
 800032a:	f200 80cd 	bhi.w	80004c8 <__udivmoddi4+0x2bc>
 800032e:	4684      	mov	ip, r0
 8000330:	1a59      	subs	r1, r3, r1
 8000332:	b2a3      	uxth	r3, r4
 8000334:	fbb1 f0fe 	udiv	r0, r1, lr
 8000338:	fb0e 1410 	mls	r4, lr, r0, r1
 800033c:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000340:	fb08 f800 	mul.w	r8, r8, r0
 8000344:	45a0      	cmp	r8, r4
 8000346:	d907      	bls.n	8000358 <__udivmoddi4+0x14c>
 8000348:	192c      	adds	r4, r5, r4
 800034a:	f100 33ff 	add.w	r3, r0, #4294967295
 800034e:	d202      	bcs.n	8000356 <__udivmoddi4+0x14a>
 8000350:	45a0      	cmp	r8, r4
 8000352:	f200 80b6 	bhi.w	80004c2 <__udivmoddi4+0x2b6>
 8000356:	4618      	mov	r0, r3
 8000358:	eba4 0408 	sub.w	r4, r4, r8
 800035c:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000360:	e79f      	b.n	80002a2 <__udivmoddi4+0x96>
 8000362:	f1c7 0c20 	rsb	ip, r7, #32
 8000366:	40bb      	lsls	r3, r7
 8000368:	fa22 fe0c 	lsr.w	lr, r2, ip
 800036c:	ea4e 0e03 	orr.w	lr, lr, r3
 8000370:	fa01 f407 	lsl.w	r4, r1, r7
 8000374:	fa20 f50c 	lsr.w	r5, r0, ip
 8000378:	fa21 f30c 	lsr.w	r3, r1, ip
 800037c:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000380:	4325      	orrs	r5, r4
 8000382:	fbb3 f9f8 	udiv	r9, r3, r8
 8000386:	0c2c      	lsrs	r4, r5, #16
 8000388:	fb08 3319 	mls	r3, r8, r9, r3
 800038c:	fa1f fa8e 	uxth.w	sl, lr
 8000390:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000394:	fb09 f40a 	mul.w	r4, r9, sl
 8000398:	429c      	cmp	r4, r3
 800039a:	fa02 f207 	lsl.w	r2, r2, r7
 800039e:	fa00 f107 	lsl.w	r1, r0, r7
 80003a2:	d90b      	bls.n	80003bc <__udivmoddi4+0x1b0>
 80003a4:	eb1e 0303 	adds.w	r3, lr, r3
 80003a8:	f109 30ff 	add.w	r0, r9, #4294967295
 80003ac:	f080 8087 	bcs.w	80004be <__udivmoddi4+0x2b2>
 80003b0:	429c      	cmp	r4, r3
 80003b2:	f240 8084 	bls.w	80004be <__udivmoddi4+0x2b2>
 80003b6:	f1a9 0902 	sub.w	r9, r9, #2
 80003ba:	4473      	add	r3, lr
 80003bc:	1b1b      	subs	r3, r3, r4
 80003be:	b2ad      	uxth	r5, r5
 80003c0:	fbb3 f0f8 	udiv	r0, r3, r8
 80003c4:	fb08 3310 	mls	r3, r8, r0, r3
 80003c8:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80003cc:	fb00 fa0a 	mul.w	sl, r0, sl
 80003d0:	45a2      	cmp	sl, r4
 80003d2:	d908      	bls.n	80003e6 <__udivmoddi4+0x1da>
 80003d4:	eb1e 0404 	adds.w	r4, lr, r4
 80003d8:	f100 33ff 	add.w	r3, r0, #4294967295
 80003dc:	d26b      	bcs.n	80004b6 <__udivmoddi4+0x2aa>
 80003de:	45a2      	cmp	sl, r4
 80003e0:	d969      	bls.n	80004b6 <__udivmoddi4+0x2aa>
 80003e2:	3802      	subs	r0, #2
 80003e4:	4474      	add	r4, lr
 80003e6:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80003ea:	fba0 8902 	umull	r8, r9, r0, r2
 80003ee:	eba4 040a 	sub.w	r4, r4, sl
 80003f2:	454c      	cmp	r4, r9
 80003f4:	46c2      	mov	sl, r8
 80003f6:	464b      	mov	r3, r9
 80003f8:	d354      	bcc.n	80004a4 <__udivmoddi4+0x298>
 80003fa:	d051      	beq.n	80004a0 <__udivmoddi4+0x294>
 80003fc:	2e00      	cmp	r6, #0
 80003fe:	d069      	beq.n	80004d4 <__udivmoddi4+0x2c8>
 8000400:	ebb1 050a 	subs.w	r5, r1, sl
 8000404:	eb64 0403 	sbc.w	r4, r4, r3
 8000408:	fa04 fc0c 	lsl.w	ip, r4, ip
 800040c:	40fd      	lsrs	r5, r7
 800040e:	40fc      	lsrs	r4, r7
 8000410:	ea4c 0505 	orr.w	r5, ip, r5
 8000414:	e9c6 5400 	strd	r5, r4, [r6]
 8000418:	2700      	movs	r7, #0
 800041a:	e747      	b.n	80002ac <__udivmoddi4+0xa0>
 800041c:	f1c2 0320 	rsb	r3, r2, #32
 8000420:	fa20 f703 	lsr.w	r7, r0, r3
 8000424:	4095      	lsls	r5, r2
 8000426:	fa01 f002 	lsl.w	r0, r1, r2
 800042a:	fa21 f303 	lsr.w	r3, r1, r3
 800042e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000432:	4338      	orrs	r0, r7
 8000434:	0c01      	lsrs	r1, r0, #16
 8000436:	fbb3 f7fe 	udiv	r7, r3, lr
 800043a:	fa1f f885 	uxth.w	r8, r5
 800043e:	fb0e 3317 	mls	r3, lr, r7, r3
 8000442:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000446:	fb07 f308 	mul.w	r3, r7, r8
 800044a:	428b      	cmp	r3, r1
 800044c:	fa04 f402 	lsl.w	r4, r4, r2
 8000450:	d907      	bls.n	8000462 <__udivmoddi4+0x256>
 8000452:	1869      	adds	r1, r5, r1
 8000454:	f107 3cff 	add.w	ip, r7, #4294967295
 8000458:	d22f      	bcs.n	80004ba <__udivmoddi4+0x2ae>
 800045a:	428b      	cmp	r3, r1
 800045c:	d92d      	bls.n	80004ba <__udivmoddi4+0x2ae>
 800045e:	3f02      	subs	r7, #2
 8000460:	4429      	add	r1, r5
 8000462:	1acb      	subs	r3, r1, r3
 8000464:	b281      	uxth	r1, r0
 8000466:	fbb3 f0fe 	udiv	r0, r3, lr
 800046a:	fb0e 3310 	mls	r3, lr, r0, r3
 800046e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000472:	fb00 f308 	mul.w	r3, r0, r8
 8000476:	428b      	cmp	r3, r1
 8000478:	d907      	bls.n	800048a <__udivmoddi4+0x27e>
 800047a:	1869      	adds	r1, r5, r1
 800047c:	f100 3cff 	add.w	ip, r0, #4294967295
 8000480:	d217      	bcs.n	80004b2 <__udivmoddi4+0x2a6>
 8000482:	428b      	cmp	r3, r1
 8000484:	d915      	bls.n	80004b2 <__udivmoddi4+0x2a6>
 8000486:	3802      	subs	r0, #2
 8000488:	4429      	add	r1, r5
 800048a:	1ac9      	subs	r1, r1, r3
 800048c:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000490:	e73b      	b.n	800030a <__udivmoddi4+0xfe>
 8000492:	4637      	mov	r7, r6
 8000494:	4630      	mov	r0, r6
 8000496:	e709      	b.n	80002ac <__udivmoddi4+0xa0>
 8000498:	4607      	mov	r7, r0
 800049a:	e6e7      	b.n	800026c <__udivmoddi4+0x60>
 800049c:	4618      	mov	r0, r3
 800049e:	e6fb      	b.n	8000298 <__udivmoddi4+0x8c>
 80004a0:	4541      	cmp	r1, r8
 80004a2:	d2ab      	bcs.n	80003fc <__udivmoddi4+0x1f0>
 80004a4:	ebb8 0a02 	subs.w	sl, r8, r2
 80004a8:	eb69 020e 	sbc.w	r2, r9, lr
 80004ac:	3801      	subs	r0, #1
 80004ae:	4613      	mov	r3, r2
 80004b0:	e7a4      	b.n	80003fc <__udivmoddi4+0x1f0>
 80004b2:	4660      	mov	r0, ip
 80004b4:	e7e9      	b.n	800048a <__udivmoddi4+0x27e>
 80004b6:	4618      	mov	r0, r3
 80004b8:	e795      	b.n	80003e6 <__udivmoddi4+0x1da>
 80004ba:	4667      	mov	r7, ip
 80004bc:	e7d1      	b.n	8000462 <__udivmoddi4+0x256>
 80004be:	4681      	mov	r9, r0
 80004c0:	e77c      	b.n	80003bc <__udivmoddi4+0x1b0>
 80004c2:	3802      	subs	r0, #2
 80004c4:	442c      	add	r4, r5
 80004c6:	e747      	b.n	8000358 <__udivmoddi4+0x14c>
 80004c8:	f1ac 0c02 	sub.w	ip, ip, #2
 80004cc:	442b      	add	r3, r5
 80004ce:	e72f      	b.n	8000330 <__udivmoddi4+0x124>
 80004d0:	4638      	mov	r0, r7
 80004d2:	e708      	b.n	80002e6 <__udivmoddi4+0xda>
 80004d4:	4637      	mov	r7, r6
 80004d6:	e6e9      	b.n	80002ac <__udivmoddi4+0xa0>

080004d8 <__aeabi_idiv0>:
 80004d8:	4770      	bx	lr
 80004da:	bf00      	nop

080004dc <Display_color>:
	Write_instruction(0x38); 	// 8 bit data length extension
	Write_instruction(0x0F);	// Display on, cursor on, blink on
	return;
}

void Display_color(char color[]) {
 80004dc:	b580      	push	{r7, lr}
 80004de:	b082      	sub	sp, #8
 80004e0:	af00      	add	r7, sp, #0
 80004e2:	6078      	str	r0, [r7, #4]
	if(!strcmp(color,"red"))
 80004e4:	4912      	ldr	r1, [pc, #72]	; (8000530 <Display_color+0x54>)
 80004e6:	6878      	ldr	r0, [r7, #4]
 80004e8:	f7ff fe6e 	bl	80001c8 <strcmp>
 80004ec:	4603      	mov	r3, r0
 80004ee:	2b00      	cmp	r3, #0
 80004f0:	d105      	bne.n	80004fe <Display_color+0x22>
		HAL_GPIO_WritePin(Display_red_GPIO_Port, Display_red_Pin, SET);
 80004f2:	2201      	movs	r2, #1
 80004f4:	2180      	movs	r1, #128	; 0x80
 80004f6:	480f      	ldr	r0, [pc, #60]	; (8000534 <Display_color+0x58>)
 80004f8:	f001 fa18 	bl	800192c <HAL_GPIO_WritePin>
	else if(!strcmp(color,"green"))
		HAL_GPIO_WritePin(Display_green_GPIO_Port, Display_green_Pin, SET);
	else
		HAL_GPIO_WritePin(Display_white_GPIO_Port, Display_white_Pin, SET);

	return;
 80004fc:	e014      	b.n	8000528 <Display_color+0x4c>
	else if(!strcmp(color,"green"))
 80004fe:	490e      	ldr	r1, [pc, #56]	; (8000538 <Display_color+0x5c>)
 8000500:	6878      	ldr	r0, [r7, #4]
 8000502:	f7ff fe61 	bl	80001c8 <strcmp>
 8000506:	4603      	mov	r3, r0
 8000508:	2b00      	cmp	r3, #0
 800050a:	d106      	bne.n	800051a <Display_color+0x3e>
		HAL_GPIO_WritePin(Display_green_GPIO_Port, Display_green_Pin, SET);
 800050c:	2201      	movs	r2, #1
 800050e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000512:	4808      	ldr	r0, [pc, #32]	; (8000534 <Display_color+0x58>)
 8000514:	f001 fa0a 	bl	800192c <HAL_GPIO_WritePin>
	return;
 8000518:	e006      	b.n	8000528 <Display_color+0x4c>
		HAL_GPIO_WritePin(Display_white_GPIO_Port, Display_white_Pin, SET);
 800051a:	2201      	movs	r2, #1
 800051c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000520:	4804      	ldr	r0, [pc, #16]	; (8000534 <Display_color+0x58>)
 8000522:	f001 fa03 	bl	800192c <HAL_GPIO_WritePin>
	return;
 8000526:	bf00      	nop
}
 8000528:	3708      	adds	r7, #8
 800052a:	46bd      	mov	sp, r7
 800052c:	bd80      	pop	{r7, pc}
 800052e:	bf00      	nop
 8000530:	08004150 	.word	0x08004150
 8000534:	48000800 	.word	0x48000800
 8000538:	08004154 	.word	0x08004154

0800053c <prephexa>:

void prephexa(uint8_t hexa, uint8_t *adress){
 800053c:	b480      	push	{r7}
 800053e:	b083      	sub	sp, #12
 8000540:	af00      	add	r7, sp, #0
 8000542:	4603      	mov	r3, r0
 8000544:	6039      	str	r1, [r7, #0]
 8000546:	71fb      	strb	r3, [r7, #7]
	adress[1] = hexa & 0x0f;
 8000548:	683b      	ldr	r3, [r7, #0]
 800054a:	3301      	adds	r3, #1
 800054c:	79fa      	ldrb	r2, [r7, #7]
 800054e:	f002 020f 	and.w	r2, r2, #15
 8000552:	b2d2      	uxtb	r2, r2
 8000554:	701a      	strb	r2, [r3, #0]
	adress[2] = (hexa >> 4) & 0x0f;
 8000556:	683b      	ldr	r3, [r7, #0]
 8000558:	3302      	adds	r3, #2
 800055a:	79fa      	ldrb	r2, [r7, #7]
 800055c:	0912      	lsrs	r2, r2, #4
 800055e:	b2d2      	uxtb	r2, r2
 8000560:	701a      	strb	r2, [r3, #0]

	return;
 8000562:	bf00      	nop
}
 8000564:	370c      	adds	r7, #12
 8000566:	46bd      	mov	sp, r7
 8000568:	f85d 7b04 	ldr.w	r7, [sp], #4
 800056c:	4770      	bx	lr
	...

08000570 <LCDinit>:

void LCDinit(void)
{
 8000570:	b580      	push	{r7, lr}
 8000572:	b082      	sub	sp, #8
 8000574:	af00      	add	r7, sp, #0
	uint8_t lcd_data[3];
	lcd_data[0] = 0x1f;
 8000576:	231f      	movs	r3, #31
 8000578:	713b      	strb	r3, [r7, #4]

	    HAL_GPIO_WritePin(Display_green_GPIO_Port, Display_green_Pin, GPIO_PIN_RESET);
 800057a:	2200      	movs	r2, #0
 800057c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000580:	48e5      	ldr	r0, [pc, #916]	; (8000918 <LCDinit+0x3a8>)
 8000582:	f001 f9d3 	bl	800192c <HAL_GPIO_WritePin>
	    HAL_GPIO_WritePin(Display_reset_GPIO_Port, Display_reset_Pin, GPIO_PIN_RESET);
 8000586:	2200      	movs	r2, #0
 8000588:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800058c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000590:	f001 f9cc 	bl	800192c <HAL_GPIO_WritePin>
	    HAL_Delay(10);
 8000594:	200a      	movs	r0, #10
 8000596:	f000 ff19 	bl	80013cc <HAL_Delay>
	    HAL_GPIO_WritePin(Display_reset_GPIO_Port, Display_reset_Pin, GPIO_PIN_SET);
 800059a:	2201      	movs	r2, #1
 800059c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80005a0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80005a4:	f001 f9c2 	bl	800192c <HAL_GPIO_WritePin>
	    HAL_Delay(10);
 80005a8:	200a      	movs	r0, #10
 80005aa:	f000 ff0f 	bl	80013cc <HAL_Delay>
	    HAL_GPIO_WritePin(Display_reset_GPIO_Port, Display_reset_Pin, GPIO_PIN_RESET);
 80005ae:	2200      	movs	r2, #0
 80005b0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80005b4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80005b8:	f001 f9b8 	bl	800192c <HAL_GPIO_WritePin>
	    HAL_GPIO_WritePin(Display_green_GPIO_Port, Display_green_Pin, GPIO_PIN_SET);
 80005bc:	2201      	movs	r2, #1
 80005be:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80005c2:	48d5      	ldr	r0, [pc, #852]	; (8000918 <LCDinit+0x3a8>)
 80005c4:	f001 f9b2 	bl	800192c <HAL_GPIO_WritePin>

	    HAL_GPIO_WritePin(CS_SPI2_GPIO_Port, CS_SPI2_Pin, GPIO_PIN_SET);
 80005c8:	2201      	movs	r2, #1
 80005ca:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80005ce:	48d3      	ldr	r0, [pc, #844]	; (800091c <LCDinit+0x3ac>)
 80005d0:	f001 f9ac 	bl	800192c <HAL_GPIO_WritePin>
	    HAL_Delay(10);
 80005d4:	200a      	movs	r0, #10
 80005d6:	f000 fef9 	bl	80013cc <HAL_Delay>
	    HAL_GPIO_WritePin(CS_SPI2_GPIO_Port, CS_SPI2_Pin, GPIO_PIN_RESET);
 80005da:	2200      	movs	r2, #0
 80005dc:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80005e0:	48ce      	ldr	r0, [pc, #824]	; (800091c <LCDinit+0x3ac>)
 80005e2:	f001 f9a3 	bl	800192c <HAL_GPIO_WritePin>


	    HAL_GPIO_WritePin(Display_reset_GPIO_Port, Display_reset_Pin, GPIO_PIN_SET);
 80005e6:	2201      	movs	r2, #1
 80005e8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80005ec:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80005f0:	f001 f99c 	bl	800192c <HAL_GPIO_WritePin>
	      HAL_Delay(10);
 80005f4:	200a      	movs	r0, #10
 80005f6:	f000 fee9 	bl	80013cc <HAL_Delay>


	    prephexa(0x3a, lcd_data);
 80005fa:	1d3b      	adds	r3, r7, #4
 80005fc:	4619      	mov	r1, r3
 80005fe:	203a      	movs	r0, #58	; 0x3a
 8000600:	f7ff ff9c 	bl	800053c <prephexa>
	    HAL_SPI_Transmit(&hspi2, lcd_data,3,10); //function set
 8000604:	1d39      	adds	r1, r7, #4
 8000606:	230a      	movs	r3, #10
 8000608:	2203      	movs	r2, #3
 800060a:	48c5      	ldr	r0, [pc, #788]	; (8000920 <LCDinit+0x3b0>)
 800060c:	f002 fe1e 	bl	800324c <HAL_SPI_Transmit>

	    HAL_GPIO_WritePin(CS_SPI2_GPIO_Port, CS_SPI2_Pin, GPIO_PIN_SET);
 8000610:	2201      	movs	r2, #1
 8000612:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000616:	48c1      	ldr	r0, [pc, #772]	; (800091c <LCDinit+0x3ac>)
 8000618:	f001 f988 	bl	800192c <HAL_GPIO_WritePin>
	    HAL_Delay(10);
 800061c:	200a      	movs	r0, #10
 800061e:	f000 fed5 	bl	80013cc <HAL_Delay>
	    HAL_GPIO_WritePin(CS_SPI2_GPIO_Port, CS_SPI2_Pin, GPIO_PIN_RESET);
 8000622:	2200      	movs	r2, #0
 8000624:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000628:	48bc      	ldr	r0, [pc, #752]	; (800091c <LCDinit+0x3ac>)
 800062a:	f001 f97f 	bl	800192c <HAL_GPIO_WritePin>

	    prephexa(0x09, lcd_data); //4 line initiation
 800062e:	1d3b      	adds	r3, r7, #4
 8000630:	4619      	mov	r1, r3
 8000632:	2009      	movs	r0, #9
 8000634:	f7ff ff82 	bl	800053c <prephexa>
	    HAL_SPI_Transmit(&hspi2, lcd_data,3,10);
 8000638:	1d39      	adds	r1, r7, #4
 800063a:	230a      	movs	r3, #10
 800063c:	2203      	movs	r2, #3
 800063e:	48b8      	ldr	r0, [pc, #736]	; (8000920 <LCDinit+0x3b0>)
 8000640:	f002 fe04 	bl	800324c <HAL_SPI_Transmit>

	    HAL_GPIO_WritePin(CS_SPI2_GPIO_Port, CS_SPI2_Pin, GPIO_PIN_SET);
 8000644:	2201      	movs	r2, #1
 8000646:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800064a:	48b4      	ldr	r0, [pc, #720]	; (800091c <LCDinit+0x3ac>)
 800064c:	f001 f96e 	bl	800192c <HAL_GPIO_WritePin>
	    HAL_Delay(10);
 8000650:	200a      	movs	r0, #10
 8000652:	f000 febb 	bl	80013cc <HAL_Delay>
	    HAL_GPIO_WritePin(CS_SPI2_GPIO_Port, CS_SPI2_Pin, GPIO_PIN_RESET);
 8000656:	2200      	movs	r2, #0
 8000658:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800065c:	48af      	ldr	r0, [pc, #700]	; (800091c <LCDinit+0x3ac>)
 800065e:	f001 f965 	bl	800192c <HAL_GPIO_WritePin>

	    prephexa(0x06, lcd_data); //botton view
 8000662:	1d3b      	adds	r3, r7, #4
 8000664:	4619      	mov	r1, r3
 8000666:	2006      	movs	r0, #6
 8000668:	f7ff ff68 	bl	800053c <prephexa>
	    HAL_SPI_Transmit(&hspi2, lcd_data,3,10);
 800066c:	1d39      	adds	r1, r7, #4
 800066e:	230a      	movs	r3, #10
 8000670:	2203      	movs	r2, #3
 8000672:	48ab      	ldr	r0, [pc, #684]	; (8000920 <LCDinit+0x3b0>)
 8000674:	f002 fdea 	bl	800324c <HAL_SPI_Transmit>

	    HAL_GPIO_WritePin(CS_SPI2_GPIO_Port, CS_SPI2_Pin, GPIO_PIN_SET);
 8000678:	2201      	movs	r2, #1
 800067a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800067e:	48a7      	ldr	r0, [pc, #668]	; (800091c <LCDinit+0x3ac>)
 8000680:	f001 f954 	bl	800192c <HAL_GPIO_WritePin>
	    HAL_Delay(10);
 8000684:	200a      	movs	r0, #10
 8000686:	f000 fea1 	bl	80013cc <HAL_Delay>
	    HAL_GPIO_WritePin(CS_SPI2_GPIO_Port, CS_SPI2_Pin, GPIO_PIN_RESET);
 800068a:	2200      	movs	r2, #0
 800068c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000690:	48a2      	ldr	r0, [pc, #648]	; (800091c <LCDinit+0x3ac>)
 8000692:	f001 f94b 	bl	800192c <HAL_GPIO_WritePin>

	    prephexa(0x1e, lcd_data);//bias setting
 8000696:	1d3b      	adds	r3, r7, #4
 8000698:	4619      	mov	r1, r3
 800069a:	201e      	movs	r0, #30
 800069c:	f7ff ff4e 	bl	800053c <prephexa>
	    HAL_SPI_Transmit(&hspi2, lcd_data,3,10);
 80006a0:	1d39      	adds	r1, r7, #4
 80006a2:	230a      	movs	r3, #10
 80006a4:	2203      	movs	r2, #3
 80006a6:	489e      	ldr	r0, [pc, #632]	; (8000920 <LCDinit+0x3b0>)
 80006a8:	f002 fdd0 	bl	800324c <HAL_SPI_Transmit>

	    HAL_GPIO_WritePin(CS_SPI2_GPIO_Port, CS_SPI2_Pin, GPIO_PIN_SET);
 80006ac:	2201      	movs	r2, #1
 80006ae:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80006b2:	489a      	ldr	r0, [pc, #616]	; (800091c <LCDinit+0x3ac>)
 80006b4:	f001 f93a 	bl	800192c <HAL_GPIO_WritePin>
	    HAL_Delay(10);
 80006b8:	200a      	movs	r0, #10
 80006ba:	f000 fe87 	bl	80013cc <HAL_Delay>
	    HAL_GPIO_WritePin(CS_SPI2_GPIO_Port, CS_SPI2_Pin, GPIO_PIN_RESET);
 80006be:	2200      	movs	r2, #0
 80006c0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80006c4:	4895      	ldr	r0, [pc, #596]	; (800091c <LCDinit+0x3ac>)
 80006c6:	f001 f931 	bl	800192c <HAL_GPIO_WritePin>

	    prephexa(0x39, lcd_data); //function set
 80006ca:	1d3b      	adds	r3, r7, #4
 80006cc:	4619      	mov	r1, r3
 80006ce:	2039      	movs	r0, #57	; 0x39
 80006d0:	f7ff ff34 	bl	800053c <prephexa>
	    HAL_SPI_Transmit(&hspi2, lcd_data,3,10);
 80006d4:	1d39      	adds	r1, r7, #4
 80006d6:	230a      	movs	r3, #10
 80006d8:	2203      	movs	r2, #3
 80006da:	4891      	ldr	r0, [pc, #580]	; (8000920 <LCDinit+0x3b0>)
 80006dc:	f002 fdb6 	bl	800324c <HAL_SPI_Transmit>

	    HAL_GPIO_WritePin(CS_SPI2_GPIO_Port, CS_SPI2_Pin, GPIO_PIN_SET);
 80006e0:	2201      	movs	r2, #1
 80006e2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80006e6:	488d      	ldr	r0, [pc, #564]	; (800091c <LCDinit+0x3ac>)
 80006e8:	f001 f920 	bl	800192c <HAL_GPIO_WritePin>
	    HAL_Delay(10);
 80006ec:	200a      	movs	r0, #10
 80006ee:	f000 fe6d 	bl	80013cc <HAL_Delay>
	    HAL_GPIO_WritePin(CS_SPI2_GPIO_Port, CS_SPI2_Pin, GPIO_PIN_RESET);
 80006f2:	2200      	movs	r2, #0
 80006f4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80006f8:	4888      	ldr	r0, [pc, #544]	; (800091c <LCDinit+0x3ac>)
 80006fa:	f001 f917 	bl	800192c <HAL_GPIO_WritePin>

	    prephexa(0x1b, lcd_data); //internal osc
 80006fe:	1d3b      	adds	r3, r7, #4
 8000700:	4619      	mov	r1, r3
 8000702:	201b      	movs	r0, #27
 8000704:	f7ff ff1a 	bl	800053c <prephexa>
	    HAL_SPI_Transmit(&hspi2, lcd_data,3,10);
 8000708:	1d39      	adds	r1, r7, #4
 800070a:	230a      	movs	r3, #10
 800070c:	2203      	movs	r2, #3
 800070e:	4884      	ldr	r0, [pc, #528]	; (8000920 <LCDinit+0x3b0>)
 8000710:	f002 fd9c 	bl	800324c <HAL_SPI_Transmit>

	    HAL_GPIO_WritePin(CS_SPI2_GPIO_Port, CS_SPI2_Pin, GPIO_PIN_SET);
 8000714:	2201      	movs	r2, #1
 8000716:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800071a:	4880      	ldr	r0, [pc, #512]	; (800091c <LCDinit+0x3ac>)
 800071c:	f001 f906 	bl	800192c <HAL_GPIO_WritePin>
	    HAL_Delay(10);
 8000720:	200a      	movs	r0, #10
 8000722:	f000 fe53 	bl	80013cc <HAL_Delay>
	    HAL_GPIO_WritePin(CS_SPI2_GPIO_Port, CS_SPI2_Pin, GPIO_PIN_RESET);
 8000726:	2200      	movs	r2, #0
 8000728:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800072c:	487b      	ldr	r0, [pc, #492]	; (800091c <LCDinit+0x3ac>)
 800072e:	f001 f8fd 	bl	800192c <HAL_GPIO_WritePin>

	    prephexa(0x6e, lcd_data); //follower
 8000732:	1d3b      	adds	r3, r7, #4
 8000734:	4619      	mov	r1, r3
 8000736:	206e      	movs	r0, #110	; 0x6e
 8000738:	f7ff ff00 	bl	800053c <prephexa>
	    HAL_SPI_Transmit(&hspi2, lcd_data,3,10);
 800073c:	1d39      	adds	r1, r7, #4
 800073e:	230a      	movs	r3, #10
 8000740:	2203      	movs	r2, #3
 8000742:	4877      	ldr	r0, [pc, #476]	; (8000920 <LCDinit+0x3b0>)
 8000744:	f002 fd82 	bl	800324c <HAL_SPI_Transmit>

	    HAL_GPIO_WritePin(CS_SPI2_GPIO_Port, CS_SPI2_Pin, GPIO_PIN_SET);
 8000748:	2201      	movs	r2, #1
 800074a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800074e:	4873      	ldr	r0, [pc, #460]	; (800091c <LCDinit+0x3ac>)
 8000750:	f001 f8ec 	bl	800192c <HAL_GPIO_WritePin>
	    HAL_Delay(10);
 8000754:	200a      	movs	r0, #10
 8000756:	f000 fe39 	bl	80013cc <HAL_Delay>
	    HAL_GPIO_WritePin(CS_SPI2_GPIO_Port, CS_SPI2_Pin, GPIO_PIN_RESET);
 800075a:	2200      	movs	r2, #0
 800075c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000760:	486e      	ldr	r0, [pc, #440]	; (800091c <LCDinit+0x3ac>)
 8000762:	f001 f8e3 	bl	800192c <HAL_GPIO_WritePin>

	    prephexa(0x56, lcd_data); //power control
 8000766:	1d3b      	adds	r3, r7, #4
 8000768:	4619      	mov	r1, r3
 800076a:	2056      	movs	r0, #86	; 0x56
 800076c:	f7ff fee6 	bl	800053c <prephexa>
	    HAL_SPI_Transmit(&hspi2, lcd_data,3,10);
 8000770:	1d39      	adds	r1, r7, #4
 8000772:	230a      	movs	r3, #10
 8000774:	2203      	movs	r2, #3
 8000776:	486a      	ldr	r0, [pc, #424]	; (8000920 <LCDinit+0x3b0>)
 8000778:	f002 fd68 	bl	800324c <HAL_SPI_Transmit>

	    HAL_GPIO_WritePin(CS_SPI2_GPIO_Port, CS_SPI2_Pin, GPIO_PIN_SET);
 800077c:	2201      	movs	r2, #1
 800077e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000782:	4866      	ldr	r0, [pc, #408]	; (800091c <LCDinit+0x3ac>)
 8000784:	f001 f8d2 	bl	800192c <HAL_GPIO_WritePin>
	    HAL_Delay(10);
 8000788:	200a      	movs	r0, #10
 800078a:	f000 fe1f 	bl	80013cc <HAL_Delay>
	    HAL_GPIO_WritePin(CS_SPI2_GPIO_Port, CS_SPI2_Pin, GPIO_PIN_RESET);
 800078e:	2200      	movs	r2, #0
 8000790:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000794:	4861      	ldr	r0, [pc, #388]	; (800091c <LCDinit+0x3ac>)
 8000796:	f001 f8c9 	bl	800192c <HAL_GPIO_WritePin>

	    prephexa(0x7a, lcd_data); //contrast
 800079a:	1d3b      	adds	r3, r7, #4
 800079c:	4619      	mov	r1, r3
 800079e:	207a      	movs	r0, #122	; 0x7a
 80007a0:	f7ff fecc 	bl	800053c <prephexa>
	    HAL_SPI_Transmit(&hspi2, lcd_data,3,10);
 80007a4:	1d39      	adds	r1, r7, #4
 80007a6:	230a      	movs	r3, #10
 80007a8:	2203      	movs	r2, #3
 80007aa:	485d      	ldr	r0, [pc, #372]	; (8000920 <LCDinit+0x3b0>)
 80007ac:	f002 fd4e 	bl	800324c <HAL_SPI_Transmit>

	    HAL_GPIO_WritePin(CS_SPI2_GPIO_Port, CS_SPI2_Pin, GPIO_PIN_SET);
 80007b0:	2201      	movs	r2, #1
 80007b2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80007b6:	4859      	ldr	r0, [pc, #356]	; (800091c <LCDinit+0x3ac>)
 80007b8:	f001 f8b8 	bl	800192c <HAL_GPIO_WritePin>
	    HAL_Delay(10);
 80007bc:	200a      	movs	r0, #10
 80007be:	f000 fe05 	bl	80013cc <HAL_Delay>
	    HAL_GPIO_WritePin(CS_SPI2_GPIO_Port, CS_SPI2_Pin, GPIO_PIN_RESET);
 80007c2:	2200      	movs	r2, #0
 80007c4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80007c8:	4854      	ldr	r0, [pc, #336]	; (800091c <LCDinit+0x3ac>)
 80007ca:	f001 f8af 	bl	800192c <HAL_GPIO_WritePin>

	    prephexa(0x38, lcd_data); //function set
 80007ce:	1d3b      	adds	r3, r7, #4
 80007d0:	4619      	mov	r1, r3
 80007d2:	2038      	movs	r0, #56	; 0x38
 80007d4:	f7ff feb2 	bl	800053c <prephexa>
	    HAL_SPI_Transmit(&hspi2, lcd_data,3,10);
 80007d8:	1d39      	adds	r1, r7, #4
 80007da:	230a      	movs	r3, #10
 80007dc:	2203      	movs	r2, #3
 80007de:	4850      	ldr	r0, [pc, #320]	; (8000920 <LCDinit+0x3b0>)
 80007e0:	f002 fd34 	bl	800324c <HAL_SPI_Transmit>

	    HAL_GPIO_WritePin(CS_SPI2_GPIO_Port, CS_SPI2_Pin, GPIO_PIN_SET);
 80007e4:	2201      	movs	r2, #1
 80007e6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80007ea:	484c      	ldr	r0, [pc, #304]	; (800091c <LCDinit+0x3ac>)
 80007ec:	f001 f89e 	bl	800192c <HAL_GPIO_WritePin>
	    HAL_Delay(10);
 80007f0:	200a      	movs	r0, #10
 80007f2:	f000 fdeb 	bl	80013cc <HAL_Delay>

	    ////// ------------------------------------------------
	      HAL_GPIO_WritePin(CS_SPI2_GPIO_Port, CS_SPI2_Pin, GPIO_PIN_RESET);
 80007f6:	2200      	movs	r2, #0
 80007f8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80007fc:	4847      	ldr	r0, [pc, #284]	; (800091c <LCDinit+0x3ac>)
 80007fe:	f001 f895 	bl	800192c <HAL_GPIO_WritePin>

	      prephexa(0x3a, lcd_data); //adress
 8000802:	1d3b      	adds	r3, r7, #4
 8000804:	4619      	mov	r1, r3
 8000806:	203a      	movs	r0, #58	; 0x3a
 8000808:	f7ff fe98 	bl	800053c <prephexa>
	      HAL_SPI_Transmit(&hspi2, lcd_data,3,10);
 800080c:	1d39      	adds	r1, r7, #4
 800080e:	230a      	movs	r3, #10
 8000810:	2203      	movs	r2, #3
 8000812:	4843      	ldr	r0, [pc, #268]	; (8000920 <LCDinit+0x3b0>)
 8000814:	f002 fd1a 	bl	800324c <HAL_SPI_Transmit>

	      HAL_GPIO_WritePin(CS_SPI2_GPIO_Port, CS_SPI2_Pin, GPIO_PIN_SET);
 8000818:	2201      	movs	r2, #1
 800081a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800081e:	483f      	ldr	r0, [pc, #252]	; (800091c <LCDinit+0x3ac>)
 8000820:	f001 f884 	bl	800192c <HAL_GPIO_WritePin>
	      HAL_Delay(10);
 8000824:	200a      	movs	r0, #10
 8000826:	f000 fdd1 	bl	80013cc <HAL_Delay>

	      HAL_GPIO_WritePin(CS_SPI2_GPIO_Port, CS_SPI2_Pin, GPIO_PIN_RESET);
 800082a:	2200      	movs	r2, #0
 800082c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000830:	483a      	ldr	r0, [pc, #232]	; (800091c <LCDinit+0x3ac>)
 8000832:	f001 f87b 	bl	800192c <HAL_GPIO_WritePin>

	      prephexa(0x72, lcd_data); //adress
 8000836:	1d3b      	adds	r3, r7, #4
 8000838:	4619      	mov	r1, r3
 800083a:	2072      	movs	r0, #114	; 0x72
 800083c:	f7ff fe7e 	bl	800053c <prephexa>
	      HAL_SPI_Transmit(&hspi2, lcd_data,3,10);
 8000840:	1d39      	adds	r1, r7, #4
 8000842:	230a      	movs	r3, #10
 8000844:	2203      	movs	r2, #3
 8000846:	4836      	ldr	r0, [pc, #216]	; (8000920 <LCDinit+0x3b0>)
 8000848:	f002 fd00 	bl	800324c <HAL_SPI_Transmit>

	      HAL_GPIO_WritePin(CS_SPI2_GPIO_Port, CS_SPI2_Pin, GPIO_PIN_SET);
 800084c:	2201      	movs	r2, #1
 800084e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000852:	4832      	ldr	r0, [pc, #200]	; (800091c <LCDinit+0x3ac>)
 8000854:	f001 f86a 	bl	800192c <HAL_GPIO_WritePin>
	      HAL_Delay(10);
 8000858:	200a      	movs	r0, #10
 800085a:	f000 fdb7 	bl	80013cc <HAL_Delay>

	      HAL_GPIO_WritePin(CS_SPI2_GPIO_Port, CS_SPI2_Pin, GPIO_PIN_RESET);
 800085e:	2200      	movs	r2, #0
 8000860:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000864:	482d      	ldr	r0, [pc, #180]	; (800091c <LCDinit+0x3ac>)
 8000866:	f001 f861 	bl	800192c <HAL_GPIO_WritePin>
	      lcd_data[0] = 0x5f;
 800086a:	235f      	movs	r3, #95	; 0x5f
 800086c:	713b      	strb	r3, [r7, #4]
	      prephexa(0x00, lcd_data); //adress
 800086e:	1d3b      	adds	r3, r7, #4
 8000870:	4619      	mov	r1, r3
 8000872:	2000      	movs	r0, #0
 8000874:	f7ff fe62 	bl	800053c <prephexa>
	      HAL_SPI_Transmit(&hspi2, lcd_data,3,10);
 8000878:	1d39      	adds	r1, r7, #4
 800087a:	230a      	movs	r3, #10
 800087c:	2203      	movs	r2, #3
 800087e:	4828      	ldr	r0, [pc, #160]	; (8000920 <LCDinit+0x3b0>)
 8000880:	f002 fce4 	bl	800324c <HAL_SPI_Transmit>

	      HAL_GPIO_WritePin(CS_SPI2_GPIO_Port, CS_SPI2_Pin, GPIO_PIN_SET);
 8000884:	2201      	movs	r2, #1
 8000886:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800088a:	4824      	ldr	r0, [pc, #144]	; (800091c <LCDinit+0x3ac>)
 800088c:	f001 f84e 	bl	800192c <HAL_GPIO_WritePin>
	      HAL_Delay(10);
 8000890:	200a      	movs	r0, #10
 8000892:	f000 fd9b 	bl	80013cc <HAL_Delay>

	      HAL_GPIO_WritePin(CS_SPI2_GPIO_Port, CS_SPI2_Pin, GPIO_PIN_RESET);
 8000896:	2200      	movs	r2, #0
 8000898:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800089c:	481f      	ldr	r0, [pc, #124]	; (800091c <LCDinit+0x3ac>)
 800089e:	f001 f845 	bl	800192c <HAL_GPIO_WritePin>
	        lcd_data[0] = 0x1f;
 80008a2:	231f      	movs	r3, #31
 80008a4:	713b      	strb	r3, [r7, #4]
	        prephexa(0x38, lcd_data); //adress
 80008a6:	1d3b      	adds	r3, r7, #4
 80008a8:	4619      	mov	r1, r3
 80008aa:	2038      	movs	r0, #56	; 0x38
 80008ac:	f7ff fe46 	bl	800053c <prephexa>
	        HAL_SPI_Transmit(&hspi2, lcd_data,3,10);
 80008b0:	1d39      	adds	r1, r7, #4
 80008b2:	230a      	movs	r3, #10
 80008b4:	2203      	movs	r2, #3
 80008b6:	481a      	ldr	r0, [pc, #104]	; (8000920 <LCDinit+0x3b0>)
 80008b8:	f002 fcc8 	bl	800324c <HAL_SPI_Transmit>

	        HAL_GPIO_WritePin(CS_SPI2_GPIO_Port, CS_SPI2_Pin, GPIO_PIN_SET);
 80008bc:	2201      	movs	r2, #1
 80008be:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80008c2:	4816      	ldr	r0, [pc, #88]	; (800091c <LCDinit+0x3ac>)
 80008c4:	f001 f832 	bl	800192c <HAL_GPIO_WritePin>
	        HAL_Delay(10);
 80008c8:	200a      	movs	r0, #10
 80008ca:	f000 fd7f 	bl	80013cc <HAL_Delay>

	    ////


	    HAL_GPIO_WritePin(CS_SPI2_GPIO_Port, CS_SPI2_Pin, GPIO_PIN_RESET);
 80008ce:	2200      	movs	r2, #0
 80008d0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80008d4:	4811      	ldr	r0, [pc, #68]	; (800091c <LCDinit+0x3ac>)
 80008d6:	f001 f829 	bl	800192c <HAL_GPIO_WritePin>

	    prephexa(0x0f, lcd_data); //display on
 80008da:	1d3b      	adds	r3, r7, #4
 80008dc:	4619      	mov	r1, r3
 80008de:	200f      	movs	r0, #15
 80008e0:	f7ff fe2c 	bl	800053c <prephexa>
	    HAL_SPI_Transmit(&hspi2, lcd_data,3,10);
 80008e4:	1d39      	adds	r1, r7, #4
 80008e6:	230a      	movs	r3, #10
 80008e8:	2203      	movs	r2, #3
 80008ea:	480d      	ldr	r0, [pc, #52]	; (8000920 <LCDinit+0x3b0>)
 80008ec:	f002 fcae 	bl	800324c <HAL_SPI_Transmit>

	    HAL_GPIO_WritePin(CS_SPI2_GPIO_Port, CS_SPI2_Pin, GPIO_PIN_SET);
 80008f0:	2201      	movs	r2, #1
 80008f2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80008f6:	4809      	ldr	r0, [pc, #36]	; (800091c <LCDinit+0x3ac>)
 80008f8:	f001 f818 	bl	800192c <HAL_GPIO_WritePin>
	    HAL_Delay(10);
 80008fc:	200a      	movs	r0, #10
 80008fe:	f000 fd65 	bl	80013cc <HAL_Delay>
	    HAL_GPIO_WritePin(CS_SPI2_GPIO_Port, CS_SPI2_Pin, GPIO_PIN_RESET);
 8000902:	2200      	movs	r2, #0
 8000904:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000908:	4804      	ldr	r0, [pc, #16]	; (800091c <LCDinit+0x3ac>)
 800090a:	f001 f80f 	bl	800192c <HAL_GPIO_WritePin>

	    prephexa(0x01, lcd_data); //adress
 800090e:	1d3b      	adds	r3, r7, #4
 8000910:	4619      	mov	r1, r3
 8000912:	2001      	movs	r0, #1
 8000914:	e006      	b.n	8000924 <LCDinit+0x3b4>
 8000916:	bf00      	nop
 8000918:	48000800 	.word	0x48000800
 800091c:	48000400 	.word	0x48000400
 8000920:	20000074 	.word	0x20000074
 8000924:	f7ff fe0a 	bl	800053c <prephexa>
	    HAL_SPI_Transmit(&hspi2, lcd_data,3,10);
 8000928:	1d39      	adds	r1, r7, #4
 800092a:	230a      	movs	r3, #10
 800092c:	2203      	movs	r2, #3
 800092e:	4823      	ldr	r0, [pc, #140]	; (80009bc <LCDinit+0x44c>)
 8000930:	f002 fc8c 	bl	800324c <HAL_SPI_Transmit>

	    HAL_GPIO_WritePin(CS_SPI2_GPIO_Port, CS_SPI2_Pin, GPIO_PIN_SET);
 8000934:	2201      	movs	r2, #1
 8000936:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800093a:	4821      	ldr	r0, [pc, #132]	; (80009c0 <LCDinit+0x450>)
 800093c:	f000 fff6 	bl	800192c <HAL_GPIO_WritePin>
	    HAL_Delay(10);
 8000940:	200a      	movs	r0, #10
 8000942:	f000 fd43 	bl	80013cc <HAL_Delay>



	    lcd_data[0] = 0x5f;
 8000946:	235f      	movs	r3, #95	; 0x5f
 8000948:	713b      	strb	r3, [r7, #4]
	    HAL_GPIO_WritePin(CS_SPI2_GPIO_Port, CS_SPI2_Pin, GPIO_PIN_RESET);
 800094a:	2200      	movs	r2, #0
 800094c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000950:	481b      	ldr	r0, [pc, #108]	; (80009c0 <LCDinit+0x450>)
 8000952:	f000 ffeb 	bl	800192c <HAL_GPIO_WritePin>

	    prephexa(0xff, lcd_data); //ascii
 8000956:	1d3b      	adds	r3, r7, #4
 8000958:	4619      	mov	r1, r3
 800095a:	20ff      	movs	r0, #255	; 0xff
 800095c:	f7ff fdee 	bl	800053c <prephexa>
	    HAL_SPI_Transmit(&hspi2, lcd_data,3,10);
 8000960:	1d39      	adds	r1, r7, #4
 8000962:	230a      	movs	r3, #10
 8000964:	2203      	movs	r2, #3
 8000966:	4815      	ldr	r0, [pc, #84]	; (80009bc <LCDinit+0x44c>)
 8000968:	f002 fc70 	bl	800324c <HAL_SPI_Transmit>

	    HAL_GPIO_WritePin(CS_SPI2_GPIO_Port, CS_SPI2_Pin, GPIO_PIN_SET);
 800096c:	2201      	movs	r2, #1
 800096e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000972:	4813      	ldr	r0, [pc, #76]	; (80009c0 <LCDinit+0x450>)
 8000974:	f000 ffda 	bl	800192c <HAL_GPIO_WritePin>
	    HAL_Delay(10);
 8000978:	200a      	movs	r0, #10
 800097a:	f000 fd27 	bl	80013cc <HAL_Delay>

	    HAL_GPIO_WritePin(CS_SPI2_GPIO_Port, CS_SPI2_Pin, GPIO_PIN_RESET);
 800097e:	2200      	movs	r2, #0
 8000980:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000984:	480e      	ldr	r0, [pc, #56]	; (80009c0 <LCDinit+0x450>)
 8000986:	f000 ffd1 	bl	800192c <HAL_GPIO_WritePin>

	    prephexa(0x30, lcd_data); //ascii
 800098a:	1d3b      	adds	r3, r7, #4
 800098c:	4619      	mov	r1, r3
 800098e:	2030      	movs	r0, #48	; 0x30
 8000990:	f7ff fdd4 	bl	800053c <prephexa>
	    HAL_SPI_Transmit(&hspi2, lcd_data,3,10);
 8000994:	1d39      	adds	r1, r7, #4
 8000996:	230a      	movs	r3, #10
 8000998:	2203      	movs	r2, #3
 800099a:	4808      	ldr	r0, [pc, #32]	; (80009bc <LCDinit+0x44c>)
 800099c:	f002 fc56 	bl	800324c <HAL_SPI_Transmit>

	    HAL_GPIO_WritePin(CS_SPI2_GPIO_Port, CS_SPI2_Pin, GPIO_PIN_SET);
 80009a0:	2201      	movs	r2, #1
 80009a2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80009a6:	4806      	ldr	r0, [pc, #24]	; (80009c0 <LCDinit+0x450>)
 80009a8:	f000 ffc0 	bl	800192c <HAL_GPIO_WritePin>
	    HAL_Delay(10);
 80009ac:	200a      	movs	r0, #10
 80009ae:	f000 fd0d 	bl	80013cc <HAL_Delay>


}
 80009b2:	bf00      	nop
 80009b4:	3708      	adds	r7, #8
 80009b6:	46bd      	mov	sp, r7
 80009b8:	bd80      	pop	{r7, pc}
 80009ba:	bf00      	nop
 80009bc:	20000074 	.word	0x20000074
 80009c0:	48000400 	.word	0x48000400

080009c4 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80009c4:	b580      	push	{r7, lr}
 80009c6:	b08a      	sub	sp, #40	; 0x28
 80009c8:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009ca:	f107 0314 	add.w	r3, r7, #20
 80009ce:	2200      	movs	r2, #0
 80009d0:	601a      	str	r2, [r3, #0]
 80009d2:	605a      	str	r2, [r3, #4]
 80009d4:	609a      	str	r2, [r3, #8]
 80009d6:	60da      	str	r2, [r3, #12]
 80009d8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80009da:	4b4c      	ldr	r3, [pc, #304]	; (8000b0c <MX_GPIO_Init+0x148>)
 80009dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009de:	4a4b      	ldr	r2, [pc, #300]	; (8000b0c <MX_GPIO_Init+0x148>)
 80009e0:	f043 0304 	orr.w	r3, r3, #4
 80009e4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80009e6:	4b49      	ldr	r3, [pc, #292]	; (8000b0c <MX_GPIO_Init+0x148>)
 80009e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009ea:	f003 0304 	and.w	r3, r3, #4
 80009ee:	613b      	str	r3, [r7, #16]
 80009f0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80009f2:	4b46      	ldr	r3, [pc, #280]	; (8000b0c <MX_GPIO_Init+0x148>)
 80009f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009f6:	4a45      	ldr	r2, [pc, #276]	; (8000b0c <MX_GPIO_Init+0x148>)
 80009f8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80009fc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80009fe:	4b43      	ldr	r3, [pc, #268]	; (8000b0c <MX_GPIO_Init+0x148>)
 8000a00:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a02:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000a06:	60fb      	str	r3, [r7, #12]
 8000a08:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a0a:	4b40      	ldr	r3, [pc, #256]	; (8000b0c <MX_GPIO_Init+0x148>)
 8000a0c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a0e:	4a3f      	ldr	r2, [pc, #252]	; (8000b0c <MX_GPIO_Init+0x148>)
 8000a10:	f043 0301 	orr.w	r3, r3, #1
 8000a14:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000a16:	4b3d      	ldr	r3, [pc, #244]	; (8000b0c <MX_GPIO_Init+0x148>)
 8000a18:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a1a:	f003 0301 	and.w	r3, r3, #1
 8000a1e:	60bb      	str	r3, [r7, #8]
 8000a20:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a22:	4b3a      	ldr	r3, [pc, #232]	; (8000b0c <MX_GPIO_Init+0x148>)
 8000a24:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a26:	4a39      	ldr	r2, [pc, #228]	; (8000b0c <MX_GPIO_Init+0x148>)
 8000a28:	f043 0302 	orr.w	r3, r3, #2
 8000a2c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000a2e:	4b37      	ldr	r3, [pc, #220]	; (8000b0c <MX_GPIO_Init+0x148>)
 8000a30:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a32:	f003 0302 	and.w	r3, r3, #2
 8000a36:	607b      	str	r3, [r7, #4]
 8000a38:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000a3a:	4b34      	ldr	r3, [pc, #208]	; (8000b0c <MX_GPIO_Init+0x148>)
 8000a3c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a3e:	4a33      	ldr	r2, [pc, #204]	; (8000b0c <MX_GPIO_Init+0x148>)
 8000a40:	f043 0308 	orr.w	r3, r3, #8
 8000a44:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000a46:	4b31      	ldr	r3, [pc, #196]	; (8000b0c <MX_GPIO_Init+0x148>)
 8000a48:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a4a:	f003 0308 	and.w	r3, r3, #8
 8000a4e:	603b      	str	r3, [r7, #0]
 8000a50:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000a52:	2200      	movs	r2, #0
 8000a54:	2120      	movs	r1, #32
 8000a56:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000a5a:	f000 ff67 	bl	800192c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Rtc_out_cal_GPIO_Port, Rtc_out_cal_Pin, GPIO_PIN_RESET);
 8000a5e:	2200      	movs	r2, #0
 8000a60:	2104      	movs	r1, #4
 8000a62:	482b      	ldr	r0, [pc, #172]	; (8000b10 <MX_GPIO_Init+0x14c>)
 8000a64:	f000 ff62 	bl	800192c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_SPI2_GPIO_Port, CS_SPI2_Pin, GPIO_PIN_SET);
 8000a68:	2201      	movs	r2, #1
 8000a6a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000a6e:	4828      	ldr	r0, [pc, #160]	; (8000b10 <MX_GPIO_Init+0x14c>)
 8000a70:	f000 ff5c 	bl	800192c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, Display_red_Pin|Display_green_Pin|Display_white_Pin, GPIO_PIN_RESET);
 8000a74:	2200      	movs	r2, #0
 8000a76:	f44f 6148 	mov.w	r1, #3200	; 0xc80
 8000a7a:	4826      	ldr	r0, [pc, #152]	; (8000b14 <MX_GPIO_Init+0x150>)
 8000a7c:	f000 ff56 	bl	800192c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Display_reset_GPIO_Port, Display_reset_Pin, GPIO_PIN_SET);
 8000a80:	2201      	movs	r2, #1
 8000a82:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000a86:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000a8a:	f000 ff4f 	bl	800192c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000a8e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000a92:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000a94:	4b20      	ldr	r3, [pc, #128]	; (8000b18 <MX_GPIO_Init+0x154>)
 8000a96:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a98:	2300      	movs	r3, #0
 8000a9a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000a9c:	f107 0314 	add.w	r3, r7, #20
 8000aa0:	4619      	mov	r1, r3
 8000aa2:	481c      	ldr	r0, [pc, #112]	; (8000b14 <MX_GPIO_Init+0x150>)
 8000aa4:	f000 fd9a 	bl	80015dc <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = LD2_Pin|Display_reset_Pin;
 8000aa8:	f248 0320 	movw	r3, #32800	; 0x8020
 8000aac:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000aae:	2301      	movs	r3, #1
 8000ab0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ab2:	2300      	movs	r3, #0
 8000ab4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ab6:	2300      	movs	r3, #0
 8000ab8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000aba:	f107 0314 	add.w	r3, r7, #20
 8000abe:	4619      	mov	r1, r3
 8000ac0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000ac4:	f000 fd8a 	bl	80015dc <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = Rtc_out_cal_Pin|CS_SPI2_Pin;
 8000ac8:	f241 0304 	movw	r3, #4100	; 0x1004
 8000acc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ace:	2301      	movs	r3, #1
 8000ad0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ad2:	2300      	movs	r3, #0
 8000ad4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ad6:	2300      	movs	r3, #0
 8000ad8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ada:	f107 0314 	add.w	r3, r7, #20
 8000ade:	4619      	mov	r1, r3
 8000ae0:	480b      	ldr	r0, [pc, #44]	; (8000b10 <MX_GPIO_Init+0x14c>)
 8000ae2:	f000 fd7b 	bl	80015dc <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = Display_red_Pin|Display_green_Pin|Display_white_Pin;
 8000ae6:	f44f 6348 	mov.w	r3, #3200	; 0xc80
 8000aea:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000aec:	2301      	movs	r3, #1
 8000aee:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000af0:	2300      	movs	r3, #0
 8000af2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000af4:	2300      	movs	r3, #0
 8000af6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000af8:	f107 0314 	add.w	r3, r7, #20
 8000afc:	4619      	mov	r1, r3
 8000afe:	4805      	ldr	r0, [pc, #20]	; (8000b14 <MX_GPIO_Init+0x150>)
 8000b00:	f000 fd6c 	bl	80015dc <HAL_GPIO_Init>

}
 8000b04:	bf00      	nop
 8000b06:	3728      	adds	r7, #40	; 0x28
 8000b08:	46bd      	mov	sp, r7
 8000b0a:	bd80      	pop	{r7, pc}
 8000b0c:	40021000 	.word	0x40021000
 8000b10:	48000400 	.word	0x48000400
 8000b14:	48000800 	.word	0x48000800
 8000b18:	10210000 	.word	0x10210000

08000b1c <MX_I2C3_Init>:

I2C_HandleTypeDef hi2c3;

/* I2C3 init function */
void MX_I2C3_Init(void)
{
 8000b1c:	b580      	push	{r7, lr}
 8000b1e:	af00      	add	r7, sp, #0

  hi2c3.Instance = I2C3;
 8000b20:	4b1b      	ldr	r3, [pc, #108]	; (8000b90 <MX_I2C3_Init+0x74>)
 8000b22:	4a1c      	ldr	r2, [pc, #112]	; (8000b94 <MX_I2C3_Init+0x78>)
 8000b24:	601a      	str	r2, [r3, #0]
  hi2c3.Init.Timing = 0x10909CEC;
 8000b26:	4b1a      	ldr	r3, [pc, #104]	; (8000b90 <MX_I2C3_Init+0x74>)
 8000b28:	4a1b      	ldr	r2, [pc, #108]	; (8000b98 <MX_I2C3_Init+0x7c>)
 8000b2a:	605a      	str	r2, [r3, #4]
  hi2c3.Init.OwnAddress1 = 0;
 8000b2c:	4b18      	ldr	r3, [pc, #96]	; (8000b90 <MX_I2C3_Init+0x74>)
 8000b2e:	2200      	movs	r2, #0
 8000b30:	609a      	str	r2, [r3, #8]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000b32:	4b17      	ldr	r3, [pc, #92]	; (8000b90 <MX_I2C3_Init+0x74>)
 8000b34:	2201      	movs	r2, #1
 8000b36:	60da      	str	r2, [r3, #12]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000b38:	4b15      	ldr	r3, [pc, #84]	; (8000b90 <MX_I2C3_Init+0x74>)
 8000b3a:	2200      	movs	r2, #0
 8000b3c:	611a      	str	r2, [r3, #16]
  hi2c3.Init.OwnAddress2 = 0;
 8000b3e:	4b14      	ldr	r3, [pc, #80]	; (8000b90 <MX_I2C3_Init+0x74>)
 8000b40:	2200      	movs	r2, #0
 8000b42:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000b44:	4b12      	ldr	r3, [pc, #72]	; (8000b90 <MX_I2C3_Init+0x74>)
 8000b46:	2200      	movs	r2, #0
 8000b48:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000b4a:	4b11      	ldr	r3, [pc, #68]	; (8000b90 <MX_I2C3_Init+0x74>)
 8000b4c:	2200      	movs	r2, #0
 8000b4e:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000b50:	4b0f      	ldr	r3, [pc, #60]	; (8000b90 <MX_I2C3_Init+0x74>)
 8000b52:	2200      	movs	r2, #0
 8000b54:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8000b56:	480e      	ldr	r0, [pc, #56]	; (8000b90 <MX_I2C3_Init+0x74>)
 8000b58:	f000 ff00 	bl	800195c <HAL_I2C_Init>
 8000b5c:	4603      	mov	r3, r0
 8000b5e:	2b00      	cmp	r3, #0
 8000b60:	d001      	beq.n	8000b66 <MX_I2C3_Init+0x4a>
  {
    Error_Handler();
 8000b62:	f000 f8f0 	bl	8000d46 <Error_Handler>
  }
  /** Configure Analogue filter 
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000b66:	2100      	movs	r1, #0
 8000b68:	4809      	ldr	r0, [pc, #36]	; (8000b90 <MX_I2C3_Init+0x74>)
 8000b6a:	f000 ff86 	bl	8001a7a <HAL_I2CEx_ConfigAnalogFilter>
 8000b6e:	4603      	mov	r3, r0
 8000b70:	2b00      	cmp	r3, #0
 8000b72:	d001      	beq.n	8000b78 <MX_I2C3_Init+0x5c>
  {
    Error_Handler();
 8000b74:	f000 f8e7 	bl	8000d46 <Error_Handler>
  }
  /** Configure Digital filter 
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 8000b78:	2100      	movs	r1, #0
 8000b7a:	4805      	ldr	r0, [pc, #20]	; (8000b90 <MX_I2C3_Init+0x74>)
 8000b7c:	f000 ffc8 	bl	8001b10 <HAL_I2CEx_ConfigDigitalFilter>
 8000b80:	4603      	mov	r3, r0
 8000b82:	2b00      	cmp	r3, #0
 8000b84:	d001      	beq.n	8000b8a <MX_I2C3_Init+0x6e>
  {
    Error_Handler();
 8000b86:	f000 f8de 	bl	8000d46 <Error_Handler>
  }

}
 8000b8a:	bf00      	nop
 8000b8c:	bd80      	pop	{r7, pc}
 8000b8e:	bf00      	nop
 8000b90:	20000028 	.word	0x20000028
 8000b94:	40005c00 	.word	0x40005c00
 8000b98:	10909cec 	.word	0x10909cec

08000b9c <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000b9c:	b580      	push	{r7, lr}
 8000b9e:	b08a      	sub	sp, #40	; 0x28
 8000ba0:	af00      	add	r7, sp, #0
 8000ba2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ba4:	f107 0314 	add.w	r3, r7, #20
 8000ba8:	2200      	movs	r2, #0
 8000baa:	601a      	str	r2, [r3, #0]
 8000bac:	605a      	str	r2, [r3, #4]
 8000bae:	609a      	str	r2, [r3, #8]
 8000bb0:	60da      	str	r2, [r3, #12]
 8000bb2:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C3)
 8000bb4:	687b      	ldr	r3, [r7, #4]
 8000bb6:	681b      	ldr	r3, [r3, #0]
 8000bb8:	4a17      	ldr	r2, [pc, #92]	; (8000c18 <HAL_I2C_MspInit+0x7c>)
 8000bba:	4293      	cmp	r3, r2
 8000bbc:	d127      	bne.n	8000c0e <HAL_I2C_MspInit+0x72>
  {
  /* USER CODE BEGIN I2C3_MspInit 0 */

  /* USER CODE END I2C3_MspInit 0 */
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000bbe:	4b17      	ldr	r3, [pc, #92]	; (8000c1c <HAL_I2C_MspInit+0x80>)
 8000bc0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000bc2:	4a16      	ldr	r2, [pc, #88]	; (8000c1c <HAL_I2C_MspInit+0x80>)
 8000bc4:	f043 0304 	orr.w	r3, r3, #4
 8000bc8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000bca:	4b14      	ldr	r3, [pc, #80]	; (8000c1c <HAL_I2C_MspInit+0x80>)
 8000bcc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000bce:	f003 0304 	and.w	r3, r3, #4
 8000bd2:	613b      	str	r3, [r7, #16]
 8000bd4:	693b      	ldr	r3, [r7, #16]
    /**I2C3 GPIO Configuration    
    PC0     ------> I2C3_SCL
    PC1     ------> I2C3_SDA 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000bd6:	2303      	movs	r3, #3
 8000bd8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000bda:	2312      	movs	r3, #18
 8000bdc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000bde:	2301      	movs	r3, #1
 8000be0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000be2:	2303      	movs	r3, #3
 8000be4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8000be6:	2304      	movs	r3, #4
 8000be8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000bea:	f107 0314 	add.w	r3, r7, #20
 8000bee:	4619      	mov	r1, r3
 8000bf0:	480b      	ldr	r0, [pc, #44]	; (8000c20 <HAL_I2C_MspInit+0x84>)
 8000bf2:	f000 fcf3 	bl	80015dc <HAL_GPIO_Init>

    /* I2C3 clock enable */
    __HAL_RCC_I2C3_CLK_ENABLE();
 8000bf6:	4b09      	ldr	r3, [pc, #36]	; (8000c1c <HAL_I2C_MspInit+0x80>)
 8000bf8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000bfa:	4a08      	ldr	r2, [pc, #32]	; (8000c1c <HAL_I2C_MspInit+0x80>)
 8000bfc:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8000c00:	6593      	str	r3, [r2, #88]	; 0x58
 8000c02:	4b06      	ldr	r3, [pc, #24]	; (8000c1c <HAL_I2C_MspInit+0x80>)
 8000c04:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000c06:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8000c0a:	60fb      	str	r3, [r7, #12]
 8000c0c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }
}
 8000c0e:	bf00      	nop
 8000c10:	3728      	adds	r7, #40	; 0x28
 8000c12:	46bd      	mov	sp, r7
 8000c14:	bd80      	pop	{r7, pc}
 8000c16:	bf00      	nop
 8000c18:	40005c00 	.word	0x40005c00
 8000c1c:	40021000 	.word	0x40021000
 8000c20:	48000800 	.word	0x48000800

08000c24 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000c24:	b580      	push	{r7, lr}
 8000c26:	af00      	add	r7, sp, #0
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000c28:	f000 fb58 	bl	80012dc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000c2c:	f000 f80f 	bl	8000c4e <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000c30:	f7ff fec8 	bl	80009c4 <MX_GPIO_Init>
  MX_I2C3_Init();
 8000c34:	f7ff ff72 	bl	8000b1c <MX_I2C3_Init>
  MX_SPI2_Init();
 8000c38:	f000 f88c 	bl	8000d54 <MX_SPI2_Init>
  MX_UART4_Init();
 8000c3c:	f000 f9d0 	bl	8000fe0 <MX_UART4_Init>
  MX_UART5_Init();
 8000c40:	f000 f9fe 	bl	8001040 <MX_UART5_Init>
  MX_USART2_UART_Init();
 8000c44:	f000 fa2c 	bl	80010a0 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
#ifdef RUN_TEST_PROGRAM
  Test_program();
 8000c48:	f000 f9ac 	bl	8000fa4 <Test_program>
#endif
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000c4c:	e7fe      	b.n	8000c4c <main+0x28>

08000c4e <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000c4e:	b580      	push	{r7, lr}
 8000c50:	b0b8      	sub	sp, #224	; 0xe0
 8000c52:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000c54:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000c58:	2244      	movs	r2, #68	; 0x44
 8000c5a:	2100      	movs	r1, #0
 8000c5c:	4618      	mov	r0, r3
 8000c5e:	f003 fa63 	bl	8004128 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000c62:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8000c66:	2200      	movs	r2, #0
 8000c68:	601a      	str	r2, [r3, #0]
 8000c6a:	605a      	str	r2, [r3, #4]
 8000c6c:	609a      	str	r2, [r3, #8]
 8000c6e:	60da      	str	r2, [r3, #12]
 8000c70:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000c72:	463b      	mov	r3, r7
 8000c74:	2288      	movs	r2, #136	; 0x88
 8000c76:	2100      	movs	r1, #0
 8000c78:	4618      	mov	r0, r3
 8000c7a:	f003 fa55 	bl	8004128 <memset>

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000c7e:	2302      	movs	r3, #2
 8000c80:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000c84:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000c88:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000c8c:	2310      	movs	r3, #16
 8000c8e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000c92:	2302      	movs	r3, #2
 8000c94:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000c98:	2302      	movs	r3, #2
 8000c9a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000c9e:	2301      	movs	r3, #1
 8000ca0:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_OscInitStruct.PLL.PLLN = 10;
 8000ca4:	230a      	movs	r3, #10
 8000ca6:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000caa:	2307      	movs	r3, #7
 8000cac:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000cb0:	2302      	movs	r3, #2
 8000cb2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000cb6:	2302      	movs	r3, #2
 8000cb8:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000cbc:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000cc0:	4618      	mov	r0, r3
 8000cc2:	f000 ffd5 	bl	8001c70 <HAL_RCC_OscConfig>
 8000cc6:	4603      	mov	r3, r0
 8000cc8:	2b00      	cmp	r3, #0
 8000cca:	d001      	beq.n	8000cd0 <SystemClock_Config+0x82>
  {
    Error_Handler();
 8000ccc:	f000 f83b 	bl	8000d46 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000cd0:	230f      	movs	r3, #15
 8000cd2:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000cd6:	2303      	movs	r3, #3
 8000cd8:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000cdc:	2300      	movs	r3, #0
 8000cde:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000ce2:	2300      	movs	r3, #0
 8000ce4:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000ce8:	2300      	movs	r3, #0
 8000cea:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000cee:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8000cf2:	2104      	movs	r1, #4
 8000cf4:	4618      	mov	r0, r3
 8000cf6:	f001 fb6b 	bl	80023d0 <HAL_RCC_ClockConfig>
 8000cfa:	4603      	mov	r3, r0
 8000cfc:	2b00      	cmp	r3, #0
 8000cfe:	d001      	beq.n	8000d04 <SystemClock_Config+0xb6>
  {
    Error_Handler();
 8000d00:	f000 f821 	bl	8000d46 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2|RCC_PERIPHCLK_UART4
 8000d04:	f44f 738d 	mov.w	r3, #282	; 0x11a
 8000d08:	603b      	str	r3, [r7, #0]
                              |RCC_PERIPHCLK_UART5|RCC_PERIPHCLK_I2C3;
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000d0a:	2300      	movs	r3, #0
 8000d0c:	63fb      	str	r3, [r7, #60]	; 0x3c
  PeriphClkInit.Uart4ClockSelection = RCC_UART4CLKSOURCE_PCLK1;
 8000d0e:	2300      	movs	r3, #0
 8000d10:	647b      	str	r3, [r7, #68]	; 0x44
  PeriphClkInit.Uart5ClockSelection = RCC_UART5CLKSOURCE_PCLK1;
 8000d12:	2300      	movs	r3, #0
 8000d14:	64bb      	str	r3, [r7, #72]	; 0x48
  PeriphClkInit.I2c3ClockSelection = RCC_I2C3CLKSOURCE_PCLK1;
 8000d16:	2300      	movs	r3, #0
 8000d18:	65bb      	str	r3, [r7, #88]	; 0x58
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000d1a:	463b      	mov	r3, r7
 8000d1c:	4618      	mov	r0, r3
 8000d1e:	f001 fd5b 	bl	80027d8 <HAL_RCCEx_PeriphCLKConfig>
 8000d22:	4603      	mov	r3, r0
 8000d24:	2b00      	cmp	r3, #0
 8000d26:	d001      	beq.n	8000d2c <SystemClock_Config+0xde>
  {
    Error_Handler();
 8000d28:	f000 f80d 	bl	8000d46 <Error_Handler>
  }
  /** Configure the main internal regulator output voltage 
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000d2c:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000d30:	f000 ff48 	bl	8001bc4 <HAL_PWREx_ControlVoltageScaling>
 8000d34:	4603      	mov	r3, r0
 8000d36:	2b00      	cmp	r3, #0
 8000d38:	d001      	beq.n	8000d3e <SystemClock_Config+0xf0>
  {
    Error_Handler();
 8000d3a:	f000 f804 	bl	8000d46 <Error_Handler>
  }
}
 8000d3e:	bf00      	nop
 8000d40:	37e0      	adds	r7, #224	; 0xe0
 8000d42:	46bd      	mov	sp, r7
 8000d44:	bd80      	pop	{r7, pc}

08000d46 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000d46:	b480      	push	{r7}
 8000d48:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000d4a:	bf00      	nop
 8000d4c:	46bd      	mov	sp, r7
 8000d4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d52:	4770      	bx	lr

08000d54 <MX_SPI2_Init>:

SPI_HandleTypeDef hspi2;

/* SPI2 init function */
void MX_SPI2_Init(void)
{
 8000d54:	b580      	push	{r7, lr}
 8000d56:	af00      	add	r7, sp, #0

  hspi2.Instance = SPI2;
 8000d58:	4b1b      	ldr	r3, [pc, #108]	; (8000dc8 <MX_SPI2_Init+0x74>)
 8000d5a:	4a1c      	ldr	r2, [pc, #112]	; (8000dcc <MX_SPI2_Init+0x78>)
 8000d5c:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8000d5e:	4b1a      	ldr	r3, [pc, #104]	; (8000dc8 <MX_SPI2_Init+0x74>)
 8000d60:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000d64:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8000d66:	4b18      	ldr	r3, [pc, #96]	; (8000dc8 <MX_SPI2_Init+0x74>)
 8000d68:	2200      	movs	r2, #0
 8000d6a:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8000d6c:	4b16      	ldr	r3, [pc, #88]	; (8000dc8 <MX_SPI2_Init+0x74>)
 8000d6e:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8000d72:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8000d74:	4b14      	ldr	r3, [pc, #80]	; (8000dc8 <MX_SPI2_Init+0x74>)
 8000d76:	2202      	movs	r2, #2
 8000d78:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_2EDGE;
 8000d7a:	4b13      	ldr	r3, [pc, #76]	; (8000dc8 <MX_SPI2_Init+0x74>)
 8000d7c:	2201      	movs	r2, #1
 8000d7e:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8000d80:	4b11      	ldr	r3, [pc, #68]	; (8000dc8 <MX_SPI2_Init+0x74>)
 8000d82:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000d86:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 8000d88:	4b0f      	ldr	r3, [pc, #60]	; (8000dc8 <MX_SPI2_Init+0x74>)
 8000d8a:	2238      	movs	r2, #56	; 0x38
 8000d8c:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_LSB;
 8000d8e:	4b0e      	ldr	r3, [pc, #56]	; (8000dc8 <MX_SPI2_Init+0x74>)
 8000d90:	2280      	movs	r2, #128	; 0x80
 8000d92:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8000d94:	4b0c      	ldr	r3, [pc, #48]	; (8000dc8 <MX_SPI2_Init+0x74>)
 8000d96:	2200      	movs	r2, #0
 8000d98:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000d9a:	4b0b      	ldr	r3, [pc, #44]	; (8000dc8 <MX_SPI2_Init+0x74>)
 8000d9c:	2200      	movs	r2, #0
 8000d9e:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 7;
 8000da0:	4b09      	ldr	r3, [pc, #36]	; (8000dc8 <MX_SPI2_Init+0x74>)
 8000da2:	2207      	movs	r2, #7
 8000da4:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000da6:	4b08      	ldr	r3, [pc, #32]	; (8000dc8 <MX_SPI2_Init+0x74>)
 8000da8:	2200      	movs	r2, #0
 8000daa:	631a      	str	r2, [r3, #48]	; 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8000dac:	4b06      	ldr	r3, [pc, #24]	; (8000dc8 <MX_SPI2_Init+0x74>)
 8000dae:	2200      	movs	r2, #0
 8000db0:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8000db2:	4805      	ldr	r0, [pc, #20]	; (8000dc8 <MX_SPI2_Init+0x74>)
 8000db4:	f002 f9c0 	bl	8003138 <HAL_SPI_Init>
 8000db8:	4603      	mov	r3, r0
 8000dba:	2b00      	cmp	r3, #0
 8000dbc:	d001      	beq.n	8000dc2 <MX_SPI2_Init+0x6e>
  {
    Error_Handler();
 8000dbe:	f7ff ffc2 	bl	8000d46 <Error_Handler>
  }

}
 8000dc2:	bf00      	nop
 8000dc4:	bd80      	pop	{r7, pc}
 8000dc6:	bf00      	nop
 8000dc8:	20000074 	.word	0x20000074
 8000dcc:	40003800 	.word	0x40003800

08000dd0 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8000dd0:	b580      	push	{r7, lr}
 8000dd2:	b08a      	sub	sp, #40	; 0x28
 8000dd4:	af00      	add	r7, sp, #0
 8000dd6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000dd8:	f107 0314 	add.w	r3, r7, #20
 8000ddc:	2200      	movs	r2, #0
 8000dde:	601a      	str	r2, [r3, #0]
 8000de0:	605a      	str	r2, [r3, #4]
 8000de2:	609a      	str	r2, [r3, #8]
 8000de4:	60da      	str	r2, [r3, #12]
 8000de6:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI2)
 8000de8:	687b      	ldr	r3, [r7, #4]
 8000dea:	681b      	ldr	r3, [r3, #0]
 8000dec:	4a25      	ldr	r2, [pc, #148]	; (8000e84 <HAL_SPI_MspInit+0xb4>)
 8000dee:	4293      	cmp	r3, r2
 8000df0:	d144      	bne.n	8000e7c <HAL_SPI_MspInit+0xac>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* SPI2 clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8000df2:	4b25      	ldr	r3, [pc, #148]	; (8000e88 <HAL_SPI_MspInit+0xb8>)
 8000df4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000df6:	4a24      	ldr	r2, [pc, #144]	; (8000e88 <HAL_SPI_MspInit+0xb8>)
 8000df8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000dfc:	6593      	str	r3, [r2, #88]	; 0x58
 8000dfe:	4b22      	ldr	r3, [pc, #136]	; (8000e88 <HAL_SPI_MspInit+0xb8>)
 8000e00:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000e02:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000e06:	613b      	str	r3, [r7, #16]
 8000e08:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000e0a:	4b1f      	ldr	r3, [pc, #124]	; (8000e88 <HAL_SPI_MspInit+0xb8>)
 8000e0c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e0e:	4a1e      	ldr	r2, [pc, #120]	; (8000e88 <HAL_SPI_MspInit+0xb8>)
 8000e10:	f043 0304 	orr.w	r3, r3, #4
 8000e14:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000e16:	4b1c      	ldr	r3, [pc, #112]	; (8000e88 <HAL_SPI_MspInit+0xb8>)
 8000e18:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e1a:	f003 0304 	and.w	r3, r3, #4
 8000e1e:	60fb      	str	r3, [r7, #12]
 8000e20:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e22:	4b19      	ldr	r3, [pc, #100]	; (8000e88 <HAL_SPI_MspInit+0xb8>)
 8000e24:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e26:	4a18      	ldr	r2, [pc, #96]	; (8000e88 <HAL_SPI_MspInit+0xb8>)
 8000e28:	f043 0302 	orr.w	r3, r3, #2
 8000e2c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000e2e:	4b16      	ldr	r3, [pc, #88]	; (8000e88 <HAL_SPI_MspInit+0xb8>)
 8000e30:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e32:	f003 0302 	and.w	r3, r3, #2
 8000e36:	60bb      	str	r3, [r7, #8]
 8000e38:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration    
    PC2     ------> SPI2_MISO
    PC3     ------> SPI2_MOSI
    PB10     ------> SPI2_SCK 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000e3a:	230c      	movs	r3, #12
 8000e3c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e3e:	2302      	movs	r3, #2
 8000e40:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e42:	2300      	movs	r3, #0
 8000e44:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e46:	2303      	movs	r3, #3
 8000e48:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000e4a:	2305      	movs	r3, #5
 8000e4c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000e4e:	f107 0314 	add.w	r3, r7, #20
 8000e52:	4619      	mov	r1, r3
 8000e54:	480d      	ldr	r0, [pc, #52]	; (8000e8c <HAL_SPI_MspInit+0xbc>)
 8000e56:	f000 fbc1 	bl	80015dc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000e5a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000e5e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e60:	2302      	movs	r3, #2
 8000e62:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e64:	2300      	movs	r3, #0
 8000e66:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e68:	2303      	movs	r3, #3
 8000e6a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000e6c:	2305      	movs	r3, #5
 8000e6e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e70:	f107 0314 	add.w	r3, r7, #20
 8000e74:	4619      	mov	r1, r3
 8000e76:	4806      	ldr	r0, [pc, #24]	; (8000e90 <HAL_SPI_MspInit+0xc0>)
 8000e78:	f000 fbb0 	bl	80015dc <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 8000e7c:	bf00      	nop
 8000e7e:	3728      	adds	r7, #40	; 0x28
 8000e80:	46bd      	mov	sp, r7
 8000e82:	bd80      	pop	{r7, pc}
 8000e84:	40003800 	.word	0x40003800
 8000e88:	40021000 	.word	0x40021000
 8000e8c:	48000800 	.word	0x48000800
 8000e90:	48000400 	.word	0x48000400

08000e94 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000e94:	b480      	push	{r7}
 8000e96:	b083      	sub	sp, #12
 8000e98:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e9a:	4b0f      	ldr	r3, [pc, #60]	; (8000ed8 <HAL_MspInit+0x44>)
 8000e9c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000e9e:	4a0e      	ldr	r2, [pc, #56]	; (8000ed8 <HAL_MspInit+0x44>)
 8000ea0:	f043 0301 	orr.w	r3, r3, #1
 8000ea4:	6613      	str	r3, [r2, #96]	; 0x60
 8000ea6:	4b0c      	ldr	r3, [pc, #48]	; (8000ed8 <HAL_MspInit+0x44>)
 8000ea8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000eaa:	f003 0301 	and.w	r3, r3, #1
 8000eae:	607b      	str	r3, [r7, #4]
 8000eb0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000eb2:	4b09      	ldr	r3, [pc, #36]	; (8000ed8 <HAL_MspInit+0x44>)
 8000eb4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000eb6:	4a08      	ldr	r2, [pc, #32]	; (8000ed8 <HAL_MspInit+0x44>)
 8000eb8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000ebc:	6593      	str	r3, [r2, #88]	; 0x58
 8000ebe:	4b06      	ldr	r3, [pc, #24]	; (8000ed8 <HAL_MspInit+0x44>)
 8000ec0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000ec2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000ec6:	603b      	str	r3, [r7, #0]
 8000ec8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000eca:	bf00      	nop
 8000ecc:	370c      	adds	r7, #12
 8000ece:	46bd      	mov	sp, r7
 8000ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ed4:	4770      	bx	lr
 8000ed6:	bf00      	nop
 8000ed8:	40021000 	.word	0x40021000

08000edc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000edc:	b480      	push	{r7}
 8000ede:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000ee0:	bf00      	nop
 8000ee2:	46bd      	mov	sp, r7
 8000ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ee8:	4770      	bx	lr

08000eea <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000eea:	b480      	push	{r7}
 8000eec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000eee:	e7fe      	b.n	8000eee <HardFault_Handler+0x4>

08000ef0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000ef0:	b480      	push	{r7}
 8000ef2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000ef4:	e7fe      	b.n	8000ef4 <MemManage_Handler+0x4>

08000ef6 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000ef6:	b480      	push	{r7}
 8000ef8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000efa:	e7fe      	b.n	8000efa <BusFault_Handler+0x4>

08000efc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000efc:	b480      	push	{r7}
 8000efe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000f00:	e7fe      	b.n	8000f00 <UsageFault_Handler+0x4>

08000f02 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000f02:	b480      	push	{r7}
 8000f04:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000f06:	bf00      	nop
 8000f08:	46bd      	mov	sp, r7
 8000f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f0e:	4770      	bx	lr

08000f10 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000f10:	b480      	push	{r7}
 8000f12:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000f14:	bf00      	nop
 8000f16:	46bd      	mov	sp, r7
 8000f18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f1c:	4770      	bx	lr

08000f1e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000f1e:	b480      	push	{r7}
 8000f20:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000f22:	bf00      	nop
 8000f24:	46bd      	mov	sp, r7
 8000f26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f2a:	4770      	bx	lr

08000f2c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000f2c:	b580      	push	{r7, lr}
 8000f2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000f30:	f000 fa2e 	bl	8001390 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000f34:	bf00      	nop
 8000f36:	bd80      	pop	{r7, pc}

08000f38 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8000f38:	b480      	push	{r7}
 8000f3a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000f3c:	4b17      	ldr	r3, [pc, #92]	; (8000f9c <SystemInit+0x64>)
 8000f3e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000f42:	4a16      	ldr	r2, [pc, #88]	; (8000f9c <SystemInit+0x64>)
 8000f44:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000f48:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8000f4c:	4b14      	ldr	r3, [pc, #80]	; (8000fa0 <SystemInit+0x68>)
 8000f4e:	681b      	ldr	r3, [r3, #0]
 8000f50:	4a13      	ldr	r2, [pc, #76]	; (8000fa0 <SystemInit+0x68>)
 8000f52:	f043 0301 	orr.w	r3, r3, #1
 8000f56:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 8000f58:	4b11      	ldr	r3, [pc, #68]	; (8000fa0 <SystemInit+0x68>)
 8000f5a:	2200      	movs	r2, #0
 8000f5c:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 8000f5e:	4b10      	ldr	r3, [pc, #64]	; (8000fa0 <SystemInit+0x68>)
 8000f60:	681b      	ldr	r3, [r3, #0]
 8000f62:	4a0f      	ldr	r2, [pc, #60]	; (8000fa0 <SystemInit+0x68>)
 8000f64:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 8000f68:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 8000f6c:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 8000f6e:	4b0c      	ldr	r3, [pc, #48]	; (8000fa0 <SystemInit+0x68>)
 8000f70:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000f74:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000f76:	4b0a      	ldr	r3, [pc, #40]	; (8000fa0 <SystemInit+0x68>)
 8000f78:	681b      	ldr	r3, [r3, #0]
 8000f7a:	4a09      	ldr	r2, [pc, #36]	; (8000fa0 <SystemInit+0x68>)
 8000f7c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000f80:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 8000f82:	4b07      	ldr	r3, [pc, #28]	; (8000fa0 <SystemInit+0x68>)
 8000f84:	2200      	movs	r2, #0
 8000f86:	619a      	str	r2, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000f88:	4b04      	ldr	r3, [pc, #16]	; (8000f9c <SystemInit+0x64>)
 8000f8a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000f8e:	609a      	str	r2, [r3, #8]
#endif
}
 8000f90:	bf00      	nop
 8000f92:	46bd      	mov	sp, r7
 8000f94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f98:	4770      	bx	lr
 8000f9a:	bf00      	nop
 8000f9c:	e000ed00 	.word	0xe000ed00
 8000fa0:	40021000 	.word	0x40021000

08000fa4 <Test_program>:
 *  Created on: Nov 25, 2019
 *      Author: samfl
 */
#include <test.h>

void Test_program(void) {
 8000fa4:	b580      	push	{r7, lr}
 8000fa6:	af00      	add	r7, sp, #0
//	Test_display_background("red");
//	Test_display_background("green");
	Test_display_background("white");
 8000fa8:	4803      	ldr	r0, [pc, #12]	; (8000fb8 <Test_program+0x14>)
 8000faa:	f000 f80d 	bl	8000fc8 <Test_display_background>
	Test_display();
 8000fae:	f000 f805 	bl	8000fbc <Test_display>

	return;
 8000fb2:	bf00      	nop
}
 8000fb4:	bd80      	pop	{r7, pc}
 8000fb6:	bf00      	nop
 8000fb8:	0800415c 	.word	0x0800415c

08000fbc <Test_display>:

void Test_display(void) {
 8000fbc:	b580      	push	{r7, lr}
 8000fbe:	af00      	add	r7, sp, #0
//	Init_display();
//	Write_data(0x61);
	LCDinit();
 8000fc0:	f7ff fad6 	bl	8000570 <LCDinit>
}
 8000fc4:	bf00      	nop
 8000fc6:	bd80      	pop	{r7, pc}

08000fc8 <Test_display_background>:

void Test_display_background(char color[]) {
 8000fc8:	b580      	push	{r7, lr}
 8000fca:	b082      	sub	sp, #8
 8000fcc:	af00      	add	r7, sp, #0
 8000fce:	6078      	str	r0, [r7, #4]
	Display_color(color);
 8000fd0:	6878      	ldr	r0, [r7, #4]
 8000fd2:	f7ff fa83 	bl	80004dc <Display_color>
}
 8000fd6:	bf00      	nop
 8000fd8:	3708      	adds	r7, #8
 8000fda:	46bd      	mov	sp, r7
 8000fdc:	bd80      	pop	{r7, pc}
	...

08000fe0 <MX_UART4_Init>:
UART_HandleTypeDef huart5;
UART_HandleTypeDef huart2;

/* UART4 init function */
void MX_UART4_Init(void)
{
 8000fe0:	b580      	push	{r7, lr}
 8000fe2:	af00      	add	r7, sp, #0

  huart4.Instance = UART4;
 8000fe4:	4b14      	ldr	r3, [pc, #80]	; (8001038 <MX_UART4_Init+0x58>)
 8000fe6:	4a15      	ldr	r2, [pc, #84]	; (800103c <MX_UART4_Init+0x5c>)
 8000fe8:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 8000fea:	4b13      	ldr	r3, [pc, #76]	; (8001038 <MX_UART4_Init+0x58>)
 8000fec:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000ff0:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8000ff2:	4b11      	ldr	r3, [pc, #68]	; (8001038 <MX_UART4_Init+0x58>)
 8000ff4:	2200      	movs	r2, #0
 8000ff6:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8000ff8:	4b0f      	ldr	r3, [pc, #60]	; (8001038 <MX_UART4_Init+0x58>)
 8000ffa:	2200      	movs	r2, #0
 8000ffc:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8000ffe:	4b0e      	ldr	r3, [pc, #56]	; (8001038 <MX_UART4_Init+0x58>)
 8001000:	2200      	movs	r2, #0
 8001002:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8001004:	4b0c      	ldr	r3, [pc, #48]	; (8001038 <MX_UART4_Init+0x58>)
 8001006:	220c      	movs	r2, #12
 8001008:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800100a:	4b0b      	ldr	r3, [pc, #44]	; (8001038 <MX_UART4_Init+0x58>)
 800100c:	2200      	movs	r2, #0
 800100e:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8001010:	4b09      	ldr	r3, [pc, #36]	; (8001038 <MX_UART4_Init+0x58>)
 8001012:	2200      	movs	r2, #0
 8001014:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001016:	4b08      	ldr	r3, [pc, #32]	; (8001038 <MX_UART4_Init+0x58>)
 8001018:	2200      	movs	r2, #0
 800101a:	621a      	str	r2, [r3, #32]
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800101c:	4b06      	ldr	r3, [pc, #24]	; (8001038 <MX_UART4_Init+0x58>)
 800101e:	2200      	movs	r2, #0
 8001020:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8001022:	4805      	ldr	r0, [pc, #20]	; (8001038 <MX_UART4_Init+0x58>)
 8001024:	f002 fb95 	bl	8003752 <HAL_UART_Init>
 8001028:	4603      	mov	r3, r0
 800102a:	2b00      	cmp	r3, #0
 800102c:	d001      	beq.n	8001032 <MX_UART4_Init+0x52>
  {
    Error_Handler();
 800102e:	f7ff fe8a 	bl	8000d46 <Error_Handler>
  }

}
 8001032:	bf00      	nop
 8001034:	bd80      	pop	{r7, pc}
 8001036:	bf00      	nop
 8001038:	20000158 	.word	0x20000158
 800103c:	40004c00 	.word	0x40004c00

08001040 <MX_UART5_Init>:
/* UART5 init function */
void MX_UART5_Init(void)
{
 8001040:	b580      	push	{r7, lr}
 8001042:	af00      	add	r7, sp, #0

  huart5.Instance = UART5;
 8001044:	4b14      	ldr	r3, [pc, #80]	; (8001098 <MX_UART5_Init+0x58>)
 8001046:	4a15      	ldr	r2, [pc, #84]	; (800109c <MX_UART5_Init+0x5c>)
 8001048:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 115200;
 800104a:	4b13      	ldr	r3, [pc, #76]	; (8001098 <MX_UART5_Init+0x58>)
 800104c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001050:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 8001052:	4b11      	ldr	r3, [pc, #68]	; (8001098 <MX_UART5_Init+0x58>)
 8001054:	2200      	movs	r2, #0
 8001056:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 8001058:	4b0f      	ldr	r3, [pc, #60]	; (8001098 <MX_UART5_Init+0x58>)
 800105a:	2200      	movs	r2, #0
 800105c:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 800105e:	4b0e      	ldr	r3, [pc, #56]	; (8001098 <MX_UART5_Init+0x58>)
 8001060:	2200      	movs	r2, #0
 8001062:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 8001064:	4b0c      	ldr	r3, [pc, #48]	; (8001098 <MX_UART5_Init+0x58>)
 8001066:	220c      	movs	r2, #12
 8001068:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800106a:	4b0b      	ldr	r3, [pc, #44]	; (8001098 <MX_UART5_Init+0x58>)
 800106c:	2200      	movs	r2, #0
 800106e:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 8001070:	4b09      	ldr	r3, [pc, #36]	; (8001098 <MX_UART5_Init+0x58>)
 8001072:	2200      	movs	r2, #0
 8001074:	61da      	str	r2, [r3, #28]
  huart5.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001076:	4b08      	ldr	r3, [pc, #32]	; (8001098 <MX_UART5_Init+0x58>)
 8001078:	2200      	movs	r2, #0
 800107a:	621a      	str	r2, [r3, #32]
  huart5.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800107c:	4b06      	ldr	r3, [pc, #24]	; (8001098 <MX_UART5_Init+0x58>)
 800107e:	2200      	movs	r2, #0
 8001080:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart5) != HAL_OK)
 8001082:	4805      	ldr	r0, [pc, #20]	; (8001098 <MX_UART5_Init+0x58>)
 8001084:	f002 fb65 	bl	8003752 <HAL_UART_Init>
 8001088:	4603      	mov	r3, r0
 800108a:	2b00      	cmp	r3, #0
 800108c:	d001      	beq.n	8001092 <MX_UART5_Init+0x52>
  {
    Error_Handler();
 800108e:	f7ff fe5a 	bl	8000d46 <Error_Handler>
  }

}
 8001092:	bf00      	nop
 8001094:	bd80      	pop	{r7, pc}
 8001096:	bf00      	nop
 8001098:	200000d8 	.word	0x200000d8
 800109c:	40005000 	.word	0x40005000

080010a0 <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 80010a0:	b580      	push	{r7, lr}
 80010a2:	af00      	add	r7, sp, #0

  huart2.Instance = USART2;
 80010a4:	4b14      	ldr	r3, [pc, #80]	; (80010f8 <MX_USART2_UART_Init+0x58>)
 80010a6:	4a15      	ldr	r2, [pc, #84]	; (80010fc <MX_USART2_UART_Init+0x5c>)
 80010a8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80010aa:	4b13      	ldr	r3, [pc, #76]	; (80010f8 <MX_USART2_UART_Init+0x58>)
 80010ac:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80010b0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80010b2:	4b11      	ldr	r3, [pc, #68]	; (80010f8 <MX_USART2_UART_Init+0x58>)
 80010b4:	2200      	movs	r2, #0
 80010b6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80010b8:	4b0f      	ldr	r3, [pc, #60]	; (80010f8 <MX_USART2_UART_Init+0x58>)
 80010ba:	2200      	movs	r2, #0
 80010bc:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80010be:	4b0e      	ldr	r3, [pc, #56]	; (80010f8 <MX_USART2_UART_Init+0x58>)
 80010c0:	2200      	movs	r2, #0
 80010c2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80010c4:	4b0c      	ldr	r3, [pc, #48]	; (80010f8 <MX_USART2_UART_Init+0x58>)
 80010c6:	220c      	movs	r2, #12
 80010c8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80010ca:	4b0b      	ldr	r3, [pc, #44]	; (80010f8 <MX_USART2_UART_Init+0x58>)
 80010cc:	2200      	movs	r2, #0
 80010ce:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80010d0:	4b09      	ldr	r3, [pc, #36]	; (80010f8 <MX_USART2_UART_Init+0x58>)
 80010d2:	2200      	movs	r2, #0
 80010d4:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80010d6:	4b08      	ldr	r3, [pc, #32]	; (80010f8 <MX_USART2_UART_Init+0x58>)
 80010d8:	2200      	movs	r2, #0
 80010da:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80010dc:	4b06      	ldr	r3, [pc, #24]	; (80010f8 <MX_USART2_UART_Init+0x58>)
 80010de:	2200      	movs	r2, #0
 80010e0:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80010e2:	4805      	ldr	r0, [pc, #20]	; (80010f8 <MX_USART2_UART_Init+0x58>)
 80010e4:	f002 fb35 	bl	8003752 <HAL_UART_Init>
 80010e8:	4603      	mov	r3, r0
 80010ea:	2b00      	cmp	r3, #0
 80010ec:	d001      	beq.n	80010f2 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80010ee:	f7ff fe2a 	bl	8000d46 <Error_Handler>
  }

}
 80010f2:	bf00      	nop
 80010f4:	bd80      	pop	{r7, pc}
 80010f6:	bf00      	nop
 80010f8:	200001d8 	.word	0x200001d8
 80010fc:	40004400 	.word	0x40004400

08001100 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001100:	b580      	push	{r7, lr}
 8001102:	b08e      	sub	sp, #56	; 0x38
 8001104:	af00      	add	r7, sp, #0
 8001106:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001108:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800110c:	2200      	movs	r2, #0
 800110e:	601a      	str	r2, [r3, #0]
 8001110:	605a      	str	r2, [r3, #4]
 8001112:	609a      	str	r2, [r3, #8]
 8001114:	60da      	str	r2, [r3, #12]
 8001116:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==UART4)
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	681b      	ldr	r3, [r3, #0]
 800111c:	4a54      	ldr	r2, [pc, #336]	; (8001270 <HAL_UART_MspInit+0x170>)
 800111e:	4293      	cmp	r3, r2
 8001120:	d129      	bne.n	8001176 <HAL_UART_MspInit+0x76>
  {
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
    /* UART4 clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8001122:	4b54      	ldr	r3, [pc, #336]	; (8001274 <HAL_UART_MspInit+0x174>)
 8001124:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001126:	4a53      	ldr	r2, [pc, #332]	; (8001274 <HAL_UART_MspInit+0x174>)
 8001128:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800112c:	6593      	str	r3, [r2, #88]	; 0x58
 800112e:	4b51      	ldr	r3, [pc, #324]	; (8001274 <HAL_UART_MspInit+0x174>)
 8001130:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001132:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001136:	623b      	str	r3, [r7, #32]
 8001138:	6a3b      	ldr	r3, [r7, #32]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800113a:	4b4e      	ldr	r3, [pc, #312]	; (8001274 <HAL_UART_MspInit+0x174>)
 800113c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800113e:	4a4d      	ldr	r2, [pc, #308]	; (8001274 <HAL_UART_MspInit+0x174>)
 8001140:	f043 0301 	orr.w	r3, r3, #1
 8001144:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001146:	4b4b      	ldr	r3, [pc, #300]	; (8001274 <HAL_UART_MspInit+0x174>)
 8001148:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800114a:	f003 0301 	and.w	r3, r3, #1
 800114e:	61fb      	str	r3, [r7, #28]
 8001150:	69fb      	ldr	r3, [r7, #28]
    /**UART4 GPIO Configuration    
    PA0     ------> UART4_TX
    PA1     ------> UART4_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001152:	2303      	movs	r3, #3
 8001154:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001156:	2302      	movs	r3, #2
 8001158:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800115a:	2300      	movs	r3, #0
 800115c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800115e:	2303      	movs	r3, #3
 8001160:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8001162:	2308      	movs	r3, #8
 8001164:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001166:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800116a:	4619      	mov	r1, r3
 800116c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001170:	f000 fa34 	bl	80015dc <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8001174:	e078      	b.n	8001268 <HAL_UART_MspInit+0x168>
  else if(uartHandle->Instance==UART5)
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	681b      	ldr	r3, [r3, #0]
 800117a:	4a3f      	ldr	r2, [pc, #252]	; (8001278 <HAL_UART_MspInit+0x178>)
 800117c:	4293      	cmp	r3, r2
 800117e:	d145      	bne.n	800120c <HAL_UART_MspInit+0x10c>
    __HAL_RCC_UART5_CLK_ENABLE();
 8001180:	4b3c      	ldr	r3, [pc, #240]	; (8001274 <HAL_UART_MspInit+0x174>)
 8001182:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001184:	4a3b      	ldr	r2, [pc, #236]	; (8001274 <HAL_UART_MspInit+0x174>)
 8001186:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800118a:	6593      	str	r3, [r2, #88]	; 0x58
 800118c:	4b39      	ldr	r3, [pc, #228]	; (8001274 <HAL_UART_MspInit+0x174>)
 800118e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001190:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001194:	61bb      	str	r3, [r7, #24]
 8001196:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001198:	4b36      	ldr	r3, [pc, #216]	; (8001274 <HAL_UART_MspInit+0x174>)
 800119a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800119c:	4a35      	ldr	r2, [pc, #212]	; (8001274 <HAL_UART_MspInit+0x174>)
 800119e:	f043 0304 	orr.w	r3, r3, #4
 80011a2:	64d3      	str	r3, [r2, #76]	; 0x4c
 80011a4:	4b33      	ldr	r3, [pc, #204]	; (8001274 <HAL_UART_MspInit+0x174>)
 80011a6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80011a8:	f003 0304 	and.w	r3, r3, #4
 80011ac:	617b      	str	r3, [r7, #20]
 80011ae:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80011b0:	4b30      	ldr	r3, [pc, #192]	; (8001274 <HAL_UART_MspInit+0x174>)
 80011b2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80011b4:	4a2f      	ldr	r2, [pc, #188]	; (8001274 <HAL_UART_MspInit+0x174>)
 80011b6:	f043 0308 	orr.w	r3, r3, #8
 80011ba:	64d3      	str	r3, [r2, #76]	; 0x4c
 80011bc:	4b2d      	ldr	r3, [pc, #180]	; (8001274 <HAL_UART_MspInit+0x174>)
 80011be:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80011c0:	f003 0308 	and.w	r3, r3, #8
 80011c4:	613b      	str	r3, [r7, #16]
 80011c6:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 80011c8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80011cc:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011ce:	2302      	movs	r3, #2
 80011d0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011d2:	2300      	movs	r3, #0
 80011d4:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80011d6:	2303      	movs	r3, #3
 80011d8:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 80011da:	2308      	movs	r3, #8
 80011dc:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80011de:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80011e2:	4619      	mov	r1, r3
 80011e4:	4825      	ldr	r0, [pc, #148]	; (800127c <HAL_UART_MspInit+0x17c>)
 80011e6:	f000 f9f9 	bl	80015dc <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80011ea:	2304      	movs	r3, #4
 80011ec:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011ee:	2302      	movs	r3, #2
 80011f0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011f2:	2300      	movs	r3, #0
 80011f4:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80011f6:	2303      	movs	r3, #3
 80011f8:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 80011fa:	2308      	movs	r3, #8
 80011fc:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80011fe:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001202:	4619      	mov	r1, r3
 8001204:	481e      	ldr	r0, [pc, #120]	; (8001280 <HAL_UART_MspInit+0x180>)
 8001206:	f000 f9e9 	bl	80015dc <HAL_GPIO_Init>
}
 800120a:	e02d      	b.n	8001268 <HAL_UART_MspInit+0x168>
  else if(uartHandle->Instance==USART2)
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	681b      	ldr	r3, [r3, #0]
 8001210:	4a1c      	ldr	r2, [pc, #112]	; (8001284 <HAL_UART_MspInit+0x184>)
 8001212:	4293      	cmp	r3, r2
 8001214:	d128      	bne.n	8001268 <HAL_UART_MspInit+0x168>
    __HAL_RCC_USART2_CLK_ENABLE();
 8001216:	4b17      	ldr	r3, [pc, #92]	; (8001274 <HAL_UART_MspInit+0x174>)
 8001218:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800121a:	4a16      	ldr	r2, [pc, #88]	; (8001274 <HAL_UART_MspInit+0x174>)
 800121c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001220:	6593      	str	r3, [r2, #88]	; 0x58
 8001222:	4b14      	ldr	r3, [pc, #80]	; (8001274 <HAL_UART_MspInit+0x174>)
 8001224:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001226:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800122a:	60fb      	str	r3, [r7, #12]
 800122c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800122e:	4b11      	ldr	r3, [pc, #68]	; (8001274 <HAL_UART_MspInit+0x174>)
 8001230:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001232:	4a10      	ldr	r2, [pc, #64]	; (8001274 <HAL_UART_MspInit+0x174>)
 8001234:	f043 0301 	orr.w	r3, r3, #1
 8001238:	64d3      	str	r3, [r2, #76]	; 0x4c
 800123a:	4b0e      	ldr	r3, [pc, #56]	; (8001274 <HAL_UART_MspInit+0x174>)
 800123c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800123e:	f003 0301 	and.w	r3, r3, #1
 8001242:	60bb      	str	r3, [r7, #8]
 8001244:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001246:	230c      	movs	r3, #12
 8001248:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800124a:	2302      	movs	r3, #2
 800124c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800124e:	2300      	movs	r3, #0
 8001250:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001252:	2303      	movs	r3, #3
 8001254:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001256:	2307      	movs	r3, #7
 8001258:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800125a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800125e:	4619      	mov	r1, r3
 8001260:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001264:	f000 f9ba 	bl	80015dc <HAL_GPIO_Init>
}
 8001268:	bf00      	nop
 800126a:	3738      	adds	r7, #56	; 0x38
 800126c:	46bd      	mov	sp, r7
 800126e:	bd80      	pop	{r7, pc}
 8001270:	40004c00 	.word	0x40004c00
 8001274:	40021000 	.word	0x40021000
 8001278:	40005000 	.word	0x40005000
 800127c:	48000800 	.word	0x48000800
 8001280:	48000c00 	.word	0x48000c00
 8001284:	40004400 	.word	0x40004400

08001288 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001288:	f8df d034 	ldr.w	sp, [pc, #52]	; 80012c0 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 800128c:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 800128e:	e003      	b.n	8001298 <LoopCopyDataInit>

08001290 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8001290:	4b0c      	ldr	r3, [pc, #48]	; (80012c4 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8001292:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8001294:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8001296:	3104      	adds	r1, #4

08001298 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8001298:	480b      	ldr	r0, [pc, #44]	; (80012c8 <LoopForever+0xa>)
	ldr	r3, =_edata
 800129a:	4b0c      	ldr	r3, [pc, #48]	; (80012cc <LoopForever+0xe>)
	adds	r2, r0, r1
 800129c:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 800129e:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 80012a0:	d3f6      	bcc.n	8001290 <CopyDataInit>
	ldr	r2, =_sbss
 80012a2:	4a0b      	ldr	r2, [pc, #44]	; (80012d0 <LoopForever+0x12>)
	b	LoopFillZerobss
 80012a4:	e002      	b.n	80012ac <LoopFillZerobss>

080012a6 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 80012a6:	2300      	movs	r3, #0
	str	r3, [r2], #4
 80012a8:	f842 3b04 	str.w	r3, [r2], #4

080012ac <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 80012ac:	4b09      	ldr	r3, [pc, #36]	; (80012d4 <LoopForever+0x16>)
	cmp	r2, r3
 80012ae:	429a      	cmp	r2, r3
	bcc	FillZerobss
 80012b0:	d3f9      	bcc.n	80012a6 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80012b2:	f7ff fe41 	bl	8000f38 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80012b6:	f002 ff13 	bl	80040e0 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80012ba:	f7ff fcb3 	bl	8000c24 <main>

080012be <LoopForever>:

LoopForever:
    b LoopForever
 80012be:	e7fe      	b.n	80012be <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80012c0:	20018000 	.word	0x20018000
	ldr	r3, =_sidata
 80012c4:	080041bc 	.word	0x080041bc
	ldr	r0, =_sdata
 80012c8:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 80012cc:	2000000c 	.word	0x2000000c
	ldr	r2, =_sbss
 80012d0:	2000000c 	.word	0x2000000c
	ldr	r3, = _ebss
 80012d4:	2000025c 	.word	0x2000025c

080012d8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80012d8:	e7fe      	b.n	80012d8 <ADC1_2_IRQHandler>
	...

080012dc <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80012dc:	b580      	push	{r7, lr}
 80012de:	b082      	sub	sp, #8
 80012e0:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80012e2:	2300      	movs	r3, #0
 80012e4:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80012e6:	4b0c      	ldr	r3, [pc, #48]	; (8001318 <HAL_Init+0x3c>)
 80012e8:	681b      	ldr	r3, [r3, #0]
 80012ea:	4a0b      	ldr	r2, [pc, #44]	; (8001318 <HAL_Init+0x3c>)
 80012ec:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80012f0:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80012f2:	2003      	movs	r0, #3
 80012f4:	f000 f93e 	bl	8001574 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80012f8:	2000      	movs	r0, #0
 80012fa:	f000 f80f 	bl	800131c <HAL_InitTick>
 80012fe:	4603      	mov	r3, r0
 8001300:	2b00      	cmp	r3, #0
 8001302:	d002      	beq.n	800130a <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8001304:	2301      	movs	r3, #1
 8001306:	71fb      	strb	r3, [r7, #7]
 8001308:	e001      	b.n	800130e <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800130a:	f7ff fdc3 	bl	8000e94 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800130e:	79fb      	ldrb	r3, [r7, #7]
}
 8001310:	4618      	mov	r0, r3
 8001312:	3708      	adds	r7, #8
 8001314:	46bd      	mov	sp, r7
 8001316:	bd80      	pop	{r7, pc}
 8001318:	40022000 	.word	0x40022000

0800131c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800131c:	b580      	push	{r7, lr}
 800131e:	b084      	sub	sp, #16
 8001320:	af00      	add	r7, sp, #0
 8001322:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001324:	2300      	movs	r3, #0
 8001326:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8001328:	4b16      	ldr	r3, [pc, #88]	; (8001384 <HAL_InitTick+0x68>)
 800132a:	681b      	ldr	r3, [r3, #0]
 800132c:	2b00      	cmp	r3, #0
 800132e:	d022      	beq.n	8001376 <HAL_InitTick+0x5a>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8001330:	4b15      	ldr	r3, [pc, #84]	; (8001388 <HAL_InitTick+0x6c>)
 8001332:	681a      	ldr	r2, [r3, #0]
 8001334:	4b13      	ldr	r3, [pc, #76]	; (8001384 <HAL_InitTick+0x68>)
 8001336:	681b      	ldr	r3, [r3, #0]
 8001338:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800133c:	fbb1 f3f3 	udiv	r3, r1, r3
 8001340:	fbb2 f3f3 	udiv	r3, r2, r3
 8001344:	4618      	mov	r0, r3
 8001346:	f000 f93c 	bl	80015c2 <HAL_SYSTICK_Config>
 800134a:	4603      	mov	r3, r0
 800134c:	2b00      	cmp	r3, #0
 800134e:	d10f      	bne.n	8001370 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	2b0f      	cmp	r3, #15
 8001354:	d809      	bhi.n	800136a <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001356:	2200      	movs	r2, #0
 8001358:	6879      	ldr	r1, [r7, #4]
 800135a:	f04f 30ff 	mov.w	r0, #4294967295
 800135e:	f000 f914 	bl	800158a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001362:	4a0a      	ldr	r2, [pc, #40]	; (800138c <HAL_InitTick+0x70>)
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	6013      	str	r3, [r2, #0]
 8001368:	e007      	b.n	800137a <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 800136a:	2301      	movs	r3, #1
 800136c:	73fb      	strb	r3, [r7, #15]
 800136e:	e004      	b.n	800137a <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001370:	2301      	movs	r3, #1
 8001372:	73fb      	strb	r3, [r7, #15]
 8001374:	e001      	b.n	800137a <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001376:	2301      	movs	r3, #1
 8001378:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 800137a:	7bfb      	ldrb	r3, [r7, #15]
}
 800137c:	4618      	mov	r0, r3
 800137e:	3710      	adds	r7, #16
 8001380:	46bd      	mov	sp, r7
 8001382:	bd80      	pop	{r7, pc}
 8001384:	20000008 	.word	0x20000008
 8001388:	20000000 	.word	0x20000000
 800138c:	20000004 	.word	0x20000004

08001390 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001390:	b480      	push	{r7}
 8001392:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001394:	4b05      	ldr	r3, [pc, #20]	; (80013ac <HAL_IncTick+0x1c>)
 8001396:	681a      	ldr	r2, [r3, #0]
 8001398:	4b05      	ldr	r3, [pc, #20]	; (80013b0 <HAL_IncTick+0x20>)
 800139a:	681b      	ldr	r3, [r3, #0]
 800139c:	4413      	add	r3, r2
 800139e:	4a03      	ldr	r2, [pc, #12]	; (80013ac <HAL_IncTick+0x1c>)
 80013a0:	6013      	str	r3, [r2, #0]
}
 80013a2:	bf00      	nop
 80013a4:	46bd      	mov	sp, r7
 80013a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013aa:	4770      	bx	lr
 80013ac:	20000258 	.word	0x20000258
 80013b0:	20000008 	.word	0x20000008

080013b4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80013b4:	b480      	push	{r7}
 80013b6:	af00      	add	r7, sp, #0
  return uwTick;
 80013b8:	4b03      	ldr	r3, [pc, #12]	; (80013c8 <HAL_GetTick+0x14>)
 80013ba:	681b      	ldr	r3, [r3, #0]
}
 80013bc:	4618      	mov	r0, r3
 80013be:	46bd      	mov	sp, r7
 80013c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013c4:	4770      	bx	lr
 80013c6:	bf00      	nop
 80013c8:	20000258 	.word	0x20000258

080013cc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80013cc:	b580      	push	{r7, lr}
 80013ce:	b084      	sub	sp, #16
 80013d0:	af00      	add	r7, sp, #0
 80013d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80013d4:	f7ff ffee 	bl	80013b4 <HAL_GetTick>
 80013d8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 80013de:	68fb      	ldr	r3, [r7, #12]
 80013e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80013e4:	d004      	beq.n	80013f0 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 80013e6:	4b09      	ldr	r3, [pc, #36]	; (800140c <HAL_Delay+0x40>)
 80013e8:	681b      	ldr	r3, [r3, #0]
 80013ea:	68fa      	ldr	r2, [r7, #12]
 80013ec:	4413      	add	r3, r2
 80013ee:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80013f0:	bf00      	nop
 80013f2:	f7ff ffdf 	bl	80013b4 <HAL_GetTick>
 80013f6:	4602      	mov	r2, r0
 80013f8:	68bb      	ldr	r3, [r7, #8]
 80013fa:	1ad3      	subs	r3, r2, r3
 80013fc:	68fa      	ldr	r2, [r7, #12]
 80013fe:	429a      	cmp	r2, r3
 8001400:	d8f7      	bhi.n	80013f2 <HAL_Delay+0x26>
  {
  }
}
 8001402:	bf00      	nop
 8001404:	3710      	adds	r7, #16
 8001406:	46bd      	mov	sp, r7
 8001408:	bd80      	pop	{r7, pc}
 800140a:	bf00      	nop
 800140c:	20000008 	.word	0x20000008

08001410 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001410:	b480      	push	{r7}
 8001412:	b085      	sub	sp, #20
 8001414:	af00      	add	r7, sp, #0
 8001416:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	f003 0307 	and.w	r3, r3, #7
 800141e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001420:	4b0c      	ldr	r3, [pc, #48]	; (8001454 <__NVIC_SetPriorityGrouping+0x44>)
 8001422:	68db      	ldr	r3, [r3, #12]
 8001424:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001426:	68ba      	ldr	r2, [r7, #8]
 8001428:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800142c:	4013      	ands	r3, r2
 800142e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001430:	68fb      	ldr	r3, [r7, #12]
 8001432:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001434:	68bb      	ldr	r3, [r7, #8]
 8001436:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001438:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800143c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001440:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001442:	4a04      	ldr	r2, [pc, #16]	; (8001454 <__NVIC_SetPriorityGrouping+0x44>)
 8001444:	68bb      	ldr	r3, [r7, #8]
 8001446:	60d3      	str	r3, [r2, #12]
}
 8001448:	bf00      	nop
 800144a:	3714      	adds	r7, #20
 800144c:	46bd      	mov	sp, r7
 800144e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001452:	4770      	bx	lr
 8001454:	e000ed00 	.word	0xe000ed00

08001458 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001458:	b480      	push	{r7}
 800145a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800145c:	4b04      	ldr	r3, [pc, #16]	; (8001470 <__NVIC_GetPriorityGrouping+0x18>)
 800145e:	68db      	ldr	r3, [r3, #12]
 8001460:	0a1b      	lsrs	r3, r3, #8
 8001462:	f003 0307 	and.w	r3, r3, #7
}
 8001466:	4618      	mov	r0, r3
 8001468:	46bd      	mov	sp, r7
 800146a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800146e:	4770      	bx	lr
 8001470:	e000ed00 	.word	0xe000ed00

08001474 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001474:	b480      	push	{r7}
 8001476:	b083      	sub	sp, #12
 8001478:	af00      	add	r7, sp, #0
 800147a:	4603      	mov	r3, r0
 800147c:	6039      	str	r1, [r7, #0]
 800147e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001480:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001484:	2b00      	cmp	r3, #0
 8001486:	db0a      	blt.n	800149e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001488:	683b      	ldr	r3, [r7, #0]
 800148a:	b2da      	uxtb	r2, r3
 800148c:	490c      	ldr	r1, [pc, #48]	; (80014c0 <__NVIC_SetPriority+0x4c>)
 800148e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001492:	0112      	lsls	r2, r2, #4
 8001494:	b2d2      	uxtb	r2, r2
 8001496:	440b      	add	r3, r1
 8001498:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800149c:	e00a      	b.n	80014b4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800149e:	683b      	ldr	r3, [r7, #0]
 80014a0:	b2da      	uxtb	r2, r3
 80014a2:	4908      	ldr	r1, [pc, #32]	; (80014c4 <__NVIC_SetPriority+0x50>)
 80014a4:	79fb      	ldrb	r3, [r7, #7]
 80014a6:	f003 030f 	and.w	r3, r3, #15
 80014aa:	3b04      	subs	r3, #4
 80014ac:	0112      	lsls	r2, r2, #4
 80014ae:	b2d2      	uxtb	r2, r2
 80014b0:	440b      	add	r3, r1
 80014b2:	761a      	strb	r2, [r3, #24]
}
 80014b4:	bf00      	nop
 80014b6:	370c      	adds	r7, #12
 80014b8:	46bd      	mov	sp, r7
 80014ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014be:	4770      	bx	lr
 80014c0:	e000e100 	.word	0xe000e100
 80014c4:	e000ed00 	.word	0xe000ed00

080014c8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80014c8:	b480      	push	{r7}
 80014ca:	b089      	sub	sp, #36	; 0x24
 80014cc:	af00      	add	r7, sp, #0
 80014ce:	60f8      	str	r0, [r7, #12]
 80014d0:	60b9      	str	r1, [r7, #8]
 80014d2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80014d4:	68fb      	ldr	r3, [r7, #12]
 80014d6:	f003 0307 	and.w	r3, r3, #7
 80014da:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80014dc:	69fb      	ldr	r3, [r7, #28]
 80014de:	f1c3 0307 	rsb	r3, r3, #7
 80014e2:	2b04      	cmp	r3, #4
 80014e4:	bf28      	it	cs
 80014e6:	2304      	movcs	r3, #4
 80014e8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80014ea:	69fb      	ldr	r3, [r7, #28]
 80014ec:	3304      	adds	r3, #4
 80014ee:	2b06      	cmp	r3, #6
 80014f0:	d902      	bls.n	80014f8 <NVIC_EncodePriority+0x30>
 80014f2:	69fb      	ldr	r3, [r7, #28]
 80014f4:	3b03      	subs	r3, #3
 80014f6:	e000      	b.n	80014fa <NVIC_EncodePriority+0x32>
 80014f8:	2300      	movs	r3, #0
 80014fa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80014fc:	f04f 32ff 	mov.w	r2, #4294967295
 8001500:	69bb      	ldr	r3, [r7, #24]
 8001502:	fa02 f303 	lsl.w	r3, r2, r3
 8001506:	43da      	mvns	r2, r3
 8001508:	68bb      	ldr	r3, [r7, #8]
 800150a:	401a      	ands	r2, r3
 800150c:	697b      	ldr	r3, [r7, #20]
 800150e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001510:	f04f 31ff 	mov.w	r1, #4294967295
 8001514:	697b      	ldr	r3, [r7, #20]
 8001516:	fa01 f303 	lsl.w	r3, r1, r3
 800151a:	43d9      	mvns	r1, r3
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001520:	4313      	orrs	r3, r2
         );
}
 8001522:	4618      	mov	r0, r3
 8001524:	3724      	adds	r7, #36	; 0x24
 8001526:	46bd      	mov	sp, r7
 8001528:	f85d 7b04 	ldr.w	r7, [sp], #4
 800152c:	4770      	bx	lr
	...

08001530 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001530:	b580      	push	{r7, lr}
 8001532:	b082      	sub	sp, #8
 8001534:	af00      	add	r7, sp, #0
 8001536:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	3b01      	subs	r3, #1
 800153c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001540:	d301      	bcc.n	8001546 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001542:	2301      	movs	r3, #1
 8001544:	e00f      	b.n	8001566 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001546:	4a0a      	ldr	r2, [pc, #40]	; (8001570 <SysTick_Config+0x40>)
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	3b01      	subs	r3, #1
 800154c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800154e:	210f      	movs	r1, #15
 8001550:	f04f 30ff 	mov.w	r0, #4294967295
 8001554:	f7ff ff8e 	bl	8001474 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001558:	4b05      	ldr	r3, [pc, #20]	; (8001570 <SysTick_Config+0x40>)
 800155a:	2200      	movs	r2, #0
 800155c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800155e:	4b04      	ldr	r3, [pc, #16]	; (8001570 <SysTick_Config+0x40>)
 8001560:	2207      	movs	r2, #7
 8001562:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001564:	2300      	movs	r3, #0
}
 8001566:	4618      	mov	r0, r3
 8001568:	3708      	adds	r7, #8
 800156a:	46bd      	mov	sp, r7
 800156c:	bd80      	pop	{r7, pc}
 800156e:	bf00      	nop
 8001570:	e000e010 	.word	0xe000e010

08001574 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001574:	b580      	push	{r7, lr}
 8001576:	b082      	sub	sp, #8
 8001578:	af00      	add	r7, sp, #0
 800157a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800157c:	6878      	ldr	r0, [r7, #4]
 800157e:	f7ff ff47 	bl	8001410 <__NVIC_SetPriorityGrouping>
}
 8001582:	bf00      	nop
 8001584:	3708      	adds	r7, #8
 8001586:	46bd      	mov	sp, r7
 8001588:	bd80      	pop	{r7, pc}

0800158a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800158a:	b580      	push	{r7, lr}
 800158c:	b086      	sub	sp, #24
 800158e:	af00      	add	r7, sp, #0
 8001590:	4603      	mov	r3, r0
 8001592:	60b9      	str	r1, [r7, #8]
 8001594:	607a      	str	r2, [r7, #4]
 8001596:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001598:	2300      	movs	r3, #0
 800159a:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800159c:	f7ff ff5c 	bl	8001458 <__NVIC_GetPriorityGrouping>
 80015a0:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80015a2:	687a      	ldr	r2, [r7, #4]
 80015a4:	68b9      	ldr	r1, [r7, #8]
 80015a6:	6978      	ldr	r0, [r7, #20]
 80015a8:	f7ff ff8e 	bl	80014c8 <NVIC_EncodePriority>
 80015ac:	4602      	mov	r2, r0
 80015ae:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80015b2:	4611      	mov	r1, r2
 80015b4:	4618      	mov	r0, r3
 80015b6:	f7ff ff5d 	bl	8001474 <__NVIC_SetPriority>
}
 80015ba:	bf00      	nop
 80015bc:	3718      	adds	r7, #24
 80015be:	46bd      	mov	sp, r7
 80015c0:	bd80      	pop	{r7, pc}

080015c2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80015c2:	b580      	push	{r7, lr}
 80015c4:	b082      	sub	sp, #8
 80015c6:	af00      	add	r7, sp, #0
 80015c8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80015ca:	6878      	ldr	r0, [r7, #4]
 80015cc:	f7ff ffb0 	bl	8001530 <SysTick_Config>
 80015d0:	4603      	mov	r3, r0
}
 80015d2:	4618      	mov	r0, r3
 80015d4:	3708      	adds	r7, #8
 80015d6:	46bd      	mov	sp, r7
 80015d8:	bd80      	pop	{r7, pc}
	...

080015dc <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80015dc:	b480      	push	{r7}
 80015de:	b087      	sub	sp, #28
 80015e0:	af00      	add	r7, sp, #0
 80015e2:	6078      	str	r0, [r7, #4]
 80015e4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80015e6:	2300      	movs	r3, #0
 80015e8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80015ea:	e17f      	b.n	80018ec <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80015ec:	683b      	ldr	r3, [r7, #0]
 80015ee:	681a      	ldr	r2, [r3, #0]
 80015f0:	2101      	movs	r1, #1
 80015f2:	697b      	ldr	r3, [r7, #20]
 80015f4:	fa01 f303 	lsl.w	r3, r1, r3
 80015f8:	4013      	ands	r3, r2
 80015fa:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80015fc:	68fb      	ldr	r3, [r7, #12]
 80015fe:	2b00      	cmp	r3, #0
 8001600:	f000 8171 	beq.w	80018e6 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001604:	683b      	ldr	r3, [r7, #0]
 8001606:	685b      	ldr	r3, [r3, #4]
 8001608:	2b02      	cmp	r3, #2
 800160a:	d003      	beq.n	8001614 <HAL_GPIO_Init+0x38>
 800160c:	683b      	ldr	r3, [r7, #0]
 800160e:	685b      	ldr	r3, [r3, #4]
 8001610:	2b12      	cmp	r3, #18
 8001612:	d123      	bne.n	800165c <HAL_GPIO_Init+0x80>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001614:	697b      	ldr	r3, [r7, #20]
 8001616:	08da      	lsrs	r2, r3, #3
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	3208      	adds	r2, #8
 800161c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001620:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001622:	697b      	ldr	r3, [r7, #20]
 8001624:	f003 0307 	and.w	r3, r3, #7
 8001628:	009b      	lsls	r3, r3, #2
 800162a:	220f      	movs	r2, #15
 800162c:	fa02 f303 	lsl.w	r3, r2, r3
 8001630:	43db      	mvns	r3, r3
 8001632:	693a      	ldr	r2, [r7, #16]
 8001634:	4013      	ands	r3, r2
 8001636:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001638:	683b      	ldr	r3, [r7, #0]
 800163a:	691a      	ldr	r2, [r3, #16]
 800163c:	697b      	ldr	r3, [r7, #20]
 800163e:	f003 0307 	and.w	r3, r3, #7
 8001642:	009b      	lsls	r3, r3, #2
 8001644:	fa02 f303 	lsl.w	r3, r2, r3
 8001648:	693a      	ldr	r2, [r7, #16]
 800164a:	4313      	orrs	r3, r2
 800164c:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800164e:	697b      	ldr	r3, [r7, #20]
 8001650:	08da      	lsrs	r2, r3, #3
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	3208      	adds	r2, #8
 8001656:	6939      	ldr	r1, [r7, #16]
 8001658:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	681b      	ldr	r3, [r3, #0]
 8001660:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001662:	697b      	ldr	r3, [r7, #20]
 8001664:	005b      	lsls	r3, r3, #1
 8001666:	2203      	movs	r2, #3
 8001668:	fa02 f303 	lsl.w	r3, r2, r3
 800166c:	43db      	mvns	r3, r3
 800166e:	693a      	ldr	r2, [r7, #16]
 8001670:	4013      	ands	r3, r2
 8001672:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001674:	683b      	ldr	r3, [r7, #0]
 8001676:	685b      	ldr	r3, [r3, #4]
 8001678:	f003 0203 	and.w	r2, r3, #3
 800167c:	697b      	ldr	r3, [r7, #20]
 800167e:	005b      	lsls	r3, r3, #1
 8001680:	fa02 f303 	lsl.w	r3, r2, r3
 8001684:	693a      	ldr	r2, [r7, #16]
 8001686:	4313      	orrs	r3, r2
 8001688:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	693a      	ldr	r2, [r7, #16]
 800168e:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001690:	683b      	ldr	r3, [r7, #0]
 8001692:	685b      	ldr	r3, [r3, #4]
 8001694:	2b01      	cmp	r3, #1
 8001696:	d00b      	beq.n	80016b0 <HAL_GPIO_Init+0xd4>
 8001698:	683b      	ldr	r3, [r7, #0]
 800169a:	685b      	ldr	r3, [r3, #4]
 800169c:	2b02      	cmp	r3, #2
 800169e:	d007      	beq.n	80016b0 <HAL_GPIO_Init+0xd4>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80016a0:	683b      	ldr	r3, [r7, #0]
 80016a2:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80016a4:	2b11      	cmp	r3, #17
 80016a6:	d003      	beq.n	80016b0 <HAL_GPIO_Init+0xd4>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80016a8:	683b      	ldr	r3, [r7, #0]
 80016aa:	685b      	ldr	r3, [r3, #4]
 80016ac:	2b12      	cmp	r3, #18
 80016ae:	d130      	bne.n	8001712 <HAL_GPIO_Init+0x136>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	689b      	ldr	r3, [r3, #8]
 80016b4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80016b6:	697b      	ldr	r3, [r7, #20]
 80016b8:	005b      	lsls	r3, r3, #1
 80016ba:	2203      	movs	r2, #3
 80016bc:	fa02 f303 	lsl.w	r3, r2, r3
 80016c0:	43db      	mvns	r3, r3
 80016c2:	693a      	ldr	r2, [r7, #16]
 80016c4:	4013      	ands	r3, r2
 80016c6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80016c8:	683b      	ldr	r3, [r7, #0]
 80016ca:	68da      	ldr	r2, [r3, #12]
 80016cc:	697b      	ldr	r3, [r7, #20]
 80016ce:	005b      	lsls	r3, r3, #1
 80016d0:	fa02 f303 	lsl.w	r3, r2, r3
 80016d4:	693a      	ldr	r2, [r7, #16]
 80016d6:	4313      	orrs	r3, r2
 80016d8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	693a      	ldr	r2, [r7, #16]
 80016de:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	685b      	ldr	r3, [r3, #4]
 80016e4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80016e6:	2201      	movs	r2, #1
 80016e8:	697b      	ldr	r3, [r7, #20]
 80016ea:	fa02 f303 	lsl.w	r3, r2, r3
 80016ee:	43db      	mvns	r3, r3
 80016f0:	693a      	ldr	r2, [r7, #16]
 80016f2:	4013      	ands	r3, r2
 80016f4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 80016f6:	683b      	ldr	r3, [r7, #0]
 80016f8:	685b      	ldr	r3, [r3, #4]
 80016fa:	091b      	lsrs	r3, r3, #4
 80016fc:	f003 0201 	and.w	r2, r3, #1
 8001700:	697b      	ldr	r3, [r7, #20]
 8001702:	fa02 f303 	lsl.w	r3, r2, r3
 8001706:	693a      	ldr	r2, [r7, #16]
 8001708:	4313      	orrs	r3, r2
 800170a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	693a      	ldr	r2, [r7, #16]
 8001710:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8001712:	683b      	ldr	r3, [r7, #0]
 8001714:	685b      	ldr	r3, [r3, #4]
 8001716:	f003 0303 	and.w	r3, r3, #3
 800171a:	2b03      	cmp	r3, #3
 800171c:	d118      	bne.n	8001750 <HAL_GPIO_Init+0x174>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001722:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8001724:	2201      	movs	r2, #1
 8001726:	697b      	ldr	r3, [r7, #20]
 8001728:	fa02 f303 	lsl.w	r3, r2, r3
 800172c:	43db      	mvns	r3, r3
 800172e:	693a      	ldr	r2, [r7, #16]
 8001730:	4013      	ands	r3, r2
 8001732:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & ANALOG_MODE) >> 3) << position);
 8001734:	683b      	ldr	r3, [r7, #0]
 8001736:	685b      	ldr	r3, [r3, #4]
 8001738:	08db      	lsrs	r3, r3, #3
 800173a:	f003 0201 	and.w	r2, r3, #1
 800173e:	697b      	ldr	r3, [r7, #20]
 8001740:	fa02 f303 	lsl.w	r3, r2, r3
 8001744:	693a      	ldr	r2, [r7, #16]
 8001746:	4313      	orrs	r3, r2
 8001748:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	693a      	ldr	r2, [r7, #16]
 800174e:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	68db      	ldr	r3, [r3, #12]
 8001754:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8001756:	697b      	ldr	r3, [r7, #20]
 8001758:	005b      	lsls	r3, r3, #1
 800175a:	2203      	movs	r2, #3
 800175c:	fa02 f303 	lsl.w	r3, r2, r3
 8001760:	43db      	mvns	r3, r3
 8001762:	693a      	ldr	r2, [r7, #16]
 8001764:	4013      	ands	r3, r2
 8001766:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001768:	683b      	ldr	r3, [r7, #0]
 800176a:	689a      	ldr	r2, [r3, #8]
 800176c:	697b      	ldr	r3, [r7, #20]
 800176e:	005b      	lsls	r3, r3, #1
 8001770:	fa02 f303 	lsl.w	r3, r2, r3
 8001774:	693a      	ldr	r2, [r7, #16]
 8001776:	4313      	orrs	r3, r2
 8001778:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	693a      	ldr	r2, [r7, #16]
 800177e:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001780:	683b      	ldr	r3, [r7, #0]
 8001782:	685b      	ldr	r3, [r3, #4]
 8001784:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001788:	2b00      	cmp	r3, #0
 800178a:	f000 80ac 	beq.w	80018e6 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800178e:	4b5e      	ldr	r3, [pc, #376]	; (8001908 <HAL_GPIO_Init+0x32c>)
 8001790:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001792:	4a5d      	ldr	r2, [pc, #372]	; (8001908 <HAL_GPIO_Init+0x32c>)
 8001794:	f043 0301 	orr.w	r3, r3, #1
 8001798:	6613      	str	r3, [r2, #96]	; 0x60
 800179a:	4b5b      	ldr	r3, [pc, #364]	; (8001908 <HAL_GPIO_Init+0x32c>)
 800179c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800179e:	f003 0301 	and.w	r3, r3, #1
 80017a2:	60bb      	str	r3, [r7, #8]
 80017a4:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80017a6:	4a59      	ldr	r2, [pc, #356]	; (800190c <HAL_GPIO_Init+0x330>)
 80017a8:	697b      	ldr	r3, [r7, #20]
 80017aa:	089b      	lsrs	r3, r3, #2
 80017ac:	3302      	adds	r3, #2
 80017ae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80017b2:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80017b4:	697b      	ldr	r3, [r7, #20]
 80017b6:	f003 0303 	and.w	r3, r3, #3
 80017ba:	009b      	lsls	r3, r3, #2
 80017bc:	220f      	movs	r2, #15
 80017be:	fa02 f303 	lsl.w	r3, r2, r3
 80017c2:	43db      	mvns	r3, r3
 80017c4:	693a      	ldr	r2, [r7, #16]
 80017c6:	4013      	ands	r3, r2
 80017c8:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80017d0:	d025      	beq.n	800181e <HAL_GPIO_Init+0x242>
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	4a4e      	ldr	r2, [pc, #312]	; (8001910 <HAL_GPIO_Init+0x334>)
 80017d6:	4293      	cmp	r3, r2
 80017d8:	d01f      	beq.n	800181a <HAL_GPIO_Init+0x23e>
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	4a4d      	ldr	r2, [pc, #308]	; (8001914 <HAL_GPIO_Init+0x338>)
 80017de:	4293      	cmp	r3, r2
 80017e0:	d019      	beq.n	8001816 <HAL_GPIO_Init+0x23a>
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	4a4c      	ldr	r2, [pc, #304]	; (8001918 <HAL_GPIO_Init+0x33c>)
 80017e6:	4293      	cmp	r3, r2
 80017e8:	d013      	beq.n	8001812 <HAL_GPIO_Init+0x236>
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	4a4b      	ldr	r2, [pc, #300]	; (800191c <HAL_GPIO_Init+0x340>)
 80017ee:	4293      	cmp	r3, r2
 80017f0:	d00d      	beq.n	800180e <HAL_GPIO_Init+0x232>
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	4a4a      	ldr	r2, [pc, #296]	; (8001920 <HAL_GPIO_Init+0x344>)
 80017f6:	4293      	cmp	r3, r2
 80017f8:	d007      	beq.n	800180a <HAL_GPIO_Init+0x22e>
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	4a49      	ldr	r2, [pc, #292]	; (8001924 <HAL_GPIO_Init+0x348>)
 80017fe:	4293      	cmp	r3, r2
 8001800:	d101      	bne.n	8001806 <HAL_GPIO_Init+0x22a>
 8001802:	2306      	movs	r3, #6
 8001804:	e00c      	b.n	8001820 <HAL_GPIO_Init+0x244>
 8001806:	2307      	movs	r3, #7
 8001808:	e00a      	b.n	8001820 <HAL_GPIO_Init+0x244>
 800180a:	2305      	movs	r3, #5
 800180c:	e008      	b.n	8001820 <HAL_GPIO_Init+0x244>
 800180e:	2304      	movs	r3, #4
 8001810:	e006      	b.n	8001820 <HAL_GPIO_Init+0x244>
 8001812:	2303      	movs	r3, #3
 8001814:	e004      	b.n	8001820 <HAL_GPIO_Init+0x244>
 8001816:	2302      	movs	r3, #2
 8001818:	e002      	b.n	8001820 <HAL_GPIO_Init+0x244>
 800181a:	2301      	movs	r3, #1
 800181c:	e000      	b.n	8001820 <HAL_GPIO_Init+0x244>
 800181e:	2300      	movs	r3, #0
 8001820:	697a      	ldr	r2, [r7, #20]
 8001822:	f002 0203 	and.w	r2, r2, #3
 8001826:	0092      	lsls	r2, r2, #2
 8001828:	4093      	lsls	r3, r2
 800182a:	693a      	ldr	r2, [r7, #16]
 800182c:	4313      	orrs	r3, r2
 800182e:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001830:	4936      	ldr	r1, [pc, #216]	; (800190c <HAL_GPIO_Init+0x330>)
 8001832:	697b      	ldr	r3, [r7, #20]
 8001834:	089b      	lsrs	r3, r3, #2
 8001836:	3302      	adds	r3, #2
 8001838:	693a      	ldr	r2, [r7, #16]
 800183a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 800183e:	4b3a      	ldr	r3, [pc, #232]	; (8001928 <HAL_GPIO_Init+0x34c>)
 8001840:	681b      	ldr	r3, [r3, #0]
 8001842:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001844:	68fb      	ldr	r3, [r7, #12]
 8001846:	43db      	mvns	r3, r3
 8001848:	693a      	ldr	r2, [r7, #16]
 800184a:	4013      	ands	r3, r2
 800184c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800184e:	683b      	ldr	r3, [r7, #0]
 8001850:	685b      	ldr	r3, [r3, #4]
 8001852:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001856:	2b00      	cmp	r3, #0
 8001858:	d003      	beq.n	8001862 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 800185a:	693a      	ldr	r2, [r7, #16]
 800185c:	68fb      	ldr	r3, [r7, #12]
 800185e:	4313      	orrs	r3, r2
 8001860:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001862:	4a31      	ldr	r2, [pc, #196]	; (8001928 <HAL_GPIO_Init+0x34c>)
 8001864:	693b      	ldr	r3, [r7, #16]
 8001866:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 8001868:	4b2f      	ldr	r3, [pc, #188]	; (8001928 <HAL_GPIO_Init+0x34c>)
 800186a:	685b      	ldr	r3, [r3, #4]
 800186c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800186e:	68fb      	ldr	r3, [r7, #12]
 8001870:	43db      	mvns	r3, r3
 8001872:	693a      	ldr	r2, [r7, #16]
 8001874:	4013      	ands	r3, r2
 8001876:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001878:	683b      	ldr	r3, [r7, #0]
 800187a:	685b      	ldr	r3, [r3, #4]
 800187c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001880:	2b00      	cmp	r3, #0
 8001882:	d003      	beq.n	800188c <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8001884:	693a      	ldr	r2, [r7, #16]
 8001886:	68fb      	ldr	r3, [r7, #12]
 8001888:	4313      	orrs	r3, r2
 800188a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800188c:	4a26      	ldr	r2, [pc, #152]	; (8001928 <HAL_GPIO_Init+0x34c>)
 800188e:	693b      	ldr	r3, [r7, #16]
 8001890:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001892:	4b25      	ldr	r3, [pc, #148]	; (8001928 <HAL_GPIO_Init+0x34c>)
 8001894:	689b      	ldr	r3, [r3, #8]
 8001896:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001898:	68fb      	ldr	r3, [r7, #12]
 800189a:	43db      	mvns	r3, r3
 800189c:	693a      	ldr	r2, [r7, #16]
 800189e:	4013      	ands	r3, r2
 80018a0:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80018a2:	683b      	ldr	r3, [r7, #0]
 80018a4:	685b      	ldr	r3, [r3, #4]
 80018a6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80018aa:	2b00      	cmp	r3, #0
 80018ac:	d003      	beq.n	80018b6 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 80018ae:	693a      	ldr	r2, [r7, #16]
 80018b0:	68fb      	ldr	r3, [r7, #12]
 80018b2:	4313      	orrs	r3, r2
 80018b4:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80018b6:	4a1c      	ldr	r2, [pc, #112]	; (8001928 <HAL_GPIO_Init+0x34c>)
 80018b8:	693b      	ldr	r3, [r7, #16]
 80018ba:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80018bc:	4b1a      	ldr	r3, [pc, #104]	; (8001928 <HAL_GPIO_Init+0x34c>)
 80018be:	68db      	ldr	r3, [r3, #12]
 80018c0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80018c2:	68fb      	ldr	r3, [r7, #12]
 80018c4:	43db      	mvns	r3, r3
 80018c6:	693a      	ldr	r2, [r7, #16]
 80018c8:	4013      	ands	r3, r2
 80018ca:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80018cc:	683b      	ldr	r3, [r7, #0]
 80018ce:	685b      	ldr	r3, [r3, #4]
 80018d0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80018d4:	2b00      	cmp	r3, #0
 80018d6:	d003      	beq.n	80018e0 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 80018d8:	693a      	ldr	r2, [r7, #16]
 80018da:	68fb      	ldr	r3, [r7, #12]
 80018dc:	4313      	orrs	r3, r2
 80018de:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80018e0:	4a11      	ldr	r2, [pc, #68]	; (8001928 <HAL_GPIO_Init+0x34c>)
 80018e2:	693b      	ldr	r3, [r7, #16]
 80018e4:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 80018e6:	697b      	ldr	r3, [r7, #20]
 80018e8:	3301      	adds	r3, #1
 80018ea:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80018ec:	683b      	ldr	r3, [r7, #0]
 80018ee:	681a      	ldr	r2, [r3, #0]
 80018f0:	697b      	ldr	r3, [r7, #20]
 80018f2:	fa22 f303 	lsr.w	r3, r2, r3
 80018f6:	2b00      	cmp	r3, #0
 80018f8:	f47f ae78 	bne.w	80015ec <HAL_GPIO_Init+0x10>
  }
}
 80018fc:	bf00      	nop
 80018fe:	371c      	adds	r7, #28
 8001900:	46bd      	mov	sp, r7
 8001902:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001906:	4770      	bx	lr
 8001908:	40021000 	.word	0x40021000
 800190c:	40010000 	.word	0x40010000
 8001910:	48000400 	.word	0x48000400
 8001914:	48000800 	.word	0x48000800
 8001918:	48000c00 	.word	0x48000c00
 800191c:	48001000 	.word	0x48001000
 8001920:	48001400 	.word	0x48001400
 8001924:	48001800 	.word	0x48001800
 8001928:	40010400 	.word	0x40010400

0800192c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800192c:	b480      	push	{r7}
 800192e:	b083      	sub	sp, #12
 8001930:	af00      	add	r7, sp, #0
 8001932:	6078      	str	r0, [r7, #4]
 8001934:	460b      	mov	r3, r1
 8001936:	807b      	strh	r3, [r7, #2]
 8001938:	4613      	mov	r3, r2
 800193a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800193c:	787b      	ldrb	r3, [r7, #1]
 800193e:	2b00      	cmp	r3, #0
 8001940:	d003      	beq.n	800194a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001942:	887a      	ldrh	r2, [r7, #2]
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001948:	e002      	b.n	8001950 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800194a:	887a      	ldrh	r2, [r7, #2]
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001950:	bf00      	nop
 8001952:	370c      	adds	r7, #12
 8001954:	46bd      	mov	sp, r7
 8001956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800195a:	4770      	bx	lr

0800195c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800195c:	b580      	push	{r7, lr}
 800195e:	b082      	sub	sp, #8
 8001960:	af00      	add	r7, sp, #0
 8001962:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	2b00      	cmp	r3, #0
 8001968:	d101      	bne.n	800196e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800196a:	2301      	movs	r3, #1
 800196c:	e081      	b.n	8001a72 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001974:	b2db      	uxtb	r3, r3
 8001976:	2b00      	cmp	r3, #0
 8001978:	d106      	bne.n	8001988 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	2200      	movs	r2, #0
 800197e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8001982:	6878      	ldr	r0, [r7, #4]
 8001984:	f7ff f90a 	bl	8000b9c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	2224      	movs	r2, #36	; 0x24
 800198c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	681a      	ldr	r2, [r3, #0]
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	681b      	ldr	r3, [r3, #0]
 800199a:	f022 0201 	bic.w	r2, r2, #1
 800199e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	685a      	ldr	r2, [r3, #4]
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80019ac:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	681b      	ldr	r3, [r3, #0]
 80019b2:	689a      	ldr	r2, [r3, #8]
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80019bc:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	68db      	ldr	r3, [r3, #12]
 80019c2:	2b01      	cmp	r3, #1
 80019c4:	d107      	bne.n	80019d6 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	689a      	ldr	r2, [r3, #8]
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80019d2:	609a      	str	r2, [r3, #8]
 80019d4:	e006      	b.n	80019e4 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	689a      	ldr	r2, [r3, #8]
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 80019e2:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	68db      	ldr	r3, [r3, #12]
 80019e8:	2b02      	cmp	r3, #2
 80019ea:	d104      	bne.n	80019f6 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80019f4:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	681b      	ldr	r3, [r3, #0]
 80019fa:	685b      	ldr	r3, [r3, #4]
 80019fc:	687a      	ldr	r2, [r7, #4]
 80019fe:	6812      	ldr	r2, [r2, #0]
 8001a00:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001a04:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001a08:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	68da      	ldr	r2, [r3, #12]
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001a18:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	691a      	ldr	r2, [r3, #16]
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	695b      	ldr	r3, [r3, #20]
 8001a22:	ea42 0103 	orr.w	r1, r2, r3
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	699b      	ldr	r3, [r3, #24]
 8001a2a:	021a      	lsls	r2, r3, #8
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	430a      	orrs	r2, r1
 8001a32:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	69d9      	ldr	r1, [r3, #28]
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	6a1a      	ldr	r2, [r3, #32]
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	430a      	orrs	r2, r1
 8001a42:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	681a      	ldr	r2, [r3, #0]
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	681b      	ldr	r3, [r3, #0]
 8001a4e:	f042 0201 	orr.w	r2, r2, #1
 8001a52:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	2200      	movs	r2, #0
 8001a58:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	2220      	movs	r2, #32
 8001a5e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	2200      	movs	r2, #0
 8001a66:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	2200      	movs	r2, #0
 8001a6c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8001a70:	2300      	movs	r3, #0
}
 8001a72:	4618      	mov	r0, r3
 8001a74:	3708      	adds	r7, #8
 8001a76:	46bd      	mov	sp, r7
 8001a78:	bd80      	pop	{r7, pc}

08001a7a <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8001a7a:	b480      	push	{r7}
 8001a7c:	b083      	sub	sp, #12
 8001a7e:	af00      	add	r7, sp, #0
 8001a80:	6078      	str	r0, [r7, #4]
 8001a82:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001a8a:	b2db      	uxtb	r3, r3
 8001a8c:	2b20      	cmp	r3, #32
 8001a8e:	d138      	bne.n	8001b02 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001a96:	2b01      	cmp	r3, #1
 8001a98:	d101      	bne.n	8001a9e <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8001a9a:	2302      	movs	r3, #2
 8001a9c:	e032      	b.n	8001b04 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	2201      	movs	r2, #1
 8001aa2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	2224      	movs	r2, #36	; 0x24
 8001aaa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	681a      	ldr	r2, [r3, #0]
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	f022 0201 	bic.w	r2, r2, #1
 8001abc:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	681a      	ldr	r2, [r3, #0]
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8001acc:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	6819      	ldr	r1, [r3, #0]
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	683a      	ldr	r2, [r7, #0]
 8001ada:	430a      	orrs	r2, r1
 8001adc:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	681a      	ldr	r2, [r3, #0]
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	f042 0201 	orr.w	r2, r2, #1
 8001aec:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	2220      	movs	r2, #32
 8001af2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	2200      	movs	r2, #0
 8001afa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8001afe:	2300      	movs	r3, #0
 8001b00:	e000      	b.n	8001b04 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8001b02:	2302      	movs	r3, #2
  }
}
 8001b04:	4618      	mov	r0, r3
 8001b06:	370c      	adds	r7, #12
 8001b08:	46bd      	mov	sp, r7
 8001b0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b0e:	4770      	bx	lr

08001b10 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8001b10:	b480      	push	{r7}
 8001b12:	b085      	sub	sp, #20
 8001b14:	af00      	add	r7, sp, #0
 8001b16:	6078      	str	r0, [r7, #4]
 8001b18:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001b20:	b2db      	uxtb	r3, r3
 8001b22:	2b20      	cmp	r3, #32
 8001b24:	d139      	bne.n	8001b9a <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001b2c:	2b01      	cmp	r3, #1
 8001b2e:	d101      	bne.n	8001b34 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8001b30:	2302      	movs	r3, #2
 8001b32:	e033      	b.n	8001b9c <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	2201      	movs	r2, #1
 8001b38:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	2224      	movs	r2, #36	; 0x24
 8001b40:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	681a      	ldr	r2, [r3, #0]
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	f022 0201 	bic.w	r2, r2, #1
 8001b52:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8001b5c:	68fb      	ldr	r3, [r7, #12]
 8001b5e:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8001b62:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8001b64:	683b      	ldr	r3, [r7, #0]
 8001b66:	021b      	lsls	r3, r3, #8
 8001b68:	68fa      	ldr	r2, [r7, #12]
 8001b6a:	4313      	orrs	r3, r2
 8001b6c:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	68fa      	ldr	r2, [r7, #12]
 8001b74:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	681a      	ldr	r2, [r3, #0]
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	f042 0201 	orr.w	r2, r2, #1
 8001b84:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	2220      	movs	r2, #32
 8001b8a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	2200      	movs	r2, #0
 8001b92:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8001b96:	2300      	movs	r3, #0
 8001b98:	e000      	b.n	8001b9c <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8001b9a:	2302      	movs	r3, #2
  }
}
 8001b9c:	4618      	mov	r0, r3
 8001b9e:	3714      	adds	r7, #20
 8001ba0:	46bd      	mov	sp, r7
 8001ba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ba6:	4770      	bx	lr

08001ba8 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_RANGE1 or PWR_REGULATOR_VOLTAGE_RANGE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8001ba8:	b480      	push	{r7}
 8001baa:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8001bac:	4b04      	ldr	r3, [pc, #16]	; (8001bc0 <HAL_PWREx_GetVoltageRange+0x18>)
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8001bb4:	4618      	mov	r0, r3
 8001bb6:	46bd      	mov	sp, r7
 8001bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bbc:	4770      	bx	lr
 8001bbe:	bf00      	nop
 8001bc0:	40007000 	.word	0x40007000

08001bc4 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001bc4:	b480      	push	{r7}
 8001bc6:	b085      	sub	sp, #20
 8001bc8:	af00      	add	r7, sp, #0
 8001bca:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001bd2:	d130      	bne.n	8001c36 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8001bd4:	4b23      	ldr	r3, [pc, #140]	; (8001c64 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001bdc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001be0:	d038      	beq.n	8001c54 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001be2:	4b20      	ldr	r3, [pc, #128]	; (8001c64 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001bea:	4a1e      	ldr	r2, [pc, #120]	; (8001c64 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001bec:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001bf0:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001bf2:	4b1d      	ldr	r3, [pc, #116]	; (8001c68 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	2232      	movs	r2, #50	; 0x32
 8001bf8:	fb02 f303 	mul.w	r3, r2, r3
 8001bfc:	4a1b      	ldr	r2, [pc, #108]	; (8001c6c <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8001bfe:	fba2 2303 	umull	r2, r3, r2, r3
 8001c02:	0c9b      	lsrs	r3, r3, #18
 8001c04:	3301      	adds	r3, #1
 8001c06:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001c08:	e002      	b.n	8001c10 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8001c0a:	68fb      	ldr	r3, [r7, #12]
 8001c0c:	3b01      	subs	r3, #1
 8001c0e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001c10:	4b14      	ldr	r3, [pc, #80]	; (8001c64 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001c12:	695b      	ldr	r3, [r3, #20]
 8001c14:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001c18:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001c1c:	d102      	bne.n	8001c24 <HAL_PWREx_ControlVoltageScaling+0x60>
 8001c1e:	68fb      	ldr	r3, [r7, #12]
 8001c20:	2b00      	cmp	r3, #0
 8001c22:	d1f2      	bne.n	8001c0a <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001c24:	4b0f      	ldr	r3, [pc, #60]	; (8001c64 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001c26:	695b      	ldr	r3, [r3, #20]
 8001c28:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001c2c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001c30:	d110      	bne.n	8001c54 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8001c32:	2303      	movs	r3, #3
 8001c34:	e00f      	b.n	8001c56 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8001c36:	4b0b      	ldr	r3, [pc, #44]	; (8001c64 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001c3e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001c42:	d007      	beq.n	8001c54 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001c44:	4b07      	ldr	r3, [pc, #28]	; (8001c64 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001c4c:	4a05      	ldr	r2, [pc, #20]	; (8001c64 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001c4e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001c52:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8001c54:	2300      	movs	r3, #0
}
 8001c56:	4618      	mov	r0, r3
 8001c58:	3714      	adds	r7, #20
 8001c5a:	46bd      	mov	sp, r7
 8001c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c60:	4770      	bx	lr
 8001c62:	bf00      	nop
 8001c64:	40007000 	.word	0x40007000
 8001c68:	20000000 	.word	0x20000000
 8001c6c:	431bde83 	.word	0x431bde83

08001c70 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001c70:	b580      	push	{r7, lr}
 8001c72:	b088      	sub	sp, #32
 8001c74:	af00      	add	r7, sp, #0
 8001c76:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	2b00      	cmp	r3, #0
 8001c7c:	d101      	bne.n	8001c82 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001c7e:	2301      	movs	r3, #1
 8001c80:	e39d      	b.n	80023be <HAL_RCC_OscConfig+0x74e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001c82:	4ba4      	ldr	r3, [pc, #656]	; (8001f14 <HAL_RCC_OscConfig+0x2a4>)
 8001c84:	689b      	ldr	r3, [r3, #8]
 8001c86:	f003 030c 	and.w	r3, r3, #12
 8001c8a:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001c8c:	4ba1      	ldr	r3, [pc, #644]	; (8001f14 <HAL_RCC_OscConfig+0x2a4>)
 8001c8e:	68db      	ldr	r3, [r3, #12]
 8001c90:	f003 0303 	and.w	r3, r3, #3
 8001c94:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	f003 0310 	and.w	r3, r3, #16
 8001c9e:	2b00      	cmp	r3, #0
 8001ca0:	f000 80e1 	beq.w	8001e66 <HAL_RCC_OscConfig+0x1f6>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001ca4:	69bb      	ldr	r3, [r7, #24]
 8001ca6:	2b00      	cmp	r3, #0
 8001ca8:	d007      	beq.n	8001cba <HAL_RCC_OscConfig+0x4a>
 8001caa:	69bb      	ldr	r3, [r7, #24]
 8001cac:	2b0c      	cmp	r3, #12
 8001cae:	f040 8088 	bne.w	8001dc2 <HAL_RCC_OscConfig+0x152>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8001cb2:	697b      	ldr	r3, [r7, #20]
 8001cb4:	2b01      	cmp	r3, #1
 8001cb6:	f040 8084 	bne.w	8001dc2 <HAL_RCC_OscConfig+0x152>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001cba:	4b96      	ldr	r3, [pc, #600]	; (8001f14 <HAL_RCC_OscConfig+0x2a4>)
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	f003 0302 	and.w	r3, r3, #2
 8001cc2:	2b00      	cmp	r3, #0
 8001cc4:	d005      	beq.n	8001cd2 <HAL_RCC_OscConfig+0x62>
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	699b      	ldr	r3, [r3, #24]
 8001cca:	2b00      	cmp	r3, #0
 8001ccc:	d101      	bne.n	8001cd2 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8001cce:	2301      	movs	r3, #1
 8001cd0:	e375      	b.n	80023be <HAL_RCC_OscConfig+0x74e>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	6a1a      	ldr	r2, [r3, #32]
 8001cd6:	4b8f      	ldr	r3, [pc, #572]	; (8001f14 <HAL_RCC_OscConfig+0x2a4>)
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	f003 0308 	and.w	r3, r3, #8
 8001cde:	2b00      	cmp	r3, #0
 8001ce0:	d004      	beq.n	8001cec <HAL_RCC_OscConfig+0x7c>
 8001ce2:	4b8c      	ldr	r3, [pc, #560]	; (8001f14 <HAL_RCC_OscConfig+0x2a4>)
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001cea:	e005      	b.n	8001cf8 <HAL_RCC_OscConfig+0x88>
 8001cec:	4b89      	ldr	r3, [pc, #548]	; (8001f14 <HAL_RCC_OscConfig+0x2a4>)
 8001cee:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001cf2:	091b      	lsrs	r3, r3, #4
 8001cf4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001cf8:	4293      	cmp	r3, r2
 8001cfa:	d223      	bcs.n	8001d44 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	6a1b      	ldr	r3, [r3, #32]
 8001d00:	4618      	mov	r0, r3
 8001d02:	f000 fd09 	bl	8002718 <RCC_SetFlashLatencyFromMSIRange>
 8001d06:	4603      	mov	r3, r0
 8001d08:	2b00      	cmp	r3, #0
 8001d0a:	d001      	beq.n	8001d10 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8001d0c:	2301      	movs	r3, #1
 8001d0e:	e356      	b.n	80023be <HAL_RCC_OscConfig+0x74e>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001d10:	4b80      	ldr	r3, [pc, #512]	; (8001f14 <HAL_RCC_OscConfig+0x2a4>)
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	4a7f      	ldr	r2, [pc, #508]	; (8001f14 <HAL_RCC_OscConfig+0x2a4>)
 8001d16:	f043 0308 	orr.w	r3, r3, #8
 8001d1a:	6013      	str	r3, [r2, #0]
 8001d1c:	4b7d      	ldr	r3, [pc, #500]	; (8001f14 <HAL_RCC_OscConfig+0x2a4>)
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	6a1b      	ldr	r3, [r3, #32]
 8001d28:	497a      	ldr	r1, [pc, #488]	; (8001f14 <HAL_RCC_OscConfig+0x2a4>)
 8001d2a:	4313      	orrs	r3, r2
 8001d2c:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001d2e:	4b79      	ldr	r3, [pc, #484]	; (8001f14 <HAL_RCC_OscConfig+0x2a4>)
 8001d30:	685b      	ldr	r3, [r3, #4]
 8001d32:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	69db      	ldr	r3, [r3, #28]
 8001d3a:	021b      	lsls	r3, r3, #8
 8001d3c:	4975      	ldr	r1, [pc, #468]	; (8001f14 <HAL_RCC_OscConfig+0x2a4>)
 8001d3e:	4313      	orrs	r3, r2
 8001d40:	604b      	str	r3, [r1, #4]
 8001d42:	e022      	b.n	8001d8a <HAL_RCC_OscConfig+0x11a>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001d44:	4b73      	ldr	r3, [pc, #460]	; (8001f14 <HAL_RCC_OscConfig+0x2a4>)
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	4a72      	ldr	r2, [pc, #456]	; (8001f14 <HAL_RCC_OscConfig+0x2a4>)
 8001d4a:	f043 0308 	orr.w	r3, r3, #8
 8001d4e:	6013      	str	r3, [r2, #0]
 8001d50:	4b70      	ldr	r3, [pc, #448]	; (8001f14 <HAL_RCC_OscConfig+0x2a4>)
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	6a1b      	ldr	r3, [r3, #32]
 8001d5c:	496d      	ldr	r1, [pc, #436]	; (8001f14 <HAL_RCC_OscConfig+0x2a4>)
 8001d5e:	4313      	orrs	r3, r2
 8001d60:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001d62:	4b6c      	ldr	r3, [pc, #432]	; (8001f14 <HAL_RCC_OscConfig+0x2a4>)
 8001d64:	685b      	ldr	r3, [r3, #4]
 8001d66:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	69db      	ldr	r3, [r3, #28]
 8001d6e:	021b      	lsls	r3, r3, #8
 8001d70:	4968      	ldr	r1, [pc, #416]	; (8001f14 <HAL_RCC_OscConfig+0x2a4>)
 8001d72:	4313      	orrs	r3, r2
 8001d74:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	6a1b      	ldr	r3, [r3, #32]
 8001d7a:	4618      	mov	r0, r3
 8001d7c:	f000 fccc 	bl	8002718 <RCC_SetFlashLatencyFromMSIRange>
 8001d80:	4603      	mov	r3, r0
 8001d82:	2b00      	cmp	r3, #0
 8001d84:	d001      	beq.n	8001d8a <HAL_RCC_OscConfig+0x11a>
          {
            return HAL_ERROR;
 8001d86:	2301      	movs	r3, #1
 8001d88:	e319      	b.n	80023be <HAL_RCC_OscConfig+0x74e>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001d8a:	f000 fc03 	bl	8002594 <HAL_RCC_GetSysClockFreq>
 8001d8e:	4601      	mov	r1, r0
 8001d90:	4b60      	ldr	r3, [pc, #384]	; (8001f14 <HAL_RCC_OscConfig+0x2a4>)
 8001d92:	689b      	ldr	r3, [r3, #8]
 8001d94:	091b      	lsrs	r3, r3, #4
 8001d96:	f003 030f 	and.w	r3, r3, #15
 8001d9a:	4a5f      	ldr	r2, [pc, #380]	; (8001f18 <HAL_RCC_OscConfig+0x2a8>)
 8001d9c:	5cd3      	ldrb	r3, [r2, r3]
 8001d9e:	f003 031f 	and.w	r3, r3, #31
 8001da2:	fa21 f303 	lsr.w	r3, r1, r3
 8001da6:	4a5d      	ldr	r2, [pc, #372]	; (8001f1c <HAL_RCC_OscConfig+0x2ac>)
 8001da8:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8001daa:	4b5d      	ldr	r3, [pc, #372]	; (8001f20 <HAL_RCC_OscConfig+0x2b0>)
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	4618      	mov	r0, r3
 8001db0:	f7ff fab4 	bl	800131c <HAL_InitTick>
 8001db4:	4603      	mov	r3, r0
 8001db6:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8001db8:	7bfb      	ldrb	r3, [r7, #15]
 8001dba:	2b00      	cmp	r3, #0
 8001dbc:	d052      	beq.n	8001e64 <HAL_RCC_OscConfig+0x1f4>
        {
          return status;
 8001dbe:	7bfb      	ldrb	r3, [r7, #15]
 8001dc0:	e2fd      	b.n	80023be <HAL_RCC_OscConfig+0x74e>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	699b      	ldr	r3, [r3, #24]
 8001dc6:	2b00      	cmp	r3, #0
 8001dc8:	d032      	beq.n	8001e30 <HAL_RCC_OscConfig+0x1c0>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001dca:	4b52      	ldr	r3, [pc, #328]	; (8001f14 <HAL_RCC_OscConfig+0x2a4>)
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	4a51      	ldr	r2, [pc, #324]	; (8001f14 <HAL_RCC_OscConfig+0x2a4>)
 8001dd0:	f043 0301 	orr.w	r3, r3, #1
 8001dd4:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001dd6:	f7ff faed 	bl	80013b4 <HAL_GetTick>
 8001dda:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001ddc:	e008      	b.n	8001df0 <HAL_RCC_OscConfig+0x180>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001dde:	f7ff fae9 	bl	80013b4 <HAL_GetTick>
 8001de2:	4602      	mov	r2, r0
 8001de4:	693b      	ldr	r3, [r7, #16]
 8001de6:	1ad3      	subs	r3, r2, r3
 8001de8:	2b02      	cmp	r3, #2
 8001dea:	d901      	bls.n	8001df0 <HAL_RCC_OscConfig+0x180>
          {
            return HAL_TIMEOUT;
 8001dec:	2303      	movs	r3, #3
 8001dee:	e2e6      	b.n	80023be <HAL_RCC_OscConfig+0x74e>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001df0:	4b48      	ldr	r3, [pc, #288]	; (8001f14 <HAL_RCC_OscConfig+0x2a4>)
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	f003 0302 	and.w	r3, r3, #2
 8001df8:	2b00      	cmp	r3, #0
 8001dfa:	d0f0      	beq.n	8001dde <HAL_RCC_OscConfig+0x16e>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001dfc:	4b45      	ldr	r3, [pc, #276]	; (8001f14 <HAL_RCC_OscConfig+0x2a4>)
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	4a44      	ldr	r2, [pc, #272]	; (8001f14 <HAL_RCC_OscConfig+0x2a4>)
 8001e02:	f043 0308 	orr.w	r3, r3, #8
 8001e06:	6013      	str	r3, [r2, #0]
 8001e08:	4b42      	ldr	r3, [pc, #264]	; (8001f14 <HAL_RCC_OscConfig+0x2a4>)
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	6a1b      	ldr	r3, [r3, #32]
 8001e14:	493f      	ldr	r1, [pc, #252]	; (8001f14 <HAL_RCC_OscConfig+0x2a4>)
 8001e16:	4313      	orrs	r3, r2
 8001e18:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001e1a:	4b3e      	ldr	r3, [pc, #248]	; (8001f14 <HAL_RCC_OscConfig+0x2a4>)
 8001e1c:	685b      	ldr	r3, [r3, #4]
 8001e1e:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	69db      	ldr	r3, [r3, #28]
 8001e26:	021b      	lsls	r3, r3, #8
 8001e28:	493a      	ldr	r1, [pc, #232]	; (8001f14 <HAL_RCC_OscConfig+0x2a4>)
 8001e2a:	4313      	orrs	r3, r2
 8001e2c:	604b      	str	r3, [r1, #4]
 8001e2e:	e01a      	b.n	8001e66 <HAL_RCC_OscConfig+0x1f6>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001e30:	4b38      	ldr	r3, [pc, #224]	; (8001f14 <HAL_RCC_OscConfig+0x2a4>)
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	4a37      	ldr	r2, [pc, #220]	; (8001f14 <HAL_RCC_OscConfig+0x2a4>)
 8001e36:	f023 0301 	bic.w	r3, r3, #1
 8001e3a:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001e3c:	f7ff faba 	bl	80013b4 <HAL_GetTick>
 8001e40:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001e42:	e008      	b.n	8001e56 <HAL_RCC_OscConfig+0x1e6>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001e44:	f7ff fab6 	bl	80013b4 <HAL_GetTick>
 8001e48:	4602      	mov	r2, r0
 8001e4a:	693b      	ldr	r3, [r7, #16]
 8001e4c:	1ad3      	subs	r3, r2, r3
 8001e4e:	2b02      	cmp	r3, #2
 8001e50:	d901      	bls.n	8001e56 <HAL_RCC_OscConfig+0x1e6>
          {
            return HAL_TIMEOUT;
 8001e52:	2303      	movs	r3, #3
 8001e54:	e2b3      	b.n	80023be <HAL_RCC_OscConfig+0x74e>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001e56:	4b2f      	ldr	r3, [pc, #188]	; (8001f14 <HAL_RCC_OscConfig+0x2a4>)
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	f003 0302 	and.w	r3, r3, #2
 8001e5e:	2b00      	cmp	r3, #0
 8001e60:	d1f0      	bne.n	8001e44 <HAL_RCC_OscConfig+0x1d4>
 8001e62:	e000      	b.n	8001e66 <HAL_RCC_OscConfig+0x1f6>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001e64:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	f003 0301 	and.w	r3, r3, #1
 8001e6e:	2b00      	cmp	r3, #0
 8001e70:	d074      	beq.n	8001f5c <HAL_RCC_OscConfig+0x2ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8001e72:	69bb      	ldr	r3, [r7, #24]
 8001e74:	2b08      	cmp	r3, #8
 8001e76:	d005      	beq.n	8001e84 <HAL_RCC_OscConfig+0x214>
 8001e78:	69bb      	ldr	r3, [r7, #24]
 8001e7a:	2b0c      	cmp	r3, #12
 8001e7c:	d10e      	bne.n	8001e9c <HAL_RCC_OscConfig+0x22c>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001e7e:	697b      	ldr	r3, [r7, #20]
 8001e80:	2b03      	cmp	r3, #3
 8001e82:	d10b      	bne.n	8001e9c <HAL_RCC_OscConfig+0x22c>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001e84:	4b23      	ldr	r3, [pc, #140]	; (8001f14 <HAL_RCC_OscConfig+0x2a4>)
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e8c:	2b00      	cmp	r3, #0
 8001e8e:	d064      	beq.n	8001f5a <HAL_RCC_OscConfig+0x2ea>
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	685b      	ldr	r3, [r3, #4]
 8001e94:	2b00      	cmp	r3, #0
 8001e96:	d160      	bne.n	8001f5a <HAL_RCC_OscConfig+0x2ea>
      {
        return HAL_ERROR;
 8001e98:	2301      	movs	r3, #1
 8001e9a:	e290      	b.n	80023be <HAL_RCC_OscConfig+0x74e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	685b      	ldr	r3, [r3, #4]
 8001ea0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001ea4:	d106      	bne.n	8001eb4 <HAL_RCC_OscConfig+0x244>
 8001ea6:	4b1b      	ldr	r3, [pc, #108]	; (8001f14 <HAL_RCC_OscConfig+0x2a4>)
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	4a1a      	ldr	r2, [pc, #104]	; (8001f14 <HAL_RCC_OscConfig+0x2a4>)
 8001eac:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001eb0:	6013      	str	r3, [r2, #0]
 8001eb2:	e01d      	b.n	8001ef0 <HAL_RCC_OscConfig+0x280>
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	685b      	ldr	r3, [r3, #4]
 8001eb8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001ebc:	d10c      	bne.n	8001ed8 <HAL_RCC_OscConfig+0x268>
 8001ebe:	4b15      	ldr	r3, [pc, #84]	; (8001f14 <HAL_RCC_OscConfig+0x2a4>)
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	4a14      	ldr	r2, [pc, #80]	; (8001f14 <HAL_RCC_OscConfig+0x2a4>)
 8001ec4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001ec8:	6013      	str	r3, [r2, #0]
 8001eca:	4b12      	ldr	r3, [pc, #72]	; (8001f14 <HAL_RCC_OscConfig+0x2a4>)
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	4a11      	ldr	r2, [pc, #68]	; (8001f14 <HAL_RCC_OscConfig+0x2a4>)
 8001ed0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001ed4:	6013      	str	r3, [r2, #0]
 8001ed6:	e00b      	b.n	8001ef0 <HAL_RCC_OscConfig+0x280>
 8001ed8:	4b0e      	ldr	r3, [pc, #56]	; (8001f14 <HAL_RCC_OscConfig+0x2a4>)
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	4a0d      	ldr	r2, [pc, #52]	; (8001f14 <HAL_RCC_OscConfig+0x2a4>)
 8001ede:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001ee2:	6013      	str	r3, [r2, #0]
 8001ee4:	4b0b      	ldr	r3, [pc, #44]	; (8001f14 <HAL_RCC_OscConfig+0x2a4>)
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	4a0a      	ldr	r2, [pc, #40]	; (8001f14 <HAL_RCC_OscConfig+0x2a4>)
 8001eea:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001eee:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	685b      	ldr	r3, [r3, #4]
 8001ef4:	2b00      	cmp	r3, #0
 8001ef6:	d01c      	beq.n	8001f32 <HAL_RCC_OscConfig+0x2c2>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ef8:	f7ff fa5c 	bl	80013b4 <HAL_GetTick>
 8001efc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001efe:	e011      	b.n	8001f24 <HAL_RCC_OscConfig+0x2b4>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001f00:	f7ff fa58 	bl	80013b4 <HAL_GetTick>
 8001f04:	4602      	mov	r2, r0
 8001f06:	693b      	ldr	r3, [r7, #16]
 8001f08:	1ad3      	subs	r3, r2, r3
 8001f0a:	2b64      	cmp	r3, #100	; 0x64
 8001f0c:	d90a      	bls.n	8001f24 <HAL_RCC_OscConfig+0x2b4>
          {
            return HAL_TIMEOUT;
 8001f0e:	2303      	movs	r3, #3
 8001f10:	e255      	b.n	80023be <HAL_RCC_OscConfig+0x74e>
 8001f12:	bf00      	nop
 8001f14:	40021000 	.word	0x40021000
 8001f18:	08004164 	.word	0x08004164
 8001f1c:	20000000 	.word	0x20000000
 8001f20:	20000004 	.word	0x20000004
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001f24:	4bae      	ldr	r3, [pc, #696]	; (80021e0 <HAL_RCC_OscConfig+0x570>)
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f2c:	2b00      	cmp	r3, #0
 8001f2e:	d0e7      	beq.n	8001f00 <HAL_RCC_OscConfig+0x290>
 8001f30:	e014      	b.n	8001f5c <HAL_RCC_OscConfig+0x2ec>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f32:	f7ff fa3f 	bl	80013b4 <HAL_GetTick>
 8001f36:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001f38:	e008      	b.n	8001f4c <HAL_RCC_OscConfig+0x2dc>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001f3a:	f7ff fa3b 	bl	80013b4 <HAL_GetTick>
 8001f3e:	4602      	mov	r2, r0
 8001f40:	693b      	ldr	r3, [r7, #16]
 8001f42:	1ad3      	subs	r3, r2, r3
 8001f44:	2b64      	cmp	r3, #100	; 0x64
 8001f46:	d901      	bls.n	8001f4c <HAL_RCC_OscConfig+0x2dc>
          {
            return HAL_TIMEOUT;
 8001f48:	2303      	movs	r3, #3
 8001f4a:	e238      	b.n	80023be <HAL_RCC_OscConfig+0x74e>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001f4c:	4ba4      	ldr	r3, [pc, #656]	; (80021e0 <HAL_RCC_OscConfig+0x570>)
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f54:	2b00      	cmp	r3, #0
 8001f56:	d1f0      	bne.n	8001f3a <HAL_RCC_OscConfig+0x2ca>
 8001f58:	e000      	b.n	8001f5c <HAL_RCC_OscConfig+0x2ec>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001f5a:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	f003 0302 	and.w	r3, r3, #2
 8001f64:	2b00      	cmp	r3, #0
 8001f66:	d060      	beq.n	800202a <HAL_RCC_OscConfig+0x3ba>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8001f68:	69bb      	ldr	r3, [r7, #24]
 8001f6a:	2b04      	cmp	r3, #4
 8001f6c:	d005      	beq.n	8001f7a <HAL_RCC_OscConfig+0x30a>
 8001f6e:	69bb      	ldr	r3, [r7, #24]
 8001f70:	2b0c      	cmp	r3, #12
 8001f72:	d119      	bne.n	8001fa8 <HAL_RCC_OscConfig+0x338>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001f74:	697b      	ldr	r3, [r7, #20]
 8001f76:	2b02      	cmp	r3, #2
 8001f78:	d116      	bne.n	8001fa8 <HAL_RCC_OscConfig+0x338>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001f7a:	4b99      	ldr	r3, [pc, #612]	; (80021e0 <HAL_RCC_OscConfig+0x570>)
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001f82:	2b00      	cmp	r3, #0
 8001f84:	d005      	beq.n	8001f92 <HAL_RCC_OscConfig+0x322>
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	68db      	ldr	r3, [r3, #12]
 8001f8a:	2b00      	cmp	r3, #0
 8001f8c:	d101      	bne.n	8001f92 <HAL_RCC_OscConfig+0x322>
      {
        return HAL_ERROR;
 8001f8e:	2301      	movs	r3, #1
 8001f90:	e215      	b.n	80023be <HAL_RCC_OscConfig+0x74e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001f92:	4b93      	ldr	r3, [pc, #588]	; (80021e0 <HAL_RCC_OscConfig+0x570>)
 8001f94:	685b      	ldr	r3, [r3, #4]
 8001f96:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	691b      	ldr	r3, [r3, #16]
 8001f9e:	061b      	lsls	r3, r3, #24
 8001fa0:	498f      	ldr	r1, [pc, #572]	; (80021e0 <HAL_RCC_OscConfig+0x570>)
 8001fa2:	4313      	orrs	r3, r2
 8001fa4:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001fa6:	e040      	b.n	800202a <HAL_RCC_OscConfig+0x3ba>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	68db      	ldr	r3, [r3, #12]
 8001fac:	2b00      	cmp	r3, #0
 8001fae:	d023      	beq.n	8001ff8 <HAL_RCC_OscConfig+0x388>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001fb0:	4b8b      	ldr	r3, [pc, #556]	; (80021e0 <HAL_RCC_OscConfig+0x570>)
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	4a8a      	ldr	r2, [pc, #552]	; (80021e0 <HAL_RCC_OscConfig+0x570>)
 8001fb6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001fba:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001fbc:	f7ff f9fa 	bl	80013b4 <HAL_GetTick>
 8001fc0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001fc2:	e008      	b.n	8001fd6 <HAL_RCC_OscConfig+0x366>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001fc4:	f7ff f9f6 	bl	80013b4 <HAL_GetTick>
 8001fc8:	4602      	mov	r2, r0
 8001fca:	693b      	ldr	r3, [r7, #16]
 8001fcc:	1ad3      	subs	r3, r2, r3
 8001fce:	2b02      	cmp	r3, #2
 8001fd0:	d901      	bls.n	8001fd6 <HAL_RCC_OscConfig+0x366>
          {
            return HAL_TIMEOUT;
 8001fd2:	2303      	movs	r3, #3
 8001fd4:	e1f3      	b.n	80023be <HAL_RCC_OscConfig+0x74e>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001fd6:	4b82      	ldr	r3, [pc, #520]	; (80021e0 <HAL_RCC_OscConfig+0x570>)
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001fde:	2b00      	cmp	r3, #0
 8001fe0:	d0f0      	beq.n	8001fc4 <HAL_RCC_OscConfig+0x354>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001fe2:	4b7f      	ldr	r3, [pc, #508]	; (80021e0 <HAL_RCC_OscConfig+0x570>)
 8001fe4:	685b      	ldr	r3, [r3, #4]
 8001fe6:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	691b      	ldr	r3, [r3, #16]
 8001fee:	061b      	lsls	r3, r3, #24
 8001ff0:	497b      	ldr	r1, [pc, #492]	; (80021e0 <HAL_RCC_OscConfig+0x570>)
 8001ff2:	4313      	orrs	r3, r2
 8001ff4:	604b      	str	r3, [r1, #4]
 8001ff6:	e018      	b.n	800202a <HAL_RCC_OscConfig+0x3ba>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001ff8:	4b79      	ldr	r3, [pc, #484]	; (80021e0 <HAL_RCC_OscConfig+0x570>)
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	4a78      	ldr	r2, [pc, #480]	; (80021e0 <HAL_RCC_OscConfig+0x570>)
 8001ffe:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002002:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002004:	f7ff f9d6 	bl	80013b4 <HAL_GetTick>
 8002008:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800200a:	e008      	b.n	800201e <HAL_RCC_OscConfig+0x3ae>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800200c:	f7ff f9d2 	bl	80013b4 <HAL_GetTick>
 8002010:	4602      	mov	r2, r0
 8002012:	693b      	ldr	r3, [r7, #16]
 8002014:	1ad3      	subs	r3, r2, r3
 8002016:	2b02      	cmp	r3, #2
 8002018:	d901      	bls.n	800201e <HAL_RCC_OscConfig+0x3ae>
          {
            return HAL_TIMEOUT;
 800201a:	2303      	movs	r3, #3
 800201c:	e1cf      	b.n	80023be <HAL_RCC_OscConfig+0x74e>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800201e:	4b70      	ldr	r3, [pc, #448]	; (80021e0 <HAL_RCC_OscConfig+0x570>)
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002026:	2b00      	cmp	r3, #0
 8002028:	d1f0      	bne.n	800200c <HAL_RCC_OscConfig+0x39c>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	f003 0308 	and.w	r3, r3, #8
 8002032:	2b00      	cmp	r3, #0
 8002034:	d03c      	beq.n	80020b0 <HAL_RCC_OscConfig+0x440>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	695b      	ldr	r3, [r3, #20]
 800203a:	2b00      	cmp	r3, #0
 800203c:	d01c      	beq.n	8002078 <HAL_RCC_OscConfig+0x408>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800203e:	4b68      	ldr	r3, [pc, #416]	; (80021e0 <HAL_RCC_OscConfig+0x570>)
 8002040:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002044:	4a66      	ldr	r2, [pc, #408]	; (80021e0 <HAL_RCC_OscConfig+0x570>)
 8002046:	f043 0301 	orr.w	r3, r3, #1
 800204a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800204e:	f7ff f9b1 	bl	80013b4 <HAL_GetTick>
 8002052:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002054:	e008      	b.n	8002068 <HAL_RCC_OscConfig+0x3f8>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002056:	f7ff f9ad 	bl	80013b4 <HAL_GetTick>
 800205a:	4602      	mov	r2, r0
 800205c:	693b      	ldr	r3, [r7, #16]
 800205e:	1ad3      	subs	r3, r2, r3
 8002060:	2b02      	cmp	r3, #2
 8002062:	d901      	bls.n	8002068 <HAL_RCC_OscConfig+0x3f8>
        {
          return HAL_TIMEOUT;
 8002064:	2303      	movs	r3, #3
 8002066:	e1aa      	b.n	80023be <HAL_RCC_OscConfig+0x74e>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002068:	4b5d      	ldr	r3, [pc, #372]	; (80021e0 <HAL_RCC_OscConfig+0x570>)
 800206a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800206e:	f003 0302 	and.w	r3, r3, #2
 8002072:	2b00      	cmp	r3, #0
 8002074:	d0ef      	beq.n	8002056 <HAL_RCC_OscConfig+0x3e6>
 8002076:	e01b      	b.n	80020b0 <HAL_RCC_OscConfig+0x440>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002078:	4b59      	ldr	r3, [pc, #356]	; (80021e0 <HAL_RCC_OscConfig+0x570>)
 800207a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800207e:	4a58      	ldr	r2, [pc, #352]	; (80021e0 <HAL_RCC_OscConfig+0x570>)
 8002080:	f023 0301 	bic.w	r3, r3, #1
 8002084:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002088:	f7ff f994 	bl	80013b4 <HAL_GetTick>
 800208c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800208e:	e008      	b.n	80020a2 <HAL_RCC_OscConfig+0x432>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002090:	f7ff f990 	bl	80013b4 <HAL_GetTick>
 8002094:	4602      	mov	r2, r0
 8002096:	693b      	ldr	r3, [r7, #16]
 8002098:	1ad3      	subs	r3, r2, r3
 800209a:	2b02      	cmp	r3, #2
 800209c:	d901      	bls.n	80020a2 <HAL_RCC_OscConfig+0x432>
        {
          return HAL_TIMEOUT;
 800209e:	2303      	movs	r3, #3
 80020a0:	e18d      	b.n	80023be <HAL_RCC_OscConfig+0x74e>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80020a2:	4b4f      	ldr	r3, [pc, #316]	; (80021e0 <HAL_RCC_OscConfig+0x570>)
 80020a4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80020a8:	f003 0302 	and.w	r3, r3, #2
 80020ac:	2b00      	cmp	r3, #0
 80020ae:	d1ef      	bne.n	8002090 <HAL_RCC_OscConfig+0x420>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	f003 0304 	and.w	r3, r3, #4
 80020b8:	2b00      	cmp	r3, #0
 80020ba:	f000 80a5 	beq.w	8002208 <HAL_RCC_OscConfig+0x598>
  {
    FlagStatus       pwrclkchanged = RESET;
 80020be:	2300      	movs	r3, #0
 80020c0:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80020c2:	4b47      	ldr	r3, [pc, #284]	; (80021e0 <HAL_RCC_OscConfig+0x570>)
 80020c4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80020c6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80020ca:	2b00      	cmp	r3, #0
 80020cc:	d10d      	bne.n	80020ea <HAL_RCC_OscConfig+0x47a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80020ce:	4b44      	ldr	r3, [pc, #272]	; (80021e0 <HAL_RCC_OscConfig+0x570>)
 80020d0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80020d2:	4a43      	ldr	r2, [pc, #268]	; (80021e0 <HAL_RCC_OscConfig+0x570>)
 80020d4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80020d8:	6593      	str	r3, [r2, #88]	; 0x58
 80020da:	4b41      	ldr	r3, [pc, #260]	; (80021e0 <HAL_RCC_OscConfig+0x570>)
 80020dc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80020de:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80020e2:	60bb      	str	r3, [r7, #8]
 80020e4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80020e6:	2301      	movs	r3, #1
 80020e8:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80020ea:	4b3e      	ldr	r3, [pc, #248]	; (80021e4 <HAL_RCC_OscConfig+0x574>)
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80020f2:	2b00      	cmp	r3, #0
 80020f4:	d118      	bne.n	8002128 <HAL_RCC_OscConfig+0x4b8>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80020f6:	4b3b      	ldr	r3, [pc, #236]	; (80021e4 <HAL_RCC_OscConfig+0x574>)
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	4a3a      	ldr	r2, [pc, #232]	; (80021e4 <HAL_RCC_OscConfig+0x574>)
 80020fc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002100:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002102:	f7ff f957 	bl	80013b4 <HAL_GetTick>
 8002106:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002108:	e008      	b.n	800211c <HAL_RCC_OscConfig+0x4ac>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800210a:	f7ff f953 	bl	80013b4 <HAL_GetTick>
 800210e:	4602      	mov	r2, r0
 8002110:	693b      	ldr	r3, [r7, #16]
 8002112:	1ad3      	subs	r3, r2, r3
 8002114:	2b02      	cmp	r3, #2
 8002116:	d901      	bls.n	800211c <HAL_RCC_OscConfig+0x4ac>
        {
          return HAL_TIMEOUT;
 8002118:	2303      	movs	r3, #3
 800211a:	e150      	b.n	80023be <HAL_RCC_OscConfig+0x74e>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800211c:	4b31      	ldr	r3, [pc, #196]	; (80021e4 <HAL_RCC_OscConfig+0x574>)
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002124:	2b00      	cmp	r3, #0
 8002126:	d0f0      	beq.n	800210a <HAL_RCC_OscConfig+0x49a>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	689b      	ldr	r3, [r3, #8]
 800212c:	2b01      	cmp	r3, #1
 800212e:	d108      	bne.n	8002142 <HAL_RCC_OscConfig+0x4d2>
 8002130:	4b2b      	ldr	r3, [pc, #172]	; (80021e0 <HAL_RCC_OscConfig+0x570>)
 8002132:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002136:	4a2a      	ldr	r2, [pc, #168]	; (80021e0 <HAL_RCC_OscConfig+0x570>)
 8002138:	f043 0301 	orr.w	r3, r3, #1
 800213c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002140:	e024      	b.n	800218c <HAL_RCC_OscConfig+0x51c>
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	689b      	ldr	r3, [r3, #8]
 8002146:	2b05      	cmp	r3, #5
 8002148:	d110      	bne.n	800216c <HAL_RCC_OscConfig+0x4fc>
 800214a:	4b25      	ldr	r3, [pc, #148]	; (80021e0 <HAL_RCC_OscConfig+0x570>)
 800214c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002150:	4a23      	ldr	r2, [pc, #140]	; (80021e0 <HAL_RCC_OscConfig+0x570>)
 8002152:	f043 0304 	orr.w	r3, r3, #4
 8002156:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800215a:	4b21      	ldr	r3, [pc, #132]	; (80021e0 <HAL_RCC_OscConfig+0x570>)
 800215c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002160:	4a1f      	ldr	r2, [pc, #124]	; (80021e0 <HAL_RCC_OscConfig+0x570>)
 8002162:	f043 0301 	orr.w	r3, r3, #1
 8002166:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800216a:	e00f      	b.n	800218c <HAL_RCC_OscConfig+0x51c>
 800216c:	4b1c      	ldr	r3, [pc, #112]	; (80021e0 <HAL_RCC_OscConfig+0x570>)
 800216e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002172:	4a1b      	ldr	r2, [pc, #108]	; (80021e0 <HAL_RCC_OscConfig+0x570>)
 8002174:	f023 0301 	bic.w	r3, r3, #1
 8002178:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800217c:	4b18      	ldr	r3, [pc, #96]	; (80021e0 <HAL_RCC_OscConfig+0x570>)
 800217e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002182:	4a17      	ldr	r2, [pc, #92]	; (80021e0 <HAL_RCC_OscConfig+0x570>)
 8002184:	f023 0304 	bic.w	r3, r3, #4
 8002188:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	689b      	ldr	r3, [r3, #8]
 8002190:	2b00      	cmp	r3, #0
 8002192:	d016      	beq.n	80021c2 <HAL_RCC_OscConfig+0x552>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002194:	f7ff f90e 	bl	80013b4 <HAL_GetTick>
 8002198:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800219a:	e00a      	b.n	80021b2 <HAL_RCC_OscConfig+0x542>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800219c:	f7ff f90a 	bl	80013b4 <HAL_GetTick>
 80021a0:	4602      	mov	r2, r0
 80021a2:	693b      	ldr	r3, [r7, #16]
 80021a4:	1ad3      	subs	r3, r2, r3
 80021a6:	f241 3288 	movw	r2, #5000	; 0x1388
 80021aa:	4293      	cmp	r3, r2
 80021ac:	d901      	bls.n	80021b2 <HAL_RCC_OscConfig+0x542>
        {
          return HAL_TIMEOUT;
 80021ae:	2303      	movs	r3, #3
 80021b0:	e105      	b.n	80023be <HAL_RCC_OscConfig+0x74e>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80021b2:	4b0b      	ldr	r3, [pc, #44]	; (80021e0 <HAL_RCC_OscConfig+0x570>)
 80021b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80021b8:	f003 0302 	and.w	r3, r3, #2
 80021bc:	2b00      	cmp	r3, #0
 80021be:	d0ed      	beq.n	800219c <HAL_RCC_OscConfig+0x52c>
 80021c0:	e019      	b.n	80021f6 <HAL_RCC_OscConfig+0x586>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80021c2:	f7ff f8f7 	bl	80013b4 <HAL_GetTick>
 80021c6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80021c8:	e00e      	b.n	80021e8 <HAL_RCC_OscConfig+0x578>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80021ca:	f7ff f8f3 	bl	80013b4 <HAL_GetTick>
 80021ce:	4602      	mov	r2, r0
 80021d0:	693b      	ldr	r3, [r7, #16]
 80021d2:	1ad3      	subs	r3, r2, r3
 80021d4:	f241 3288 	movw	r2, #5000	; 0x1388
 80021d8:	4293      	cmp	r3, r2
 80021da:	d905      	bls.n	80021e8 <HAL_RCC_OscConfig+0x578>
        {
          return HAL_TIMEOUT;
 80021dc:	2303      	movs	r3, #3
 80021de:	e0ee      	b.n	80023be <HAL_RCC_OscConfig+0x74e>
 80021e0:	40021000 	.word	0x40021000
 80021e4:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80021e8:	4b77      	ldr	r3, [pc, #476]	; (80023c8 <HAL_RCC_OscConfig+0x758>)
 80021ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80021ee:	f003 0302 	and.w	r3, r3, #2
 80021f2:	2b00      	cmp	r3, #0
 80021f4:	d1e9      	bne.n	80021ca <HAL_RCC_OscConfig+0x55a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80021f6:	7ffb      	ldrb	r3, [r7, #31]
 80021f8:	2b01      	cmp	r3, #1
 80021fa:	d105      	bne.n	8002208 <HAL_RCC_OscConfig+0x598>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80021fc:	4b72      	ldr	r3, [pc, #456]	; (80023c8 <HAL_RCC_OscConfig+0x758>)
 80021fe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002200:	4a71      	ldr	r2, [pc, #452]	; (80023c8 <HAL_RCC_OscConfig+0x758>)
 8002202:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002206:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800220c:	2b00      	cmp	r3, #0
 800220e:	f000 80d5 	beq.w	80023bc <HAL_RCC_OscConfig+0x74c>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002212:	69bb      	ldr	r3, [r7, #24]
 8002214:	2b0c      	cmp	r3, #12
 8002216:	f000 808e 	beq.w	8002336 <HAL_RCC_OscConfig+0x6c6>
    {
      if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800221e:	2b02      	cmp	r3, #2
 8002220:	d15b      	bne.n	80022da <HAL_RCC_OscConfig+0x66a>
#endif /* RCC_PLLP_SUPPORT */
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002222:	4b69      	ldr	r3, [pc, #420]	; (80023c8 <HAL_RCC_OscConfig+0x758>)
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	4a68      	ldr	r2, [pc, #416]	; (80023c8 <HAL_RCC_OscConfig+0x758>)
 8002228:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800222c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800222e:	f7ff f8c1 	bl	80013b4 <HAL_GetTick>
 8002232:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002234:	e008      	b.n	8002248 <HAL_RCC_OscConfig+0x5d8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002236:	f7ff f8bd 	bl	80013b4 <HAL_GetTick>
 800223a:	4602      	mov	r2, r0
 800223c:	693b      	ldr	r3, [r7, #16]
 800223e:	1ad3      	subs	r3, r2, r3
 8002240:	2b02      	cmp	r3, #2
 8002242:	d901      	bls.n	8002248 <HAL_RCC_OscConfig+0x5d8>
          {
            return HAL_TIMEOUT;
 8002244:	2303      	movs	r3, #3
 8002246:	e0ba      	b.n	80023be <HAL_RCC_OscConfig+0x74e>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002248:	4b5f      	ldr	r3, [pc, #380]	; (80023c8 <HAL_RCC_OscConfig+0x758>)
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002250:	2b00      	cmp	r3, #0
 8002252:	d1f0      	bne.n	8002236 <HAL_RCC_OscConfig+0x5c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002254:	4b5c      	ldr	r3, [pc, #368]	; (80023c8 <HAL_RCC_OscConfig+0x758>)
 8002256:	68da      	ldr	r2, [r3, #12]
 8002258:	4b5c      	ldr	r3, [pc, #368]	; (80023cc <HAL_RCC_OscConfig+0x75c>)
 800225a:	4013      	ands	r3, r2
 800225c:	687a      	ldr	r2, [r7, #4]
 800225e:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8002260:	687a      	ldr	r2, [r7, #4]
 8002262:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8002264:	3a01      	subs	r2, #1
 8002266:	0112      	lsls	r2, r2, #4
 8002268:	4311      	orrs	r1, r2
 800226a:	687a      	ldr	r2, [r7, #4]
 800226c:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800226e:	0212      	lsls	r2, r2, #8
 8002270:	4311      	orrs	r1, r2
 8002272:	687a      	ldr	r2, [r7, #4]
 8002274:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8002276:	0852      	lsrs	r2, r2, #1
 8002278:	3a01      	subs	r2, #1
 800227a:	0552      	lsls	r2, r2, #21
 800227c:	4311      	orrs	r1, r2
 800227e:	687a      	ldr	r2, [r7, #4]
 8002280:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8002282:	0852      	lsrs	r2, r2, #1
 8002284:	3a01      	subs	r2, #1
 8002286:	0652      	lsls	r2, r2, #25
 8002288:	4311      	orrs	r1, r2
 800228a:	687a      	ldr	r2, [r7, #4]
 800228c:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800228e:	0912      	lsrs	r2, r2, #4
 8002290:	0452      	lsls	r2, r2, #17
 8002292:	430a      	orrs	r2, r1
 8002294:	494c      	ldr	r1, [pc, #304]	; (80023c8 <HAL_RCC_OscConfig+0x758>)
 8002296:	4313      	orrs	r3, r2
 8002298:	60cb      	str	r3, [r1, #12]
#endif
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800229a:	4b4b      	ldr	r3, [pc, #300]	; (80023c8 <HAL_RCC_OscConfig+0x758>)
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	4a4a      	ldr	r2, [pc, #296]	; (80023c8 <HAL_RCC_OscConfig+0x758>)
 80022a0:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80022a4:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80022a6:	4b48      	ldr	r3, [pc, #288]	; (80023c8 <HAL_RCC_OscConfig+0x758>)
 80022a8:	68db      	ldr	r3, [r3, #12]
 80022aa:	4a47      	ldr	r2, [pc, #284]	; (80023c8 <HAL_RCC_OscConfig+0x758>)
 80022ac:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80022b0:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80022b2:	f7ff f87f 	bl	80013b4 <HAL_GetTick>
 80022b6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80022b8:	e008      	b.n	80022cc <HAL_RCC_OscConfig+0x65c>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80022ba:	f7ff f87b 	bl	80013b4 <HAL_GetTick>
 80022be:	4602      	mov	r2, r0
 80022c0:	693b      	ldr	r3, [r7, #16]
 80022c2:	1ad3      	subs	r3, r2, r3
 80022c4:	2b02      	cmp	r3, #2
 80022c6:	d901      	bls.n	80022cc <HAL_RCC_OscConfig+0x65c>
          {
            return HAL_TIMEOUT;
 80022c8:	2303      	movs	r3, #3
 80022ca:	e078      	b.n	80023be <HAL_RCC_OscConfig+0x74e>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80022cc:	4b3e      	ldr	r3, [pc, #248]	; (80023c8 <HAL_RCC_OscConfig+0x758>)
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80022d4:	2b00      	cmp	r3, #0
 80022d6:	d0f0      	beq.n	80022ba <HAL_RCC_OscConfig+0x64a>
 80022d8:	e070      	b.n	80023bc <HAL_RCC_OscConfig+0x74c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80022da:	4b3b      	ldr	r3, [pc, #236]	; (80023c8 <HAL_RCC_OscConfig+0x758>)
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	4a3a      	ldr	r2, [pc, #232]	; (80023c8 <HAL_RCC_OscConfig+0x758>)
 80022e0:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80022e4:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 80022e6:	4b38      	ldr	r3, [pc, #224]	; (80023c8 <HAL_RCC_OscConfig+0x758>)
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 80022ee:	2b00      	cmp	r3, #0
 80022f0:	d105      	bne.n	80022fe <HAL_RCC_OscConfig+0x68e>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 80022f2:	4b35      	ldr	r3, [pc, #212]	; (80023c8 <HAL_RCC_OscConfig+0x758>)
 80022f4:	68db      	ldr	r3, [r3, #12]
 80022f6:	4a34      	ldr	r2, [pc, #208]	; (80023c8 <HAL_RCC_OscConfig+0x758>)
 80022f8:	f023 0303 	bic.w	r3, r3, #3
 80022fc:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 80022fe:	4b32      	ldr	r3, [pc, #200]	; (80023c8 <HAL_RCC_OscConfig+0x758>)
 8002300:	68db      	ldr	r3, [r3, #12]
 8002302:	4a31      	ldr	r2, [pc, #196]	; (80023c8 <HAL_RCC_OscConfig+0x758>)
 8002304:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8002308:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800230c:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800230e:	f7ff f851 	bl	80013b4 <HAL_GetTick>
 8002312:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002314:	e008      	b.n	8002328 <HAL_RCC_OscConfig+0x6b8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002316:	f7ff f84d 	bl	80013b4 <HAL_GetTick>
 800231a:	4602      	mov	r2, r0
 800231c:	693b      	ldr	r3, [r7, #16]
 800231e:	1ad3      	subs	r3, r2, r3
 8002320:	2b02      	cmp	r3, #2
 8002322:	d901      	bls.n	8002328 <HAL_RCC_OscConfig+0x6b8>
          {
            return HAL_TIMEOUT;
 8002324:	2303      	movs	r3, #3
 8002326:	e04a      	b.n	80023be <HAL_RCC_OscConfig+0x74e>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002328:	4b27      	ldr	r3, [pc, #156]	; (80023c8 <HAL_RCC_OscConfig+0x758>)
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002330:	2b00      	cmp	r3, #0
 8002332:	d1f0      	bne.n	8002316 <HAL_RCC_OscConfig+0x6a6>
 8002334:	e042      	b.n	80023bc <HAL_RCC_OscConfig+0x74c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800233a:	2b01      	cmp	r3, #1
 800233c:	d101      	bne.n	8002342 <HAL_RCC_OscConfig+0x6d2>
      {
        return HAL_ERROR;
 800233e:	2301      	movs	r3, #1
 8002340:	e03d      	b.n	80023be <HAL_RCC_OscConfig+0x74e>
      }
      else
      {
        pll_config = RCC->PLLCFGR;
 8002342:	4b21      	ldr	r3, [pc, #132]	; (80023c8 <HAL_RCC_OscConfig+0x758>)
 8002344:	68db      	ldr	r3, [r3, #12]
 8002346:	617b      	str	r3, [r7, #20]
        /* Do not return HAL_ERROR if request repeats the current configuration */
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002348:	697b      	ldr	r3, [r7, #20]
 800234a:	f003 0203 	and.w	r2, r3, #3
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002352:	429a      	cmp	r2, r3
 8002354:	d130      	bne.n	80023b8 <HAL_RCC_OscConfig+0x748>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002356:	697b      	ldr	r3, [r7, #20]
 8002358:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002360:	3b01      	subs	r3, #1
 8002362:	011b      	lsls	r3, r3, #4
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002364:	429a      	cmp	r2, r3
 8002366:	d127      	bne.n	80023b8 <HAL_RCC_OscConfig+0x748>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002368:	697b      	ldr	r3, [r7, #20]
 800236a:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002372:	021b      	lsls	r3, r3, #8
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002374:	429a      	cmp	r2, r3
 8002376:	d11f      	bne.n	80023b8 <HAL_RCC_OscConfig+0x748>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8002378:	697b      	ldr	r3, [r7, #20]
 800237a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800237e:	687a      	ldr	r2, [r7, #4]
 8002380:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002382:	2a07      	cmp	r2, #7
 8002384:	bf14      	ite	ne
 8002386:	2201      	movne	r2, #1
 8002388:	2200      	moveq	r2, #0
 800238a:	b2d2      	uxtb	r2, r2
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800238c:	4293      	cmp	r3, r2
 800238e:	d113      	bne.n	80023b8 <HAL_RCC_OscConfig+0x748>
#endif
#endif
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002390:	697b      	ldr	r3, [r7, #20]
 8002392:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800239a:	085b      	lsrs	r3, r3, #1
 800239c:	3b01      	subs	r3, #1
 800239e:	055b      	lsls	r3, r3, #21
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80023a0:	429a      	cmp	r2, r3
 80023a2:	d109      	bne.n	80023b8 <HAL_RCC_OscConfig+0x748>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80023a4:	697b      	ldr	r3, [r7, #20]
 80023a6:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023ae:	085b      	lsrs	r3, r3, #1
 80023b0:	3b01      	subs	r3, #1
 80023b2:	065b      	lsls	r3, r3, #25
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80023b4:	429a      	cmp	r2, r3
 80023b6:	d001      	beq.n	80023bc <HAL_RCC_OscConfig+0x74c>
        {
          return HAL_ERROR;
 80023b8:	2301      	movs	r3, #1
 80023ba:	e000      	b.n	80023be <HAL_RCC_OscConfig+0x74e>
        }
      }
    }
  }
  return HAL_OK;
 80023bc:	2300      	movs	r3, #0
}
 80023be:	4618      	mov	r0, r3
 80023c0:	3720      	adds	r7, #32
 80023c2:	46bd      	mov	sp, r7
 80023c4:	bd80      	pop	{r7, pc}
 80023c6:	bf00      	nop
 80023c8:	40021000 	.word	0x40021000
 80023cc:	f99d808c 	.word	0xf99d808c

080023d0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80023d0:	b580      	push	{r7, lr}
 80023d2:	b084      	sub	sp, #16
 80023d4:	af00      	add	r7, sp, #0
 80023d6:	6078      	str	r0, [r7, #4]
 80023d8:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	2b00      	cmp	r3, #0
 80023de:	d101      	bne.n	80023e4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80023e0:	2301      	movs	r3, #1
 80023e2:	e0c8      	b.n	8002576 <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80023e4:	4b66      	ldr	r3, [pc, #408]	; (8002580 <HAL_RCC_ClockConfig+0x1b0>)
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	f003 0307 	and.w	r3, r3, #7
 80023ec:	683a      	ldr	r2, [r7, #0]
 80023ee:	429a      	cmp	r2, r3
 80023f0:	d910      	bls.n	8002414 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80023f2:	4b63      	ldr	r3, [pc, #396]	; (8002580 <HAL_RCC_ClockConfig+0x1b0>)
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	f023 0207 	bic.w	r2, r3, #7
 80023fa:	4961      	ldr	r1, [pc, #388]	; (8002580 <HAL_RCC_ClockConfig+0x1b0>)
 80023fc:	683b      	ldr	r3, [r7, #0]
 80023fe:	4313      	orrs	r3, r2
 8002400:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002402:	4b5f      	ldr	r3, [pc, #380]	; (8002580 <HAL_RCC_ClockConfig+0x1b0>)
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	f003 0307 	and.w	r3, r3, #7
 800240a:	683a      	ldr	r2, [r7, #0]
 800240c:	429a      	cmp	r2, r3
 800240e:	d001      	beq.n	8002414 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002410:	2301      	movs	r3, #1
 8002412:	e0b0      	b.n	8002576 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	f003 0301 	and.w	r3, r3, #1
 800241c:	2b00      	cmp	r3, #0
 800241e:	d04c      	beq.n	80024ba <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	685b      	ldr	r3, [r3, #4]
 8002424:	2b03      	cmp	r3, #3
 8002426:	d107      	bne.n	8002438 <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002428:	4b56      	ldr	r3, [pc, #344]	; (8002584 <HAL_RCC_ClockConfig+0x1b4>)
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002430:	2b00      	cmp	r3, #0
 8002432:	d121      	bne.n	8002478 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 8002434:	2301      	movs	r3, #1
 8002436:	e09e      	b.n	8002576 <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	685b      	ldr	r3, [r3, #4]
 800243c:	2b02      	cmp	r3, #2
 800243e:	d107      	bne.n	8002450 <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002440:	4b50      	ldr	r3, [pc, #320]	; (8002584 <HAL_RCC_ClockConfig+0x1b4>)
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002448:	2b00      	cmp	r3, #0
 800244a:	d115      	bne.n	8002478 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 800244c:	2301      	movs	r3, #1
 800244e:	e092      	b.n	8002576 <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	685b      	ldr	r3, [r3, #4]
 8002454:	2b00      	cmp	r3, #0
 8002456:	d107      	bne.n	8002468 <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002458:	4b4a      	ldr	r3, [pc, #296]	; (8002584 <HAL_RCC_ClockConfig+0x1b4>)
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	f003 0302 	and.w	r3, r3, #2
 8002460:	2b00      	cmp	r3, #0
 8002462:	d109      	bne.n	8002478 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8002464:	2301      	movs	r3, #1
 8002466:	e086      	b.n	8002576 <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002468:	4b46      	ldr	r3, [pc, #280]	; (8002584 <HAL_RCC_ClockConfig+0x1b4>)
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002470:	2b00      	cmp	r3, #0
 8002472:	d101      	bne.n	8002478 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8002474:	2301      	movs	r3, #1
 8002476:	e07e      	b.n	8002576 <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002478:	4b42      	ldr	r3, [pc, #264]	; (8002584 <HAL_RCC_ClockConfig+0x1b4>)
 800247a:	689b      	ldr	r3, [r3, #8]
 800247c:	f023 0203 	bic.w	r2, r3, #3
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	685b      	ldr	r3, [r3, #4]
 8002484:	493f      	ldr	r1, [pc, #252]	; (8002584 <HAL_RCC_ClockConfig+0x1b4>)
 8002486:	4313      	orrs	r3, r2
 8002488:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800248a:	f7fe ff93 	bl	80013b4 <HAL_GetTick>
 800248e:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002490:	e00a      	b.n	80024a8 <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002492:	f7fe ff8f 	bl	80013b4 <HAL_GetTick>
 8002496:	4602      	mov	r2, r0
 8002498:	68fb      	ldr	r3, [r7, #12]
 800249a:	1ad3      	subs	r3, r2, r3
 800249c:	f241 3288 	movw	r2, #5000	; 0x1388
 80024a0:	4293      	cmp	r3, r2
 80024a2:	d901      	bls.n	80024a8 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 80024a4:	2303      	movs	r3, #3
 80024a6:	e066      	b.n	8002576 <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80024a8:	4b36      	ldr	r3, [pc, #216]	; (8002584 <HAL_RCC_ClockConfig+0x1b4>)
 80024aa:	689b      	ldr	r3, [r3, #8]
 80024ac:	f003 020c 	and.w	r2, r3, #12
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	685b      	ldr	r3, [r3, #4]
 80024b4:	009b      	lsls	r3, r3, #2
 80024b6:	429a      	cmp	r2, r3
 80024b8:	d1eb      	bne.n	8002492 <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	f003 0302 	and.w	r3, r3, #2
 80024c2:	2b00      	cmp	r3, #0
 80024c4:	d008      	beq.n	80024d8 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80024c6:	4b2f      	ldr	r3, [pc, #188]	; (8002584 <HAL_RCC_ClockConfig+0x1b4>)
 80024c8:	689b      	ldr	r3, [r3, #8]
 80024ca:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	689b      	ldr	r3, [r3, #8]
 80024d2:	492c      	ldr	r1, [pc, #176]	; (8002584 <HAL_RCC_ClockConfig+0x1b4>)
 80024d4:	4313      	orrs	r3, r2
 80024d6:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80024d8:	4b29      	ldr	r3, [pc, #164]	; (8002580 <HAL_RCC_ClockConfig+0x1b0>)
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	f003 0307 	and.w	r3, r3, #7
 80024e0:	683a      	ldr	r2, [r7, #0]
 80024e2:	429a      	cmp	r2, r3
 80024e4:	d210      	bcs.n	8002508 <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80024e6:	4b26      	ldr	r3, [pc, #152]	; (8002580 <HAL_RCC_ClockConfig+0x1b0>)
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	f023 0207 	bic.w	r2, r3, #7
 80024ee:	4924      	ldr	r1, [pc, #144]	; (8002580 <HAL_RCC_ClockConfig+0x1b0>)
 80024f0:	683b      	ldr	r3, [r7, #0]
 80024f2:	4313      	orrs	r3, r2
 80024f4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80024f6:	4b22      	ldr	r3, [pc, #136]	; (8002580 <HAL_RCC_ClockConfig+0x1b0>)
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	f003 0307 	and.w	r3, r3, #7
 80024fe:	683a      	ldr	r2, [r7, #0]
 8002500:	429a      	cmp	r2, r3
 8002502:	d001      	beq.n	8002508 <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 8002504:	2301      	movs	r3, #1
 8002506:	e036      	b.n	8002576 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	f003 0304 	and.w	r3, r3, #4
 8002510:	2b00      	cmp	r3, #0
 8002512:	d008      	beq.n	8002526 <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002514:	4b1b      	ldr	r3, [pc, #108]	; (8002584 <HAL_RCC_ClockConfig+0x1b4>)
 8002516:	689b      	ldr	r3, [r3, #8]
 8002518:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	68db      	ldr	r3, [r3, #12]
 8002520:	4918      	ldr	r1, [pc, #96]	; (8002584 <HAL_RCC_ClockConfig+0x1b4>)
 8002522:	4313      	orrs	r3, r2
 8002524:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	f003 0308 	and.w	r3, r3, #8
 800252e:	2b00      	cmp	r3, #0
 8002530:	d009      	beq.n	8002546 <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002532:	4b14      	ldr	r3, [pc, #80]	; (8002584 <HAL_RCC_ClockConfig+0x1b4>)
 8002534:	689b      	ldr	r3, [r3, #8]
 8002536:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	691b      	ldr	r3, [r3, #16]
 800253e:	00db      	lsls	r3, r3, #3
 8002540:	4910      	ldr	r1, [pc, #64]	; (8002584 <HAL_RCC_ClockConfig+0x1b4>)
 8002542:	4313      	orrs	r3, r2
 8002544:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002546:	f000 f825 	bl	8002594 <HAL_RCC_GetSysClockFreq>
 800254a:	4601      	mov	r1, r0
 800254c:	4b0d      	ldr	r3, [pc, #52]	; (8002584 <HAL_RCC_ClockConfig+0x1b4>)
 800254e:	689b      	ldr	r3, [r3, #8]
 8002550:	091b      	lsrs	r3, r3, #4
 8002552:	f003 030f 	and.w	r3, r3, #15
 8002556:	4a0c      	ldr	r2, [pc, #48]	; (8002588 <HAL_RCC_ClockConfig+0x1b8>)
 8002558:	5cd3      	ldrb	r3, [r2, r3]
 800255a:	f003 031f 	and.w	r3, r3, #31
 800255e:	fa21 f303 	lsr.w	r3, r1, r3
 8002562:	4a0a      	ldr	r2, [pc, #40]	; (800258c <HAL_RCC_ClockConfig+0x1bc>)
 8002564:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8002566:	4b0a      	ldr	r3, [pc, #40]	; (8002590 <HAL_RCC_ClockConfig+0x1c0>)
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	4618      	mov	r0, r3
 800256c:	f7fe fed6 	bl	800131c <HAL_InitTick>
 8002570:	4603      	mov	r3, r0
 8002572:	72fb      	strb	r3, [r7, #11]

  return status;
 8002574:	7afb      	ldrb	r3, [r7, #11]
}
 8002576:	4618      	mov	r0, r3
 8002578:	3710      	adds	r7, #16
 800257a:	46bd      	mov	sp, r7
 800257c:	bd80      	pop	{r7, pc}
 800257e:	bf00      	nop
 8002580:	40022000 	.word	0x40022000
 8002584:	40021000 	.word	0x40021000
 8002588:	08004164 	.word	0x08004164
 800258c:	20000000 	.word	0x20000000
 8002590:	20000004 	.word	0x20000004

08002594 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002594:	b480      	push	{r7}
 8002596:	b089      	sub	sp, #36	; 0x24
 8002598:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800259a:	2300      	movs	r3, #0
 800259c:	61fb      	str	r3, [r7, #28]
 800259e:	2300      	movs	r3, #0
 80025a0:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80025a2:	4b3d      	ldr	r3, [pc, #244]	; (8002698 <HAL_RCC_GetSysClockFreq+0x104>)
 80025a4:	689b      	ldr	r3, [r3, #8]
 80025a6:	f003 030c 	and.w	r3, r3, #12
 80025aa:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80025ac:	4b3a      	ldr	r3, [pc, #232]	; (8002698 <HAL_RCC_GetSysClockFreq+0x104>)
 80025ae:	68db      	ldr	r3, [r3, #12]
 80025b0:	f003 0303 	and.w	r3, r3, #3
 80025b4:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80025b6:	693b      	ldr	r3, [r7, #16]
 80025b8:	2b00      	cmp	r3, #0
 80025ba:	d005      	beq.n	80025c8 <HAL_RCC_GetSysClockFreq+0x34>
 80025bc:	693b      	ldr	r3, [r7, #16]
 80025be:	2b0c      	cmp	r3, #12
 80025c0:	d121      	bne.n	8002606 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80025c2:	68fb      	ldr	r3, [r7, #12]
 80025c4:	2b01      	cmp	r3, #1
 80025c6:	d11e      	bne.n	8002606 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80025c8:	4b33      	ldr	r3, [pc, #204]	; (8002698 <HAL_RCC_GetSysClockFreq+0x104>)
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	f003 0308 	and.w	r3, r3, #8
 80025d0:	2b00      	cmp	r3, #0
 80025d2:	d107      	bne.n	80025e4 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80025d4:	4b30      	ldr	r3, [pc, #192]	; (8002698 <HAL_RCC_GetSysClockFreq+0x104>)
 80025d6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80025da:	0a1b      	lsrs	r3, r3, #8
 80025dc:	f003 030f 	and.w	r3, r3, #15
 80025e0:	61fb      	str	r3, [r7, #28]
 80025e2:	e005      	b.n	80025f0 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80025e4:	4b2c      	ldr	r3, [pc, #176]	; (8002698 <HAL_RCC_GetSysClockFreq+0x104>)
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	091b      	lsrs	r3, r3, #4
 80025ea:	f003 030f 	and.w	r3, r3, #15
 80025ee:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80025f0:	4a2a      	ldr	r2, [pc, #168]	; (800269c <HAL_RCC_GetSysClockFreq+0x108>)
 80025f2:	69fb      	ldr	r3, [r7, #28]
 80025f4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80025f8:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80025fa:	693b      	ldr	r3, [r7, #16]
 80025fc:	2b00      	cmp	r3, #0
 80025fe:	d10d      	bne.n	800261c <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8002600:	69fb      	ldr	r3, [r7, #28]
 8002602:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002604:	e00a      	b.n	800261c <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8002606:	693b      	ldr	r3, [r7, #16]
 8002608:	2b04      	cmp	r3, #4
 800260a:	d102      	bne.n	8002612 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800260c:	4b24      	ldr	r3, [pc, #144]	; (80026a0 <HAL_RCC_GetSysClockFreq+0x10c>)
 800260e:	61bb      	str	r3, [r7, #24]
 8002610:	e004      	b.n	800261c <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8002612:	693b      	ldr	r3, [r7, #16]
 8002614:	2b08      	cmp	r3, #8
 8002616:	d101      	bne.n	800261c <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002618:	4b22      	ldr	r3, [pc, #136]	; (80026a4 <HAL_RCC_GetSysClockFreq+0x110>)
 800261a:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 800261c:	693b      	ldr	r3, [r7, #16]
 800261e:	2b0c      	cmp	r3, #12
 8002620:	d133      	bne.n	800268a <HAL_RCC_GetSysClockFreq+0xf6>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002622:	4b1d      	ldr	r3, [pc, #116]	; (8002698 <HAL_RCC_GetSysClockFreq+0x104>)
 8002624:	68db      	ldr	r3, [r3, #12]
 8002626:	f003 0303 	and.w	r3, r3, #3
 800262a:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800262c:	68bb      	ldr	r3, [r7, #8]
 800262e:	2b02      	cmp	r3, #2
 8002630:	d002      	beq.n	8002638 <HAL_RCC_GetSysClockFreq+0xa4>
 8002632:	2b03      	cmp	r3, #3
 8002634:	d003      	beq.n	800263e <HAL_RCC_GetSysClockFreq+0xaa>
 8002636:	e005      	b.n	8002644 <HAL_RCC_GetSysClockFreq+0xb0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8002638:	4b19      	ldr	r3, [pc, #100]	; (80026a0 <HAL_RCC_GetSysClockFreq+0x10c>)
 800263a:	617b      	str	r3, [r7, #20]
      break;
 800263c:	e005      	b.n	800264a <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 800263e:	4b19      	ldr	r3, [pc, #100]	; (80026a4 <HAL_RCC_GetSysClockFreq+0x110>)
 8002640:	617b      	str	r3, [r7, #20]
      break;
 8002642:	e002      	b.n	800264a <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8002644:	69fb      	ldr	r3, [r7, #28]
 8002646:	617b      	str	r3, [r7, #20]
      break;
 8002648:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800264a:	4b13      	ldr	r3, [pc, #76]	; (8002698 <HAL_RCC_GetSysClockFreq+0x104>)
 800264c:	68db      	ldr	r3, [r3, #12]
 800264e:	091b      	lsrs	r3, r3, #4
 8002650:	f003 0307 	and.w	r3, r3, #7
 8002654:	3301      	adds	r3, #1
 8002656:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8002658:	4b0f      	ldr	r3, [pc, #60]	; (8002698 <HAL_RCC_GetSysClockFreq+0x104>)
 800265a:	68db      	ldr	r3, [r3, #12]
 800265c:	0a1b      	lsrs	r3, r3, #8
 800265e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002662:	697a      	ldr	r2, [r7, #20]
 8002664:	fb02 f203 	mul.w	r2, r2, r3
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	fbb2 f3f3 	udiv	r3, r2, r3
 800266e:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002670:	4b09      	ldr	r3, [pc, #36]	; (8002698 <HAL_RCC_GetSysClockFreq+0x104>)
 8002672:	68db      	ldr	r3, [r3, #12]
 8002674:	0e5b      	lsrs	r3, r3, #25
 8002676:	f003 0303 	and.w	r3, r3, #3
 800267a:	3301      	adds	r3, #1
 800267c:	005b      	lsls	r3, r3, #1
 800267e:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8002680:	697a      	ldr	r2, [r7, #20]
 8002682:	683b      	ldr	r3, [r7, #0]
 8002684:	fbb2 f3f3 	udiv	r3, r2, r3
 8002688:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 800268a:	69bb      	ldr	r3, [r7, #24]
}
 800268c:	4618      	mov	r0, r3
 800268e:	3724      	adds	r7, #36	; 0x24
 8002690:	46bd      	mov	sp, r7
 8002692:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002696:	4770      	bx	lr
 8002698:	40021000 	.word	0x40021000
 800269c:	0800417c 	.word	0x0800417c
 80026a0:	00f42400 	.word	0x00f42400
 80026a4:	007a1200 	.word	0x007a1200

080026a8 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80026a8:	b480      	push	{r7}
 80026aa:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80026ac:	4b03      	ldr	r3, [pc, #12]	; (80026bc <HAL_RCC_GetHCLKFreq+0x14>)
 80026ae:	681b      	ldr	r3, [r3, #0]
}
 80026b0:	4618      	mov	r0, r3
 80026b2:	46bd      	mov	sp, r7
 80026b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026b8:	4770      	bx	lr
 80026ba:	bf00      	nop
 80026bc:	20000000 	.word	0x20000000

080026c0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80026c0:	b580      	push	{r7, lr}
 80026c2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80026c4:	f7ff fff0 	bl	80026a8 <HAL_RCC_GetHCLKFreq>
 80026c8:	4601      	mov	r1, r0
 80026ca:	4b06      	ldr	r3, [pc, #24]	; (80026e4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80026cc:	689b      	ldr	r3, [r3, #8]
 80026ce:	0a1b      	lsrs	r3, r3, #8
 80026d0:	f003 0307 	and.w	r3, r3, #7
 80026d4:	4a04      	ldr	r2, [pc, #16]	; (80026e8 <HAL_RCC_GetPCLK1Freq+0x28>)
 80026d6:	5cd3      	ldrb	r3, [r2, r3]
 80026d8:	f003 031f 	and.w	r3, r3, #31
 80026dc:	fa21 f303 	lsr.w	r3, r1, r3
}
 80026e0:	4618      	mov	r0, r3
 80026e2:	bd80      	pop	{r7, pc}
 80026e4:	40021000 	.word	0x40021000
 80026e8:	08004174 	.word	0x08004174

080026ec <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80026ec:	b580      	push	{r7, lr}
 80026ee:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80026f0:	f7ff ffda 	bl	80026a8 <HAL_RCC_GetHCLKFreq>
 80026f4:	4601      	mov	r1, r0
 80026f6:	4b06      	ldr	r3, [pc, #24]	; (8002710 <HAL_RCC_GetPCLK2Freq+0x24>)
 80026f8:	689b      	ldr	r3, [r3, #8]
 80026fa:	0adb      	lsrs	r3, r3, #11
 80026fc:	f003 0307 	and.w	r3, r3, #7
 8002700:	4a04      	ldr	r2, [pc, #16]	; (8002714 <HAL_RCC_GetPCLK2Freq+0x28>)
 8002702:	5cd3      	ldrb	r3, [r2, r3]
 8002704:	f003 031f 	and.w	r3, r3, #31
 8002708:	fa21 f303 	lsr.w	r3, r1, r3
}
 800270c:	4618      	mov	r0, r3
 800270e:	bd80      	pop	{r7, pc}
 8002710:	40021000 	.word	0x40021000
 8002714:	08004174 	.word	0x08004174

08002718 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8002718:	b580      	push	{r7, lr}
 800271a:	b086      	sub	sp, #24
 800271c:	af00      	add	r7, sp, #0
 800271e:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8002720:	2300      	movs	r3, #0
 8002722:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8002724:	4b2a      	ldr	r3, [pc, #168]	; (80027d0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002726:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002728:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800272c:	2b00      	cmp	r3, #0
 800272e:	d003      	beq.n	8002738 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8002730:	f7ff fa3a 	bl	8001ba8 <HAL_PWREx_GetVoltageRange>
 8002734:	6178      	str	r0, [r7, #20]
 8002736:	e014      	b.n	8002762 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8002738:	4b25      	ldr	r3, [pc, #148]	; (80027d0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800273a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800273c:	4a24      	ldr	r2, [pc, #144]	; (80027d0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800273e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002742:	6593      	str	r3, [r2, #88]	; 0x58
 8002744:	4b22      	ldr	r3, [pc, #136]	; (80027d0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002746:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002748:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800274c:	60fb      	str	r3, [r7, #12]
 800274e:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8002750:	f7ff fa2a 	bl	8001ba8 <HAL_PWREx_GetVoltageRange>
 8002754:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8002756:	4b1e      	ldr	r3, [pc, #120]	; (80027d0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002758:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800275a:	4a1d      	ldr	r2, [pc, #116]	; (80027d0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800275c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002760:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002762:	697b      	ldr	r3, [r7, #20]
 8002764:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002768:	d10b      	bne.n	8002782 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	2b80      	cmp	r3, #128	; 0x80
 800276e:	d919      	bls.n	80027a4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	2ba0      	cmp	r3, #160	; 0xa0
 8002774:	d902      	bls.n	800277c <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002776:	2302      	movs	r3, #2
 8002778:	613b      	str	r3, [r7, #16]
 800277a:	e013      	b.n	80027a4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800277c:	2301      	movs	r3, #1
 800277e:	613b      	str	r3, [r7, #16]
 8002780:	e010      	b.n	80027a4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	2b80      	cmp	r3, #128	; 0x80
 8002786:	d902      	bls.n	800278e <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8002788:	2303      	movs	r3, #3
 800278a:	613b      	str	r3, [r7, #16]
 800278c:	e00a      	b.n	80027a4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	2b80      	cmp	r3, #128	; 0x80
 8002792:	d102      	bne.n	800279a <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002794:	2302      	movs	r3, #2
 8002796:	613b      	str	r3, [r7, #16]
 8002798:	e004      	b.n	80027a4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	2b70      	cmp	r3, #112	; 0x70
 800279e:	d101      	bne.n	80027a4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80027a0:	2301      	movs	r3, #1
 80027a2:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80027a4:	4b0b      	ldr	r3, [pc, #44]	; (80027d4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	f023 0207 	bic.w	r2, r3, #7
 80027ac:	4909      	ldr	r1, [pc, #36]	; (80027d4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80027ae:	693b      	ldr	r3, [r7, #16]
 80027b0:	4313      	orrs	r3, r2
 80027b2:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80027b4:	4b07      	ldr	r3, [pc, #28]	; (80027d4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	f003 0307 	and.w	r3, r3, #7
 80027bc:	693a      	ldr	r2, [r7, #16]
 80027be:	429a      	cmp	r2, r3
 80027c0:	d001      	beq.n	80027c6 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 80027c2:	2301      	movs	r3, #1
 80027c4:	e000      	b.n	80027c8 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 80027c6:	2300      	movs	r3, #0
}
 80027c8:	4618      	mov	r0, r3
 80027ca:	3718      	adds	r7, #24
 80027cc:	46bd      	mov	sp, r7
 80027ce:	bd80      	pop	{r7, pc}
 80027d0:	40021000 	.word	0x40021000
 80027d4:	40022000 	.word	0x40022000

080027d8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80027d8:	b580      	push	{r7, lr}
 80027da:	b086      	sub	sp, #24
 80027dc:	af00      	add	r7, sp, #0
 80027de:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80027e0:	2300      	movs	r3, #0
 80027e2:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80027e4:	2300      	movs	r3, #0
 80027e6:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80027f0:	2b00      	cmp	r3, #0
 80027f2:	d03f      	beq.n	8002874 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80027f8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80027fc:	d01c      	beq.n	8002838 <HAL_RCCEx_PeriphCLKConfig+0x60>
 80027fe:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002802:	d802      	bhi.n	800280a <HAL_RCCEx_PeriphCLKConfig+0x32>
 8002804:	2b00      	cmp	r3, #0
 8002806:	d00e      	beq.n	8002826 <HAL_RCCEx_PeriphCLKConfig+0x4e>
 8002808:	e01f      	b.n	800284a <HAL_RCCEx_PeriphCLKConfig+0x72>
 800280a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800280e:	d003      	beq.n	8002818 <HAL_RCCEx_PeriphCLKConfig+0x40>
 8002810:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8002814:	d01c      	beq.n	8002850 <HAL_RCCEx_PeriphCLKConfig+0x78>
 8002816:	e018      	b.n	800284a <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002818:	4b85      	ldr	r3, [pc, #532]	; (8002a30 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800281a:	68db      	ldr	r3, [r3, #12]
 800281c:	4a84      	ldr	r2, [pc, #528]	; (8002a30 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800281e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002822:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002824:	e015      	b.n	8002852 <HAL_RCCEx_PeriphCLKConfig+0x7a>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	3304      	adds	r3, #4
 800282a:	2100      	movs	r1, #0
 800282c:	4618      	mov	r0, r3
 800282e:	f000 fab9 	bl	8002da4 <RCCEx_PLLSAI1_Config>
 8002832:	4603      	mov	r3, r0
 8002834:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002836:	e00c      	b.n	8002852 <HAL_RCCEx_PeriphCLKConfig+0x7a>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	3320      	adds	r3, #32
 800283c:	2100      	movs	r1, #0
 800283e:	4618      	mov	r0, r3
 8002840:	f000 fba0 	bl	8002f84 <RCCEx_PLLSAI2_Config>
 8002844:	4603      	mov	r3, r0
 8002846:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002848:	e003      	b.n	8002852 <HAL_RCCEx_PeriphCLKConfig+0x7a>
#endif /* STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800284a:	2301      	movs	r3, #1
 800284c:	74fb      	strb	r3, [r7, #19]
      break;
 800284e:	e000      	b.n	8002852 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      break;
 8002850:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002852:	7cfb      	ldrb	r3, [r7, #19]
 8002854:	2b00      	cmp	r3, #0
 8002856:	d10b      	bne.n	8002870 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002858:	4b75      	ldr	r3, [pc, #468]	; (8002a30 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800285a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800285e:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002866:	4972      	ldr	r1, [pc, #456]	; (8002a30 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002868:	4313      	orrs	r3, r2
 800286a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800286e:	e001      	b.n	8002874 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002870:	7cfb      	ldrb	r3, [r7, #19]
 8002872:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800287c:	2b00      	cmp	r3, #0
 800287e:	d03f      	beq.n	8002900 <HAL_RCCEx_PeriphCLKConfig+0x128>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002884:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002888:	d01c      	beq.n	80028c4 <HAL_RCCEx_PeriphCLKConfig+0xec>
 800288a:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800288e:	d802      	bhi.n	8002896 <HAL_RCCEx_PeriphCLKConfig+0xbe>
 8002890:	2b00      	cmp	r3, #0
 8002892:	d00e      	beq.n	80028b2 <HAL_RCCEx_PeriphCLKConfig+0xda>
 8002894:	e01f      	b.n	80028d6 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8002896:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800289a:	d003      	beq.n	80028a4 <HAL_RCCEx_PeriphCLKConfig+0xcc>
 800289c:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80028a0:	d01c      	beq.n	80028dc <HAL_RCCEx_PeriphCLKConfig+0x104>
 80028a2:	e018      	b.n	80028d6 <HAL_RCCEx_PeriphCLKConfig+0xfe>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80028a4:	4b62      	ldr	r3, [pc, #392]	; (8002a30 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80028a6:	68db      	ldr	r3, [r3, #12]
 80028a8:	4a61      	ldr	r2, [pc, #388]	; (8002a30 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80028aa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80028ae:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80028b0:	e015      	b.n	80028de <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	3304      	adds	r3, #4
 80028b6:	2100      	movs	r1, #0
 80028b8:	4618      	mov	r0, r3
 80028ba:	f000 fa73 	bl	8002da4 <RCCEx_PLLSAI1_Config>
 80028be:	4603      	mov	r3, r0
 80028c0:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80028c2:	e00c      	b.n	80028de <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	3320      	adds	r3, #32
 80028c8:	2100      	movs	r1, #0
 80028ca:	4618      	mov	r0, r3
 80028cc:	f000 fb5a 	bl	8002f84 <RCCEx_PLLSAI2_Config>
 80028d0:	4603      	mov	r3, r0
 80028d2:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80028d4:	e003      	b.n	80028de <HAL_RCCEx_PeriphCLKConfig+0x106>
#endif /* STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80028d6:	2301      	movs	r3, #1
 80028d8:	74fb      	strb	r3, [r7, #19]
      break;
 80028da:	e000      	b.n	80028de <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 80028dc:	bf00      	nop
    }

    if(ret == HAL_OK)
 80028de:	7cfb      	ldrb	r3, [r7, #19]
 80028e0:	2b00      	cmp	r3, #0
 80028e2:	d10b      	bne.n	80028fc <HAL_RCCEx_PeriphCLKConfig+0x124>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80028e4:	4b52      	ldr	r3, [pc, #328]	; (8002a30 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80028e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80028ea:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80028f2:	494f      	ldr	r1, [pc, #316]	; (8002a30 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80028f4:	4313      	orrs	r3, r2
 80028f6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80028fa:	e001      	b.n	8002900 <HAL_RCCEx_PeriphCLKConfig+0x128>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80028fc:	7cfb      	ldrb	r3, [r7, #19]
 80028fe:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002908:	2b00      	cmp	r3, #0
 800290a:	f000 80a0 	beq.w	8002a4e <HAL_RCCEx_PeriphCLKConfig+0x276>
  {
    FlagStatus       pwrclkchanged = RESET;
 800290e:	2300      	movs	r3, #0
 8002910:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002912:	4b47      	ldr	r3, [pc, #284]	; (8002a30 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002914:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002916:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800291a:	2b00      	cmp	r3, #0
 800291c:	d101      	bne.n	8002922 <HAL_RCCEx_PeriphCLKConfig+0x14a>
 800291e:	2301      	movs	r3, #1
 8002920:	e000      	b.n	8002924 <HAL_RCCEx_PeriphCLKConfig+0x14c>
 8002922:	2300      	movs	r3, #0
 8002924:	2b00      	cmp	r3, #0
 8002926:	d00d      	beq.n	8002944 <HAL_RCCEx_PeriphCLKConfig+0x16c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002928:	4b41      	ldr	r3, [pc, #260]	; (8002a30 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800292a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800292c:	4a40      	ldr	r2, [pc, #256]	; (8002a30 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800292e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002932:	6593      	str	r3, [r2, #88]	; 0x58
 8002934:	4b3e      	ldr	r3, [pc, #248]	; (8002a30 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002936:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002938:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800293c:	60bb      	str	r3, [r7, #8]
 800293e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002940:	2301      	movs	r3, #1
 8002942:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002944:	4b3b      	ldr	r3, [pc, #236]	; (8002a34 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	4a3a      	ldr	r2, [pc, #232]	; (8002a34 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 800294a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800294e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002950:	f7fe fd30 	bl	80013b4 <HAL_GetTick>
 8002954:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002956:	e009      	b.n	800296c <HAL_RCCEx_PeriphCLKConfig+0x194>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002958:	f7fe fd2c 	bl	80013b4 <HAL_GetTick>
 800295c:	4602      	mov	r2, r0
 800295e:	68fb      	ldr	r3, [r7, #12]
 8002960:	1ad3      	subs	r3, r2, r3
 8002962:	2b02      	cmp	r3, #2
 8002964:	d902      	bls.n	800296c <HAL_RCCEx_PeriphCLKConfig+0x194>
      {
        ret = HAL_TIMEOUT;
 8002966:	2303      	movs	r3, #3
 8002968:	74fb      	strb	r3, [r7, #19]
        break;
 800296a:	e005      	b.n	8002978 <HAL_RCCEx_PeriphCLKConfig+0x1a0>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800296c:	4b31      	ldr	r3, [pc, #196]	; (8002a34 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002974:	2b00      	cmp	r3, #0
 8002976:	d0ef      	beq.n	8002958 <HAL_RCCEx_PeriphCLKConfig+0x180>
      }
    }

    if(ret == HAL_OK)
 8002978:	7cfb      	ldrb	r3, [r7, #19]
 800297a:	2b00      	cmp	r3, #0
 800297c:	d15c      	bne.n	8002a38 <HAL_RCCEx_PeriphCLKConfig+0x260>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800297e:	4b2c      	ldr	r3, [pc, #176]	; (8002a30 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002980:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002984:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002988:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800298a:	697b      	ldr	r3, [r7, #20]
 800298c:	2b00      	cmp	r3, #0
 800298e:	d01f      	beq.n	80029d0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002996:	697a      	ldr	r2, [r7, #20]
 8002998:	429a      	cmp	r2, r3
 800299a:	d019      	beq.n	80029d0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800299c:	4b24      	ldr	r3, [pc, #144]	; (8002a30 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800299e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80029a2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80029a6:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80029a8:	4b21      	ldr	r3, [pc, #132]	; (8002a30 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80029aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80029ae:	4a20      	ldr	r2, [pc, #128]	; (8002a30 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80029b0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80029b4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80029b8:	4b1d      	ldr	r3, [pc, #116]	; (8002a30 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80029ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80029be:	4a1c      	ldr	r2, [pc, #112]	; (8002a30 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80029c0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80029c4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80029c8:	4a19      	ldr	r2, [pc, #100]	; (8002a30 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80029ca:	697b      	ldr	r3, [r7, #20]
 80029cc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80029d0:	697b      	ldr	r3, [r7, #20]
 80029d2:	f003 0301 	and.w	r3, r3, #1
 80029d6:	2b00      	cmp	r3, #0
 80029d8:	d016      	beq.n	8002a08 <HAL_RCCEx_PeriphCLKConfig+0x230>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80029da:	f7fe fceb 	bl	80013b4 <HAL_GetTick>
 80029de:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80029e0:	e00b      	b.n	80029fa <HAL_RCCEx_PeriphCLKConfig+0x222>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80029e2:	f7fe fce7 	bl	80013b4 <HAL_GetTick>
 80029e6:	4602      	mov	r2, r0
 80029e8:	68fb      	ldr	r3, [r7, #12]
 80029ea:	1ad3      	subs	r3, r2, r3
 80029ec:	f241 3288 	movw	r2, #5000	; 0x1388
 80029f0:	4293      	cmp	r3, r2
 80029f2:	d902      	bls.n	80029fa <HAL_RCCEx_PeriphCLKConfig+0x222>
          {
            ret = HAL_TIMEOUT;
 80029f4:	2303      	movs	r3, #3
 80029f6:	74fb      	strb	r3, [r7, #19]
            break;
 80029f8:	e006      	b.n	8002a08 <HAL_RCCEx_PeriphCLKConfig+0x230>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80029fa:	4b0d      	ldr	r3, [pc, #52]	; (8002a30 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80029fc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002a00:	f003 0302 	and.w	r3, r3, #2
 8002a04:	2b00      	cmp	r3, #0
 8002a06:	d0ec      	beq.n	80029e2 <HAL_RCCEx_PeriphCLKConfig+0x20a>
          }
        }
      }

      if(ret == HAL_OK)
 8002a08:	7cfb      	ldrb	r3, [r7, #19]
 8002a0a:	2b00      	cmp	r3, #0
 8002a0c:	d10c      	bne.n	8002a28 <HAL_RCCEx_PeriphCLKConfig+0x250>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002a0e:	4b08      	ldr	r3, [pc, #32]	; (8002a30 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002a10:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002a14:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002a1e:	4904      	ldr	r1, [pc, #16]	; (8002a30 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002a20:	4313      	orrs	r3, r2
 8002a22:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8002a26:	e009      	b.n	8002a3c <HAL_RCCEx_PeriphCLKConfig+0x264>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002a28:	7cfb      	ldrb	r3, [r7, #19]
 8002a2a:	74bb      	strb	r3, [r7, #18]
 8002a2c:	e006      	b.n	8002a3c <HAL_RCCEx_PeriphCLKConfig+0x264>
 8002a2e:	bf00      	nop
 8002a30:	40021000 	.word	0x40021000
 8002a34:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002a38:	7cfb      	ldrb	r3, [r7, #19]
 8002a3a:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002a3c:	7c7b      	ldrb	r3, [r7, #17]
 8002a3e:	2b01      	cmp	r3, #1
 8002a40:	d105      	bne.n	8002a4e <HAL_RCCEx_PeriphCLKConfig+0x276>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002a42:	4b9e      	ldr	r3, [pc, #632]	; (8002cbc <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002a44:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a46:	4a9d      	ldr	r2, [pc, #628]	; (8002cbc <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002a48:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002a4c:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	f003 0301 	and.w	r3, r3, #1
 8002a56:	2b00      	cmp	r3, #0
 8002a58:	d00a      	beq.n	8002a70 <HAL_RCCEx_PeriphCLKConfig+0x298>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002a5a:	4b98      	ldr	r3, [pc, #608]	; (8002cbc <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002a5c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a60:	f023 0203 	bic.w	r2, r3, #3
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a68:	4994      	ldr	r1, [pc, #592]	; (8002cbc <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002a6a:	4313      	orrs	r3, r2
 8002a6c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	f003 0302 	and.w	r3, r3, #2
 8002a78:	2b00      	cmp	r3, #0
 8002a7a:	d00a      	beq.n	8002a92 <HAL_RCCEx_PeriphCLKConfig+0x2ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002a7c:	4b8f      	ldr	r3, [pc, #572]	; (8002cbc <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002a7e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a82:	f023 020c 	bic.w	r2, r3, #12
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002a8a:	498c      	ldr	r1, [pc, #560]	; (8002cbc <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002a8c:	4313      	orrs	r3, r2
 8002a8e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	f003 0304 	and.w	r3, r3, #4
 8002a9a:	2b00      	cmp	r3, #0
 8002a9c:	d00a      	beq.n	8002ab4 <HAL_RCCEx_PeriphCLKConfig+0x2dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002a9e:	4b87      	ldr	r3, [pc, #540]	; (8002cbc <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002aa0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002aa4:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002aac:	4983      	ldr	r1, [pc, #524]	; (8002cbc <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002aae:	4313      	orrs	r3, r2
 8002ab0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	f003 0308 	and.w	r3, r3, #8
 8002abc:	2b00      	cmp	r3, #0
 8002abe:	d00a      	beq.n	8002ad6 <HAL_RCCEx_PeriphCLKConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002ac0:	4b7e      	ldr	r3, [pc, #504]	; (8002cbc <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002ac2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002ac6:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ace:	497b      	ldr	r1, [pc, #492]	; (8002cbc <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002ad0:	4313      	orrs	r3, r2
 8002ad2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	f003 0310 	and.w	r3, r3, #16
 8002ade:	2b00      	cmp	r3, #0
 8002ae0:	d00a      	beq.n	8002af8 <HAL_RCCEx_PeriphCLKConfig+0x320>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002ae2:	4b76      	ldr	r3, [pc, #472]	; (8002cbc <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002ae4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002ae8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002af0:	4972      	ldr	r1, [pc, #456]	; (8002cbc <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002af2:	4313      	orrs	r3, r2
 8002af4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	f003 0320 	and.w	r3, r3, #32
 8002b00:	2b00      	cmp	r3, #0
 8002b02:	d00a      	beq.n	8002b1a <HAL_RCCEx_PeriphCLKConfig+0x342>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002b04:	4b6d      	ldr	r3, [pc, #436]	; (8002cbc <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002b06:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b0a:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002b12:	496a      	ldr	r1, [pc, #424]	; (8002cbc <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002b14:	4313      	orrs	r3, r2
 8002b16:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002b22:	2b00      	cmp	r3, #0
 8002b24:	d00a      	beq.n	8002b3c <HAL_RCCEx_PeriphCLKConfig+0x364>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002b26:	4b65      	ldr	r3, [pc, #404]	; (8002cbc <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002b28:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b2c:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b34:	4961      	ldr	r1, [pc, #388]	; (8002cbc <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002b36:	4313      	orrs	r3, r2
 8002b38:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002b44:	2b00      	cmp	r3, #0
 8002b46:	d00a      	beq.n	8002b5e <HAL_RCCEx_PeriphCLKConfig+0x386>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002b48:	4b5c      	ldr	r3, [pc, #368]	; (8002cbc <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002b4a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b4e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002b56:	4959      	ldr	r1, [pc, #356]	; (8002cbc <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002b58:	4313      	orrs	r3, r2
 8002b5a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002b66:	2b00      	cmp	r3, #0
 8002b68:	d00a      	beq.n	8002b80 <HAL_RCCEx_PeriphCLKConfig+0x3a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002b6a:	4b54      	ldr	r3, [pc, #336]	; (8002cbc <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002b6c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b70:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002b78:	4950      	ldr	r1, [pc, #320]	; (8002cbc <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002b7a:	4313      	orrs	r3, r2
 8002b7c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002b88:	2b00      	cmp	r3, #0
 8002b8a:	d00a      	beq.n	8002ba2 <HAL_RCCEx_PeriphCLKConfig+0x3ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002b8c:	4b4b      	ldr	r3, [pc, #300]	; (8002cbc <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002b8e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b92:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002b9a:	4948      	ldr	r1, [pc, #288]	; (8002cbc <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002b9c:	4313      	orrs	r3, r2
 8002b9e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002baa:	2b00      	cmp	r3, #0
 8002bac:	d00a      	beq.n	8002bc4 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002bae:	4b43      	ldr	r3, [pc, #268]	; (8002cbc <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002bb0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002bb4:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002bbc:	493f      	ldr	r1, [pc, #252]	; (8002cbc <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002bbe:	4313      	orrs	r3, r2
 8002bc0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002bcc:	2b00      	cmp	r3, #0
 8002bce:	d028      	beq.n	8002c22 <HAL_RCCEx_PeriphCLKConfig+0x44a>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002bd0:	4b3a      	ldr	r3, [pc, #232]	; (8002cbc <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002bd2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002bd6:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002bde:	4937      	ldr	r1, [pc, #220]	; (8002cbc <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002be0:	4313      	orrs	r3, r2
 8002be2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002bea:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002bee:	d106      	bne.n	8002bfe <HAL_RCCEx_PeriphCLKConfig+0x426>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002bf0:	4b32      	ldr	r3, [pc, #200]	; (8002cbc <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002bf2:	68db      	ldr	r3, [r3, #12]
 8002bf4:	4a31      	ldr	r2, [pc, #196]	; (8002cbc <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002bf6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002bfa:	60d3      	str	r3, [r2, #12]
 8002bfc:	e011      	b.n	8002c22 <HAL_RCCEx_PeriphCLKConfig+0x44a>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002c02:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002c06:	d10c      	bne.n	8002c22 <HAL_RCCEx_PeriphCLKConfig+0x44a>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	3304      	adds	r3, #4
 8002c0c:	2101      	movs	r1, #1
 8002c0e:	4618      	mov	r0, r3
 8002c10:	f000 f8c8 	bl	8002da4 <RCCEx_PLLSAI1_Config>
 8002c14:	4603      	mov	r3, r0
 8002c16:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8002c18:	7cfb      	ldrb	r3, [r7, #19]
 8002c1a:	2b00      	cmp	r3, #0
 8002c1c:	d001      	beq.n	8002c22 <HAL_RCCEx_PeriphCLKConfig+0x44a>
        {
          /* set overall return value */
          status = ret;
 8002c1e:	7cfb      	ldrb	r3, [r7, #19]
 8002c20:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002c2a:	2b00      	cmp	r3, #0
 8002c2c:	d028      	beq.n	8002c80 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8002c2e:	4b23      	ldr	r3, [pc, #140]	; (8002cbc <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002c30:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002c34:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c3c:	491f      	ldr	r1, [pc, #124]	; (8002cbc <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002c3e:	4313      	orrs	r3, r2
 8002c40:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c48:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002c4c:	d106      	bne.n	8002c5c <HAL_RCCEx_PeriphCLKConfig+0x484>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002c4e:	4b1b      	ldr	r3, [pc, #108]	; (8002cbc <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002c50:	68db      	ldr	r3, [r3, #12]
 8002c52:	4a1a      	ldr	r2, [pc, #104]	; (8002cbc <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002c54:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002c58:	60d3      	str	r3, [r2, #12]
 8002c5a:	e011      	b.n	8002c80 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c60:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002c64:	d10c      	bne.n	8002c80 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	3304      	adds	r3, #4
 8002c6a:	2101      	movs	r1, #1
 8002c6c:	4618      	mov	r0, r3
 8002c6e:	f000 f899 	bl	8002da4 <RCCEx_PLLSAI1_Config>
 8002c72:	4603      	mov	r3, r0
 8002c74:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002c76:	7cfb      	ldrb	r3, [r7, #19]
 8002c78:	2b00      	cmp	r3, #0
 8002c7a:	d001      	beq.n	8002c80 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* set overall return value */
        status = ret;
 8002c7c:	7cfb      	ldrb	r3, [r7, #19]
 8002c7e:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002c88:	2b00      	cmp	r3, #0
 8002c8a:	d02b      	beq.n	8002ce4 <HAL_RCCEx_PeriphCLKConfig+0x50c>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002c8c:	4b0b      	ldr	r3, [pc, #44]	; (8002cbc <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002c8e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002c92:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002c9a:	4908      	ldr	r1, [pc, #32]	; (8002cbc <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002c9c:	4313      	orrs	r3, r2
 8002c9e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002ca6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002caa:	d109      	bne.n	8002cc0 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002cac:	4b03      	ldr	r3, [pc, #12]	; (8002cbc <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002cae:	68db      	ldr	r3, [r3, #12]
 8002cb0:	4a02      	ldr	r2, [pc, #8]	; (8002cbc <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002cb2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002cb6:	60d3      	str	r3, [r2, #12]
 8002cb8:	e014      	b.n	8002ce4 <HAL_RCCEx_PeriphCLKConfig+0x50c>
 8002cba:	bf00      	nop
 8002cbc:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002cc4:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002cc8:	d10c      	bne.n	8002ce4 <HAL_RCCEx_PeriphCLKConfig+0x50c>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	3304      	adds	r3, #4
 8002cce:	2101      	movs	r1, #1
 8002cd0:	4618      	mov	r0, r3
 8002cd2:	f000 f867 	bl	8002da4 <RCCEx_PLLSAI1_Config>
 8002cd6:	4603      	mov	r3, r0
 8002cd8:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002cda:	7cfb      	ldrb	r3, [r7, #19]
 8002cdc:	2b00      	cmp	r3, #0
 8002cde:	d001      	beq.n	8002ce4 <HAL_RCCEx_PeriphCLKConfig+0x50c>
      {
        /* set overall return value */
        status = ret;
 8002ce0:	7cfb      	ldrb	r3, [r7, #19]
 8002ce2:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002cec:	2b00      	cmp	r3, #0
 8002cee:	d02f      	beq.n	8002d50 <HAL_RCCEx_PeriphCLKConfig+0x578>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002cf0:	4b2b      	ldr	r3, [pc, #172]	; (8002da0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002cf2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002cf6:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002cfe:	4928      	ldr	r1, [pc, #160]	; (8002da0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002d00:	4313      	orrs	r3, r2
 8002d02:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002d0a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002d0e:	d10d      	bne.n	8002d2c <HAL_RCCEx_PeriphCLKConfig+0x554>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	3304      	adds	r3, #4
 8002d14:	2102      	movs	r1, #2
 8002d16:	4618      	mov	r0, r3
 8002d18:	f000 f844 	bl	8002da4 <RCCEx_PLLSAI1_Config>
 8002d1c:	4603      	mov	r3, r0
 8002d1e:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002d20:	7cfb      	ldrb	r3, [r7, #19]
 8002d22:	2b00      	cmp	r3, #0
 8002d24:	d014      	beq.n	8002d50 <HAL_RCCEx_PeriphCLKConfig+0x578>
      {
        /* set overall return value */
        status = ret;
 8002d26:	7cfb      	ldrb	r3, [r7, #19]
 8002d28:	74bb      	strb	r3, [r7, #18]
 8002d2a:	e011      	b.n	8002d50 <HAL_RCCEx_PeriphCLKConfig+0x578>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002d30:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002d34:	d10c      	bne.n	8002d50 <HAL_RCCEx_PeriphCLKConfig+0x578>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	3320      	adds	r3, #32
 8002d3a:	2102      	movs	r1, #2
 8002d3c:	4618      	mov	r0, r3
 8002d3e:	f000 f921 	bl	8002f84 <RCCEx_PLLSAI2_Config>
 8002d42:	4603      	mov	r3, r0
 8002d44:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002d46:	7cfb      	ldrb	r3, [r7, #19]
 8002d48:	2b00      	cmp	r3, #0
 8002d4a:	d001      	beq.n	8002d50 <HAL_RCCEx_PeriphCLKConfig+0x578>
      {
        /* set overall return value */
        status = ret;
 8002d4c:	7cfb      	ldrb	r3, [r7, #19]
 8002d4e:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002d58:	2b00      	cmp	r3, #0
 8002d5a:	d00a      	beq.n	8002d72 <HAL_RCCEx_PeriphCLKConfig+0x59a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8002d5c:	4b10      	ldr	r3, [pc, #64]	; (8002da0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002d5e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002d62:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002d6a:	490d      	ldr	r1, [pc, #52]	; (8002da0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002d6c:	4313      	orrs	r3, r2
 8002d6e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002d7a:	2b00      	cmp	r3, #0
 8002d7c:	d00b      	beq.n	8002d96 <HAL_RCCEx_PeriphCLKConfig+0x5be>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8002d7e:	4b08      	ldr	r3, [pc, #32]	; (8002da0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002d80:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002d84:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002d8e:	4904      	ldr	r1, [pc, #16]	; (8002da0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002d90:	4313      	orrs	r3, r2
 8002d92:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8002d96:	7cbb      	ldrb	r3, [r7, #18]
}
 8002d98:	4618      	mov	r0, r3
 8002d9a:	3718      	adds	r7, #24
 8002d9c:	46bd      	mov	sp, r7
 8002d9e:	bd80      	pop	{r7, pc}
 8002da0:	40021000 	.word	0x40021000

08002da4 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8002da4:	b580      	push	{r7, lr}
 8002da6:	b084      	sub	sp, #16
 8002da8:	af00      	add	r7, sp, #0
 8002daa:	6078      	str	r0, [r7, #4]
 8002dac:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002dae:	2300      	movs	r3, #0
 8002db0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002db2:	4b73      	ldr	r3, [pc, #460]	; (8002f80 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002db4:	68db      	ldr	r3, [r3, #12]
 8002db6:	f003 0303 	and.w	r3, r3, #3
 8002dba:	2b00      	cmp	r3, #0
 8002dbc:	d018      	beq.n	8002df0 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8002dbe:	4b70      	ldr	r3, [pc, #448]	; (8002f80 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002dc0:	68db      	ldr	r3, [r3, #12]
 8002dc2:	f003 0203 	and.w	r2, r3, #3
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	429a      	cmp	r2, r3
 8002dcc:	d10d      	bne.n	8002dea <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	681b      	ldr	r3, [r3, #0]
       ||
 8002dd2:	2b00      	cmp	r3, #0
 8002dd4:	d009      	beq.n	8002dea <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8002dd6:	4b6a      	ldr	r3, [pc, #424]	; (8002f80 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002dd8:	68db      	ldr	r3, [r3, #12]
 8002dda:	091b      	lsrs	r3, r3, #4
 8002ddc:	f003 0307 	and.w	r3, r3, #7
 8002de0:	1c5a      	adds	r2, r3, #1
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	685b      	ldr	r3, [r3, #4]
       ||
 8002de6:	429a      	cmp	r2, r3
 8002de8:	d044      	beq.n	8002e74 <RCCEx_PLLSAI1_Config+0xd0>
#endif
      )
    {
      status = HAL_ERROR;
 8002dea:	2301      	movs	r3, #1
 8002dec:	73fb      	strb	r3, [r7, #15]
 8002dee:	e041      	b.n	8002e74 <RCCEx_PLLSAI1_Config+0xd0>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	2b02      	cmp	r3, #2
 8002df6:	d00c      	beq.n	8002e12 <RCCEx_PLLSAI1_Config+0x6e>
 8002df8:	2b03      	cmp	r3, #3
 8002dfa:	d013      	beq.n	8002e24 <RCCEx_PLLSAI1_Config+0x80>
 8002dfc:	2b01      	cmp	r3, #1
 8002dfe:	d120      	bne.n	8002e42 <RCCEx_PLLSAI1_Config+0x9e>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002e00:	4b5f      	ldr	r3, [pc, #380]	; (8002f80 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	f003 0302 	and.w	r3, r3, #2
 8002e08:	2b00      	cmp	r3, #0
 8002e0a:	d11d      	bne.n	8002e48 <RCCEx_PLLSAI1_Config+0xa4>
      {
        status = HAL_ERROR;
 8002e0c:	2301      	movs	r3, #1
 8002e0e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002e10:	e01a      	b.n	8002e48 <RCCEx_PLLSAI1_Config+0xa4>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002e12:	4b5b      	ldr	r3, [pc, #364]	; (8002f80 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002e1a:	2b00      	cmp	r3, #0
 8002e1c:	d116      	bne.n	8002e4c <RCCEx_PLLSAI1_Config+0xa8>
      {
        status = HAL_ERROR;
 8002e1e:	2301      	movs	r3, #1
 8002e20:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002e22:	e013      	b.n	8002e4c <RCCEx_PLLSAI1_Config+0xa8>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002e24:	4b56      	ldr	r3, [pc, #344]	; (8002f80 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e2c:	2b00      	cmp	r3, #0
 8002e2e:	d10f      	bne.n	8002e50 <RCCEx_PLLSAI1_Config+0xac>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002e30:	4b53      	ldr	r3, [pc, #332]	; (8002f80 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002e38:	2b00      	cmp	r3, #0
 8002e3a:	d109      	bne.n	8002e50 <RCCEx_PLLSAI1_Config+0xac>
        {
          status = HAL_ERROR;
 8002e3c:	2301      	movs	r3, #1
 8002e3e:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8002e40:	e006      	b.n	8002e50 <RCCEx_PLLSAI1_Config+0xac>
    default:
      status = HAL_ERROR;
 8002e42:	2301      	movs	r3, #1
 8002e44:	73fb      	strb	r3, [r7, #15]
      break;
 8002e46:	e004      	b.n	8002e52 <RCCEx_PLLSAI1_Config+0xae>
      break;
 8002e48:	bf00      	nop
 8002e4a:	e002      	b.n	8002e52 <RCCEx_PLLSAI1_Config+0xae>
      break;
 8002e4c:	bf00      	nop
 8002e4e:	e000      	b.n	8002e52 <RCCEx_PLLSAI1_Config+0xae>
      break;
 8002e50:	bf00      	nop
    }

    if(status == HAL_OK)
 8002e52:	7bfb      	ldrb	r3, [r7, #15]
 8002e54:	2b00      	cmp	r3, #0
 8002e56:	d10d      	bne.n	8002e74 <RCCEx_PLLSAI1_Config+0xd0>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8002e58:	4b49      	ldr	r3, [pc, #292]	; (8002f80 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002e5a:	68db      	ldr	r3, [r3, #12]
 8002e5c:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	6819      	ldr	r1, [r3, #0]
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	685b      	ldr	r3, [r3, #4]
 8002e68:	3b01      	subs	r3, #1
 8002e6a:	011b      	lsls	r3, r3, #4
 8002e6c:	430b      	orrs	r3, r1
 8002e6e:	4944      	ldr	r1, [pc, #272]	; (8002f80 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002e70:	4313      	orrs	r3, r2
 8002e72:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8002e74:	7bfb      	ldrb	r3, [r7, #15]
 8002e76:	2b00      	cmp	r3, #0
 8002e78:	d17d      	bne.n	8002f76 <RCCEx_PLLSAI1_Config+0x1d2>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8002e7a:	4b41      	ldr	r3, [pc, #260]	; (8002f80 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	4a40      	ldr	r2, [pc, #256]	; (8002f80 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002e80:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8002e84:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002e86:	f7fe fa95 	bl	80013b4 <HAL_GetTick>
 8002e8a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002e8c:	e009      	b.n	8002ea2 <RCCEx_PLLSAI1_Config+0xfe>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002e8e:	f7fe fa91 	bl	80013b4 <HAL_GetTick>
 8002e92:	4602      	mov	r2, r0
 8002e94:	68bb      	ldr	r3, [r7, #8]
 8002e96:	1ad3      	subs	r3, r2, r3
 8002e98:	2b02      	cmp	r3, #2
 8002e9a:	d902      	bls.n	8002ea2 <RCCEx_PLLSAI1_Config+0xfe>
      {
        status = HAL_TIMEOUT;
 8002e9c:	2303      	movs	r3, #3
 8002e9e:	73fb      	strb	r3, [r7, #15]
        break;
 8002ea0:	e005      	b.n	8002eae <RCCEx_PLLSAI1_Config+0x10a>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002ea2:	4b37      	ldr	r3, [pc, #220]	; (8002f80 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002eaa:	2b00      	cmp	r3, #0
 8002eac:	d1ef      	bne.n	8002e8e <RCCEx_PLLSAI1_Config+0xea>
      }
    }

    if(status == HAL_OK)
 8002eae:	7bfb      	ldrb	r3, [r7, #15]
 8002eb0:	2b00      	cmp	r3, #0
 8002eb2:	d160      	bne.n	8002f76 <RCCEx_PLLSAI1_Config+0x1d2>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8002eb4:	683b      	ldr	r3, [r7, #0]
 8002eb6:	2b00      	cmp	r3, #0
 8002eb8:	d111      	bne.n	8002ede <RCCEx_PLLSAI1_Config+0x13a>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002eba:	4b31      	ldr	r3, [pc, #196]	; (8002f80 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002ebc:	691b      	ldr	r3, [r3, #16]
 8002ebe:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8002ec2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002ec6:	687a      	ldr	r2, [r7, #4]
 8002ec8:	6892      	ldr	r2, [r2, #8]
 8002eca:	0211      	lsls	r1, r2, #8
 8002ecc:	687a      	ldr	r2, [r7, #4]
 8002ece:	68d2      	ldr	r2, [r2, #12]
 8002ed0:	0912      	lsrs	r2, r2, #4
 8002ed2:	0452      	lsls	r2, r2, #17
 8002ed4:	430a      	orrs	r2, r1
 8002ed6:	492a      	ldr	r1, [pc, #168]	; (8002f80 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002ed8:	4313      	orrs	r3, r2
 8002eda:	610b      	str	r3, [r1, #16]
 8002edc:	e027      	b.n	8002f2e <RCCEx_PLLSAI1_Config+0x18a>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8002ede:	683b      	ldr	r3, [r7, #0]
 8002ee0:	2b01      	cmp	r3, #1
 8002ee2:	d112      	bne.n	8002f0a <RCCEx_PLLSAI1_Config+0x166>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002ee4:	4b26      	ldr	r3, [pc, #152]	; (8002f80 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002ee6:	691b      	ldr	r3, [r3, #16]
 8002ee8:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8002eec:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002ef0:	687a      	ldr	r2, [r7, #4]
 8002ef2:	6892      	ldr	r2, [r2, #8]
 8002ef4:	0211      	lsls	r1, r2, #8
 8002ef6:	687a      	ldr	r2, [r7, #4]
 8002ef8:	6912      	ldr	r2, [r2, #16]
 8002efa:	0852      	lsrs	r2, r2, #1
 8002efc:	3a01      	subs	r2, #1
 8002efe:	0552      	lsls	r2, r2, #21
 8002f00:	430a      	orrs	r2, r1
 8002f02:	491f      	ldr	r1, [pc, #124]	; (8002f80 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002f04:	4313      	orrs	r3, r2
 8002f06:	610b      	str	r3, [r1, #16]
 8002f08:	e011      	b.n	8002f2e <RCCEx_PLLSAI1_Config+0x18a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002f0a:	4b1d      	ldr	r3, [pc, #116]	; (8002f80 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002f0c:	691b      	ldr	r3, [r3, #16]
 8002f0e:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8002f12:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002f16:	687a      	ldr	r2, [r7, #4]
 8002f18:	6892      	ldr	r2, [r2, #8]
 8002f1a:	0211      	lsls	r1, r2, #8
 8002f1c:	687a      	ldr	r2, [r7, #4]
 8002f1e:	6952      	ldr	r2, [r2, #20]
 8002f20:	0852      	lsrs	r2, r2, #1
 8002f22:	3a01      	subs	r2, #1
 8002f24:	0652      	lsls	r2, r2, #25
 8002f26:	430a      	orrs	r2, r1
 8002f28:	4915      	ldr	r1, [pc, #84]	; (8002f80 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002f2a:	4313      	orrs	r3, r2
 8002f2c:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8002f2e:	4b14      	ldr	r3, [pc, #80]	; (8002f80 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	4a13      	ldr	r2, [pc, #76]	; (8002f80 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002f34:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002f38:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002f3a:	f7fe fa3b 	bl	80013b4 <HAL_GetTick>
 8002f3e:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002f40:	e009      	b.n	8002f56 <RCCEx_PLLSAI1_Config+0x1b2>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002f42:	f7fe fa37 	bl	80013b4 <HAL_GetTick>
 8002f46:	4602      	mov	r2, r0
 8002f48:	68bb      	ldr	r3, [r7, #8]
 8002f4a:	1ad3      	subs	r3, r2, r3
 8002f4c:	2b02      	cmp	r3, #2
 8002f4e:	d902      	bls.n	8002f56 <RCCEx_PLLSAI1_Config+0x1b2>
        {
          status = HAL_TIMEOUT;
 8002f50:	2303      	movs	r3, #3
 8002f52:	73fb      	strb	r3, [r7, #15]
          break;
 8002f54:	e005      	b.n	8002f62 <RCCEx_PLLSAI1_Config+0x1be>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002f56:	4b0a      	ldr	r3, [pc, #40]	; (8002f80 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002f5e:	2b00      	cmp	r3, #0
 8002f60:	d0ef      	beq.n	8002f42 <RCCEx_PLLSAI1_Config+0x19e>
        }
      }

      if(status == HAL_OK)
 8002f62:	7bfb      	ldrb	r3, [r7, #15]
 8002f64:	2b00      	cmp	r3, #0
 8002f66:	d106      	bne.n	8002f76 <RCCEx_PLLSAI1_Config+0x1d2>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8002f68:	4b05      	ldr	r3, [pc, #20]	; (8002f80 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002f6a:	691a      	ldr	r2, [r3, #16]
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	699b      	ldr	r3, [r3, #24]
 8002f70:	4903      	ldr	r1, [pc, #12]	; (8002f80 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002f72:	4313      	orrs	r3, r2
 8002f74:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8002f76:	7bfb      	ldrb	r3, [r7, #15]
}
 8002f78:	4618      	mov	r0, r3
 8002f7a:	3710      	adds	r7, #16
 8002f7c:	46bd      	mov	sp, r7
 8002f7e:	bd80      	pop	{r7, pc}
 8002f80:	40021000 	.word	0x40021000

08002f84 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8002f84:	b580      	push	{r7, lr}
 8002f86:	b084      	sub	sp, #16
 8002f88:	af00      	add	r7, sp, #0
 8002f8a:	6078      	str	r0, [r7, #4]
 8002f8c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002f8e:	2300      	movs	r3, #0
 8002f90:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002f92:	4b68      	ldr	r3, [pc, #416]	; (8003134 <RCCEx_PLLSAI2_Config+0x1b0>)
 8002f94:	68db      	ldr	r3, [r3, #12]
 8002f96:	f003 0303 	and.w	r3, r3, #3
 8002f9a:	2b00      	cmp	r3, #0
 8002f9c:	d018      	beq.n	8002fd0 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8002f9e:	4b65      	ldr	r3, [pc, #404]	; (8003134 <RCCEx_PLLSAI2_Config+0x1b0>)
 8002fa0:	68db      	ldr	r3, [r3, #12]
 8002fa2:	f003 0203 	and.w	r2, r3, #3
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	429a      	cmp	r2, r3
 8002fac:	d10d      	bne.n	8002fca <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	681b      	ldr	r3, [r3, #0]
       ||
 8002fb2:	2b00      	cmp	r3, #0
 8002fb4:	d009      	beq.n	8002fca <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8002fb6:	4b5f      	ldr	r3, [pc, #380]	; (8003134 <RCCEx_PLLSAI2_Config+0x1b0>)
 8002fb8:	68db      	ldr	r3, [r3, #12]
 8002fba:	091b      	lsrs	r3, r3, #4
 8002fbc:	f003 0307 	and.w	r3, r3, #7
 8002fc0:	1c5a      	adds	r2, r3, #1
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	685b      	ldr	r3, [r3, #4]
       ||
 8002fc6:	429a      	cmp	r2, r3
 8002fc8:	d044      	beq.n	8003054 <RCCEx_PLLSAI2_Config+0xd0>
#endif
      )
    {
      status = HAL_ERROR;
 8002fca:	2301      	movs	r3, #1
 8002fcc:	73fb      	strb	r3, [r7, #15]
 8002fce:	e041      	b.n	8003054 <RCCEx_PLLSAI2_Config+0xd0>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	2b02      	cmp	r3, #2
 8002fd6:	d00c      	beq.n	8002ff2 <RCCEx_PLLSAI2_Config+0x6e>
 8002fd8:	2b03      	cmp	r3, #3
 8002fda:	d013      	beq.n	8003004 <RCCEx_PLLSAI2_Config+0x80>
 8002fdc:	2b01      	cmp	r3, #1
 8002fde:	d120      	bne.n	8003022 <RCCEx_PLLSAI2_Config+0x9e>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002fe0:	4b54      	ldr	r3, [pc, #336]	; (8003134 <RCCEx_PLLSAI2_Config+0x1b0>)
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	f003 0302 	and.w	r3, r3, #2
 8002fe8:	2b00      	cmp	r3, #0
 8002fea:	d11d      	bne.n	8003028 <RCCEx_PLLSAI2_Config+0xa4>
      {
        status = HAL_ERROR;
 8002fec:	2301      	movs	r3, #1
 8002fee:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002ff0:	e01a      	b.n	8003028 <RCCEx_PLLSAI2_Config+0xa4>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002ff2:	4b50      	ldr	r3, [pc, #320]	; (8003134 <RCCEx_PLLSAI2_Config+0x1b0>)
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002ffa:	2b00      	cmp	r3, #0
 8002ffc:	d116      	bne.n	800302c <RCCEx_PLLSAI2_Config+0xa8>
      {
        status = HAL_ERROR;
 8002ffe:	2301      	movs	r3, #1
 8003000:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003002:	e013      	b.n	800302c <RCCEx_PLLSAI2_Config+0xa8>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003004:	4b4b      	ldr	r3, [pc, #300]	; (8003134 <RCCEx_PLLSAI2_Config+0x1b0>)
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800300c:	2b00      	cmp	r3, #0
 800300e:	d10f      	bne.n	8003030 <RCCEx_PLLSAI2_Config+0xac>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003010:	4b48      	ldr	r3, [pc, #288]	; (8003134 <RCCEx_PLLSAI2_Config+0x1b0>)
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003018:	2b00      	cmp	r3, #0
 800301a:	d109      	bne.n	8003030 <RCCEx_PLLSAI2_Config+0xac>
        {
          status = HAL_ERROR;
 800301c:	2301      	movs	r3, #1
 800301e:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8003020:	e006      	b.n	8003030 <RCCEx_PLLSAI2_Config+0xac>
    default:
      status = HAL_ERROR;
 8003022:	2301      	movs	r3, #1
 8003024:	73fb      	strb	r3, [r7, #15]
      break;
 8003026:	e004      	b.n	8003032 <RCCEx_PLLSAI2_Config+0xae>
      break;
 8003028:	bf00      	nop
 800302a:	e002      	b.n	8003032 <RCCEx_PLLSAI2_Config+0xae>
      break;
 800302c:	bf00      	nop
 800302e:	e000      	b.n	8003032 <RCCEx_PLLSAI2_Config+0xae>
      break;
 8003030:	bf00      	nop
    }

    if(status == HAL_OK)
 8003032:	7bfb      	ldrb	r3, [r7, #15]
 8003034:	2b00      	cmp	r3, #0
 8003036:	d10d      	bne.n	8003054 <RCCEx_PLLSAI2_Config+0xd0>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8003038:	4b3e      	ldr	r3, [pc, #248]	; (8003134 <RCCEx_PLLSAI2_Config+0x1b0>)
 800303a:	68db      	ldr	r3, [r3, #12]
 800303c:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	6819      	ldr	r1, [r3, #0]
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	685b      	ldr	r3, [r3, #4]
 8003048:	3b01      	subs	r3, #1
 800304a:	011b      	lsls	r3, r3, #4
 800304c:	430b      	orrs	r3, r1
 800304e:	4939      	ldr	r1, [pc, #228]	; (8003134 <RCCEx_PLLSAI2_Config+0x1b0>)
 8003050:	4313      	orrs	r3, r2
 8003052:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8003054:	7bfb      	ldrb	r3, [r7, #15]
 8003056:	2b00      	cmp	r3, #0
 8003058:	d167      	bne.n	800312a <RCCEx_PLLSAI2_Config+0x1a6>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 800305a:	4b36      	ldr	r3, [pc, #216]	; (8003134 <RCCEx_PLLSAI2_Config+0x1b0>)
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	4a35      	ldr	r2, [pc, #212]	; (8003134 <RCCEx_PLLSAI2_Config+0x1b0>)
 8003060:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003064:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003066:	f7fe f9a5 	bl	80013b4 <HAL_GetTick>
 800306a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800306c:	e009      	b.n	8003082 <RCCEx_PLLSAI2_Config+0xfe>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 800306e:	f7fe f9a1 	bl	80013b4 <HAL_GetTick>
 8003072:	4602      	mov	r2, r0
 8003074:	68bb      	ldr	r3, [r7, #8]
 8003076:	1ad3      	subs	r3, r2, r3
 8003078:	2b02      	cmp	r3, #2
 800307a:	d902      	bls.n	8003082 <RCCEx_PLLSAI2_Config+0xfe>
      {
        status = HAL_TIMEOUT;
 800307c:	2303      	movs	r3, #3
 800307e:	73fb      	strb	r3, [r7, #15]
        break;
 8003080:	e005      	b.n	800308e <RCCEx_PLLSAI2_Config+0x10a>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003082:	4b2c      	ldr	r3, [pc, #176]	; (8003134 <RCCEx_PLLSAI2_Config+0x1b0>)
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800308a:	2b00      	cmp	r3, #0
 800308c:	d1ef      	bne.n	800306e <RCCEx_PLLSAI2_Config+0xea>
      }
    }

    if(status == HAL_OK)
 800308e:	7bfb      	ldrb	r3, [r7, #15]
 8003090:	2b00      	cmp	r3, #0
 8003092:	d14a      	bne.n	800312a <RCCEx_PLLSAI2_Config+0x1a6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8003094:	683b      	ldr	r3, [r7, #0]
 8003096:	2b00      	cmp	r3, #0
 8003098:	d111      	bne.n	80030be <RCCEx_PLLSAI2_Config+0x13a>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800309a:	4b26      	ldr	r3, [pc, #152]	; (8003134 <RCCEx_PLLSAI2_Config+0x1b0>)
 800309c:	695b      	ldr	r3, [r3, #20]
 800309e:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 80030a2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80030a6:	687a      	ldr	r2, [r7, #4]
 80030a8:	6892      	ldr	r2, [r2, #8]
 80030aa:	0211      	lsls	r1, r2, #8
 80030ac:	687a      	ldr	r2, [r7, #4]
 80030ae:	68d2      	ldr	r2, [r2, #12]
 80030b0:	0912      	lsrs	r2, r2, #4
 80030b2:	0452      	lsls	r2, r2, #17
 80030b4:	430a      	orrs	r2, r1
 80030b6:	491f      	ldr	r1, [pc, #124]	; (8003134 <RCCEx_PLLSAI2_Config+0x1b0>)
 80030b8:	4313      	orrs	r3, r2
 80030ba:	614b      	str	r3, [r1, #20]
 80030bc:	e011      	b.n	80030e2 <RCCEx_PLLSAI2_Config+0x15e>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80030be:	4b1d      	ldr	r3, [pc, #116]	; (8003134 <RCCEx_PLLSAI2_Config+0x1b0>)
 80030c0:	695b      	ldr	r3, [r3, #20]
 80030c2:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80030c6:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80030ca:	687a      	ldr	r2, [r7, #4]
 80030cc:	6892      	ldr	r2, [r2, #8]
 80030ce:	0211      	lsls	r1, r2, #8
 80030d0:	687a      	ldr	r2, [r7, #4]
 80030d2:	6912      	ldr	r2, [r2, #16]
 80030d4:	0852      	lsrs	r2, r2, #1
 80030d6:	3a01      	subs	r2, #1
 80030d8:	0652      	lsls	r2, r2, #25
 80030da:	430a      	orrs	r2, r1
 80030dc:	4915      	ldr	r1, [pc, #84]	; (8003134 <RCCEx_PLLSAI2_Config+0x1b0>)
 80030de:	4313      	orrs	r3, r2
 80030e0:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 80030e2:	4b14      	ldr	r3, [pc, #80]	; (8003134 <RCCEx_PLLSAI2_Config+0x1b0>)
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	4a13      	ldr	r2, [pc, #76]	; (8003134 <RCCEx_PLLSAI2_Config+0x1b0>)
 80030e8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80030ec:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80030ee:	f7fe f961 	bl	80013b4 <HAL_GetTick>
 80030f2:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80030f4:	e009      	b.n	800310a <RCCEx_PLLSAI2_Config+0x186>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80030f6:	f7fe f95d 	bl	80013b4 <HAL_GetTick>
 80030fa:	4602      	mov	r2, r0
 80030fc:	68bb      	ldr	r3, [r7, #8]
 80030fe:	1ad3      	subs	r3, r2, r3
 8003100:	2b02      	cmp	r3, #2
 8003102:	d902      	bls.n	800310a <RCCEx_PLLSAI2_Config+0x186>
        {
          status = HAL_TIMEOUT;
 8003104:	2303      	movs	r3, #3
 8003106:	73fb      	strb	r3, [r7, #15]
          break;
 8003108:	e005      	b.n	8003116 <RCCEx_PLLSAI2_Config+0x192>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800310a:	4b0a      	ldr	r3, [pc, #40]	; (8003134 <RCCEx_PLLSAI2_Config+0x1b0>)
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003112:	2b00      	cmp	r3, #0
 8003114:	d0ef      	beq.n	80030f6 <RCCEx_PLLSAI2_Config+0x172>
        }
      }

      if(status == HAL_OK)
 8003116:	7bfb      	ldrb	r3, [r7, #15]
 8003118:	2b00      	cmp	r3, #0
 800311a:	d106      	bne.n	800312a <RCCEx_PLLSAI2_Config+0x1a6>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 800311c:	4b05      	ldr	r3, [pc, #20]	; (8003134 <RCCEx_PLLSAI2_Config+0x1b0>)
 800311e:	695a      	ldr	r2, [r3, #20]
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	695b      	ldr	r3, [r3, #20]
 8003124:	4903      	ldr	r1, [pc, #12]	; (8003134 <RCCEx_PLLSAI2_Config+0x1b0>)
 8003126:	4313      	orrs	r3, r2
 8003128:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 800312a:	7bfb      	ldrb	r3, [r7, #15]
}
 800312c:	4618      	mov	r0, r3
 800312e:	3710      	adds	r7, #16
 8003130:	46bd      	mov	sp, r7
 8003132:	bd80      	pop	{r7, pc}
 8003134:	40021000 	.word	0x40021000

08003138 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003138:	b580      	push	{r7, lr}
 800313a:	b084      	sub	sp, #16
 800313c:	af00      	add	r7, sp, #0
 800313e:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	2b00      	cmp	r3, #0
 8003144:	d101      	bne.n	800314a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003146:	2301      	movs	r3, #1
 8003148:	e07c      	b.n	8003244 <HAL_SPI_Init+0x10c>
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	2200      	movs	r2, #0
 800314e:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8003156:	b2db      	uxtb	r3, r3
 8003158:	2b00      	cmp	r3, #0
 800315a:	d106      	bne.n	800316a <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	2200      	movs	r2, #0
 8003160:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003164:	6878      	ldr	r0, [r7, #4]
 8003166:	f7fd fe33 	bl	8000dd0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	2202      	movs	r2, #2
 800316e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	681a      	ldr	r2, [r3, #0]
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003180:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	68db      	ldr	r3, [r3, #12]
 8003186:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800318a:	d902      	bls.n	8003192 <HAL_SPI_Init+0x5a>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800318c:	2300      	movs	r3, #0
 800318e:	60fb      	str	r3, [r7, #12]
 8003190:	e002      	b.n	8003198 <HAL_SPI_Init+0x60>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8003192:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003196:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	68db      	ldr	r3, [r3, #12]
 800319c:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 80031a0:	d007      	beq.n	80031b2 <HAL_SPI_Init+0x7a>
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	68db      	ldr	r3, [r3, #12]
 80031a6:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80031aa:	d002      	beq.n	80031b2 <HAL_SPI_Init+0x7a>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	2200      	movs	r2, #0
 80031b0:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Align the CRC Length on the data size */
  if (hspi->Init.CRCLength == SPI_CRC_LENGTH_DATASIZE)
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031b6:	2b00      	cmp	r3, #0
 80031b8:	d10b      	bne.n	80031d2 <HAL_SPI_Init+0x9a>
  {
    /* CRC Length aligned on the data size : value set by default */
    if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	68db      	ldr	r3, [r3, #12]
 80031be:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80031c2:	d903      	bls.n	80031cc <HAL_SPI_Init+0x94>
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_16BIT;
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	2202      	movs	r2, #2
 80031c8:	631a      	str	r2, [r3, #48]	; 0x30
 80031ca:	e002      	b.n	80031d2 <HAL_SPI_Init+0x9a>
    }
    else
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_8BIT;
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	2201      	movs	r2, #1
 80031d0:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction |
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	685a      	ldr	r2, [r3, #4]
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	689b      	ldr	r3, [r3, #8]
 80031da:	431a      	orrs	r2, r3
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	691b      	ldr	r3, [r3, #16]
 80031e0:	431a      	orrs	r2, r3
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	695b      	ldr	r3, [r3, #20]
 80031e6:	431a      	orrs	r2, r3
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	699b      	ldr	r3, [r3, #24]
 80031ec:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80031f0:	431a      	orrs	r2, r3
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	69db      	ldr	r3, [r3, #28]
 80031f6:	431a      	orrs	r2, r3
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	6a1b      	ldr	r3, [r3, #32]
 80031fc:	ea42 0103 	orr.w	r1, r2, r3
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	430a      	orrs	r2, r1
 800320a:	601a      	str	r2, [r3, #0]
    hspi->Instance->CR1 |= SPI_CR1_CRCL;
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode |
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	699b      	ldr	r3, [r3, #24]
 8003210:	0c1b      	lsrs	r3, r3, #16
 8003212:	f003 0204 	and.w	r2, r3, #4
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800321a:	431a      	orrs	r2, r3
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003220:	431a      	orrs	r2, r3
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	68db      	ldr	r3, [r3, #12]
 8003226:	ea42 0103 	orr.w	r1, r2, r3
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	68fa      	ldr	r2, [r7, #12]
 8003230:	430a      	orrs	r2, r1
 8003232:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	2200      	movs	r2, #0
 8003238:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	2201      	movs	r2, #1
 800323e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8003242:	2300      	movs	r3, #0
}
 8003244:	4618      	mov	r0, r3
 8003246:	3710      	adds	r7, #16
 8003248:	46bd      	mov	sp, r7
 800324a:	bd80      	pop	{r7, pc}

0800324c <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800324c:	b580      	push	{r7, lr}
 800324e:	b088      	sub	sp, #32
 8003250:	af00      	add	r7, sp, #0
 8003252:	60f8      	str	r0, [r7, #12]
 8003254:	60b9      	str	r1, [r7, #8]
 8003256:	603b      	str	r3, [r7, #0]
 8003258:	4613      	mov	r3, r2
 800325a:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800325c:	2300      	movs	r3, #0
 800325e:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003260:	68fb      	ldr	r3, [r7, #12]
 8003262:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8003266:	2b01      	cmp	r3, #1
 8003268:	d101      	bne.n	800326e <HAL_SPI_Transmit+0x22>
 800326a:	2302      	movs	r3, #2
 800326c:	e150      	b.n	8003510 <HAL_SPI_Transmit+0x2c4>
 800326e:	68fb      	ldr	r3, [r7, #12]
 8003270:	2201      	movs	r2, #1
 8003272:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003276:	f7fe f89d 	bl	80013b4 <HAL_GetTick>
 800327a:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 800327c:	88fb      	ldrh	r3, [r7, #6]
 800327e:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8003280:	68fb      	ldr	r3, [r7, #12]
 8003282:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8003286:	b2db      	uxtb	r3, r3
 8003288:	2b01      	cmp	r3, #1
 800328a:	d002      	beq.n	8003292 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 800328c:	2302      	movs	r3, #2
 800328e:	77fb      	strb	r3, [r7, #31]
    goto error;
 8003290:	e135      	b.n	80034fe <HAL_SPI_Transmit+0x2b2>
  }

  if ((pData == NULL) || (Size == 0U))
 8003292:	68bb      	ldr	r3, [r7, #8]
 8003294:	2b00      	cmp	r3, #0
 8003296:	d002      	beq.n	800329e <HAL_SPI_Transmit+0x52>
 8003298:	88fb      	ldrh	r3, [r7, #6]
 800329a:	2b00      	cmp	r3, #0
 800329c:	d102      	bne.n	80032a4 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 800329e:	2301      	movs	r3, #1
 80032a0:	77fb      	strb	r3, [r7, #31]
    goto error;
 80032a2:	e12c      	b.n	80034fe <HAL_SPI_Transmit+0x2b2>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80032a4:	68fb      	ldr	r3, [r7, #12]
 80032a6:	2203      	movs	r2, #3
 80032a8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80032ac:	68fb      	ldr	r3, [r7, #12]
 80032ae:	2200      	movs	r2, #0
 80032b0:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80032b2:	68fb      	ldr	r3, [r7, #12]
 80032b4:	68ba      	ldr	r2, [r7, #8]
 80032b6:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 80032b8:	68fb      	ldr	r3, [r7, #12]
 80032ba:	88fa      	ldrh	r2, [r7, #6]
 80032bc:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 80032be:	68fb      	ldr	r3, [r7, #12]
 80032c0:	88fa      	ldrh	r2, [r7, #6]
 80032c2:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80032c4:	68fb      	ldr	r3, [r7, #12]
 80032c6:	2200      	movs	r2, #0
 80032c8:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 80032ca:	68fb      	ldr	r3, [r7, #12]
 80032cc:	2200      	movs	r2, #0
 80032ce:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 80032d2:	68fb      	ldr	r3, [r7, #12]
 80032d4:	2200      	movs	r2, #0
 80032d6:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 80032da:	68fb      	ldr	r3, [r7, #12]
 80032dc:	2200      	movs	r2, #0
 80032de:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 80032e0:	68fb      	ldr	r3, [r7, #12]
 80032e2:	2200      	movs	r2, #0
 80032e4:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80032e6:	68fb      	ldr	r3, [r7, #12]
 80032e8:	689b      	ldr	r3, [r3, #8]
 80032ea:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80032ee:	d107      	bne.n	8003300 <HAL_SPI_Transmit+0xb4>
  {
    SPI_1LINE_TX(hspi);
 80032f0:	68fb      	ldr	r3, [r7, #12]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	681a      	ldr	r2, [r3, #0]
 80032f6:	68fb      	ldr	r3, [r7, #12]
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80032fe:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003300:	68fb      	ldr	r3, [r7, #12]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800330a:	2b40      	cmp	r3, #64	; 0x40
 800330c:	d007      	beq.n	800331e <HAL_SPI_Transmit+0xd2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800330e:	68fb      	ldr	r3, [r7, #12]
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	681a      	ldr	r2, [r3, #0]
 8003314:	68fb      	ldr	r3, [r7, #12]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800331c:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800331e:	68fb      	ldr	r3, [r7, #12]
 8003320:	68db      	ldr	r3, [r3, #12]
 8003322:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003326:	d94b      	bls.n	80033c0 <HAL_SPI_Transmit+0x174>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003328:	68fb      	ldr	r3, [r7, #12]
 800332a:	685b      	ldr	r3, [r3, #4]
 800332c:	2b00      	cmp	r3, #0
 800332e:	d002      	beq.n	8003336 <HAL_SPI_Transmit+0xea>
 8003330:	8afb      	ldrh	r3, [r7, #22]
 8003332:	2b01      	cmp	r3, #1
 8003334:	d13e      	bne.n	80033b4 <HAL_SPI_Transmit+0x168>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003336:	68fb      	ldr	r3, [r7, #12]
 8003338:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800333a:	881a      	ldrh	r2, [r3, #0]
 800333c:	68fb      	ldr	r3, [r7, #12]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003342:	68fb      	ldr	r3, [r7, #12]
 8003344:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003346:	1c9a      	adds	r2, r3, #2
 8003348:	68fb      	ldr	r3, [r7, #12]
 800334a:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 800334c:	68fb      	ldr	r3, [r7, #12]
 800334e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003350:	b29b      	uxth	r3, r3
 8003352:	3b01      	subs	r3, #1
 8003354:	b29a      	uxth	r2, r3
 8003356:	68fb      	ldr	r3, [r7, #12]
 8003358:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800335a:	e02b      	b.n	80033b4 <HAL_SPI_Transmit+0x168>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800335c:	68fb      	ldr	r3, [r7, #12]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	689b      	ldr	r3, [r3, #8]
 8003362:	f003 0302 	and.w	r3, r3, #2
 8003366:	2b02      	cmp	r3, #2
 8003368:	d112      	bne.n	8003390 <HAL_SPI_Transmit+0x144>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800336a:	68fb      	ldr	r3, [r7, #12]
 800336c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800336e:	881a      	ldrh	r2, [r3, #0]
 8003370:	68fb      	ldr	r3, [r7, #12]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003376:	68fb      	ldr	r3, [r7, #12]
 8003378:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800337a:	1c9a      	adds	r2, r3, #2
 800337c:	68fb      	ldr	r3, [r7, #12]
 800337e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8003380:	68fb      	ldr	r3, [r7, #12]
 8003382:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003384:	b29b      	uxth	r3, r3
 8003386:	3b01      	subs	r3, #1
 8003388:	b29a      	uxth	r2, r3
 800338a:	68fb      	ldr	r3, [r7, #12]
 800338c:	87da      	strh	r2, [r3, #62]	; 0x3e
 800338e:	e011      	b.n	80033b4 <HAL_SPI_Transmit+0x168>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003390:	f7fe f810 	bl	80013b4 <HAL_GetTick>
 8003394:	4602      	mov	r2, r0
 8003396:	69bb      	ldr	r3, [r7, #24]
 8003398:	1ad3      	subs	r3, r2, r3
 800339a:	683a      	ldr	r2, [r7, #0]
 800339c:	429a      	cmp	r2, r3
 800339e:	d803      	bhi.n	80033a8 <HAL_SPI_Transmit+0x15c>
 80033a0:	683b      	ldr	r3, [r7, #0]
 80033a2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80033a6:	d102      	bne.n	80033ae <HAL_SPI_Transmit+0x162>
 80033a8:	683b      	ldr	r3, [r7, #0]
 80033aa:	2b00      	cmp	r3, #0
 80033ac:	d102      	bne.n	80033b4 <HAL_SPI_Transmit+0x168>
        {
          errorcode = HAL_TIMEOUT;
 80033ae:	2303      	movs	r3, #3
 80033b0:	77fb      	strb	r3, [r7, #31]
          goto error;
 80033b2:	e0a4      	b.n	80034fe <HAL_SPI_Transmit+0x2b2>
    while (hspi->TxXferCount > 0U)
 80033b4:	68fb      	ldr	r3, [r7, #12]
 80033b6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80033b8:	b29b      	uxth	r3, r3
 80033ba:	2b00      	cmp	r3, #0
 80033bc:	d1ce      	bne.n	800335c <HAL_SPI_Transmit+0x110>
 80033be:	e07c      	b.n	80034ba <HAL_SPI_Transmit+0x26e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80033c0:	68fb      	ldr	r3, [r7, #12]
 80033c2:	685b      	ldr	r3, [r3, #4]
 80033c4:	2b00      	cmp	r3, #0
 80033c6:	d002      	beq.n	80033ce <HAL_SPI_Transmit+0x182>
 80033c8:	8afb      	ldrh	r3, [r7, #22]
 80033ca:	2b01      	cmp	r3, #1
 80033cc:	d170      	bne.n	80034b0 <HAL_SPI_Transmit+0x264>
    {
      if (hspi->TxXferCount > 1U)
 80033ce:	68fb      	ldr	r3, [r7, #12]
 80033d0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80033d2:	b29b      	uxth	r3, r3
 80033d4:	2b01      	cmp	r3, #1
 80033d6:	d912      	bls.n	80033fe <HAL_SPI_Transmit+0x1b2>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80033d8:	68fb      	ldr	r3, [r7, #12]
 80033da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80033dc:	881a      	ldrh	r2, [r3, #0]
 80033de:	68fb      	ldr	r3, [r7, #12]
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80033e4:	68fb      	ldr	r3, [r7, #12]
 80033e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80033e8:	1c9a      	adds	r2, r3, #2
 80033ea:	68fb      	ldr	r3, [r7, #12]
 80033ec:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 80033ee:	68fb      	ldr	r3, [r7, #12]
 80033f0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80033f2:	b29b      	uxth	r3, r3
 80033f4:	3b02      	subs	r3, #2
 80033f6:	b29a      	uxth	r2, r3
 80033f8:	68fb      	ldr	r3, [r7, #12]
 80033fa:	87da      	strh	r2, [r3, #62]	; 0x3e
 80033fc:	e058      	b.n	80034b0 <HAL_SPI_Transmit+0x264>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80033fe:	68fb      	ldr	r3, [r7, #12]
 8003400:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003402:	68fb      	ldr	r3, [r7, #12]
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	330c      	adds	r3, #12
 8003408:	7812      	ldrb	r2, [r2, #0]
 800340a:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 800340c:	68fb      	ldr	r3, [r7, #12]
 800340e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003410:	1c5a      	adds	r2, r3, #1
 8003412:	68fb      	ldr	r3, [r7, #12]
 8003414:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8003416:	68fb      	ldr	r3, [r7, #12]
 8003418:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800341a:	b29b      	uxth	r3, r3
 800341c:	3b01      	subs	r3, #1
 800341e:	b29a      	uxth	r2, r3
 8003420:	68fb      	ldr	r3, [r7, #12]
 8003422:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8003424:	e044      	b.n	80034b0 <HAL_SPI_Transmit+0x264>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003426:	68fb      	ldr	r3, [r7, #12]
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	689b      	ldr	r3, [r3, #8]
 800342c:	f003 0302 	and.w	r3, r3, #2
 8003430:	2b02      	cmp	r3, #2
 8003432:	d12b      	bne.n	800348c <HAL_SPI_Transmit+0x240>
      {
        if (hspi->TxXferCount > 1U)
 8003434:	68fb      	ldr	r3, [r7, #12]
 8003436:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003438:	b29b      	uxth	r3, r3
 800343a:	2b01      	cmp	r3, #1
 800343c:	d912      	bls.n	8003464 <HAL_SPI_Transmit+0x218>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800343e:	68fb      	ldr	r3, [r7, #12]
 8003440:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003442:	881a      	ldrh	r2, [r3, #0]
 8003444:	68fb      	ldr	r3, [r7, #12]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800344a:	68fb      	ldr	r3, [r7, #12]
 800344c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800344e:	1c9a      	adds	r2, r3, #2
 8003450:	68fb      	ldr	r3, [r7, #12]
 8003452:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8003454:	68fb      	ldr	r3, [r7, #12]
 8003456:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003458:	b29b      	uxth	r3, r3
 800345a:	3b02      	subs	r3, #2
 800345c:	b29a      	uxth	r2, r3
 800345e:	68fb      	ldr	r3, [r7, #12]
 8003460:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003462:	e025      	b.n	80034b0 <HAL_SPI_Transmit+0x264>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003464:	68fb      	ldr	r3, [r7, #12]
 8003466:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003468:	68fb      	ldr	r3, [r7, #12]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	330c      	adds	r3, #12
 800346e:	7812      	ldrb	r2, [r2, #0]
 8003470:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8003472:	68fb      	ldr	r3, [r7, #12]
 8003474:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003476:	1c5a      	adds	r2, r3, #1
 8003478:	68fb      	ldr	r3, [r7, #12]
 800347a:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 800347c:	68fb      	ldr	r3, [r7, #12]
 800347e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003480:	b29b      	uxth	r3, r3
 8003482:	3b01      	subs	r3, #1
 8003484:	b29a      	uxth	r2, r3
 8003486:	68fb      	ldr	r3, [r7, #12]
 8003488:	87da      	strh	r2, [r3, #62]	; 0x3e
 800348a:	e011      	b.n	80034b0 <HAL_SPI_Transmit+0x264>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800348c:	f7fd ff92 	bl	80013b4 <HAL_GetTick>
 8003490:	4602      	mov	r2, r0
 8003492:	69bb      	ldr	r3, [r7, #24]
 8003494:	1ad3      	subs	r3, r2, r3
 8003496:	683a      	ldr	r2, [r7, #0]
 8003498:	429a      	cmp	r2, r3
 800349a:	d803      	bhi.n	80034a4 <HAL_SPI_Transmit+0x258>
 800349c:	683b      	ldr	r3, [r7, #0]
 800349e:	f1b3 3fff 	cmp.w	r3, #4294967295
 80034a2:	d102      	bne.n	80034aa <HAL_SPI_Transmit+0x25e>
 80034a4:	683b      	ldr	r3, [r7, #0]
 80034a6:	2b00      	cmp	r3, #0
 80034a8:	d102      	bne.n	80034b0 <HAL_SPI_Transmit+0x264>
        {
          errorcode = HAL_TIMEOUT;
 80034aa:	2303      	movs	r3, #3
 80034ac:	77fb      	strb	r3, [r7, #31]
          goto error;
 80034ae:	e026      	b.n	80034fe <HAL_SPI_Transmit+0x2b2>
    while (hspi->TxXferCount > 0U)
 80034b0:	68fb      	ldr	r3, [r7, #12]
 80034b2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80034b4:	b29b      	uxth	r3, r3
 80034b6:	2b00      	cmp	r3, #0
 80034b8:	d1b5      	bne.n	8003426 <HAL_SPI_Transmit+0x1da>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80034ba:	69ba      	ldr	r2, [r7, #24]
 80034bc:	6839      	ldr	r1, [r7, #0]
 80034be:	68f8      	ldr	r0, [r7, #12]
 80034c0:	f000 f901 	bl	80036c6 <SPI_EndRxTxTransaction>
 80034c4:	4603      	mov	r3, r0
 80034c6:	2b00      	cmp	r3, #0
 80034c8:	d002      	beq.n	80034d0 <HAL_SPI_Transmit+0x284>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80034ca:	68fb      	ldr	r3, [r7, #12]
 80034cc:	2220      	movs	r2, #32
 80034ce:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80034d0:	68fb      	ldr	r3, [r7, #12]
 80034d2:	689b      	ldr	r3, [r3, #8]
 80034d4:	2b00      	cmp	r3, #0
 80034d6:	d10a      	bne.n	80034ee <HAL_SPI_Transmit+0x2a2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80034d8:	2300      	movs	r3, #0
 80034da:	613b      	str	r3, [r7, #16]
 80034dc:	68fb      	ldr	r3, [r7, #12]
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	68db      	ldr	r3, [r3, #12]
 80034e2:	613b      	str	r3, [r7, #16]
 80034e4:	68fb      	ldr	r3, [r7, #12]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	689b      	ldr	r3, [r3, #8]
 80034ea:	613b      	str	r3, [r7, #16]
 80034ec:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80034ee:	68fb      	ldr	r3, [r7, #12]
 80034f0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80034f2:	2b00      	cmp	r3, #0
 80034f4:	d002      	beq.n	80034fc <HAL_SPI_Transmit+0x2b0>
  {
    errorcode = HAL_ERROR;
 80034f6:	2301      	movs	r3, #1
 80034f8:	77fb      	strb	r3, [r7, #31]
 80034fa:	e000      	b.n	80034fe <HAL_SPI_Transmit+0x2b2>
  }

error:
 80034fc:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80034fe:	68fb      	ldr	r3, [r7, #12]
 8003500:	2201      	movs	r2, #1
 8003502:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8003506:	68fb      	ldr	r3, [r7, #12]
 8003508:	2200      	movs	r2, #0
 800350a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 800350e:	7ffb      	ldrb	r3, [r7, #31]
}
 8003510:	4618      	mov	r0, r3
 8003512:	3720      	adds	r7, #32
 8003514:	46bd      	mov	sp, r7
 8003516:	bd80      	pop	{r7, pc}

08003518 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003518:	b580      	push	{r7, lr}
 800351a:	b084      	sub	sp, #16
 800351c:	af00      	add	r7, sp, #0
 800351e:	60f8      	str	r0, [r7, #12]
 8003520:	60b9      	str	r1, [r7, #8]
 8003522:	603b      	str	r3, [r7, #0]
 8003524:	4613      	mov	r3, r2
 8003526:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003528:	e04c      	b.n	80035c4 <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 800352a:	683b      	ldr	r3, [r7, #0]
 800352c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003530:	d048      	beq.n	80035c4 <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 8003532:	f7fd ff3f 	bl	80013b4 <HAL_GetTick>
 8003536:	4602      	mov	r2, r0
 8003538:	69bb      	ldr	r3, [r7, #24]
 800353a:	1ad3      	subs	r3, r2, r3
 800353c:	683a      	ldr	r2, [r7, #0]
 800353e:	429a      	cmp	r2, r3
 8003540:	d902      	bls.n	8003548 <SPI_WaitFlagStateUntilTimeout+0x30>
 8003542:	683b      	ldr	r3, [r7, #0]
 8003544:	2b00      	cmp	r3, #0
 8003546:	d13d      	bne.n	80035c4 <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003548:	68fb      	ldr	r3, [r7, #12]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	685a      	ldr	r2, [r3, #4]
 800354e:	68fb      	ldr	r3, [r7, #12]
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8003556:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003558:	68fb      	ldr	r3, [r7, #12]
 800355a:	685b      	ldr	r3, [r3, #4]
 800355c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003560:	d111      	bne.n	8003586 <SPI_WaitFlagStateUntilTimeout+0x6e>
 8003562:	68fb      	ldr	r3, [r7, #12]
 8003564:	689b      	ldr	r3, [r3, #8]
 8003566:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800356a:	d004      	beq.n	8003576 <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800356c:	68fb      	ldr	r3, [r7, #12]
 800356e:	689b      	ldr	r3, [r3, #8]
 8003570:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003574:	d107      	bne.n	8003586 <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003576:	68fb      	ldr	r3, [r7, #12]
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	681a      	ldr	r2, [r3, #0]
 800357c:	68fb      	ldr	r3, [r7, #12]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003584:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003586:	68fb      	ldr	r3, [r7, #12]
 8003588:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800358a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800358e:	d10f      	bne.n	80035b0 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 8003590:	68fb      	ldr	r3, [r7, #12]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	681a      	ldr	r2, [r3, #0]
 8003596:	68fb      	ldr	r3, [r7, #12]
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800359e:	601a      	str	r2, [r3, #0]
 80035a0:	68fb      	ldr	r3, [r7, #12]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	681a      	ldr	r2, [r3, #0]
 80035a6:	68fb      	ldr	r3, [r7, #12]
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80035ae:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80035b0:	68fb      	ldr	r3, [r7, #12]
 80035b2:	2201      	movs	r2, #1
 80035b4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80035b8:	68fb      	ldr	r3, [r7, #12]
 80035ba:	2200      	movs	r2, #0
 80035bc:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 80035c0:	2303      	movs	r3, #3
 80035c2:	e00f      	b.n	80035e4 <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80035c4:	68fb      	ldr	r3, [r7, #12]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	689a      	ldr	r2, [r3, #8]
 80035ca:	68bb      	ldr	r3, [r7, #8]
 80035cc:	4013      	ands	r3, r2
 80035ce:	68ba      	ldr	r2, [r7, #8]
 80035d0:	429a      	cmp	r2, r3
 80035d2:	bf0c      	ite	eq
 80035d4:	2301      	moveq	r3, #1
 80035d6:	2300      	movne	r3, #0
 80035d8:	b2db      	uxtb	r3, r3
 80035da:	461a      	mov	r2, r3
 80035dc:	79fb      	ldrb	r3, [r7, #7]
 80035de:	429a      	cmp	r2, r3
 80035e0:	d1a3      	bne.n	800352a <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 80035e2:	2300      	movs	r3, #0
}
 80035e4:	4618      	mov	r0, r3
 80035e6:	3710      	adds	r7, #16
 80035e8:	46bd      	mov	sp, r7
 80035ea:	bd80      	pop	{r7, pc}

080035ec <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80035ec:	b580      	push	{r7, lr}
 80035ee:	b084      	sub	sp, #16
 80035f0:	af00      	add	r7, sp, #0
 80035f2:	60f8      	str	r0, [r7, #12]
 80035f4:	60b9      	str	r1, [r7, #8]
 80035f6:	607a      	str	r2, [r7, #4]
 80035f8:	603b      	str	r3, [r7, #0]
  while ((hspi->Instance->SR & Fifo) != State)
 80035fa:	e057      	b.n	80036ac <SPI_WaitFifoStateUntilTimeout+0xc0>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 80035fc:	68bb      	ldr	r3, [r7, #8]
 80035fe:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8003602:	d106      	bne.n	8003612 <SPI_WaitFifoStateUntilTimeout+0x26>
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	2b00      	cmp	r3, #0
 8003608:	d103      	bne.n	8003612 <SPI_WaitFifoStateUntilTimeout+0x26>
    {
      /* Read 8bit CRC to flush Data Register */
      READ_REG(*((__IO uint8_t *)&hspi->Instance->DR));
 800360a:	68fb      	ldr	r3, [r7, #12]
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	330c      	adds	r3, #12
 8003610:	781b      	ldrb	r3, [r3, #0]
    }

    if (Timeout != HAL_MAX_DELAY)
 8003612:	683b      	ldr	r3, [r7, #0]
 8003614:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003618:	d048      	beq.n	80036ac <SPI_WaitFifoStateUntilTimeout+0xc0>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 800361a:	f7fd fecb 	bl	80013b4 <HAL_GetTick>
 800361e:	4602      	mov	r2, r0
 8003620:	69bb      	ldr	r3, [r7, #24]
 8003622:	1ad3      	subs	r3, r2, r3
 8003624:	683a      	ldr	r2, [r7, #0]
 8003626:	429a      	cmp	r2, r3
 8003628:	d902      	bls.n	8003630 <SPI_WaitFifoStateUntilTimeout+0x44>
 800362a:	683b      	ldr	r3, [r7, #0]
 800362c:	2b00      	cmp	r3, #0
 800362e:	d13d      	bne.n	80036ac <SPI_WaitFifoStateUntilTimeout+0xc0>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003630:	68fb      	ldr	r3, [r7, #12]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	685a      	ldr	r2, [r3, #4]
 8003636:	68fb      	ldr	r3, [r7, #12]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800363e:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003640:	68fb      	ldr	r3, [r7, #12]
 8003642:	685b      	ldr	r3, [r3, #4]
 8003644:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003648:	d111      	bne.n	800366e <SPI_WaitFifoStateUntilTimeout+0x82>
 800364a:	68fb      	ldr	r3, [r7, #12]
 800364c:	689b      	ldr	r3, [r3, #8]
 800364e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003652:	d004      	beq.n	800365e <SPI_WaitFifoStateUntilTimeout+0x72>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003654:	68fb      	ldr	r3, [r7, #12]
 8003656:	689b      	ldr	r3, [r3, #8]
 8003658:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800365c:	d107      	bne.n	800366e <SPI_WaitFifoStateUntilTimeout+0x82>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800365e:	68fb      	ldr	r3, [r7, #12]
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	681a      	ldr	r2, [r3, #0]
 8003664:	68fb      	ldr	r3, [r7, #12]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800366c:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800366e:	68fb      	ldr	r3, [r7, #12]
 8003670:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003672:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003676:	d10f      	bne.n	8003698 <SPI_WaitFifoStateUntilTimeout+0xac>
        {
          SPI_RESET_CRC(hspi);
 8003678:	68fb      	ldr	r3, [r7, #12]
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	681a      	ldr	r2, [r3, #0]
 800367e:	68fb      	ldr	r3, [r7, #12]
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003686:	601a      	str	r2, [r3, #0]
 8003688:	68fb      	ldr	r3, [r7, #12]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	681a      	ldr	r2, [r3, #0]
 800368e:	68fb      	ldr	r3, [r7, #12]
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003696:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003698:	68fb      	ldr	r3, [r7, #12]
 800369a:	2201      	movs	r2, #1
 800369c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80036a0:	68fb      	ldr	r3, [r7, #12]
 80036a2:	2200      	movs	r2, #0
 80036a4:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 80036a8:	2303      	movs	r3, #3
 80036aa:	e008      	b.n	80036be <SPI_WaitFifoStateUntilTimeout+0xd2>
  while ((hspi->Instance->SR & Fifo) != State)
 80036ac:	68fb      	ldr	r3, [r7, #12]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	689a      	ldr	r2, [r3, #8]
 80036b2:	68bb      	ldr	r3, [r7, #8]
 80036b4:	4013      	ands	r3, r2
 80036b6:	687a      	ldr	r2, [r7, #4]
 80036b8:	429a      	cmp	r2, r3
 80036ba:	d19f      	bne.n	80035fc <SPI_WaitFifoStateUntilTimeout+0x10>
      }
    }
  }

  return HAL_OK;
 80036bc:	2300      	movs	r3, #0
}
 80036be:	4618      	mov	r0, r3
 80036c0:	3710      	adds	r7, #16
 80036c2:	46bd      	mov	sp, r7
 80036c4:	bd80      	pop	{r7, pc}

080036c6 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80036c6:	b580      	push	{r7, lr}
 80036c8:	b086      	sub	sp, #24
 80036ca:	af02      	add	r7, sp, #8
 80036cc:	60f8      	str	r0, [r7, #12]
 80036ce:	60b9      	str	r1, [r7, #8]
 80036d0:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	9300      	str	r3, [sp, #0]
 80036d6:	68bb      	ldr	r3, [r7, #8]
 80036d8:	2200      	movs	r2, #0
 80036da:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 80036de:	68f8      	ldr	r0, [r7, #12]
 80036e0:	f7ff ff84 	bl	80035ec <SPI_WaitFifoStateUntilTimeout>
 80036e4:	4603      	mov	r3, r0
 80036e6:	2b00      	cmp	r3, #0
 80036e8:	d007      	beq.n	80036fa <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80036ea:	68fb      	ldr	r3, [r7, #12]
 80036ec:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80036ee:	f043 0220 	orr.w	r2, r3, #32
 80036f2:	68fb      	ldr	r3, [r7, #12]
 80036f4:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80036f6:	2303      	movs	r3, #3
 80036f8:	e027      	b.n	800374a <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	9300      	str	r3, [sp, #0]
 80036fe:	68bb      	ldr	r3, [r7, #8]
 8003700:	2200      	movs	r2, #0
 8003702:	2180      	movs	r1, #128	; 0x80
 8003704:	68f8      	ldr	r0, [r7, #12]
 8003706:	f7ff ff07 	bl	8003518 <SPI_WaitFlagStateUntilTimeout>
 800370a:	4603      	mov	r3, r0
 800370c:	2b00      	cmp	r3, #0
 800370e:	d007      	beq.n	8003720 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003710:	68fb      	ldr	r3, [r7, #12]
 8003712:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003714:	f043 0220 	orr.w	r2, r3, #32
 8003718:	68fb      	ldr	r3, [r7, #12]
 800371a:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800371c:	2303      	movs	r3, #3
 800371e:	e014      	b.n	800374a <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	9300      	str	r3, [sp, #0]
 8003724:	68bb      	ldr	r3, [r7, #8]
 8003726:	2200      	movs	r2, #0
 8003728:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 800372c:	68f8      	ldr	r0, [r7, #12]
 800372e:	f7ff ff5d 	bl	80035ec <SPI_WaitFifoStateUntilTimeout>
 8003732:	4603      	mov	r3, r0
 8003734:	2b00      	cmp	r3, #0
 8003736:	d007      	beq.n	8003748 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003738:	68fb      	ldr	r3, [r7, #12]
 800373a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800373c:	f043 0220 	orr.w	r2, r3, #32
 8003740:	68fb      	ldr	r3, [r7, #12]
 8003742:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8003744:	2303      	movs	r3, #3
 8003746:	e000      	b.n	800374a <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8003748:	2300      	movs	r3, #0
}
 800374a:	4618      	mov	r0, r3
 800374c:	3710      	adds	r7, #16
 800374e:	46bd      	mov	sp, r7
 8003750:	bd80      	pop	{r7, pc}

08003752 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003752:	b580      	push	{r7, lr}
 8003754:	b082      	sub	sp, #8
 8003756:	af00      	add	r7, sp, #0
 8003758:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	2b00      	cmp	r3, #0
 800375e:	d101      	bne.n	8003764 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003760:	2301      	movs	r3, #1
 8003762:	e040      	b.n	80037e6 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003768:	2b00      	cmp	r3, #0
 800376a:	d106      	bne.n	800377a <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	2200      	movs	r2, #0
 8003770:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003774:	6878      	ldr	r0, [r7, #4]
 8003776:	f7fd fcc3 	bl	8001100 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	2224      	movs	r2, #36	; 0x24
 800377e:	675a      	str	r2, [r3, #116]	; 0x74

  __HAL_UART_DISABLE(huart);
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	681a      	ldr	r2, [r3, #0]
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	f022 0201 	bic.w	r2, r2, #1
 800378e:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003790:	6878      	ldr	r0, [r7, #4]
 8003792:	f000 f82d 	bl	80037f0 <UART_SetConfig>
 8003796:	4603      	mov	r3, r0
 8003798:	2b01      	cmp	r3, #1
 800379a:	d101      	bne.n	80037a0 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800379c:	2301      	movs	r3, #1
 800379e:	e022      	b.n	80037e6 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037a4:	2b00      	cmp	r3, #0
 80037a6:	d002      	beq.n	80037ae <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80037a8:	6878      	ldr	r0, [r7, #4]
 80037aa:	f000 fb69 	bl	8003e80 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	685a      	ldr	r2, [r3, #4]
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80037bc:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	689a      	ldr	r2, [r3, #8]
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80037cc:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	681a      	ldr	r2, [r3, #0]
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	f042 0201 	orr.w	r2, r2, #1
 80037dc:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80037de:	6878      	ldr	r0, [r7, #4]
 80037e0:	f000 fbf0 	bl	8003fc4 <UART_CheckIdleState>
 80037e4:	4603      	mov	r3, r0
}
 80037e6:	4618      	mov	r0, r3
 80037e8:	3708      	adds	r7, #8
 80037ea:	46bd      	mov	sp, r7
 80037ec:	bd80      	pop	{r7, pc}
	...

080037f0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80037f0:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 80037f4:	b088      	sub	sp, #32
 80037f6:	af00      	add	r7, sp, #0
 80037f8:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 80037fa:	2300      	movs	r3, #0
 80037fc:	617b      	str	r3, [r7, #20]
  HAL_StatusTypeDef ret               = HAL_OK;
 80037fe:	2300      	movs	r3, #0
 8003800:	74fb      	strb	r3, [r7, #19]
  uint32_t lpuart_ker_ck_pres         = 0x00000000U;
 8003802:	2300      	movs	r3, #0
 8003804:	60fb      	str	r3, [r7, #12]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	689a      	ldr	r2, [r3, #8]
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	691b      	ldr	r3, [r3, #16]
 800380e:	431a      	orrs	r2, r3
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	695b      	ldr	r3, [r3, #20]
 8003814:	431a      	orrs	r2, r3
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	69db      	ldr	r3, [r3, #28]
 800381a:	4313      	orrs	r3, r2
 800381c:	61fb      	str	r3, [r7, #28]
#if defined(USART_CR1_FIFOEN)
  tmpreg |= (uint32_t)huart->FifoMode;
#endif /* USART_CR1_FIFOEN */
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	681a      	ldr	r2, [r3, #0]
 8003824:	4bac      	ldr	r3, [pc, #688]	; (8003ad8 <UART_SetConfig+0x2e8>)
 8003826:	4013      	ands	r3, r2
 8003828:	687a      	ldr	r2, [r7, #4]
 800382a:	6812      	ldr	r2, [r2, #0]
 800382c:	69f9      	ldr	r1, [r7, #28]
 800382e:	430b      	orrs	r3, r1
 8003830:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	685b      	ldr	r3, [r3, #4]
 8003838:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	68da      	ldr	r2, [r3, #12]
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	430a      	orrs	r2, r1
 8003846:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	699b      	ldr	r3, [r3, #24]
 800384c:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	4aa2      	ldr	r2, [pc, #648]	; (8003adc <UART_SetConfig+0x2ec>)
 8003854:	4293      	cmp	r3, r2
 8003856:	d004      	beq.n	8003862 <UART_SetConfig+0x72>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	6a1b      	ldr	r3, [r3, #32]
 800385c:	69fa      	ldr	r2, [r7, #28]
 800385e:	4313      	orrs	r3, r2
 8003860:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	689b      	ldr	r3, [r3, #8]
 8003868:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	69fa      	ldr	r2, [r7, #28]
 8003872:	430a      	orrs	r2, r1
 8003874:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	4a99      	ldr	r2, [pc, #612]	; (8003ae0 <UART_SetConfig+0x2f0>)
 800387c:	4293      	cmp	r3, r2
 800387e:	d121      	bne.n	80038c4 <UART_SetConfig+0xd4>
 8003880:	4b98      	ldr	r3, [pc, #608]	; (8003ae4 <UART_SetConfig+0x2f4>)
 8003882:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003886:	f003 0303 	and.w	r3, r3, #3
 800388a:	2b03      	cmp	r3, #3
 800388c:	d816      	bhi.n	80038bc <UART_SetConfig+0xcc>
 800388e:	a201      	add	r2, pc, #4	; (adr r2, 8003894 <UART_SetConfig+0xa4>)
 8003890:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003894:	080038a5 	.word	0x080038a5
 8003898:	080038b1 	.word	0x080038b1
 800389c:	080038ab 	.word	0x080038ab
 80038a0:	080038b7 	.word	0x080038b7
 80038a4:	2301      	movs	r3, #1
 80038a6:	76fb      	strb	r3, [r7, #27]
 80038a8:	e0e8      	b.n	8003a7c <UART_SetConfig+0x28c>
 80038aa:	2302      	movs	r3, #2
 80038ac:	76fb      	strb	r3, [r7, #27]
 80038ae:	e0e5      	b.n	8003a7c <UART_SetConfig+0x28c>
 80038b0:	2304      	movs	r3, #4
 80038b2:	76fb      	strb	r3, [r7, #27]
 80038b4:	e0e2      	b.n	8003a7c <UART_SetConfig+0x28c>
 80038b6:	2308      	movs	r3, #8
 80038b8:	76fb      	strb	r3, [r7, #27]
 80038ba:	e0df      	b.n	8003a7c <UART_SetConfig+0x28c>
 80038bc:	2310      	movs	r3, #16
 80038be:	76fb      	strb	r3, [r7, #27]
 80038c0:	bf00      	nop
 80038c2:	e0db      	b.n	8003a7c <UART_SetConfig+0x28c>
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	4a87      	ldr	r2, [pc, #540]	; (8003ae8 <UART_SetConfig+0x2f8>)
 80038ca:	4293      	cmp	r3, r2
 80038cc:	d134      	bne.n	8003938 <UART_SetConfig+0x148>
 80038ce:	4b85      	ldr	r3, [pc, #532]	; (8003ae4 <UART_SetConfig+0x2f4>)
 80038d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80038d4:	f003 030c 	and.w	r3, r3, #12
 80038d8:	2b0c      	cmp	r3, #12
 80038da:	d829      	bhi.n	8003930 <UART_SetConfig+0x140>
 80038dc:	a201      	add	r2, pc, #4	; (adr r2, 80038e4 <UART_SetConfig+0xf4>)
 80038de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80038e2:	bf00      	nop
 80038e4:	08003919 	.word	0x08003919
 80038e8:	08003931 	.word	0x08003931
 80038ec:	08003931 	.word	0x08003931
 80038f0:	08003931 	.word	0x08003931
 80038f4:	08003925 	.word	0x08003925
 80038f8:	08003931 	.word	0x08003931
 80038fc:	08003931 	.word	0x08003931
 8003900:	08003931 	.word	0x08003931
 8003904:	0800391f 	.word	0x0800391f
 8003908:	08003931 	.word	0x08003931
 800390c:	08003931 	.word	0x08003931
 8003910:	08003931 	.word	0x08003931
 8003914:	0800392b 	.word	0x0800392b
 8003918:	2300      	movs	r3, #0
 800391a:	76fb      	strb	r3, [r7, #27]
 800391c:	e0ae      	b.n	8003a7c <UART_SetConfig+0x28c>
 800391e:	2302      	movs	r3, #2
 8003920:	76fb      	strb	r3, [r7, #27]
 8003922:	e0ab      	b.n	8003a7c <UART_SetConfig+0x28c>
 8003924:	2304      	movs	r3, #4
 8003926:	76fb      	strb	r3, [r7, #27]
 8003928:	e0a8      	b.n	8003a7c <UART_SetConfig+0x28c>
 800392a:	2308      	movs	r3, #8
 800392c:	76fb      	strb	r3, [r7, #27]
 800392e:	e0a5      	b.n	8003a7c <UART_SetConfig+0x28c>
 8003930:	2310      	movs	r3, #16
 8003932:	76fb      	strb	r3, [r7, #27]
 8003934:	bf00      	nop
 8003936:	e0a1      	b.n	8003a7c <UART_SetConfig+0x28c>
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	4a6b      	ldr	r2, [pc, #428]	; (8003aec <UART_SetConfig+0x2fc>)
 800393e:	4293      	cmp	r3, r2
 8003940:	d120      	bne.n	8003984 <UART_SetConfig+0x194>
 8003942:	4b68      	ldr	r3, [pc, #416]	; (8003ae4 <UART_SetConfig+0x2f4>)
 8003944:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003948:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800394c:	2b10      	cmp	r3, #16
 800394e:	d00f      	beq.n	8003970 <UART_SetConfig+0x180>
 8003950:	2b10      	cmp	r3, #16
 8003952:	d802      	bhi.n	800395a <UART_SetConfig+0x16a>
 8003954:	2b00      	cmp	r3, #0
 8003956:	d005      	beq.n	8003964 <UART_SetConfig+0x174>
 8003958:	e010      	b.n	800397c <UART_SetConfig+0x18c>
 800395a:	2b20      	cmp	r3, #32
 800395c:	d005      	beq.n	800396a <UART_SetConfig+0x17a>
 800395e:	2b30      	cmp	r3, #48	; 0x30
 8003960:	d009      	beq.n	8003976 <UART_SetConfig+0x186>
 8003962:	e00b      	b.n	800397c <UART_SetConfig+0x18c>
 8003964:	2300      	movs	r3, #0
 8003966:	76fb      	strb	r3, [r7, #27]
 8003968:	e088      	b.n	8003a7c <UART_SetConfig+0x28c>
 800396a:	2302      	movs	r3, #2
 800396c:	76fb      	strb	r3, [r7, #27]
 800396e:	e085      	b.n	8003a7c <UART_SetConfig+0x28c>
 8003970:	2304      	movs	r3, #4
 8003972:	76fb      	strb	r3, [r7, #27]
 8003974:	e082      	b.n	8003a7c <UART_SetConfig+0x28c>
 8003976:	2308      	movs	r3, #8
 8003978:	76fb      	strb	r3, [r7, #27]
 800397a:	e07f      	b.n	8003a7c <UART_SetConfig+0x28c>
 800397c:	2310      	movs	r3, #16
 800397e:	76fb      	strb	r3, [r7, #27]
 8003980:	bf00      	nop
 8003982:	e07b      	b.n	8003a7c <UART_SetConfig+0x28c>
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	4a59      	ldr	r2, [pc, #356]	; (8003af0 <UART_SetConfig+0x300>)
 800398a:	4293      	cmp	r3, r2
 800398c:	d120      	bne.n	80039d0 <UART_SetConfig+0x1e0>
 800398e:	4b55      	ldr	r3, [pc, #340]	; (8003ae4 <UART_SetConfig+0x2f4>)
 8003990:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003994:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8003998:	2b40      	cmp	r3, #64	; 0x40
 800399a:	d00f      	beq.n	80039bc <UART_SetConfig+0x1cc>
 800399c:	2b40      	cmp	r3, #64	; 0x40
 800399e:	d802      	bhi.n	80039a6 <UART_SetConfig+0x1b6>
 80039a0:	2b00      	cmp	r3, #0
 80039a2:	d005      	beq.n	80039b0 <UART_SetConfig+0x1c0>
 80039a4:	e010      	b.n	80039c8 <UART_SetConfig+0x1d8>
 80039a6:	2b80      	cmp	r3, #128	; 0x80
 80039a8:	d005      	beq.n	80039b6 <UART_SetConfig+0x1c6>
 80039aa:	2bc0      	cmp	r3, #192	; 0xc0
 80039ac:	d009      	beq.n	80039c2 <UART_SetConfig+0x1d2>
 80039ae:	e00b      	b.n	80039c8 <UART_SetConfig+0x1d8>
 80039b0:	2300      	movs	r3, #0
 80039b2:	76fb      	strb	r3, [r7, #27]
 80039b4:	e062      	b.n	8003a7c <UART_SetConfig+0x28c>
 80039b6:	2302      	movs	r3, #2
 80039b8:	76fb      	strb	r3, [r7, #27]
 80039ba:	e05f      	b.n	8003a7c <UART_SetConfig+0x28c>
 80039bc:	2304      	movs	r3, #4
 80039be:	76fb      	strb	r3, [r7, #27]
 80039c0:	e05c      	b.n	8003a7c <UART_SetConfig+0x28c>
 80039c2:	2308      	movs	r3, #8
 80039c4:	76fb      	strb	r3, [r7, #27]
 80039c6:	e059      	b.n	8003a7c <UART_SetConfig+0x28c>
 80039c8:	2310      	movs	r3, #16
 80039ca:	76fb      	strb	r3, [r7, #27]
 80039cc:	bf00      	nop
 80039ce:	e055      	b.n	8003a7c <UART_SetConfig+0x28c>
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	4a47      	ldr	r2, [pc, #284]	; (8003af4 <UART_SetConfig+0x304>)
 80039d6:	4293      	cmp	r3, r2
 80039d8:	d124      	bne.n	8003a24 <UART_SetConfig+0x234>
 80039da:	4b42      	ldr	r3, [pc, #264]	; (8003ae4 <UART_SetConfig+0x2f4>)
 80039dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80039e0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80039e4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80039e8:	d012      	beq.n	8003a10 <UART_SetConfig+0x220>
 80039ea:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80039ee:	d802      	bhi.n	80039f6 <UART_SetConfig+0x206>
 80039f0:	2b00      	cmp	r3, #0
 80039f2:	d007      	beq.n	8003a04 <UART_SetConfig+0x214>
 80039f4:	e012      	b.n	8003a1c <UART_SetConfig+0x22c>
 80039f6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80039fa:	d006      	beq.n	8003a0a <UART_SetConfig+0x21a>
 80039fc:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003a00:	d009      	beq.n	8003a16 <UART_SetConfig+0x226>
 8003a02:	e00b      	b.n	8003a1c <UART_SetConfig+0x22c>
 8003a04:	2300      	movs	r3, #0
 8003a06:	76fb      	strb	r3, [r7, #27]
 8003a08:	e038      	b.n	8003a7c <UART_SetConfig+0x28c>
 8003a0a:	2302      	movs	r3, #2
 8003a0c:	76fb      	strb	r3, [r7, #27]
 8003a0e:	e035      	b.n	8003a7c <UART_SetConfig+0x28c>
 8003a10:	2304      	movs	r3, #4
 8003a12:	76fb      	strb	r3, [r7, #27]
 8003a14:	e032      	b.n	8003a7c <UART_SetConfig+0x28c>
 8003a16:	2308      	movs	r3, #8
 8003a18:	76fb      	strb	r3, [r7, #27]
 8003a1a:	e02f      	b.n	8003a7c <UART_SetConfig+0x28c>
 8003a1c:	2310      	movs	r3, #16
 8003a1e:	76fb      	strb	r3, [r7, #27]
 8003a20:	bf00      	nop
 8003a22:	e02b      	b.n	8003a7c <UART_SetConfig+0x28c>
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	4a2c      	ldr	r2, [pc, #176]	; (8003adc <UART_SetConfig+0x2ec>)
 8003a2a:	4293      	cmp	r3, r2
 8003a2c:	d124      	bne.n	8003a78 <UART_SetConfig+0x288>
 8003a2e:	4b2d      	ldr	r3, [pc, #180]	; (8003ae4 <UART_SetConfig+0x2f4>)
 8003a30:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a34:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8003a38:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003a3c:	d012      	beq.n	8003a64 <UART_SetConfig+0x274>
 8003a3e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003a42:	d802      	bhi.n	8003a4a <UART_SetConfig+0x25a>
 8003a44:	2b00      	cmp	r3, #0
 8003a46:	d007      	beq.n	8003a58 <UART_SetConfig+0x268>
 8003a48:	e012      	b.n	8003a70 <UART_SetConfig+0x280>
 8003a4a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003a4e:	d006      	beq.n	8003a5e <UART_SetConfig+0x26e>
 8003a50:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003a54:	d009      	beq.n	8003a6a <UART_SetConfig+0x27a>
 8003a56:	e00b      	b.n	8003a70 <UART_SetConfig+0x280>
 8003a58:	2300      	movs	r3, #0
 8003a5a:	76fb      	strb	r3, [r7, #27]
 8003a5c:	e00e      	b.n	8003a7c <UART_SetConfig+0x28c>
 8003a5e:	2302      	movs	r3, #2
 8003a60:	76fb      	strb	r3, [r7, #27]
 8003a62:	e00b      	b.n	8003a7c <UART_SetConfig+0x28c>
 8003a64:	2304      	movs	r3, #4
 8003a66:	76fb      	strb	r3, [r7, #27]
 8003a68:	e008      	b.n	8003a7c <UART_SetConfig+0x28c>
 8003a6a:	2308      	movs	r3, #8
 8003a6c:	76fb      	strb	r3, [r7, #27]
 8003a6e:	e005      	b.n	8003a7c <UART_SetConfig+0x28c>
 8003a70:	2310      	movs	r3, #16
 8003a72:	76fb      	strb	r3, [r7, #27]
 8003a74:	bf00      	nop
 8003a76:	e001      	b.n	8003a7c <UART_SetConfig+0x28c>
 8003a78:	2310      	movs	r3, #16
 8003a7a:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	4a16      	ldr	r2, [pc, #88]	; (8003adc <UART_SetConfig+0x2ec>)
 8003a82:	4293      	cmp	r3, r2
 8003a84:	f040 80fa 	bne.w	8003c7c <UART_SetConfig+0x48c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8003a88:	7efb      	ldrb	r3, [r7, #27]
 8003a8a:	2b08      	cmp	r3, #8
 8003a8c:	d836      	bhi.n	8003afc <UART_SetConfig+0x30c>
 8003a8e:	a201      	add	r2, pc, #4	; (adr r2, 8003a94 <UART_SetConfig+0x2a4>)
 8003a90:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003a94:	08003ab9 	.word	0x08003ab9
 8003a98:	08003afd 	.word	0x08003afd
 8003a9c:	08003ac1 	.word	0x08003ac1
 8003aa0:	08003afd 	.word	0x08003afd
 8003aa4:	08003ac7 	.word	0x08003ac7
 8003aa8:	08003afd 	.word	0x08003afd
 8003aac:	08003afd 	.word	0x08003afd
 8003ab0:	08003afd 	.word	0x08003afd
 8003ab4:	08003acf 	.word	0x08003acf
    {
      case UART_CLOCKSOURCE_PCLK1:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = (HAL_RCC_GetPCLK1Freq() / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
#else
        lpuart_ker_ck_pres = HAL_RCC_GetPCLK1Freq();
 8003ab8:	f7fe fe02 	bl	80026c0 <HAL_RCC_GetPCLK1Freq>
 8003abc:	60f8      	str	r0, [r7, #12]
#endif /* USART_PRESC_PRESCALER */
        break;
 8003abe:	e020      	b.n	8003b02 <UART_SetConfig+0x312>
      case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = ((uint32_t)HSI_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
#else
        lpuart_ker_ck_pres = (uint32_t)HSI_VALUE;
 8003ac0:	4b0d      	ldr	r3, [pc, #52]	; (8003af8 <UART_SetConfig+0x308>)
 8003ac2:	60fb      	str	r3, [r7, #12]
#endif /* USART_PRESC_PRESCALER */
        break;
 8003ac4:	e01d      	b.n	8003b02 <UART_SetConfig+0x312>
      case UART_CLOCKSOURCE_SYSCLK:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = (HAL_RCC_GetSysClockFreq() / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
#else
        lpuart_ker_ck_pres = HAL_RCC_GetSysClockFreq();
 8003ac6:	f7fe fd65 	bl	8002594 <HAL_RCC_GetSysClockFreq>
 8003aca:	60f8      	str	r0, [r7, #12]
#endif /* USART_PRESC_PRESCALER */
        break;
 8003acc:	e019      	b.n	8003b02 <UART_SetConfig+0x312>
      case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = ((uint32_t)LSE_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
#else
        lpuart_ker_ck_pres = (uint32_t)LSE_VALUE;
 8003ace:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003ad2:	60fb      	str	r3, [r7, #12]
#endif /* USART_PRESC_PRESCALER */
        break;
 8003ad4:	e015      	b.n	8003b02 <UART_SetConfig+0x312>
 8003ad6:	bf00      	nop
 8003ad8:	efff69f3 	.word	0xefff69f3
 8003adc:	40008000 	.word	0x40008000
 8003ae0:	40013800 	.word	0x40013800
 8003ae4:	40021000 	.word	0x40021000
 8003ae8:	40004400 	.word	0x40004400
 8003aec:	40004800 	.word	0x40004800
 8003af0:	40004c00 	.word	0x40004c00
 8003af4:	40005000 	.word	0x40005000
 8003af8:	00f42400 	.word	0x00f42400
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 8003afc:	2301      	movs	r3, #1
 8003afe:	74fb      	strb	r3, [r7, #19]
        break;
 8003b00:	bf00      	nop
    }

    /* if proper clock source reported */
    if (lpuart_ker_ck_pres != 0U)
 8003b02:	68fb      	ldr	r3, [r7, #12]
 8003b04:	2b00      	cmp	r3, #0
 8003b06:	f000 81ac 	beq.w	8003e62 <UART_SetConfig+0x672>
    {
      /* ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	685a      	ldr	r2, [r3, #4]
 8003b0e:	4613      	mov	r3, r2
 8003b10:	005b      	lsls	r3, r3, #1
 8003b12:	4413      	add	r3, r2
 8003b14:	68fa      	ldr	r2, [r7, #12]
 8003b16:	429a      	cmp	r2, r3
 8003b18:	d305      	bcc.n	8003b26 <UART_SetConfig+0x336>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	685b      	ldr	r3, [r3, #4]
 8003b1e:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8003b20:	68fa      	ldr	r2, [r7, #12]
 8003b22:	429a      	cmp	r2, r3
 8003b24:	d902      	bls.n	8003b2c <UART_SetConfig+0x33c>
      {
        ret = HAL_ERROR;
 8003b26:	2301      	movs	r3, #1
 8003b28:	74fb      	strb	r3, [r7, #19]
 8003b2a:	e19a      	b.n	8003e62 <UART_SetConfig+0x672>
      }
      else
      {
        switch (clocksource)
 8003b2c:	7efb      	ldrb	r3, [r7, #27]
 8003b2e:	2b08      	cmp	r3, #8
 8003b30:	f200 8091 	bhi.w	8003c56 <UART_SetConfig+0x466>
 8003b34:	a201      	add	r2, pc, #4	; (adr r2, 8003b3c <UART_SetConfig+0x34c>)
 8003b36:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003b3a:	bf00      	nop
 8003b3c:	08003b61 	.word	0x08003b61
 8003b40:	08003c57 	.word	0x08003c57
 8003b44:	08003bad 	.word	0x08003bad
 8003b48:	08003c57 	.word	0x08003c57
 8003b4c:	08003be1 	.word	0x08003be1
 8003b50:	08003c57 	.word	0x08003c57
 8003b54:	08003c57 	.word	0x08003c57
 8003b58:	08003c57 	.word	0x08003c57
 8003b5c:	08003c2d 	.word	0x08003c2d
        {
          case UART_CLOCKSOURCE_PCLK1:
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8003b60:	f7fe fdae 	bl	80026c0 <HAL_RCC_GetPCLK1Freq>
 8003b64:	4603      	mov	r3, r0
 8003b66:	4619      	mov	r1, r3
 8003b68:	f04f 0200 	mov.w	r2, #0
 8003b6c:	f04f 0300 	mov.w	r3, #0
 8003b70:	f04f 0400 	mov.w	r4, #0
 8003b74:	0214      	lsls	r4, r2, #8
 8003b76:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 8003b7a:	020b      	lsls	r3, r1, #8
 8003b7c:	687a      	ldr	r2, [r7, #4]
 8003b7e:	6852      	ldr	r2, [r2, #4]
 8003b80:	0852      	lsrs	r2, r2, #1
 8003b82:	4611      	mov	r1, r2
 8003b84:	f04f 0200 	mov.w	r2, #0
 8003b88:	eb13 0b01 	adds.w	fp, r3, r1
 8003b8c:	eb44 0c02 	adc.w	ip, r4, r2
 8003b90:	4658      	mov	r0, fp
 8003b92:	4661      	mov	r1, ip
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	685b      	ldr	r3, [r3, #4]
 8003b98:	f04f 0400 	mov.w	r4, #0
 8003b9c:	461a      	mov	r2, r3
 8003b9e:	4623      	mov	r3, r4
 8003ba0:	f7fc fb1c 	bl	80001dc <__aeabi_uldivmod>
 8003ba4:	4603      	mov	r3, r0
 8003ba6:	460c      	mov	r4, r1
 8003ba8:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
            break;
 8003baa:	e057      	b.n	8003c5c <UART_SetConfig+0x46c>
          case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate));
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	685b      	ldr	r3, [r3, #4]
 8003bb0:	085b      	lsrs	r3, r3, #1
 8003bb2:	f04f 0400 	mov.w	r4, #0
 8003bb6:	49b1      	ldr	r1, [pc, #708]	; (8003e7c <UART_SetConfig+0x68c>)
 8003bb8:	f04f 0200 	mov.w	r2, #0
 8003bbc:	eb13 0b01 	adds.w	fp, r3, r1
 8003bc0:	eb44 0c02 	adc.w	ip, r4, r2
 8003bc4:	4658      	mov	r0, fp
 8003bc6:	4661      	mov	r1, ip
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	685b      	ldr	r3, [r3, #4]
 8003bcc:	f04f 0400 	mov.w	r4, #0
 8003bd0:	461a      	mov	r2, r3
 8003bd2:	4623      	mov	r3, r4
 8003bd4:	f7fc fb02 	bl	80001dc <__aeabi_uldivmod>
 8003bd8:	4603      	mov	r3, r0
 8003bda:	460c      	mov	r4, r1
 8003bdc:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
            break;
 8003bde:	e03d      	b.n	8003c5c <UART_SetConfig+0x46c>
          case UART_CLOCKSOURCE_SYSCLK:
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8003be0:	f7fe fcd8 	bl	8002594 <HAL_RCC_GetSysClockFreq>
 8003be4:	4603      	mov	r3, r0
 8003be6:	4619      	mov	r1, r3
 8003be8:	f04f 0200 	mov.w	r2, #0
 8003bec:	f04f 0300 	mov.w	r3, #0
 8003bf0:	f04f 0400 	mov.w	r4, #0
 8003bf4:	0214      	lsls	r4, r2, #8
 8003bf6:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 8003bfa:	020b      	lsls	r3, r1, #8
 8003bfc:	687a      	ldr	r2, [r7, #4]
 8003bfe:	6852      	ldr	r2, [r2, #4]
 8003c00:	0852      	lsrs	r2, r2, #1
 8003c02:	4611      	mov	r1, r2
 8003c04:	f04f 0200 	mov.w	r2, #0
 8003c08:	eb13 0b01 	adds.w	fp, r3, r1
 8003c0c:	eb44 0c02 	adc.w	ip, r4, r2
 8003c10:	4658      	mov	r0, fp
 8003c12:	4661      	mov	r1, ip
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	685b      	ldr	r3, [r3, #4]
 8003c18:	f04f 0400 	mov.w	r4, #0
 8003c1c:	461a      	mov	r2, r3
 8003c1e:	4623      	mov	r3, r4
 8003c20:	f7fc fadc 	bl	80001dc <__aeabi_uldivmod>
 8003c24:	4603      	mov	r3, r0
 8003c26:	460c      	mov	r4, r1
 8003c28:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
            break;
 8003c2a:	e017      	b.n	8003c5c <UART_SetConfig+0x46c>
          case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate));
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	685b      	ldr	r3, [r3, #4]
 8003c30:	085b      	lsrs	r3, r3, #1
 8003c32:	f04f 0400 	mov.w	r4, #0
 8003c36:	f513 0000 	adds.w	r0, r3, #8388608	; 0x800000
 8003c3a:	f144 0100 	adc.w	r1, r4, #0
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	685b      	ldr	r3, [r3, #4]
 8003c42:	f04f 0400 	mov.w	r4, #0
 8003c46:	461a      	mov	r2, r3
 8003c48:	4623      	mov	r3, r4
 8003c4a:	f7fc fac7 	bl	80001dc <__aeabi_uldivmod>
 8003c4e:	4603      	mov	r3, r0
 8003c50:	460c      	mov	r4, r1
 8003c52:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
            break;
 8003c54:	e002      	b.n	8003c5c <UART_SetConfig+0x46c>
          case UART_CLOCKSOURCE_UNDEFINED:
          default:
            ret = HAL_ERROR;
 8003c56:	2301      	movs	r3, #1
 8003c58:	74fb      	strb	r3, [r7, #19]
            break;
 8003c5a:	bf00      	nop
        }

        /* It is forbidden to write values lower than 0x300 in the LPUART_BRR register */
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8003c5c:	697b      	ldr	r3, [r7, #20]
 8003c5e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003c62:	d308      	bcc.n	8003c76 <UART_SetConfig+0x486>
 8003c64:	697b      	ldr	r3, [r7, #20]
 8003c66:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003c6a:	d204      	bcs.n	8003c76 <UART_SetConfig+0x486>
        {
          huart->Instance->BRR = usartdiv;
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	697a      	ldr	r2, [r7, #20]
 8003c72:	60da      	str	r2, [r3, #12]
 8003c74:	e0f5      	b.n	8003e62 <UART_SetConfig+0x672>
        }
        else
        {
          ret = HAL_ERROR;
 8003c76:	2301      	movs	r3, #1
 8003c78:	74fb      	strb	r3, [r7, #19]
 8003c7a:	e0f2      	b.n	8003e62 <UART_SetConfig+0x672>
        }
      } /*   if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) || (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (lpuart_ker_ck_pres != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	69db      	ldr	r3, [r3, #28]
 8003c80:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003c84:	d17f      	bne.n	8003d86 <UART_SetConfig+0x596>
  {
    switch (clocksource)
 8003c86:	7efb      	ldrb	r3, [r7, #27]
 8003c88:	2b08      	cmp	r3, #8
 8003c8a:	d85c      	bhi.n	8003d46 <UART_SetConfig+0x556>
 8003c8c:	a201      	add	r2, pc, #4	; (adr r2, 8003c94 <UART_SetConfig+0x4a4>)
 8003c8e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003c92:	bf00      	nop
 8003c94:	08003cb9 	.word	0x08003cb9
 8003c98:	08003cd7 	.word	0x08003cd7
 8003c9c:	08003cf5 	.word	0x08003cf5
 8003ca0:	08003d47 	.word	0x08003d47
 8003ca4:	08003d11 	.word	0x08003d11
 8003ca8:	08003d47 	.word	0x08003d47
 8003cac:	08003d47 	.word	0x08003d47
 8003cb0:	08003d47 	.word	0x08003d47
 8003cb4:	08003d2f 	.word	0x08003d2f
    {
      case UART_CLOCKSOURCE_PCLK1:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8003cb8:	f7fe fd02 	bl	80026c0 <HAL_RCC_GetPCLK1Freq>
 8003cbc:	4603      	mov	r3, r0
 8003cbe:	005a      	lsls	r2, r3, #1
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	685b      	ldr	r3, [r3, #4]
 8003cc4:	085b      	lsrs	r3, r3, #1
 8003cc6:	441a      	add	r2, r3
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	685b      	ldr	r3, [r3, #4]
 8003ccc:	fbb2 f3f3 	udiv	r3, r2, r3
 8003cd0:	b29b      	uxth	r3, r3
 8003cd2:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 8003cd4:	e03a      	b.n	8003d4c <UART_SetConfig+0x55c>
      case UART_CLOCKSOURCE_PCLK2:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 8003cd6:	f7fe fd09 	bl	80026ec <HAL_RCC_GetPCLK2Freq>
 8003cda:	4603      	mov	r3, r0
 8003cdc:	005a      	lsls	r2, r3, #1
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	685b      	ldr	r3, [r3, #4]
 8003ce2:	085b      	lsrs	r3, r3, #1
 8003ce4:	441a      	add	r2, r3
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	685b      	ldr	r3, [r3, #4]
 8003cea:	fbb2 f3f3 	udiv	r3, r2, r3
 8003cee:	b29b      	uxth	r3, r3
 8003cf0:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 8003cf2:	e02b      	b.n	8003d4c <UART_SetConfig+0x55c>
      case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	685b      	ldr	r3, [r3, #4]
 8003cf8:	085b      	lsrs	r3, r3, #1
 8003cfa:	f103 73f4 	add.w	r3, r3, #31981568	; 0x1e80000
 8003cfe:	f503 4390 	add.w	r3, r3, #18432	; 0x4800
 8003d02:	687a      	ldr	r2, [r7, #4]
 8003d04:	6852      	ldr	r2, [r2, #4]
 8003d06:	fbb3 f3f2 	udiv	r3, r3, r2
 8003d0a:	b29b      	uxth	r3, r3
 8003d0c:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 8003d0e:	e01d      	b.n	8003d4c <UART_SetConfig+0x55c>
      case UART_CLOCKSOURCE_SYSCLK:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8003d10:	f7fe fc40 	bl	8002594 <HAL_RCC_GetSysClockFreq>
 8003d14:	4603      	mov	r3, r0
 8003d16:	005a      	lsls	r2, r3, #1
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	685b      	ldr	r3, [r3, #4]
 8003d1c:	085b      	lsrs	r3, r3, #1
 8003d1e:	441a      	add	r2, r3
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	685b      	ldr	r3, [r3, #4]
 8003d24:	fbb2 f3f3 	udiv	r3, r2, r3
 8003d28:	b29b      	uxth	r3, r3
 8003d2a:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 8003d2c:	e00e      	b.n	8003d4c <UART_SetConfig+0x55c>
      case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	685b      	ldr	r3, [r3, #4]
 8003d32:	085b      	lsrs	r3, r3, #1
 8003d34:	f503 3280 	add.w	r2, r3, #65536	; 0x10000
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	685b      	ldr	r3, [r3, #4]
 8003d3c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003d40:	b29b      	uxth	r3, r3
 8003d42:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 8003d44:	e002      	b.n	8003d4c <UART_SetConfig+0x55c>
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 8003d46:	2301      	movs	r3, #1
 8003d48:	74fb      	strb	r3, [r7, #19]
        break;
 8003d4a:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003d4c:	697b      	ldr	r3, [r7, #20]
 8003d4e:	2b0f      	cmp	r3, #15
 8003d50:	d916      	bls.n	8003d80 <UART_SetConfig+0x590>
 8003d52:	697b      	ldr	r3, [r7, #20]
 8003d54:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003d58:	d212      	bcs.n	8003d80 <UART_SetConfig+0x590>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003d5a:	697b      	ldr	r3, [r7, #20]
 8003d5c:	b29b      	uxth	r3, r3
 8003d5e:	f023 030f 	bic.w	r3, r3, #15
 8003d62:	817b      	strh	r3, [r7, #10]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003d64:	697b      	ldr	r3, [r7, #20]
 8003d66:	085b      	lsrs	r3, r3, #1
 8003d68:	b29b      	uxth	r3, r3
 8003d6a:	f003 0307 	and.w	r3, r3, #7
 8003d6e:	b29a      	uxth	r2, r3
 8003d70:	897b      	ldrh	r3, [r7, #10]
 8003d72:	4313      	orrs	r3, r2
 8003d74:	817b      	strh	r3, [r7, #10]
      huart->Instance->BRR = brrtemp;
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	897a      	ldrh	r2, [r7, #10]
 8003d7c:	60da      	str	r2, [r3, #12]
 8003d7e:	e070      	b.n	8003e62 <UART_SetConfig+0x672>
    }
    else
    {
      ret = HAL_ERROR;
 8003d80:	2301      	movs	r3, #1
 8003d82:	74fb      	strb	r3, [r7, #19]
 8003d84:	e06d      	b.n	8003e62 <UART_SetConfig+0x672>
    }
  }
  else
  {
    switch (clocksource)
 8003d86:	7efb      	ldrb	r3, [r7, #27]
 8003d88:	2b08      	cmp	r3, #8
 8003d8a:	d859      	bhi.n	8003e40 <UART_SetConfig+0x650>
 8003d8c:	a201      	add	r2, pc, #4	; (adr r2, 8003d94 <UART_SetConfig+0x5a4>)
 8003d8e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d92:	bf00      	nop
 8003d94:	08003db9 	.word	0x08003db9
 8003d98:	08003dd5 	.word	0x08003dd5
 8003d9c:	08003df1 	.word	0x08003df1
 8003da0:	08003e41 	.word	0x08003e41
 8003da4:	08003e0d 	.word	0x08003e0d
 8003da8:	08003e41 	.word	0x08003e41
 8003dac:	08003e41 	.word	0x08003e41
 8003db0:	08003e41 	.word	0x08003e41
 8003db4:	08003e29 	.word	0x08003e29
    {
      case UART_CLOCKSOURCE_PCLK1:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8003db8:	f7fe fc82 	bl	80026c0 <HAL_RCC_GetPCLK1Freq>
 8003dbc:	4602      	mov	r2, r0
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	685b      	ldr	r3, [r3, #4]
 8003dc2:	085b      	lsrs	r3, r3, #1
 8003dc4:	441a      	add	r2, r3
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	685b      	ldr	r3, [r3, #4]
 8003dca:	fbb2 f3f3 	udiv	r3, r2, r3
 8003dce:	b29b      	uxth	r3, r3
 8003dd0:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 8003dd2:	e038      	b.n	8003e46 <UART_SetConfig+0x656>
      case UART_CLOCKSOURCE_PCLK2:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 8003dd4:	f7fe fc8a 	bl	80026ec <HAL_RCC_GetPCLK2Freq>
 8003dd8:	4602      	mov	r2, r0
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	685b      	ldr	r3, [r3, #4]
 8003dde:	085b      	lsrs	r3, r3, #1
 8003de0:	441a      	add	r2, r3
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	685b      	ldr	r3, [r3, #4]
 8003de6:	fbb2 f3f3 	udiv	r3, r2, r3
 8003dea:	b29b      	uxth	r3, r3
 8003dec:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 8003dee:	e02a      	b.n	8003e46 <UART_SetConfig+0x656>
      case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	685b      	ldr	r3, [r3, #4]
 8003df4:	085b      	lsrs	r3, r3, #1
 8003df6:	f503 0374 	add.w	r3, r3, #15990784	; 0xf40000
 8003dfa:	f503 5310 	add.w	r3, r3, #9216	; 0x2400
 8003dfe:	687a      	ldr	r2, [r7, #4]
 8003e00:	6852      	ldr	r2, [r2, #4]
 8003e02:	fbb3 f3f2 	udiv	r3, r3, r2
 8003e06:	b29b      	uxth	r3, r3
 8003e08:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 8003e0a:	e01c      	b.n	8003e46 <UART_SetConfig+0x656>
      case UART_CLOCKSOURCE_SYSCLK:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8003e0c:	f7fe fbc2 	bl	8002594 <HAL_RCC_GetSysClockFreq>
 8003e10:	4602      	mov	r2, r0
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	685b      	ldr	r3, [r3, #4]
 8003e16:	085b      	lsrs	r3, r3, #1
 8003e18:	441a      	add	r2, r3
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	685b      	ldr	r3, [r3, #4]
 8003e1e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003e22:	b29b      	uxth	r3, r3
 8003e24:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 8003e26:	e00e      	b.n	8003e46 <UART_SetConfig+0x656>
      case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	685b      	ldr	r3, [r3, #4]
 8003e2c:	085b      	lsrs	r3, r3, #1
 8003e2e:	f503 4200 	add.w	r2, r3, #32768	; 0x8000
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	685b      	ldr	r3, [r3, #4]
 8003e36:	fbb2 f3f3 	udiv	r3, r2, r3
 8003e3a:	b29b      	uxth	r3, r3
 8003e3c:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 8003e3e:	e002      	b.n	8003e46 <UART_SetConfig+0x656>
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 8003e40:	2301      	movs	r3, #1
 8003e42:	74fb      	strb	r3, [r7, #19]
        break;
 8003e44:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003e46:	697b      	ldr	r3, [r7, #20]
 8003e48:	2b0f      	cmp	r3, #15
 8003e4a:	d908      	bls.n	8003e5e <UART_SetConfig+0x66e>
 8003e4c:	697b      	ldr	r3, [r7, #20]
 8003e4e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003e52:	d204      	bcs.n	8003e5e <UART_SetConfig+0x66e>
    {
      huart->Instance->BRR = usartdiv;
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	697a      	ldr	r2, [r7, #20]
 8003e5a:	60da      	str	r2, [r3, #12]
 8003e5c:	e001      	b.n	8003e62 <UART_SetConfig+0x672>
    }
    else
    {
      ret = HAL_ERROR;
 8003e5e:	2301      	movs	r3, #1
 8003e60:	74fb      	strb	r3, [r7, #19]
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	2200      	movs	r2, #0
 8003e66:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	2200      	movs	r2, #0
 8003e6c:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 8003e6e:	7cfb      	ldrb	r3, [r7, #19]
}
 8003e70:	4618      	mov	r0, r3
 8003e72:	3720      	adds	r7, #32
 8003e74:	46bd      	mov	sp, r7
 8003e76:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}
 8003e7a:	bf00      	nop
 8003e7c:	f4240000 	.word	0xf4240000

08003e80 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003e80:	b480      	push	{r7}
 8003e82:	b083      	sub	sp, #12
 8003e84:	af00      	add	r7, sp, #0
 8003e86:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e8c:	f003 0301 	and.w	r3, r3, #1
 8003e90:	2b00      	cmp	r3, #0
 8003e92:	d00a      	beq.n	8003eaa <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	685b      	ldr	r3, [r3, #4]
 8003e9a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	430a      	orrs	r2, r1
 8003ea8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003eae:	f003 0302 	and.w	r3, r3, #2
 8003eb2:	2b00      	cmp	r3, #0
 8003eb4:	d00a      	beq.n	8003ecc <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	685b      	ldr	r3, [r3, #4]
 8003ebc:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	430a      	orrs	r2, r1
 8003eca:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ed0:	f003 0304 	and.w	r3, r3, #4
 8003ed4:	2b00      	cmp	r3, #0
 8003ed6:	d00a      	beq.n	8003eee <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	685b      	ldr	r3, [r3, #4]
 8003ede:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	430a      	orrs	r2, r1
 8003eec:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ef2:	f003 0308 	and.w	r3, r3, #8
 8003ef6:	2b00      	cmp	r3, #0
 8003ef8:	d00a      	beq.n	8003f10 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	685b      	ldr	r3, [r3, #4]
 8003f00:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	430a      	orrs	r2, r1
 8003f0e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f14:	f003 0310 	and.w	r3, r3, #16
 8003f18:	2b00      	cmp	r3, #0
 8003f1a:	d00a      	beq.n	8003f32 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	689b      	ldr	r3, [r3, #8]
 8003f22:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	430a      	orrs	r2, r1
 8003f30:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f36:	f003 0320 	and.w	r3, r3, #32
 8003f3a:	2b00      	cmp	r3, #0
 8003f3c:	d00a      	beq.n	8003f54 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	689b      	ldr	r3, [r3, #8]
 8003f44:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	430a      	orrs	r2, r1
 8003f52:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f58:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003f5c:	2b00      	cmp	r3, #0
 8003f5e:	d01a      	beq.n	8003f96 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	685b      	ldr	r3, [r3, #4]
 8003f66:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	430a      	orrs	r2, r1
 8003f74:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f7a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003f7e:	d10a      	bne.n	8003f96 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	685b      	ldr	r3, [r3, #4]
 8003f86:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	430a      	orrs	r2, r1
 8003f94:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f9a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003f9e:	2b00      	cmp	r3, #0
 8003fa0:	d00a      	beq.n	8003fb8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	685b      	ldr	r3, [r3, #4]
 8003fa8:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	430a      	orrs	r2, r1
 8003fb6:	605a      	str	r2, [r3, #4]
  }
}
 8003fb8:	bf00      	nop
 8003fba:	370c      	adds	r7, #12
 8003fbc:	46bd      	mov	sp, r7
 8003fbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fc2:	4770      	bx	lr

08003fc4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003fc4:	b580      	push	{r7, lr}
 8003fc6:	b086      	sub	sp, #24
 8003fc8:	af02      	add	r7, sp, #8
 8003fca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	2200      	movs	r2, #0
 8003fd0:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 8003fd2:	f7fd f9ef 	bl	80013b4 <HAL_GetTick>
 8003fd6:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	f003 0308 	and.w	r3, r3, #8
 8003fe2:	2b08      	cmp	r3, #8
 8003fe4:	d10e      	bne.n	8004004 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003fe6:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003fea:	9300      	str	r3, [sp, #0]
 8003fec:	68fb      	ldr	r3, [r7, #12]
 8003fee:	2200      	movs	r2, #0
 8003ff0:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8003ff4:	6878      	ldr	r0, [r7, #4]
 8003ff6:	f000 f82a 	bl	800404e <UART_WaitOnFlagUntilTimeout>
 8003ffa:	4603      	mov	r3, r0
 8003ffc:	2b00      	cmp	r3, #0
 8003ffe:	d001      	beq.n	8004004 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004000:	2303      	movs	r3, #3
 8004002:	e020      	b.n	8004046 <UART_CheckIdleState+0x82>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	f003 0304 	and.w	r3, r3, #4
 800400e:	2b04      	cmp	r3, #4
 8004010:	d10e      	bne.n	8004030 <UART_CheckIdleState+0x6c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004012:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004016:	9300      	str	r3, [sp, #0]
 8004018:	68fb      	ldr	r3, [r7, #12]
 800401a:	2200      	movs	r2, #0
 800401c:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8004020:	6878      	ldr	r0, [r7, #4]
 8004022:	f000 f814 	bl	800404e <UART_WaitOnFlagUntilTimeout>
 8004026:	4603      	mov	r3, r0
 8004028:	2b00      	cmp	r3, #0
 800402a:	d001      	beq.n	8004030 <UART_CheckIdleState+0x6c>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800402c:	2303      	movs	r3, #3
 800402e:	e00a      	b.n	8004046 <UART_CheckIdleState+0x82>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	2220      	movs	r2, #32
 8004034:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	2220      	movs	r2, #32
 800403a:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UNLOCK(huart);
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	2200      	movs	r2, #0
 8004040:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 8004044:	2300      	movs	r3, #0
}
 8004046:	4618      	mov	r0, r3
 8004048:	3710      	adds	r7, #16
 800404a:	46bd      	mov	sp, r7
 800404c:	bd80      	pop	{r7, pc}

0800404e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800404e:	b580      	push	{r7, lr}
 8004050:	b084      	sub	sp, #16
 8004052:	af00      	add	r7, sp, #0
 8004054:	60f8      	str	r0, [r7, #12]
 8004056:	60b9      	str	r1, [r7, #8]
 8004058:	603b      	str	r3, [r7, #0]
 800405a:	4613      	mov	r3, r2
 800405c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800405e:	e02a      	b.n	80040b6 <UART_WaitOnFlagUntilTimeout+0x68>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004060:	69bb      	ldr	r3, [r7, #24]
 8004062:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004066:	d026      	beq.n	80040b6 <UART_WaitOnFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004068:	f7fd f9a4 	bl	80013b4 <HAL_GetTick>
 800406c:	4602      	mov	r2, r0
 800406e:	683b      	ldr	r3, [r7, #0]
 8004070:	1ad3      	subs	r3, r2, r3
 8004072:	69ba      	ldr	r2, [r7, #24]
 8004074:	429a      	cmp	r2, r3
 8004076:	d302      	bcc.n	800407e <UART_WaitOnFlagUntilTimeout+0x30>
 8004078:	69bb      	ldr	r3, [r7, #24]
 800407a:	2b00      	cmp	r3, #0
 800407c:	d11b      	bne.n	80040b6 <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800407e:	68fb      	ldr	r3, [r7, #12]
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	681a      	ldr	r2, [r3, #0]
 8004084:	68fb      	ldr	r3, [r7, #12]
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800408c:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800408e:	68fb      	ldr	r3, [r7, #12]
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	689a      	ldr	r2, [r3, #8]
 8004094:	68fb      	ldr	r3, [r7, #12]
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	f022 0201 	bic.w	r2, r2, #1
 800409c:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 800409e:	68fb      	ldr	r3, [r7, #12]
 80040a0:	2220      	movs	r2, #32
 80040a2:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 80040a4:	68fb      	ldr	r3, [r7, #12]
 80040a6:	2220      	movs	r2, #32
 80040a8:	679a      	str	r2, [r3, #120]	; 0x78

        __HAL_UNLOCK(huart);
 80040aa:	68fb      	ldr	r3, [r7, #12]
 80040ac:	2200      	movs	r2, #0
 80040ae:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        return HAL_TIMEOUT;
 80040b2:	2303      	movs	r3, #3
 80040b4:	e00f      	b.n	80040d6 <UART_WaitOnFlagUntilTimeout+0x88>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80040b6:	68fb      	ldr	r3, [r7, #12]
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	69da      	ldr	r2, [r3, #28]
 80040bc:	68bb      	ldr	r3, [r7, #8]
 80040be:	4013      	ands	r3, r2
 80040c0:	68ba      	ldr	r2, [r7, #8]
 80040c2:	429a      	cmp	r2, r3
 80040c4:	bf0c      	ite	eq
 80040c6:	2301      	moveq	r3, #1
 80040c8:	2300      	movne	r3, #0
 80040ca:	b2db      	uxtb	r3, r3
 80040cc:	461a      	mov	r2, r3
 80040ce:	79fb      	ldrb	r3, [r7, #7]
 80040d0:	429a      	cmp	r2, r3
 80040d2:	d0c5      	beq.n	8004060 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80040d4:	2300      	movs	r3, #0
}
 80040d6:	4618      	mov	r0, r3
 80040d8:	3710      	adds	r7, #16
 80040da:	46bd      	mov	sp, r7
 80040dc:	bd80      	pop	{r7, pc}
	...

080040e0 <__libc_init_array>:
 80040e0:	b570      	push	{r4, r5, r6, lr}
 80040e2:	4e0d      	ldr	r6, [pc, #52]	; (8004118 <__libc_init_array+0x38>)
 80040e4:	4c0d      	ldr	r4, [pc, #52]	; (800411c <__libc_init_array+0x3c>)
 80040e6:	1ba4      	subs	r4, r4, r6
 80040e8:	10a4      	asrs	r4, r4, #2
 80040ea:	2500      	movs	r5, #0
 80040ec:	42a5      	cmp	r5, r4
 80040ee:	d109      	bne.n	8004104 <__libc_init_array+0x24>
 80040f0:	4e0b      	ldr	r6, [pc, #44]	; (8004120 <__libc_init_array+0x40>)
 80040f2:	4c0c      	ldr	r4, [pc, #48]	; (8004124 <__libc_init_array+0x44>)
 80040f4:	f000 f820 	bl	8004138 <_init>
 80040f8:	1ba4      	subs	r4, r4, r6
 80040fa:	10a4      	asrs	r4, r4, #2
 80040fc:	2500      	movs	r5, #0
 80040fe:	42a5      	cmp	r5, r4
 8004100:	d105      	bne.n	800410e <__libc_init_array+0x2e>
 8004102:	bd70      	pop	{r4, r5, r6, pc}
 8004104:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8004108:	4798      	blx	r3
 800410a:	3501      	adds	r5, #1
 800410c:	e7ee      	b.n	80040ec <__libc_init_array+0xc>
 800410e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8004112:	4798      	blx	r3
 8004114:	3501      	adds	r5, #1
 8004116:	e7f2      	b.n	80040fe <__libc_init_array+0x1e>
 8004118:	080041b4 	.word	0x080041b4
 800411c:	080041b4 	.word	0x080041b4
 8004120:	080041b4 	.word	0x080041b4
 8004124:	080041b8 	.word	0x080041b8

08004128 <memset>:
 8004128:	4402      	add	r2, r0
 800412a:	4603      	mov	r3, r0
 800412c:	4293      	cmp	r3, r2
 800412e:	d100      	bne.n	8004132 <memset+0xa>
 8004130:	4770      	bx	lr
 8004132:	f803 1b01 	strb.w	r1, [r3], #1
 8004136:	e7f9      	b.n	800412c <memset+0x4>

08004138 <_init>:
 8004138:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800413a:	bf00      	nop
 800413c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800413e:	bc08      	pop	{r3}
 8004140:	469e      	mov	lr, r3
 8004142:	4770      	bx	lr

08004144 <_fini>:
 8004144:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004146:	bf00      	nop
 8004148:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800414a:	bc08      	pop	{r3}
 800414c:	469e      	mov	lr, r3
 800414e:	4770      	bx	lr
