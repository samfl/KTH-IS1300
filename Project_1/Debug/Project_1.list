
Project_1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003ec8  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000060  08004050  08004050  00014050  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080040b0  080040b0  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  080040b0  080040b0  000140b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080040b8  080040b8  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080040b8  080040b8  000140b8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080040bc  080040bc  000140bc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  080040c0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000250  2000000c  080040cc  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000025c  080040cc  0002025c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001102c  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00002430  00000000  00000000  00031068  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000e30  00000000  00000000  00033498  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000ce8  00000000  00000000  000342c8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00026429  00000000  00000000  00034fb0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000d259  00000000  00000000  0005b3d9  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000ea8f4  00000000  00000000  00068632  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00152f26  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003948  00000000  00000000  00152fa4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000000c 	.word	0x2000000c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08004038 	.word	0x08004038

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000010 	.word	0x20000010
 80001c4:	08004038 	.word	0x08004038

080001c8 <strcmp>:
 80001c8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001cc:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001d0:	2a01      	cmp	r2, #1
 80001d2:	bf28      	it	cs
 80001d4:	429a      	cmpcs	r2, r3
 80001d6:	d0f7      	beq.n	80001c8 <strcmp>
 80001d8:	1ad0      	subs	r0, r2, r3
 80001da:	4770      	bx	lr

080001dc <__aeabi_uldivmod>:
 80001dc:	b953      	cbnz	r3, 80001f4 <__aeabi_uldivmod+0x18>
 80001de:	b94a      	cbnz	r2, 80001f4 <__aeabi_uldivmod+0x18>
 80001e0:	2900      	cmp	r1, #0
 80001e2:	bf08      	it	eq
 80001e4:	2800      	cmpeq	r0, #0
 80001e6:	bf1c      	itt	ne
 80001e8:	f04f 31ff 	movne.w	r1, #4294967295
 80001ec:	f04f 30ff 	movne.w	r0, #4294967295
 80001f0:	f000 b972 	b.w	80004d8 <__aeabi_idiv0>
 80001f4:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001fc:	f000 f806 	bl	800020c <__udivmoddi4>
 8000200:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000204:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000208:	b004      	add	sp, #16
 800020a:	4770      	bx	lr

0800020c <__udivmoddi4>:
 800020c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000210:	9e08      	ldr	r6, [sp, #32]
 8000212:	4604      	mov	r4, r0
 8000214:	4688      	mov	r8, r1
 8000216:	2b00      	cmp	r3, #0
 8000218:	d14b      	bne.n	80002b2 <__udivmoddi4+0xa6>
 800021a:	428a      	cmp	r2, r1
 800021c:	4615      	mov	r5, r2
 800021e:	d967      	bls.n	80002f0 <__udivmoddi4+0xe4>
 8000220:	fab2 f282 	clz	r2, r2
 8000224:	b14a      	cbz	r2, 800023a <__udivmoddi4+0x2e>
 8000226:	f1c2 0720 	rsb	r7, r2, #32
 800022a:	fa01 f302 	lsl.w	r3, r1, r2
 800022e:	fa20 f707 	lsr.w	r7, r0, r7
 8000232:	4095      	lsls	r5, r2
 8000234:	ea47 0803 	orr.w	r8, r7, r3
 8000238:	4094      	lsls	r4, r2
 800023a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800023e:	0c23      	lsrs	r3, r4, #16
 8000240:	fbb8 f7fe 	udiv	r7, r8, lr
 8000244:	fa1f fc85 	uxth.w	ip, r5
 8000248:	fb0e 8817 	mls	r8, lr, r7, r8
 800024c:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000250:	fb07 f10c 	mul.w	r1, r7, ip
 8000254:	4299      	cmp	r1, r3
 8000256:	d909      	bls.n	800026c <__udivmoddi4+0x60>
 8000258:	18eb      	adds	r3, r5, r3
 800025a:	f107 30ff 	add.w	r0, r7, #4294967295
 800025e:	f080 811b 	bcs.w	8000498 <__udivmoddi4+0x28c>
 8000262:	4299      	cmp	r1, r3
 8000264:	f240 8118 	bls.w	8000498 <__udivmoddi4+0x28c>
 8000268:	3f02      	subs	r7, #2
 800026a:	442b      	add	r3, r5
 800026c:	1a5b      	subs	r3, r3, r1
 800026e:	b2a4      	uxth	r4, r4
 8000270:	fbb3 f0fe 	udiv	r0, r3, lr
 8000274:	fb0e 3310 	mls	r3, lr, r0, r3
 8000278:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800027c:	fb00 fc0c 	mul.w	ip, r0, ip
 8000280:	45a4      	cmp	ip, r4
 8000282:	d909      	bls.n	8000298 <__udivmoddi4+0x8c>
 8000284:	192c      	adds	r4, r5, r4
 8000286:	f100 33ff 	add.w	r3, r0, #4294967295
 800028a:	f080 8107 	bcs.w	800049c <__udivmoddi4+0x290>
 800028e:	45a4      	cmp	ip, r4
 8000290:	f240 8104 	bls.w	800049c <__udivmoddi4+0x290>
 8000294:	3802      	subs	r0, #2
 8000296:	442c      	add	r4, r5
 8000298:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 800029c:	eba4 040c 	sub.w	r4, r4, ip
 80002a0:	2700      	movs	r7, #0
 80002a2:	b11e      	cbz	r6, 80002ac <__udivmoddi4+0xa0>
 80002a4:	40d4      	lsrs	r4, r2
 80002a6:	2300      	movs	r3, #0
 80002a8:	e9c6 4300 	strd	r4, r3, [r6]
 80002ac:	4639      	mov	r1, r7
 80002ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b2:	428b      	cmp	r3, r1
 80002b4:	d909      	bls.n	80002ca <__udivmoddi4+0xbe>
 80002b6:	2e00      	cmp	r6, #0
 80002b8:	f000 80eb 	beq.w	8000492 <__udivmoddi4+0x286>
 80002bc:	2700      	movs	r7, #0
 80002be:	e9c6 0100 	strd	r0, r1, [r6]
 80002c2:	4638      	mov	r0, r7
 80002c4:	4639      	mov	r1, r7
 80002c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ca:	fab3 f783 	clz	r7, r3
 80002ce:	2f00      	cmp	r7, #0
 80002d0:	d147      	bne.n	8000362 <__udivmoddi4+0x156>
 80002d2:	428b      	cmp	r3, r1
 80002d4:	d302      	bcc.n	80002dc <__udivmoddi4+0xd0>
 80002d6:	4282      	cmp	r2, r0
 80002d8:	f200 80fa 	bhi.w	80004d0 <__udivmoddi4+0x2c4>
 80002dc:	1a84      	subs	r4, r0, r2
 80002de:	eb61 0303 	sbc.w	r3, r1, r3
 80002e2:	2001      	movs	r0, #1
 80002e4:	4698      	mov	r8, r3
 80002e6:	2e00      	cmp	r6, #0
 80002e8:	d0e0      	beq.n	80002ac <__udivmoddi4+0xa0>
 80002ea:	e9c6 4800 	strd	r4, r8, [r6]
 80002ee:	e7dd      	b.n	80002ac <__udivmoddi4+0xa0>
 80002f0:	b902      	cbnz	r2, 80002f4 <__udivmoddi4+0xe8>
 80002f2:	deff      	udf	#255	; 0xff
 80002f4:	fab2 f282 	clz	r2, r2
 80002f8:	2a00      	cmp	r2, #0
 80002fa:	f040 808f 	bne.w	800041c <__udivmoddi4+0x210>
 80002fe:	1b49      	subs	r1, r1, r5
 8000300:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000304:	fa1f f885 	uxth.w	r8, r5
 8000308:	2701      	movs	r7, #1
 800030a:	fbb1 fcfe 	udiv	ip, r1, lr
 800030e:	0c23      	lsrs	r3, r4, #16
 8000310:	fb0e 111c 	mls	r1, lr, ip, r1
 8000314:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000318:	fb08 f10c 	mul.w	r1, r8, ip
 800031c:	4299      	cmp	r1, r3
 800031e:	d907      	bls.n	8000330 <__udivmoddi4+0x124>
 8000320:	18eb      	adds	r3, r5, r3
 8000322:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000326:	d202      	bcs.n	800032e <__udivmoddi4+0x122>
 8000328:	4299      	cmp	r1, r3
 800032a:	f200 80cd 	bhi.w	80004c8 <__udivmoddi4+0x2bc>
 800032e:	4684      	mov	ip, r0
 8000330:	1a59      	subs	r1, r3, r1
 8000332:	b2a3      	uxth	r3, r4
 8000334:	fbb1 f0fe 	udiv	r0, r1, lr
 8000338:	fb0e 1410 	mls	r4, lr, r0, r1
 800033c:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000340:	fb08 f800 	mul.w	r8, r8, r0
 8000344:	45a0      	cmp	r8, r4
 8000346:	d907      	bls.n	8000358 <__udivmoddi4+0x14c>
 8000348:	192c      	adds	r4, r5, r4
 800034a:	f100 33ff 	add.w	r3, r0, #4294967295
 800034e:	d202      	bcs.n	8000356 <__udivmoddi4+0x14a>
 8000350:	45a0      	cmp	r8, r4
 8000352:	f200 80b6 	bhi.w	80004c2 <__udivmoddi4+0x2b6>
 8000356:	4618      	mov	r0, r3
 8000358:	eba4 0408 	sub.w	r4, r4, r8
 800035c:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000360:	e79f      	b.n	80002a2 <__udivmoddi4+0x96>
 8000362:	f1c7 0c20 	rsb	ip, r7, #32
 8000366:	40bb      	lsls	r3, r7
 8000368:	fa22 fe0c 	lsr.w	lr, r2, ip
 800036c:	ea4e 0e03 	orr.w	lr, lr, r3
 8000370:	fa01 f407 	lsl.w	r4, r1, r7
 8000374:	fa20 f50c 	lsr.w	r5, r0, ip
 8000378:	fa21 f30c 	lsr.w	r3, r1, ip
 800037c:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000380:	4325      	orrs	r5, r4
 8000382:	fbb3 f9f8 	udiv	r9, r3, r8
 8000386:	0c2c      	lsrs	r4, r5, #16
 8000388:	fb08 3319 	mls	r3, r8, r9, r3
 800038c:	fa1f fa8e 	uxth.w	sl, lr
 8000390:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000394:	fb09 f40a 	mul.w	r4, r9, sl
 8000398:	429c      	cmp	r4, r3
 800039a:	fa02 f207 	lsl.w	r2, r2, r7
 800039e:	fa00 f107 	lsl.w	r1, r0, r7
 80003a2:	d90b      	bls.n	80003bc <__udivmoddi4+0x1b0>
 80003a4:	eb1e 0303 	adds.w	r3, lr, r3
 80003a8:	f109 30ff 	add.w	r0, r9, #4294967295
 80003ac:	f080 8087 	bcs.w	80004be <__udivmoddi4+0x2b2>
 80003b0:	429c      	cmp	r4, r3
 80003b2:	f240 8084 	bls.w	80004be <__udivmoddi4+0x2b2>
 80003b6:	f1a9 0902 	sub.w	r9, r9, #2
 80003ba:	4473      	add	r3, lr
 80003bc:	1b1b      	subs	r3, r3, r4
 80003be:	b2ad      	uxth	r5, r5
 80003c0:	fbb3 f0f8 	udiv	r0, r3, r8
 80003c4:	fb08 3310 	mls	r3, r8, r0, r3
 80003c8:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80003cc:	fb00 fa0a 	mul.w	sl, r0, sl
 80003d0:	45a2      	cmp	sl, r4
 80003d2:	d908      	bls.n	80003e6 <__udivmoddi4+0x1da>
 80003d4:	eb1e 0404 	adds.w	r4, lr, r4
 80003d8:	f100 33ff 	add.w	r3, r0, #4294967295
 80003dc:	d26b      	bcs.n	80004b6 <__udivmoddi4+0x2aa>
 80003de:	45a2      	cmp	sl, r4
 80003e0:	d969      	bls.n	80004b6 <__udivmoddi4+0x2aa>
 80003e2:	3802      	subs	r0, #2
 80003e4:	4474      	add	r4, lr
 80003e6:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80003ea:	fba0 8902 	umull	r8, r9, r0, r2
 80003ee:	eba4 040a 	sub.w	r4, r4, sl
 80003f2:	454c      	cmp	r4, r9
 80003f4:	46c2      	mov	sl, r8
 80003f6:	464b      	mov	r3, r9
 80003f8:	d354      	bcc.n	80004a4 <__udivmoddi4+0x298>
 80003fa:	d051      	beq.n	80004a0 <__udivmoddi4+0x294>
 80003fc:	2e00      	cmp	r6, #0
 80003fe:	d069      	beq.n	80004d4 <__udivmoddi4+0x2c8>
 8000400:	ebb1 050a 	subs.w	r5, r1, sl
 8000404:	eb64 0403 	sbc.w	r4, r4, r3
 8000408:	fa04 fc0c 	lsl.w	ip, r4, ip
 800040c:	40fd      	lsrs	r5, r7
 800040e:	40fc      	lsrs	r4, r7
 8000410:	ea4c 0505 	orr.w	r5, ip, r5
 8000414:	e9c6 5400 	strd	r5, r4, [r6]
 8000418:	2700      	movs	r7, #0
 800041a:	e747      	b.n	80002ac <__udivmoddi4+0xa0>
 800041c:	f1c2 0320 	rsb	r3, r2, #32
 8000420:	fa20 f703 	lsr.w	r7, r0, r3
 8000424:	4095      	lsls	r5, r2
 8000426:	fa01 f002 	lsl.w	r0, r1, r2
 800042a:	fa21 f303 	lsr.w	r3, r1, r3
 800042e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000432:	4338      	orrs	r0, r7
 8000434:	0c01      	lsrs	r1, r0, #16
 8000436:	fbb3 f7fe 	udiv	r7, r3, lr
 800043a:	fa1f f885 	uxth.w	r8, r5
 800043e:	fb0e 3317 	mls	r3, lr, r7, r3
 8000442:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000446:	fb07 f308 	mul.w	r3, r7, r8
 800044a:	428b      	cmp	r3, r1
 800044c:	fa04 f402 	lsl.w	r4, r4, r2
 8000450:	d907      	bls.n	8000462 <__udivmoddi4+0x256>
 8000452:	1869      	adds	r1, r5, r1
 8000454:	f107 3cff 	add.w	ip, r7, #4294967295
 8000458:	d22f      	bcs.n	80004ba <__udivmoddi4+0x2ae>
 800045a:	428b      	cmp	r3, r1
 800045c:	d92d      	bls.n	80004ba <__udivmoddi4+0x2ae>
 800045e:	3f02      	subs	r7, #2
 8000460:	4429      	add	r1, r5
 8000462:	1acb      	subs	r3, r1, r3
 8000464:	b281      	uxth	r1, r0
 8000466:	fbb3 f0fe 	udiv	r0, r3, lr
 800046a:	fb0e 3310 	mls	r3, lr, r0, r3
 800046e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000472:	fb00 f308 	mul.w	r3, r0, r8
 8000476:	428b      	cmp	r3, r1
 8000478:	d907      	bls.n	800048a <__udivmoddi4+0x27e>
 800047a:	1869      	adds	r1, r5, r1
 800047c:	f100 3cff 	add.w	ip, r0, #4294967295
 8000480:	d217      	bcs.n	80004b2 <__udivmoddi4+0x2a6>
 8000482:	428b      	cmp	r3, r1
 8000484:	d915      	bls.n	80004b2 <__udivmoddi4+0x2a6>
 8000486:	3802      	subs	r0, #2
 8000488:	4429      	add	r1, r5
 800048a:	1ac9      	subs	r1, r1, r3
 800048c:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000490:	e73b      	b.n	800030a <__udivmoddi4+0xfe>
 8000492:	4637      	mov	r7, r6
 8000494:	4630      	mov	r0, r6
 8000496:	e709      	b.n	80002ac <__udivmoddi4+0xa0>
 8000498:	4607      	mov	r7, r0
 800049a:	e6e7      	b.n	800026c <__udivmoddi4+0x60>
 800049c:	4618      	mov	r0, r3
 800049e:	e6fb      	b.n	8000298 <__udivmoddi4+0x8c>
 80004a0:	4541      	cmp	r1, r8
 80004a2:	d2ab      	bcs.n	80003fc <__udivmoddi4+0x1f0>
 80004a4:	ebb8 0a02 	subs.w	sl, r8, r2
 80004a8:	eb69 020e 	sbc.w	r2, r9, lr
 80004ac:	3801      	subs	r0, #1
 80004ae:	4613      	mov	r3, r2
 80004b0:	e7a4      	b.n	80003fc <__udivmoddi4+0x1f0>
 80004b2:	4660      	mov	r0, ip
 80004b4:	e7e9      	b.n	800048a <__udivmoddi4+0x27e>
 80004b6:	4618      	mov	r0, r3
 80004b8:	e795      	b.n	80003e6 <__udivmoddi4+0x1da>
 80004ba:	4667      	mov	r7, ip
 80004bc:	e7d1      	b.n	8000462 <__udivmoddi4+0x256>
 80004be:	4681      	mov	r9, r0
 80004c0:	e77c      	b.n	80003bc <__udivmoddi4+0x1b0>
 80004c2:	3802      	subs	r0, #2
 80004c4:	442c      	add	r4, r5
 80004c6:	e747      	b.n	8000358 <__udivmoddi4+0x14c>
 80004c8:	f1ac 0c02 	sub.w	ip, ip, #2
 80004cc:	442b      	add	r3, r5
 80004ce:	e72f      	b.n	8000330 <__udivmoddi4+0x124>
 80004d0:	4638      	mov	r0, r7
 80004d2:	e708      	b.n	80002e6 <__udivmoddi4+0xda>
 80004d4:	4637      	mov	r7, r6
 80004d6:	e6e9      	b.n	80002ac <__udivmoddi4+0xa0>

080004d8 <__aeabi_idiv0>:
 80004d8:	4770      	bx	lr
 80004da:	bf00      	nop

080004dc <Set_cs>:
 *      Author: samfl
 */

#include <display.h>

void Set_cs(uint8_t signal) {
 80004dc:	b580      	push	{r7, lr}
 80004de:	b082      	sub	sp, #8
 80004e0:	af00      	add	r7, sp, #0
 80004e2:	4603      	mov	r3, r0
 80004e4:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(CS_SPI2_GPIO_Port, CS_SPI2_Pin, signal);
 80004e6:	79fb      	ldrb	r3, [r7, #7]
 80004e8:	461a      	mov	r2, r3
 80004ea:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80004ee:	4803      	ldr	r0, [pc, #12]	; (80004fc <Set_cs+0x20>)
 80004f0:	f001 f99c 	bl	800182c <HAL_GPIO_WritePin>
}
 80004f4:	bf00      	nop
 80004f6:	3708      	adds	r7, #8
 80004f8:	46bd      	mov	sp, r7
 80004fa:	bd80      	pop	{r7, pc}
 80004fc:	48000400 	.word	0x48000400

08000500 <Display_color>:
	Write_instruction(0x38); 	// 8 bit data length extension
	Write_instruction(0x0F);	// Display on, cursor on, blink on
	return;
}

void Display_color(char color[]) {
 8000500:	b580      	push	{r7, lr}
 8000502:	b082      	sub	sp, #8
 8000504:	af00      	add	r7, sp, #0
 8000506:	6078      	str	r0, [r7, #4]
	if(strcmp(color, "red")) HAL_GPIO_WritePin(Display_red_GPIO_Port, Display_red_Pin, SET);
 8000508:	4915      	ldr	r1, [pc, #84]	; (8000560 <Display_color+0x60>)
 800050a:	6878      	ldr	r0, [r7, #4]
 800050c:	f7ff fe5c 	bl	80001c8 <strcmp>
 8000510:	4603      	mov	r3, r0
 8000512:	2b00      	cmp	r3, #0
 8000514:	d004      	beq.n	8000520 <Display_color+0x20>
 8000516:	2201      	movs	r2, #1
 8000518:	2180      	movs	r1, #128	; 0x80
 800051a:	4812      	ldr	r0, [pc, #72]	; (8000564 <Display_color+0x64>)
 800051c:	f001 f986 	bl	800182c <HAL_GPIO_WritePin>
	if(strcmp(color, "green")) HAL_GPIO_WritePin(Display_green_GPIO_Port, Display_green_Pin, SET);
 8000520:	4911      	ldr	r1, [pc, #68]	; (8000568 <Display_color+0x68>)
 8000522:	6878      	ldr	r0, [r7, #4]
 8000524:	f7ff fe50 	bl	80001c8 <strcmp>
 8000528:	4603      	mov	r3, r0
 800052a:	2b00      	cmp	r3, #0
 800052c:	d005      	beq.n	800053a <Display_color+0x3a>
 800052e:	2201      	movs	r2, #1
 8000530:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000534:	480b      	ldr	r0, [pc, #44]	; (8000564 <Display_color+0x64>)
 8000536:	f001 f979 	bl	800182c <HAL_GPIO_WritePin>
	if(strcmp(color, "white")) HAL_GPIO_WritePin(Display_white_GPIO_Port, Display_white_Pin, SET);
 800053a:	490c      	ldr	r1, [pc, #48]	; (800056c <Display_color+0x6c>)
 800053c:	6878      	ldr	r0, [r7, #4]
 800053e:	f7ff fe43 	bl	80001c8 <strcmp>
 8000542:	4603      	mov	r3, r0
 8000544:	2b00      	cmp	r3, #0
 8000546:	d006      	beq.n	8000556 <Display_color+0x56>
 8000548:	2201      	movs	r2, #1
 800054a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800054e:	4805      	ldr	r0, [pc, #20]	; (8000564 <Display_color+0x64>)
 8000550:	f001 f96c 	bl	800182c <HAL_GPIO_WritePin>
	return;
 8000554:	bf00      	nop
 8000556:	bf00      	nop
}
 8000558:	3708      	adds	r7, #8
 800055a:	46bd      	mov	sp, r7
 800055c:	bd80      	pop	{r7, pc}
 800055e:	bf00      	nop
 8000560:	08004050 	.word	0x08004050
 8000564:	48000800 	.word	0x48000800
 8000568:	08004054 	.word	0x08004054
 800056c:	0800405c 	.word	0x0800405c

08000570 <prephexa>:

void prephexa(uint8_t hexa, uint8_t *adress){
 8000570:	b480      	push	{r7}
 8000572:	b083      	sub	sp, #12
 8000574:	af00      	add	r7, sp, #0
 8000576:	4603      	mov	r3, r0
 8000578:	6039      	str	r1, [r7, #0]
 800057a:	71fb      	strb	r3, [r7, #7]
	adress[1] = hexa & 0x0f;
 800057c:	683b      	ldr	r3, [r7, #0]
 800057e:	3301      	adds	r3, #1
 8000580:	79fa      	ldrb	r2, [r7, #7]
 8000582:	f002 020f 	and.w	r2, r2, #15
 8000586:	b2d2      	uxtb	r2, r2
 8000588:	701a      	strb	r2, [r3, #0]
	adress[2] = (hexa >> 4) & 0x0f;
 800058a:	683b      	ldr	r3, [r7, #0]
 800058c:	3302      	adds	r3, #2
 800058e:	79fa      	ldrb	r2, [r7, #7]
 8000590:	0912      	lsrs	r2, r2, #4
 8000592:	b2d2      	uxtb	r2, r2
 8000594:	701a      	strb	r2, [r3, #0]

	return;
 8000596:	bf00      	nop
}
 8000598:	370c      	adds	r7, #12
 800059a:	46bd      	mov	sp, r7
 800059c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005a0:	4770      	bx	lr
	...

080005a4 <LCDinit>:

void LCDinit(void)
{
 80005a4:	b580      	push	{r7, lr}
 80005a6:	b082      	sub	sp, #8
 80005a8:	af00      	add	r7, sp, #0
	uint8_t lcd_data[3];
	lcd_data[0] = 0x1f;
 80005aa:	231f      	movs	r3, #31
 80005ac:	713b      	strb	r3, [r7, #4]

	    Set_cs(1);
 80005ae:	2001      	movs	r0, #1
 80005b0:	f7ff ff94 	bl	80004dc <Set_cs>
	    HAL_Delay(10);
 80005b4:	200a      	movs	r0, #10
 80005b6:	f000 fe89 	bl	80012cc <HAL_Delay>
	    Set_cs(0);
 80005ba:	2000      	movs	r0, #0
 80005bc:	f7ff ff8e 	bl	80004dc <Set_cs>

	    HAL_GPIO_WritePin(Display_reset_GPIO_Port, Display_reset_Pin, GPIO_PIN_SET);
 80005c0:	2201      	movs	r2, #1
 80005c2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80005c6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80005ca:	f001 f92f 	bl	800182c <HAL_GPIO_WritePin>
	    HAL_Delay(10);
 80005ce:	200a      	movs	r0, #10
 80005d0:	f000 fe7c 	bl	80012cc <HAL_Delay>

	    prephexa(0x3a, lcd_data);
 80005d4:	1d3b      	adds	r3, r7, #4
 80005d6:	4619      	mov	r1, r3
 80005d8:	203a      	movs	r0, #58	; 0x3a
 80005da:	f7ff ffc9 	bl	8000570 <prephexa>
	    HAL_SPI_Transmit(&hspi2, lcd_data,3,10); //function set
 80005de:	1d39      	adds	r1, r7, #4
 80005e0:	230a      	movs	r3, #10
 80005e2:	2203      	movs	r2, #3
 80005e4:	48b3      	ldr	r0, [pc, #716]	; (80008b4 <LCDinit+0x310>)
 80005e6:	f002 fdb1 	bl	800314c <HAL_SPI_Transmit>

	    Set_cs(1);
 80005ea:	2001      	movs	r0, #1
 80005ec:	f7ff ff76 	bl	80004dc <Set_cs>
	    HAL_Delay(10);
 80005f0:	200a      	movs	r0, #10
 80005f2:	f000 fe6b 	bl	80012cc <HAL_Delay>
	    Set_cs(0);
 80005f6:	2000      	movs	r0, #0
 80005f8:	f7ff ff70 	bl	80004dc <Set_cs>

	    prephexa(0x09, lcd_data); //4 line initiation
 80005fc:	1d3b      	adds	r3, r7, #4
 80005fe:	4619      	mov	r1, r3
 8000600:	2009      	movs	r0, #9
 8000602:	f7ff ffb5 	bl	8000570 <prephexa>
	    HAL_SPI_Transmit(&hspi2, lcd_data,3,10);
 8000606:	1d39      	adds	r1, r7, #4
 8000608:	230a      	movs	r3, #10
 800060a:	2203      	movs	r2, #3
 800060c:	48a9      	ldr	r0, [pc, #676]	; (80008b4 <LCDinit+0x310>)
 800060e:	f002 fd9d 	bl	800314c <HAL_SPI_Transmit>

	    Set_cs(1);
 8000612:	2001      	movs	r0, #1
 8000614:	f7ff ff62 	bl	80004dc <Set_cs>
	    HAL_Delay(10);
 8000618:	200a      	movs	r0, #10
 800061a:	f000 fe57 	bl	80012cc <HAL_Delay>
	    Set_cs(0);
 800061e:	2000      	movs	r0, #0
 8000620:	f7ff ff5c 	bl	80004dc <Set_cs>

	    prephexa(0x06, lcd_data); //botton view
 8000624:	1d3b      	adds	r3, r7, #4
 8000626:	4619      	mov	r1, r3
 8000628:	2006      	movs	r0, #6
 800062a:	f7ff ffa1 	bl	8000570 <prephexa>
	    HAL_SPI_Transmit(&hspi2, lcd_data,3,10);
 800062e:	1d39      	adds	r1, r7, #4
 8000630:	230a      	movs	r3, #10
 8000632:	2203      	movs	r2, #3
 8000634:	489f      	ldr	r0, [pc, #636]	; (80008b4 <LCDinit+0x310>)
 8000636:	f002 fd89 	bl	800314c <HAL_SPI_Transmit>

	    Set_cs(1);
 800063a:	2001      	movs	r0, #1
 800063c:	f7ff ff4e 	bl	80004dc <Set_cs>
	    HAL_Delay(10);
 8000640:	200a      	movs	r0, #10
 8000642:	f000 fe43 	bl	80012cc <HAL_Delay>
	    Set_cs(0);
 8000646:	2000      	movs	r0, #0
 8000648:	f7ff ff48 	bl	80004dc <Set_cs>

	    prephexa(0x1e, lcd_data);//bias setting
 800064c:	1d3b      	adds	r3, r7, #4
 800064e:	4619      	mov	r1, r3
 8000650:	201e      	movs	r0, #30
 8000652:	f7ff ff8d 	bl	8000570 <prephexa>
	    HAL_SPI_Transmit(&hspi2, lcd_data,3,10);
 8000656:	1d39      	adds	r1, r7, #4
 8000658:	230a      	movs	r3, #10
 800065a:	2203      	movs	r2, #3
 800065c:	4895      	ldr	r0, [pc, #596]	; (80008b4 <LCDinit+0x310>)
 800065e:	f002 fd75 	bl	800314c <HAL_SPI_Transmit>

	    Set_cs(1);
 8000662:	2001      	movs	r0, #1
 8000664:	f7ff ff3a 	bl	80004dc <Set_cs>
	    HAL_Delay(10);
 8000668:	200a      	movs	r0, #10
 800066a:	f000 fe2f 	bl	80012cc <HAL_Delay>
	    Set_cs(0);
 800066e:	2000      	movs	r0, #0
 8000670:	f7ff ff34 	bl	80004dc <Set_cs>

	    prephexa(0x39, lcd_data); //function set
 8000674:	1d3b      	adds	r3, r7, #4
 8000676:	4619      	mov	r1, r3
 8000678:	2039      	movs	r0, #57	; 0x39
 800067a:	f7ff ff79 	bl	8000570 <prephexa>
	    HAL_SPI_Transmit(&hspi2, lcd_data,3,10);
 800067e:	1d39      	adds	r1, r7, #4
 8000680:	230a      	movs	r3, #10
 8000682:	2203      	movs	r2, #3
 8000684:	488b      	ldr	r0, [pc, #556]	; (80008b4 <LCDinit+0x310>)
 8000686:	f002 fd61 	bl	800314c <HAL_SPI_Transmit>

	    Set_cs(1);
 800068a:	2001      	movs	r0, #1
 800068c:	f7ff ff26 	bl	80004dc <Set_cs>
	    HAL_Delay(10);
 8000690:	200a      	movs	r0, #10
 8000692:	f000 fe1b 	bl	80012cc <HAL_Delay>
	    Set_cs(0);
 8000696:	2000      	movs	r0, #0
 8000698:	f7ff ff20 	bl	80004dc <Set_cs>

	    prephexa(0x1b, lcd_data); //internal osc
 800069c:	1d3b      	adds	r3, r7, #4
 800069e:	4619      	mov	r1, r3
 80006a0:	201b      	movs	r0, #27
 80006a2:	f7ff ff65 	bl	8000570 <prephexa>
	    HAL_SPI_Transmit(&hspi2, lcd_data,3,10);
 80006a6:	1d39      	adds	r1, r7, #4
 80006a8:	230a      	movs	r3, #10
 80006aa:	2203      	movs	r2, #3
 80006ac:	4881      	ldr	r0, [pc, #516]	; (80008b4 <LCDinit+0x310>)
 80006ae:	f002 fd4d 	bl	800314c <HAL_SPI_Transmit>

	    Set_cs(1);
 80006b2:	2001      	movs	r0, #1
 80006b4:	f7ff ff12 	bl	80004dc <Set_cs>
	    HAL_Delay(10);
 80006b8:	200a      	movs	r0, #10
 80006ba:	f000 fe07 	bl	80012cc <HAL_Delay>
	    Set_cs(0);
 80006be:	2000      	movs	r0, #0
 80006c0:	f7ff ff0c 	bl	80004dc <Set_cs>

	    prephexa(0x6e, lcd_data); //follower
 80006c4:	1d3b      	adds	r3, r7, #4
 80006c6:	4619      	mov	r1, r3
 80006c8:	206e      	movs	r0, #110	; 0x6e
 80006ca:	f7ff ff51 	bl	8000570 <prephexa>
	    HAL_SPI_Transmit(&hspi2, lcd_data,3,10);
 80006ce:	1d39      	adds	r1, r7, #4
 80006d0:	230a      	movs	r3, #10
 80006d2:	2203      	movs	r2, #3
 80006d4:	4877      	ldr	r0, [pc, #476]	; (80008b4 <LCDinit+0x310>)
 80006d6:	f002 fd39 	bl	800314c <HAL_SPI_Transmit>

	    Set_cs(1);
 80006da:	2001      	movs	r0, #1
 80006dc:	f7ff fefe 	bl	80004dc <Set_cs>
	    HAL_Delay(10);
 80006e0:	200a      	movs	r0, #10
 80006e2:	f000 fdf3 	bl	80012cc <HAL_Delay>
	    Set_cs(0);
 80006e6:	2000      	movs	r0, #0
 80006e8:	f7ff fef8 	bl	80004dc <Set_cs>

	    prephexa(0x56, lcd_data); //power control
 80006ec:	1d3b      	adds	r3, r7, #4
 80006ee:	4619      	mov	r1, r3
 80006f0:	2056      	movs	r0, #86	; 0x56
 80006f2:	f7ff ff3d 	bl	8000570 <prephexa>
	    HAL_SPI_Transmit(&hspi2, lcd_data,3,10);
 80006f6:	1d39      	adds	r1, r7, #4
 80006f8:	230a      	movs	r3, #10
 80006fa:	2203      	movs	r2, #3
 80006fc:	486d      	ldr	r0, [pc, #436]	; (80008b4 <LCDinit+0x310>)
 80006fe:	f002 fd25 	bl	800314c <HAL_SPI_Transmit>

	    Set_cs(1);
 8000702:	2001      	movs	r0, #1
 8000704:	f7ff feea 	bl	80004dc <Set_cs>
	    HAL_Delay(10);
 8000708:	200a      	movs	r0, #10
 800070a:	f000 fddf 	bl	80012cc <HAL_Delay>
	    Set_cs(0);
 800070e:	2000      	movs	r0, #0
 8000710:	f7ff fee4 	bl	80004dc <Set_cs>

	    prephexa(0x7a, lcd_data); //contrast
 8000714:	1d3b      	adds	r3, r7, #4
 8000716:	4619      	mov	r1, r3
 8000718:	207a      	movs	r0, #122	; 0x7a
 800071a:	f7ff ff29 	bl	8000570 <prephexa>
	    HAL_SPI_Transmit(&hspi2, lcd_data,3,10);
 800071e:	1d39      	adds	r1, r7, #4
 8000720:	230a      	movs	r3, #10
 8000722:	2203      	movs	r2, #3
 8000724:	4863      	ldr	r0, [pc, #396]	; (80008b4 <LCDinit+0x310>)
 8000726:	f002 fd11 	bl	800314c <HAL_SPI_Transmit>

	    Set_cs(1);
 800072a:	2001      	movs	r0, #1
 800072c:	f7ff fed6 	bl	80004dc <Set_cs>
	    HAL_Delay(10);
 8000730:	200a      	movs	r0, #10
 8000732:	f000 fdcb 	bl	80012cc <HAL_Delay>
	    Set_cs(0);
 8000736:	2000      	movs	r0, #0
 8000738:	f7ff fed0 	bl	80004dc <Set_cs>

	    prephexa(0x38, lcd_data); //function set
 800073c:	1d3b      	adds	r3, r7, #4
 800073e:	4619      	mov	r1, r3
 8000740:	2038      	movs	r0, #56	; 0x38
 8000742:	f7ff ff15 	bl	8000570 <prephexa>
	    HAL_SPI_Transmit(&hspi2, lcd_data,3,10);
 8000746:	1d39      	adds	r1, r7, #4
 8000748:	230a      	movs	r3, #10
 800074a:	2203      	movs	r2, #3
 800074c:	4859      	ldr	r0, [pc, #356]	; (80008b4 <LCDinit+0x310>)
 800074e:	f002 fcfd 	bl	800314c <HAL_SPI_Transmit>

	    Set_cs(1);
 8000752:	2001      	movs	r0, #1
 8000754:	f7ff fec2 	bl	80004dc <Set_cs>
	    HAL_Delay(10);
 8000758:	200a      	movs	r0, #10
 800075a:	f000 fdb7 	bl	80012cc <HAL_Delay>

	    ////// ------------------------------------------------
	    Set_cs(0);
 800075e:	2000      	movs	r0, #0
 8000760:	f7ff febc 	bl	80004dc <Set_cs>

	      prephexa(0x3a, lcd_data); //adress
 8000764:	1d3b      	adds	r3, r7, #4
 8000766:	4619      	mov	r1, r3
 8000768:	203a      	movs	r0, #58	; 0x3a
 800076a:	f7ff ff01 	bl	8000570 <prephexa>
	      HAL_SPI_Transmit(&hspi2, lcd_data,3,10);
 800076e:	1d39      	adds	r1, r7, #4
 8000770:	230a      	movs	r3, #10
 8000772:	2203      	movs	r2, #3
 8000774:	484f      	ldr	r0, [pc, #316]	; (80008b4 <LCDinit+0x310>)
 8000776:	f002 fce9 	bl	800314c <HAL_SPI_Transmit>

	      Set_cs(1);
 800077a:	2001      	movs	r0, #1
 800077c:	f7ff feae 	bl	80004dc <Set_cs>
	      HAL_Delay(10);
 8000780:	200a      	movs	r0, #10
 8000782:	f000 fda3 	bl	80012cc <HAL_Delay>

	      Set_cs(0);
 8000786:	2000      	movs	r0, #0
 8000788:	f7ff fea8 	bl	80004dc <Set_cs>

	      prephexa(0x72, lcd_data); //adress
 800078c:	1d3b      	adds	r3, r7, #4
 800078e:	4619      	mov	r1, r3
 8000790:	2072      	movs	r0, #114	; 0x72
 8000792:	f7ff feed 	bl	8000570 <prephexa>
	      HAL_SPI_Transmit(&hspi2, lcd_data,3,10);
 8000796:	1d39      	adds	r1, r7, #4
 8000798:	230a      	movs	r3, #10
 800079a:	2203      	movs	r2, #3
 800079c:	4845      	ldr	r0, [pc, #276]	; (80008b4 <LCDinit+0x310>)
 800079e:	f002 fcd5 	bl	800314c <HAL_SPI_Transmit>

	      Set_cs(1);
 80007a2:	2001      	movs	r0, #1
 80007a4:	f7ff fe9a 	bl	80004dc <Set_cs>
	      HAL_Delay(10);
 80007a8:	200a      	movs	r0, #10
 80007aa:	f000 fd8f 	bl	80012cc <HAL_Delay>

	      Set_cs(0);
 80007ae:	2000      	movs	r0, #0
 80007b0:	f7ff fe94 	bl	80004dc <Set_cs>
	      lcd_data[0] = 0x5f;
 80007b4:	235f      	movs	r3, #95	; 0x5f
 80007b6:	713b      	strb	r3, [r7, #4]
	      prephexa(0x00, lcd_data); //adress
 80007b8:	1d3b      	adds	r3, r7, #4
 80007ba:	4619      	mov	r1, r3
 80007bc:	2000      	movs	r0, #0
 80007be:	f7ff fed7 	bl	8000570 <prephexa>
	      HAL_SPI_Transmit(&hspi2, lcd_data,3,10);
 80007c2:	1d39      	adds	r1, r7, #4
 80007c4:	230a      	movs	r3, #10
 80007c6:	2203      	movs	r2, #3
 80007c8:	483a      	ldr	r0, [pc, #232]	; (80008b4 <LCDinit+0x310>)
 80007ca:	f002 fcbf 	bl	800314c <HAL_SPI_Transmit>

	      Set_cs(1);
 80007ce:	2001      	movs	r0, #1
 80007d0:	f7ff fe84 	bl	80004dc <Set_cs>
	      HAL_Delay(10);
 80007d4:	200a      	movs	r0, #10
 80007d6:	f000 fd79 	bl	80012cc <HAL_Delay>

	      Set_cs(0);
 80007da:	2000      	movs	r0, #0
 80007dc:	f7ff fe7e 	bl	80004dc <Set_cs>
	        lcd_data[0] = 0x1f;
 80007e0:	231f      	movs	r3, #31
 80007e2:	713b      	strb	r3, [r7, #4]
	        prephexa(0x38, lcd_data); //adress
 80007e4:	1d3b      	adds	r3, r7, #4
 80007e6:	4619      	mov	r1, r3
 80007e8:	2038      	movs	r0, #56	; 0x38
 80007ea:	f7ff fec1 	bl	8000570 <prephexa>
	        HAL_SPI_Transmit(&hspi2, lcd_data,3,10);
 80007ee:	1d39      	adds	r1, r7, #4
 80007f0:	230a      	movs	r3, #10
 80007f2:	2203      	movs	r2, #3
 80007f4:	482f      	ldr	r0, [pc, #188]	; (80008b4 <LCDinit+0x310>)
 80007f6:	f002 fca9 	bl	800314c <HAL_SPI_Transmit>

	        Set_cs(1);
 80007fa:	2001      	movs	r0, #1
 80007fc:	f7ff fe6e 	bl	80004dc <Set_cs>
	        HAL_Delay(10);
 8000800:	200a      	movs	r0, #10
 8000802:	f000 fd63 	bl	80012cc <HAL_Delay>

	    ////


		Set_cs(0);
 8000806:	2000      	movs	r0, #0
 8000808:	f7ff fe68 	bl	80004dc <Set_cs>

	    prephexa(0x0f, lcd_data); //display on
 800080c:	1d3b      	adds	r3, r7, #4
 800080e:	4619      	mov	r1, r3
 8000810:	200f      	movs	r0, #15
 8000812:	f7ff fead 	bl	8000570 <prephexa>
	    HAL_SPI_Transmit(&hspi2, lcd_data,3,10);
 8000816:	1d39      	adds	r1, r7, #4
 8000818:	230a      	movs	r3, #10
 800081a:	2203      	movs	r2, #3
 800081c:	4825      	ldr	r0, [pc, #148]	; (80008b4 <LCDinit+0x310>)
 800081e:	f002 fc95 	bl	800314c <HAL_SPI_Transmit>

	    Set_cs(1);
 8000822:	2001      	movs	r0, #1
 8000824:	f7ff fe5a 	bl	80004dc <Set_cs>
	    HAL_Delay(10);
 8000828:	200a      	movs	r0, #10
 800082a:	f000 fd4f 	bl	80012cc <HAL_Delay>
	    Set_cs(0);
 800082e:	2000      	movs	r0, #0
 8000830:	f7ff fe54 	bl	80004dc <Set_cs>

	    prephexa(0x01, lcd_data); //adress
 8000834:	1d3b      	adds	r3, r7, #4
 8000836:	4619      	mov	r1, r3
 8000838:	2001      	movs	r0, #1
 800083a:	f7ff fe99 	bl	8000570 <prephexa>
	    HAL_SPI_Transmit(&hspi2, lcd_data,3,10);
 800083e:	1d39      	adds	r1, r7, #4
 8000840:	230a      	movs	r3, #10
 8000842:	2203      	movs	r2, #3
 8000844:	481b      	ldr	r0, [pc, #108]	; (80008b4 <LCDinit+0x310>)
 8000846:	f002 fc81 	bl	800314c <HAL_SPI_Transmit>

	    Set_cs(1);
 800084a:	2001      	movs	r0, #1
 800084c:	f7ff fe46 	bl	80004dc <Set_cs>
	    HAL_Delay(10);
 8000850:	200a      	movs	r0, #10
 8000852:	f000 fd3b 	bl	80012cc <HAL_Delay>



	    lcd_data[0] = 0x5f;
 8000856:	235f      	movs	r3, #95	; 0x5f
 8000858:	713b      	strb	r3, [r7, #4]
	    Set_cs(0);
 800085a:	2000      	movs	r0, #0
 800085c:	f7ff fe3e 	bl	80004dc <Set_cs>

	    prephexa(0xff, lcd_data); //ascii
 8000860:	1d3b      	adds	r3, r7, #4
 8000862:	4619      	mov	r1, r3
 8000864:	20ff      	movs	r0, #255	; 0xff
 8000866:	f7ff fe83 	bl	8000570 <prephexa>
	    HAL_SPI_Transmit(&hspi2, lcd_data,3,10);
 800086a:	1d39      	adds	r1, r7, #4
 800086c:	230a      	movs	r3, #10
 800086e:	2203      	movs	r2, #3
 8000870:	4810      	ldr	r0, [pc, #64]	; (80008b4 <LCDinit+0x310>)
 8000872:	f002 fc6b 	bl	800314c <HAL_SPI_Transmit>

	    Set_cs(1);
 8000876:	2001      	movs	r0, #1
 8000878:	f7ff fe30 	bl	80004dc <Set_cs>
	    HAL_Delay(10);
 800087c:	200a      	movs	r0, #10
 800087e:	f000 fd25 	bl	80012cc <HAL_Delay>

	    Set_cs(0);
 8000882:	2000      	movs	r0, #0
 8000884:	f7ff fe2a 	bl	80004dc <Set_cs>

	    prephexa(0x30, lcd_data); //ascii
 8000888:	1d3b      	adds	r3, r7, #4
 800088a:	4619      	mov	r1, r3
 800088c:	2030      	movs	r0, #48	; 0x30
 800088e:	f7ff fe6f 	bl	8000570 <prephexa>
	    HAL_SPI_Transmit(&hspi2, lcd_data,3,10);
 8000892:	1d39      	adds	r1, r7, #4
 8000894:	230a      	movs	r3, #10
 8000896:	2203      	movs	r2, #3
 8000898:	4806      	ldr	r0, [pc, #24]	; (80008b4 <LCDinit+0x310>)
 800089a:	f002 fc57 	bl	800314c <HAL_SPI_Transmit>

	    Set_cs(1);
 800089e:	2001      	movs	r0, #1
 80008a0:	f7ff fe1c 	bl	80004dc <Set_cs>
	    HAL_Delay(10);
 80008a4:	200a      	movs	r0, #10
 80008a6:	f000 fd11 	bl	80012cc <HAL_Delay>
}
 80008aa:	bf00      	nop
 80008ac:	3708      	adds	r7, #8
 80008ae:	46bd      	mov	sp, r7
 80008b0:	bd80      	pop	{r7, pc}
 80008b2:	bf00      	nop
 80008b4:	20000074 	.word	0x20000074

080008b8 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80008b8:	b580      	push	{r7, lr}
 80008ba:	b08a      	sub	sp, #40	; 0x28
 80008bc:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008be:	f107 0314 	add.w	r3, r7, #20
 80008c2:	2200      	movs	r2, #0
 80008c4:	601a      	str	r2, [r3, #0]
 80008c6:	605a      	str	r2, [r3, #4]
 80008c8:	609a      	str	r2, [r3, #8]
 80008ca:	60da      	str	r2, [r3, #12]
 80008cc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80008ce:	4b4c      	ldr	r3, [pc, #304]	; (8000a00 <MX_GPIO_Init+0x148>)
 80008d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008d2:	4a4b      	ldr	r2, [pc, #300]	; (8000a00 <MX_GPIO_Init+0x148>)
 80008d4:	f043 0304 	orr.w	r3, r3, #4
 80008d8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80008da:	4b49      	ldr	r3, [pc, #292]	; (8000a00 <MX_GPIO_Init+0x148>)
 80008dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008de:	f003 0304 	and.w	r3, r3, #4
 80008e2:	613b      	str	r3, [r7, #16]
 80008e4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80008e6:	4b46      	ldr	r3, [pc, #280]	; (8000a00 <MX_GPIO_Init+0x148>)
 80008e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008ea:	4a45      	ldr	r2, [pc, #276]	; (8000a00 <MX_GPIO_Init+0x148>)
 80008ec:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80008f0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80008f2:	4b43      	ldr	r3, [pc, #268]	; (8000a00 <MX_GPIO_Init+0x148>)
 80008f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008f6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80008fa:	60fb      	str	r3, [r7, #12]
 80008fc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80008fe:	4b40      	ldr	r3, [pc, #256]	; (8000a00 <MX_GPIO_Init+0x148>)
 8000900:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000902:	4a3f      	ldr	r2, [pc, #252]	; (8000a00 <MX_GPIO_Init+0x148>)
 8000904:	f043 0301 	orr.w	r3, r3, #1
 8000908:	64d3      	str	r3, [r2, #76]	; 0x4c
 800090a:	4b3d      	ldr	r3, [pc, #244]	; (8000a00 <MX_GPIO_Init+0x148>)
 800090c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800090e:	f003 0301 	and.w	r3, r3, #1
 8000912:	60bb      	str	r3, [r7, #8]
 8000914:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000916:	4b3a      	ldr	r3, [pc, #232]	; (8000a00 <MX_GPIO_Init+0x148>)
 8000918:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800091a:	4a39      	ldr	r2, [pc, #228]	; (8000a00 <MX_GPIO_Init+0x148>)
 800091c:	f043 0302 	orr.w	r3, r3, #2
 8000920:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000922:	4b37      	ldr	r3, [pc, #220]	; (8000a00 <MX_GPIO_Init+0x148>)
 8000924:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000926:	f003 0302 	and.w	r3, r3, #2
 800092a:	607b      	str	r3, [r7, #4]
 800092c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800092e:	4b34      	ldr	r3, [pc, #208]	; (8000a00 <MX_GPIO_Init+0x148>)
 8000930:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000932:	4a33      	ldr	r2, [pc, #204]	; (8000a00 <MX_GPIO_Init+0x148>)
 8000934:	f043 0308 	orr.w	r3, r3, #8
 8000938:	64d3      	str	r3, [r2, #76]	; 0x4c
 800093a:	4b31      	ldr	r3, [pc, #196]	; (8000a00 <MX_GPIO_Init+0x148>)
 800093c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800093e:	f003 0308 	and.w	r3, r3, #8
 8000942:	603b      	str	r3, [r7, #0]
 8000944:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000946:	2200      	movs	r2, #0
 8000948:	2120      	movs	r1, #32
 800094a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800094e:	f000 ff6d 	bl	800182c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Rtc_out_cal_GPIO_Port, Rtc_out_cal_Pin, GPIO_PIN_RESET);
 8000952:	2200      	movs	r2, #0
 8000954:	2104      	movs	r1, #4
 8000956:	482b      	ldr	r0, [pc, #172]	; (8000a04 <MX_GPIO_Init+0x14c>)
 8000958:	f000 ff68 	bl	800182c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_SPI2_GPIO_Port, CS_SPI2_Pin, GPIO_PIN_SET);
 800095c:	2201      	movs	r2, #1
 800095e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000962:	4828      	ldr	r0, [pc, #160]	; (8000a04 <MX_GPIO_Init+0x14c>)
 8000964:	f000 ff62 	bl	800182c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, Display_red_Pin|Display_green_Pin|Display_white_Pin, GPIO_PIN_RESET);
 8000968:	2200      	movs	r2, #0
 800096a:	f44f 6148 	mov.w	r1, #3200	; 0xc80
 800096e:	4826      	ldr	r0, [pc, #152]	; (8000a08 <MX_GPIO_Init+0x150>)
 8000970:	f000 ff5c 	bl	800182c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Display_reset_GPIO_Port, Display_reset_Pin, GPIO_PIN_SET);
 8000974:	2201      	movs	r2, #1
 8000976:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800097a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800097e:	f000 ff55 	bl	800182c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000982:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000986:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000988:	4b20      	ldr	r3, [pc, #128]	; (8000a0c <MX_GPIO_Init+0x154>)
 800098a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800098c:	2300      	movs	r3, #0
 800098e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000990:	f107 0314 	add.w	r3, r7, #20
 8000994:	4619      	mov	r1, r3
 8000996:	481c      	ldr	r0, [pc, #112]	; (8000a08 <MX_GPIO_Init+0x150>)
 8000998:	f000 fda0 	bl	80014dc <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = LD2_Pin|Display_reset_Pin;
 800099c:	f248 0320 	movw	r3, #32800	; 0x8020
 80009a0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009a2:	2301      	movs	r3, #1
 80009a4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009a6:	2300      	movs	r3, #0
 80009a8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009aa:	2300      	movs	r3, #0
 80009ac:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009ae:	f107 0314 	add.w	r3, r7, #20
 80009b2:	4619      	mov	r1, r3
 80009b4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80009b8:	f000 fd90 	bl	80014dc <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = Rtc_out_cal_Pin|CS_SPI2_Pin;
 80009bc:	f241 0304 	movw	r3, #4100	; 0x1004
 80009c0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009c2:	2301      	movs	r3, #1
 80009c4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009c6:	2300      	movs	r3, #0
 80009c8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009ca:	2300      	movs	r3, #0
 80009cc:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80009ce:	f107 0314 	add.w	r3, r7, #20
 80009d2:	4619      	mov	r1, r3
 80009d4:	480b      	ldr	r0, [pc, #44]	; (8000a04 <MX_GPIO_Init+0x14c>)
 80009d6:	f000 fd81 	bl	80014dc <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = Display_red_Pin|Display_green_Pin|Display_white_Pin;
 80009da:	f44f 6348 	mov.w	r3, #3200	; 0xc80
 80009de:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009e0:	2301      	movs	r3, #1
 80009e2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009e4:	2300      	movs	r3, #0
 80009e6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009e8:	2300      	movs	r3, #0
 80009ea:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80009ec:	f107 0314 	add.w	r3, r7, #20
 80009f0:	4619      	mov	r1, r3
 80009f2:	4805      	ldr	r0, [pc, #20]	; (8000a08 <MX_GPIO_Init+0x150>)
 80009f4:	f000 fd72 	bl	80014dc <HAL_GPIO_Init>

}
 80009f8:	bf00      	nop
 80009fa:	3728      	adds	r7, #40	; 0x28
 80009fc:	46bd      	mov	sp, r7
 80009fe:	bd80      	pop	{r7, pc}
 8000a00:	40021000 	.word	0x40021000
 8000a04:	48000400 	.word	0x48000400
 8000a08:	48000800 	.word	0x48000800
 8000a0c:	10210000 	.word	0x10210000

08000a10 <MX_I2C3_Init>:

I2C_HandleTypeDef hi2c3;

/* I2C3 init function */
void MX_I2C3_Init(void)
{
 8000a10:	b580      	push	{r7, lr}
 8000a12:	af00      	add	r7, sp, #0

  hi2c3.Instance = I2C3;
 8000a14:	4b1b      	ldr	r3, [pc, #108]	; (8000a84 <MX_I2C3_Init+0x74>)
 8000a16:	4a1c      	ldr	r2, [pc, #112]	; (8000a88 <MX_I2C3_Init+0x78>)
 8000a18:	601a      	str	r2, [r3, #0]
  hi2c3.Init.Timing = 0x10909CEC;
 8000a1a:	4b1a      	ldr	r3, [pc, #104]	; (8000a84 <MX_I2C3_Init+0x74>)
 8000a1c:	4a1b      	ldr	r2, [pc, #108]	; (8000a8c <MX_I2C3_Init+0x7c>)
 8000a1e:	605a      	str	r2, [r3, #4]
  hi2c3.Init.OwnAddress1 = 0;
 8000a20:	4b18      	ldr	r3, [pc, #96]	; (8000a84 <MX_I2C3_Init+0x74>)
 8000a22:	2200      	movs	r2, #0
 8000a24:	609a      	str	r2, [r3, #8]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000a26:	4b17      	ldr	r3, [pc, #92]	; (8000a84 <MX_I2C3_Init+0x74>)
 8000a28:	2201      	movs	r2, #1
 8000a2a:	60da      	str	r2, [r3, #12]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000a2c:	4b15      	ldr	r3, [pc, #84]	; (8000a84 <MX_I2C3_Init+0x74>)
 8000a2e:	2200      	movs	r2, #0
 8000a30:	611a      	str	r2, [r3, #16]
  hi2c3.Init.OwnAddress2 = 0;
 8000a32:	4b14      	ldr	r3, [pc, #80]	; (8000a84 <MX_I2C3_Init+0x74>)
 8000a34:	2200      	movs	r2, #0
 8000a36:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000a38:	4b12      	ldr	r3, [pc, #72]	; (8000a84 <MX_I2C3_Init+0x74>)
 8000a3a:	2200      	movs	r2, #0
 8000a3c:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000a3e:	4b11      	ldr	r3, [pc, #68]	; (8000a84 <MX_I2C3_Init+0x74>)
 8000a40:	2200      	movs	r2, #0
 8000a42:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000a44:	4b0f      	ldr	r3, [pc, #60]	; (8000a84 <MX_I2C3_Init+0x74>)
 8000a46:	2200      	movs	r2, #0
 8000a48:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8000a4a:	480e      	ldr	r0, [pc, #56]	; (8000a84 <MX_I2C3_Init+0x74>)
 8000a4c:	f000 ff06 	bl	800185c <HAL_I2C_Init>
 8000a50:	4603      	mov	r3, r0
 8000a52:	2b00      	cmp	r3, #0
 8000a54:	d001      	beq.n	8000a5a <MX_I2C3_Init+0x4a>
  {
    Error_Handler();
 8000a56:	f000 f8f0 	bl	8000c3a <Error_Handler>
  }
  /** Configure Analogue filter 
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000a5a:	2100      	movs	r1, #0
 8000a5c:	4809      	ldr	r0, [pc, #36]	; (8000a84 <MX_I2C3_Init+0x74>)
 8000a5e:	f000 ff8c 	bl	800197a <HAL_I2CEx_ConfigAnalogFilter>
 8000a62:	4603      	mov	r3, r0
 8000a64:	2b00      	cmp	r3, #0
 8000a66:	d001      	beq.n	8000a6c <MX_I2C3_Init+0x5c>
  {
    Error_Handler();
 8000a68:	f000 f8e7 	bl	8000c3a <Error_Handler>
  }
  /** Configure Digital filter 
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 8000a6c:	2100      	movs	r1, #0
 8000a6e:	4805      	ldr	r0, [pc, #20]	; (8000a84 <MX_I2C3_Init+0x74>)
 8000a70:	f000 ffce 	bl	8001a10 <HAL_I2CEx_ConfigDigitalFilter>
 8000a74:	4603      	mov	r3, r0
 8000a76:	2b00      	cmp	r3, #0
 8000a78:	d001      	beq.n	8000a7e <MX_I2C3_Init+0x6e>
  {
    Error_Handler();
 8000a7a:	f000 f8de 	bl	8000c3a <Error_Handler>
  }

}
 8000a7e:	bf00      	nop
 8000a80:	bd80      	pop	{r7, pc}
 8000a82:	bf00      	nop
 8000a84:	20000028 	.word	0x20000028
 8000a88:	40005c00 	.word	0x40005c00
 8000a8c:	10909cec 	.word	0x10909cec

08000a90 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000a90:	b580      	push	{r7, lr}
 8000a92:	b08a      	sub	sp, #40	; 0x28
 8000a94:	af00      	add	r7, sp, #0
 8000a96:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a98:	f107 0314 	add.w	r3, r7, #20
 8000a9c:	2200      	movs	r2, #0
 8000a9e:	601a      	str	r2, [r3, #0]
 8000aa0:	605a      	str	r2, [r3, #4]
 8000aa2:	609a      	str	r2, [r3, #8]
 8000aa4:	60da      	str	r2, [r3, #12]
 8000aa6:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C3)
 8000aa8:	687b      	ldr	r3, [r7, #4]
 8000aaa:	681b      	ldr	r3, [r3, #0]
 8000aac:	4a17      	ldr	r2, [pc, #92]	; (8000b0c <HAL_I2C_MspInit+0x7c>)
 8000aae:	4293      	cmp	r3, r2
 8000ab0:	d127      	bne.n	8000b02 <HAL_I2C_MspInit+0x72>
  {
  /* USER CODE BEGIN I2C3_MspInit 0 */

  /* USER CODE END I2C3_MspInit 0 */
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000ab2:	4b17      	ldr	r3, [pc, #92]	; (8000b10 <HAL_I2C_MspInit+0x80>)
 8000ab4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ab6:	4a16      	ldr	r2, [pc, #88]	; (8000b10 <HAL_I2C_MspInit+0x80>)
 8000ab8:	f043 0304 	orr.w	r3, r3, #4
 8000abc:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000abe:	4b14      	ldr	r3, [pc, #80]	; (8000b10 <HAL_I2C_MspInit+0x80>)
 8000ac0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ac2:	f003 0304 	and.w	r3, r3, #4
 8000ac6:	613b      	str	r3, [r7, #16]
 8000ac8:	693b      	ldr	r3, [r7, #16]
    /**I2C3 GPIO Configuration    
    PC0     ------> I2C3_SCL
    PC1     ------> I2C3_SDA 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000aca:	2303      	movs	r3, #3
 8000acc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000ace:	2312      	movs	r3, #18
 8000ad0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000ad2:	2301      	movs	r3, #1
 8000ad4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ad6:	2303      	movs	r3, #3
 8000ad8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8000ada:	2304      	movs	r3, #4
 8000adc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000ade:	f107 0314 	add.w	r3, r7, #20
 8000ae2:	4619      	mov	r1, r3
 8000ae4:	480b      	ldr	r0, [pc, #44]	; (8000b14 <HAL_I2C_MspInit+0x84>)
 8000ae6:	f000 fcf9 	bl	80014dc <HAL_GPIO_Init>

    /* I2C3 clock enable */
    __HAL_RCC_I2C3_CLK_ENABLE();
 8000aea:	4b09      	ldr	r3, [pc, #36]	; (8000b10 <HAL_I2C_MspInit+0x80>)
 8000aec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000aee:	4a08      	ldr	r2, [pc, #32]	; (8000b10 <HAL_I2C_MspInit+0x80>)
 8000af0:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8000af4:	6593      	str	r3, [r2, #88]	; 0x58
 8000af6:	4b06      	ldr	r3, [pc, #24]	; (8000b10 <HAL_I2C_MspInit+0x80>)
 8000af8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000afa:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8000afe:	60fb      	str	r3, [r7, #12]
 8000b00:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }
}
 8000b02:	bf00      	nop
 8000b04:	3728      	adds	r7, #40	; 0x28
 8000b06:	46bd      	mov	sp, r7
 8000b08:	bd80      	pop	{r7, pc}
 8000b0a:	bf00      	nop
 8000b0c:	40005c00 	.word	0x40005c00
 8000b10:	40021000 	.word	0x40021000
 8000b14:	48000800 	.word	0x48000800

08000b18 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000b18:	b580      	push	{r7, lr}
 8000b1a:	af00      	add	r7, sp, #0
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000b1c:	f000 fb5e 	bl	80011dc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000b20:	f000 f80f 	bl	8000b42 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000b24:	f7ff fec8 	bl	80008b8 <MX_GPIO_Init>
  MX_I2C3_Init();
 8000b28:	f7ff ff72 	bl	8000a10 <MX_I2C3_Init>
  MX_SPI2_Init();
 8000b2c:	f000 f88c 	bl	8000c48 <MX_SPI2_Init>
  MX_UART4_Init();
 8000b30:	f000 f9d6 	bl	8000ee0 <MX_UART4_Init>
  MX_UART5_Init();
 8000b34:	f000 fa04 	bl	8000f40 <MX_UART5_Init>
  MX_USART2_UART_Init();
 8000b38:	f000 fa32 	bl	8000fa0 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
#ifdef RUN_TEST_PROGRAM
  Test_program();
 8000b3c:	f000 f9ac 	bl	8000e98 <Test_program>
#endif
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000b40:	e7fe      	b.n	8000b40 <main+0x28>

08000b42 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000b42:	b580      	push	{r7, lr}
 8000b44:	b0b8      	sub	sp, #224	; 0xe0
 8000b46:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000b48:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000b4c:	2244      	movs	r2, #68	; 0x44
 8000b4e:	2100      	movs	r1, #0
 8000b50:	4618      	mov	r0, r3
 8000b52:	f003 fa69 	bl	8004028 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000b56:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8000b5a:	2200      	movs	r2, #0
 8000b5c:	601a      	str	r2, [r3, #0]
 8000b5e:	605a      	str	r2, [r3, #4]
 8000b60:	609a      	str	r2, [r3, #8]
 8000b62:	60da      	str	r2, [r3, #12]
 8000b64:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000b66:	463b      	mov	r3, r7
 8000b68:	2288      	movs	r2, #136	; 0x88
 8000b6a:	2100      	movs	r1, #0
 8000b6c:	4618      	mov	r0, r3
 8000b6e:	f003 fa5b 	bl	8004028 <memset>

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000b72:	2302      	movs	r3, #2
 8000b74:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000b78:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000b7c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000b80:	2310      	movs	r3, #16
 8000b82:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000b86:	2302      	movs	r3, #2
 8000b88:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000b8c:	2302      	movs	r3, #2
 8000b8e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000b92:	2301      	movs	r3, #1
 8000b94:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_OscInitStruct.PLL.PLLN = 10;
 8000b98:	230a      	movs	r3, #10
 8000b9a:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000b9e:	2307      	movs	r3, #7
 8000ba0:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000ba4:	2302      	movs	r3, #2
 8000ba6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000baa:	2302      	movs	r3, #2
 8000bac:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000bb0:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000bb4:	4618      	mov	r0, r3
 8000bb6:	f000 ffdb 	bl	8001b70 <HAL_RCC_OscConfig>
 8000bba:	4603      	mov	r3, r0
 8000bbc:	2b00      	cmp	r3, #0
 8000bbe:	d001      	beq.n	8000bc4 <SystemClock_Config+0x82>
  {
    Error_Handler();
 8000bc0:	f000 f83b 	bl	8000c3a <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000bc4:	230f      	movs	r3, #15
 8000bc6:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000bca:	2303      	movs	r3, #3
 8000bcc:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000bd0:	2300      	movs	r3, #0
 8000bd2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000bd6:	2300      	movs	r3, #0
 8000bd8:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000bdc:	2300      	movs	r3, #0
 8000bde:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000be2:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8000be6:	2104      	movs	r1, #4
 8000be8:	4618      	mov	r0, r3
 8000bea:	f001 fb71 	bl	80022d0 <HAL_RCC_ClockConfig>
 8000bee:	4603      	mov	r3, r0
 8000bf0:	2b00      	cmp	r3, #0
 8000bf2:	d001      	beq.n	8000bf8 <SystemClock_Config+0xb6>
  {
    Error_Handler();
 8000bf4:	f000 f821 	bl	8000c3a <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2|RCC_PERIPHCLK_UART4
 8000bf8:	f44f 738d 	mov.w	r3, #282	; 0x11a
 8000bfc:	603b      	str	r3, [r7, #0]
                              |RCC_PERIPHCLK_UART5|RCC_PERIPHCLK_I2C3;
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000bfe:	2300      	movs	r3, #0
 8000c00:	63fb      	str	r3, [r7, #60]	; 0x3c
  PeriphClkInit.Uart4ClockSelection = RCC_UART4CLKSOURCE_PCLK1;
 8000c02:	2300      	movs	r3, #0
 8000c04:	647b      	str	r3, [r7, #68]	; 0x44
  PeriphClkInit.Uart5ClockSelection = RCC_UART5CLKSOURCE_PCLK1;
 8000c06:	2300      	movs	r3, #0
 8000c08:	64bb      	str	r3, [r7, #72]	; 0x48
  PeriphClkInit.I2c3ClockSelection = RCC_I2C3CLKSOURCE_PCLK1;
 8000c0a:	2300      	movs	r3, #0
 8000c0c:	65bb      	str	r3, [r7, #88]	; 0x58
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000c0e:	463b      	mov	r3, r7
 8000c10:	4618      	mov	r0, r3
 8000c12:	f001 fd61 	bl	80026d8 <HAL_RCCEx_PeriphCLKConfig>
 8000c16:	4603      	mov	r3, r0
 8000c18:	2b00      	cmp	r3, #0
 8000c1a:	d001      	beq.n	8000c20 <SystemClock_Config+0xde>
  {
    Error_Handler();
 8000c1c:	f000 f80d 	bl	8000c3a <Error_Handler>
  }
  /** Configure the main internal regulator output voltage 
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000c20:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000c24:	f000 ff4e 	bl	8001ac4 <HAL_PWREx_ControlVoltageScaling>
 8000c28:	4603      	mov	r3, r0
 8000c2a:	2b00      	cmp	r3, #0
 8000c2c:	d001      	beq.n	8000c32 <SystemClock_Config+0xf0>
  {
    Error_Handler();
 8000c2e:	f000 f804 	bl	8000c3a <Error_Handler>
  }
}
 8000c32:	bf00      	nop
 8000c34:	37e0      	adds	r7, #224	; 0xe0
 8000c36:	46bd      	mov	sp, r7
 8000c38:	bd80      	pop	{r7, pc}

08000c3a <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000c3a:	b480      	push	{r7}
 8000c3c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000c3e:	bf00      	nop
 8000c40:	46bd      	mov	sp, r7
 8000c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c46:	4770      	bx	lr

08000c48 <MX_SPI2_Init>:

SPI_HandleTypeDef hspi2;

/* SPI2 init function */
void MX_SPI2_Init(void)
{
 8000c48:	b580      	push	{r7, lr}
 8000c4a:	af00      	add	r7, sp, #0

  hspi2.Instance = SPI2;
 8000c4c:	4b1b      	ldr	r3, [pc, #108]	; (8000cbc <MX_SPI2_Init+0x74>)
 8000c4e:	4a1c      	ldr	r2, [pc, #112]	; (8000cc0 <MX_SPI2_Init+0x78>)
 8000c50:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8000c52:	4b1a      	ldr	r3, [pc, #104]	; (8000cbc <MX_SPI2_Init+0x74>)
 8000c54:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000c58:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8000c5a:	4b18      	ldr	r3, [pc, #96]	; (8000cbc <MX_SPI2_Init+0x74>)
 8000c5c:	2200      	movs	r2, #0
 8000c5e:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8000c60:	4b16      	ldr	r3, [pc, #88]	; (8000cbc <MX_SPI2_Init+0x74>)
 8000c62:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8000c66:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8000c68:	4b14      	ldr	r3, [pc, #80]	; (8000cbc <MX_SPI2_Init+0x74>)
 8000c6a:	2202      	movs	r2, #2
 8000c6c:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_2EDGE;
 8000c6e:	4b13      	ldr	r3, [pc, #76]	; (8000cbc <MX_SPI2_Init+0x74>)
 8000c70:	2201      	movs	r2, #1
 8000c72:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8000c74:	4b11      	ldr	r3, [pc, #68]	; (8000cbc <MX_SPI2_Init+0x74>)
 8000c76:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000c7a:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 8000c7c:	4b0f      	ldr	r3, [pc, #60]	; (8000cbc <MX_SPI2_Init+0x74>)
 8000c7e:	2238      	movs	r2, #56	; 0x38
 8000c80:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_LSB;
 8000c82:	4b0e      	ldr	r3, [pc, #56]	; (8000cbc <MX_SPI2_Init+0x74>)
 8000c84:	2280      	movs	r2, #128	; 0x80
 8000c86:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8000c88:	4b0c      	ldr	r3, [pc, #48]	; (8000cbc <MX_SPI2_Init+0x74>)
 8000c8a:	2200      	movs	r2, #0
 8000c8c:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000c8e:	4b0b      	ldr	r3, [pc, #44]	; (8000cbc <MX_SPI2_Init+0x74>)
 8000c90:	2200      	movs	r2, #0
 8000c92:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 7;
 8000c94:	4b09      	ldr	r3, [pc, #36]	; (8000cbc <MX_SPI2_Init+0x74>)
 8000c96:	2207      	movs	r2, #7
 8000c98:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000c9a:	4b08      	ldr	r3, [pc, #32]	; (8000cbc <MX_SPI2_Init+0x74>)
 8000c9c:	2200      	movs	r2, #0
 8000c9e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8000ca0:	4b06      	ldr	r3, [pc, #24]	; (8000cbc <MX_SPI2_Init+0x74>)
 8000ca2:	2200      	movs	r2, #0
 8000ca4:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8000ca6:	4805      	ldr	r0, [pc, #20]	; (8000cbc <MX_SPI2_Init+0x74>)
 8000ca8:	f002 f9c6 	bl	8003038 <HAL_SPI_Init>
 8000cac:	4603      	mov	r3, r0
 8000cae:	2b00      	cmp	r3, #0
 8000cb0:	d001      	beq.n	8000cb6 <MX_SPI2_Init+0x6e>
  {
    Error_Handler();
 8000cb2:	f7ff ffc2 	bl	8000c3a <Error_Handler>
  }

}
 8000cb6:	bf00      	nop
 8000cb8:	bd80      	pop	{r7, pc}
 8000cba:	bf00      	nop
 8000cbc:	20000074 	.word	0x20000074
 8000cc0:	40003800 	.word	0x40003800

08000cc4 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8000cc4:	b580      	push	{r7, lr}
 8000cc6:	b08a      	sub	sp, #40	; 0x28
 8000cc8:	af00      	add	r7, sp, #0
 8000cca:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ccc:	f107 0314 	add.w	r3, r7, #20
 8000cd0:	2200      	movs	r2, #0
 8000cd2:	601a      	str	r2, [r3, #0]
 8000cd4:	605a      	str	r2, [r3, #4]
 8000cd6:	609a      	str	r2, [r3, #8]
 8000cd8:	60da      	str	r2, [r3, #12]
 8000cda:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI2)
 8000cdc:	687b      	ldr	r3, [r7, #4]
 8000cde:	681b      	ldr	r3, [r3, #0]
 8000ce0:	4a25      	ldr	r2, [pc, #148]	; (8000d78 <HAL_SPI_MspInit+0xb4>)
 8000ce2:	4293      	cmp	r3, r2
 8000ce4:	d144      	bne.n	8000d70 <HAL_SPI_MspInit+0xac>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* SPI2 clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8000ce6:	4b25      	ldr	r3, [pc, #148]	; (8000d7c <HAL_SPI_MspInit+0xb8>)
 8000ce8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000cea:	4a24      	ldr	r2, [pc, #144]	; (8000d7c <HAL_SPI_MspInit+0xb8>)
 8000cec:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000cf0:	6593      	str	r3, [r2, #88]	; 0x58
 8000cf2:	4b22      	ldr	r3, [pc, #136]	; (8000d7c <HAL_SPI_MspInit+0xb8>)
 8000cf4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000cf6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000cfa:	613b      	str	r3, [r7, #16]
 8000cfc:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000cfe:	4b1f      	ldr	r3, [pc, #124]	; (8000d7c <HAL_SPI_MspInit+0xb8>)
 8000d00:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d02:	4a1e      	ldr	r2, [pc, #120]	; (8000d7c <HAL_SPI_MspInit+0xb8>)
 8000d04:	f043 0304 	orr.w	r3, r3, #4
 8000d08:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000d0a:	4b1c      	ldr	r3, [pc, #112]	; (8000d7c <HAL_SPI_MspInit+0xb8>)
 8000d0c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d0e:	f003 0304 	and.w	r3, r3, #4
 8000d12:	60fb      	str	r3, [r7, #12]
 8000d14:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d16:	4b19      	ldr	r3, [pc, #100]	; (8000d7c <HAL_SPI_MspInit+0xb8>)
 8000d18:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d1a:	4a18      	ldr	r2, [pc, #96]	; (8000d7c <HAL_SPI_MspInit+0xb8>)
 8000d1c:	f043 0302 	orr.w	r3, r3, #2
 8000d20:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000d22:	4b16      	ldr	r3, [pc, #88]	; (8000d7c <HAL_SPI_MspInit+0xb8>)
 8000d24:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d26:	f003 0302 	and.w	r3, r3, #2
 8000d2a:	60bb      	str	r3, [r7, #8]
 8000d2c:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration    
    PC2     ------> SPI2_MISO
    PC3     ------> SPI2_MOSI
    PB10     ------> SPI2_SCK 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000d2e:	230c      	movs	r3, #12
 8000d30:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d32:	2302      	movs	r3, #2
 8000d34:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d36:	2300      	movs	r3, #0
 8000d38:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d3a:	2303      	movs	r3, #3
 8000d3c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000d3e:	2305      	movs	r3, #5
 8000d40:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000d42:	f107 0314 	add.w	r3, r7, #20
 8000d46:	4619      	mov	r1, r3
 8000d48:	480d      	ldr	r0, [pc, #52]	; (8000d80 <HAL_SPI_MspInit+0xbc>)
 8000d4a:	f000 fbc7 	bl	80014dc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000d4e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000d52:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d54:	2302      	movs	r3, #2
 8000d56:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d58:	2300      	movs	r3, #0
 8000d5a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d5c:	2303      	movs	r3, #3
 8000d5e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000d60:	2305      	movs	r3, #5
 8000d62:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d64:	f107 0314 	add.w	r3, r7, #20
 8000d68:	4619      	mov	r1, r3
 8000d6a:	4806      	ldr	r0, [pc, #24]	; (8000d84 <HAL_SPI_MspInit+0xc0>)
 8000d6c:	f000 fbb6 	bl	80014dc <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 8000d70:	bf00      	nop
 8000d72:	3728      	adds	r7, #40	; 0x28
 8000d74:	46bd      	mov	sp, r7
 8000d76:	bd80      	pop	{r7, pc}
 8000d78:	40003800 	.word	0x40003800
 8000d7c:	40021000 	.word	0x40021000
 8000d80:	48000800 	.word	0x48000800
 8000d84:	48000400 	.word	0x48000400

08000d88 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000d88:	b480      	push	{r7}
 8000d8a:	b083      	sub	sp, #12
 8000d8c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d8e:	4b0f      	ldr	r3, [pc, #60]	; (8000dcc <HAL_MspInit+0x44>)
 8000d90:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000d92:	4a0e      	ldr	r2, [pc, #56]	; (8000dcc <HAL_MspInit+0x44>)
 8000d94:	f043 0301 	orr.w	r3, r3, #1
 8000d98:	6613      	str	r3, [r2, #96]	; 0x60
 8000d9a:	4b0c      	ldr	r3, [pc, #48]	; (8000dcc <HAL_MspInit+0x44>)
 8000d9c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000d9e:	f003 0301 	and.w	r3, r3, #1
 8000da2:	607b      	str	r3, [r7, #4]
 8000da4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000da6:	4b09      	ldr	r3, [pc, #36]	; (8000dcc <HAL_MspInit+0x44>)
 8000da8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000daa:	4a08      	ldr	r2, [pc, #32]	; (8000dcc <HAL_MspInit+0x44>)
 8000dac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000db0:	6593      	str	r3, [r2, #88]	; 0x58
 8000db2:	4b06      	ldr	r3, [pc, #24]	; (8000dcc <HAL_MspInit+0x44>)
 8000db4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000db6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000dba:	603b      	str	r3, [r7, #0]
 8000dbc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000dbe:	bf00      	nop
 8000dc0:	370c      	adds	r7, #12
 8000dc2:	46bd      	mov	sp, r7
 8000dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dc8:	4770      	bx	lr
 8000dca:	bf00      	nop
 8000dcc:	40021000 	.word	0x40021000

08000dd0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000dd0:	b480      	push	{r7}
 8000dd2:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000dd4:	bf00      	nop
 8000dd6:	46bd      	mov	sp, r7
 8000dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ddc:	4770      	bx	lr

08000dde <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000dde:	b480      	push	{r7}
 8000de0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000de2:	e7fe      	b.n	8000de2 <HardFault_Handler+0x4>

08000de4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000de4:	b480      	push	{r7}
 8000de6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000de8:	e7fe      	b.n	8000de8 <MemManage_Handler+0x4>

08000dea <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000dea:	b480      	push	{r7}
 8000dec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000dee:	e7fe      	b.n	8000dee <BusFault_Handler+0x4>

08000df0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000df0:	b480      	push	{r7}
 8000df2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000df4:	e7fe      	b.n	8000df4 <UsageFault_Handler+0x4>

08000df6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000df6:	b480      	push	{r7}
 8000df8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000dfa:	bf00      	nop
 8000dfc:	46bd      	mov	sp, r7
 8000dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e02:	4770      	bx	lr

08000e04 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000e04:	b480      	push	{r7}
 8000e06:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000e08:	bf00      	nop
 8000e0a:	46bd      	mov	sp, r7
 8000e0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e10:	4770      	bx	lr

08000e12 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000e12:	b480      	push	{r7}
 8000e14:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000e16:	bf00      	nop
 8000e18:	46bd      	mov	sp, r7
 8000e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e1e:	4770      	bx	lr

08000e20 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000e20:	b580      	push	{r7, lr}
 8000e22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000e24:	f000 fa34 	bl	8001290 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000e28:	bf00      	nop
 8000e2a:	bd80      	pop	{r7, pc}

08000e2c <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8000e2c:	b480      	push	{r7}
 8000e2e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000e30:	4b17      	ldr	r3, [pc, #92]	; (8000e90 <SystemInit+0x64>)
 8000e32:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000e36:	4a16      	ldr	r2, [pc, #88]	; (8000e90 <SystemInit+0x64>)
 8000e38:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000e3c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8000e40:	4b14      	ldr	r3, [pc, #80]	; (8000e94 <SystemInit+0x68>)
 8000e42:	681b      	ldr	r3, [r3, #0]
 8000e44:	4a13      	ldr	r2, [pc, #76]	; (8000e94 <SystemInit+0x68>)
 8000e46:	f043 0301 	orr.w	r3, r3, #1
 8000e4a:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 8000e4c:	4b11      	ldr	r3, [pc, #68]	; (8000e94 <SystemInit+0x68>)
 8000e4e:	2200      	movs	r2, #0
 8000e50:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 8000e52:	4b10      	ldr	r3, [pc, #64]	; (8000e94 <SystemInit+0x68>)
 8000e54:	681b      	ldr	r3, [r3, #0]
 8000e56:	4a0f      	ldr	r2, [pc, #60]	; (8000e94 <SystemInit+0x68>)
 8000e58:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 8000e5c:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 8000e60:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 8000e62:	4b0c      	ldr	r3, [pc, #48]	; (8000e94 <SystemInit+0x68>)
 8000e64:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000e68:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000e6a:	4b0a      	ldr	r3, [pc, #40]	; (8000e94 <SystemInit+0x68>)
 8000e6c:	681b      	ldr	r3, [r3, #0]
 8000e6e:	4a09      	ldr	r2, [pc, #36]	; (8000e94 <SystemInit+0x68>)
 8000e70:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000e74:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 8000e76:	4b07      	ldr	r3, [pc, #28]	; (8000e94 <SystemInit+0x68>)
 8000e78:	2200      	movs	r2, #0
 8000e7a:	619a      	str	r2, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000e7c:	4b04      	ldr	r3, [pc, #16]	; (8000e90 <SystemInit+0x64>)
 8000e7e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000e82:	609a      	str	r2, [r3, #8]
#endif
}
 8000e84:	bf00      	nop
 8000e86:	46bd      	mov	sp, r7
 8000e88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e8c:	4770      	bx	lr
 8000e8e:	bf00      	nop
 8000e90:	e000ed00 	.word	0xe000ed00
 8000e94:	40021000 	.word	0x40021000

08000e98 <Test_program>:
 *  Created on: Nov 25, 2019
 *      Author: samfl
 */
#include <test.h>

void Test_program(void) {
 8000e98:	b580      	push	{r7, lr}
 8000e9a:	b082      	sub	sp, #8
 8000e9c:	af00      	add	r7, sp, #0
	Test_display_background("red");
 8000e9e:	4805      	ldr	r0, [pc, #20]	; (8000eb4 <Test_program+0x1c>)
 8000ea0:	f000 f812 	bl	8000ec8 <Test_display_background>
	Test_display();
 8000ea4:	f000 f80a 	bl	8000ebc <Test_display>
	char string[] = "hej";
 8000ea8:	4b03      	ldr	r3, [pc, #12]	; (8000eb8 <Test_program+0x20>)
 8000eaa:	607b      	str	r3, [r7, #4]

	return;
 8000eac:	bf00      	nop
}
 8000eae:	3708      	adds	r7, #8
 8000eb0:	46bd      	mov	sp, r7
 8000eb2:	bd80      	pop	{r7, pc}
 8000eb4:	08004064 	.word	0x08004064
 8000eb8:	006a6568 	.word	0x006a6568

08000ebc <Test_display>:

void Test_display(void) {
 8000ebc:	b580      	push	{r7, lr}
 8000ebe:	af00      	add	r7, sp, #0
//	Init_display();
//	Write_data(0x61);
	LCDinit();
 8000ec0:	f7ff fb70 	bl	80005a4 <LCDinit>
}
 8000ec4:	bf00      	nop
 8000ec6:	bd80      	pop	{r7, pc}

08000ec8 <Test_display_background>:

void Test_display_background(char color[]) {
 8000ec8:	b580      	push	{r7, lr}
 8000eca:	b082      	sub	sp, #8
 8000ecc:	af00      	add	r7, sp, #0
 8000ece:	6078      	str	r0, [r7, #4]
	Display_color(color);
 8000ed0:	6878      	ldr	r0, [r7, #4]
 8000ed2:	f7ff fb15 	bl	8000500 <Display_color>
}
 8000ed6:	bf00      	nop
 8000ed8:	3708      	adds	r7, #8
 8000eda:	46bd      	mov	sp, r7
 8000edc:	bd80      	pop	{r7, pc}
	...

08000ee0 <MX_UART4_Init>:
UART_HandleTypeDef huart5;
UART_HandleTypeDef huart2;

/* UART4 init function */
void MX_UART4_Init(void)
{
 8000ee0:	b580      	push	{r7, lr}
 8000ee2:	af00      	add	r7, sp, #0

  huart4.Instance = UART4;
 8000ee4:	4b14      	ldr	r3, [pc, #80]	; (8000f38 <MX_UART4_Init+0x58>)
 8000ee6:	4a15      	ldr	r2, [pc, #84]	; (8000f3c <MX_UART4_Init+0x5c>)
 8000ee8:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 8000eea:	4b13      	ldr	r3, [pc, #76]	; (8000f38 <MX_UART4_Init+0x58>)
 8000eec:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000ef0:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8000ef2:	4b11      	ldr	r3, [pc, #68]	; (8000f38 <MX_UART4_Init+0x58>)
 8000ef4:	2200      	movs	r2, #0
 8000ef6:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8000ef8:	4b0f      	ldr	r3, [pc, #60]	; (8000f38 <MX_UART4_Init+0x58>)
 8000efa:	2200      	movs	r2, #0
 8000efc:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8000efe:	4b0e      	ldr	r3, [pc, #56]	; (8000f38 <MX_UART4_Init+0x58>)
 8000f00:	2200      	movs	r2, #0
 8000f02:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8000f04:	4b0c      	ldr	r3, [pc, #48]	; (8000f38 <MX_UART4_Init+0x58>)
 8000f06:	220c      	movs	r2, #12
 8000f08:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000f0a:	4b0b      	ldr	r3, [pc, #44]	; (8000f38 <MX_UART4_Init+0x58>)
 8000f0c:	2200      	movs	r2, #0
 8000f0e:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8000f10:	4b09      	ldr	r3, [pc, #36]	; (8000f38 <MX_UART4_Init+0x58>)
 8000f12:	2200      	movs	r2, #0
 8000f14:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000f16:	4b08      	ldr	r3, [pc, #32]	; (8000f38 <MX_UART4_Init+0x58>)
 8000f18:	2200      	movs	r2, #0
 8000f1a:	621a      	str	r2, [r3, #32]
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000f1c:	4b06      	ldr	r3, [pc, #24]	; (8000f38 <MX_UART4_Init+0x58>)
 8000f1e:	2200      	movs	r2, #0
 8000f20:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8000f22:	4805      	ldr	r0, [pc, #20]	; (8000f38 <MX_UART4_Init+0x58>)
 8000f24:	f002 fb95 	bl	8003652 <HAL_UART_Init>
 8000f28:	4603      	mov	r3, r0
 8000f2a:	2b00      	cmp	r3, #0
 8000f2c:	d001      	beq.n	8000f32 <MX_UART4_Init+0x52>
  {
    Error_Handler();
 8000f2e:	f7ff fe84 	bl	8000c3a <Error_Handler>
  }

}
 8000f32:	bf00      	nop
 8000f34:	bd80      	pop	{r7, pc}
 8000f36:	bf00      	nop
 8000f38:	20000158 	.word	0x20000158
 8000f3c:	40004c00 	.word	0x40004c00

08000f40 <MX_UART5_Init>:
/* UART5 init function */
void MX_UART5_Init(void)
{
 8000f40:	b580      	push	{r7, lr}
 8000f42:	af00      	add	r7, sp, #0

  huart5.Instance = UART5;
 8000f44:	4b14      	ldr	r3, [pc, #80]	; (8000f98 <MX_UART5_Init+0x58>)
 8000f46:	4a15      	ldr	r2, [pc, #84]	; (8000f9c <MX_UART5_Init+0x5c>)
 8000f48:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 115200;
 8000f4a:	4b13      	ldr	r3, [pc, #76]	; (8000f98 <MX_UART5_Init+0x58>)
 8000f4c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000f50:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 8000f52:	4b11      	ldr	r3, [pc, #68]	; (8000f98 <MX_UART5_Init+0x58>)
 8000f54:	2200      	movs	r2, #0
 8000f56:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 8000f58:	4b0f      	ldr	r3, [pc, #60]	; (8000f98 <MX_UART5_Init+0x58>)
 8000f5a:	2200      	movs	r2, #0
 8000f5c:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 8000f5e:	4b0e      	ldr	r3, [pc, #56]	; (8000f98 <MX_UART5_Init+0x58>)
 8000f60:	2200      	movs	r2, #0
 8000f62:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 8000f64:	4b0c      	ldr	r3, [pc, #48]	; (8000f98 <MX_UART5_Init+0x58>)
 8000f66:	220c      	movs	r2, #12
 8000f68:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000f6a:	4b0b      	ldr	r3, [pc, #44]	; (8000f98 <MX_UART5_Init+0x58>)
 8000f6c:	2200      	movs	r2, #0
 8000f6e:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 8000f70:	4b09      	ldr	r3, [pc, #36]	; (8000f98 <MX_UART5_Init+0x58>)
 8000f72:	2200      	movs	r2, #0
 8000f74:	61da      	str	r2, [r3, #28]
  huart5.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000f76:	4b08      	ldr	r3, [pc, #32]	; (8000f98 <MX_UART5_Init+0x58>)
 8000f78:	2200      	movs	r2, #0
 8000f7a:	621a      	str	r2, [r3, #32]
  huart5.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000f7c:	4b06      	ldr	r3, [pc, #24]	; (8000f98 <MX_UART5_Init+0x58>)
 8000f7e:	2200      	movs	r2, #0
 8000f80:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart5) != HAL_OK)
 8000f82:	4805      	ldr	r0, [pc, #20]	; (8000f98 <MX_UART5_Init+0x58>)
 8000f84:	f002 fb65 	bl	8003652 <HAL_UART_Init>
 8000f88:	4603      	mov	r3, r0
 8000f8a:	2b00      	cmp	r3, #0
 8000f8c:	d001      	beq.n	8000f92 <MX_UART5_Init+0x52>
  {
    Error_Handler();
 8000f8e:	f7ff fe54 	bl	8000c3a <Error_Handler>
  }

}
 8000f92:	bf00      	nop
 8000f94:	bd80      	pop	{r7, pc}
 8000f96:	bf00      	nop
 8000f98:	200000d8 	.word	0x200000d8
 8000f9c:	40005000 	.word	0x40005000

08000fa0 <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8000fa0:	b580      	push	{r7, lr}
 8000fa2:	af00      	add	r7, sp, #0

  huart2.Instance = USART2;
 8000fa4:	4b14      	ldr	r3, [pc, #80]	; (8000ff8 <MX_USART2_UART_Init+0x58>)
 8000fa6:	4a15      	ldr	r2, [pc, #84]	; (8000ffc <MX_USART2_UART_Init+0x5c>)
 8000fa8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000faa:	4b13      	ldr	r3, [pc, #76]	; (8000ff8 <MX_USART2_UART_Init+0x58>)
 8000fac:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000fb0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000fb2:	4b11      	ldr	r3, [pc, #68]	; (8000ff8 <MX_USART2_UART_Init+0x58>)
 8000fb4:	2200      	movs	r2, #0
 8000fb6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000fb8:	4b0f      	ldr	r3, [pc, #60]	; (8000ff8 <MX_USART2_UART_Init+0x58>)
 8000fba:	2200      	movs	r2, #0
 8000fbc:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000fbe:	4b0e      	ldr	r3, [pc, #56]	; (8000ff8 <MX_USART2_UART_Init+0x58>)
 8000fc0:	2200      	movs	r2, #0
 8000fc2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000fc4:	4b0c      	ldr	r3, [pc, #48]	; (8000ff8 <MX_USART2_UART_Init+0x58>)
 8000fc6:	220c      	movs	r2, #12
 8000fc8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000fca:	4b0b      	ldr	r3, [pc, #44]	; (8000ff8 <MX_USART2_UART_Init+0x58>)
 8000fcc:	2200      	movs	r2, #0
 8000fce:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000fd0:	4b09      	ldr	r3, [pc, #36]	; (8000ff8 <MX_USART2_UART_Init+0x58>)
 8000fd2:	2200      	movs	r2, #0
 8000fd4:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000fd6:	4b08      	ldr	r3, [pc, #32]	; (8000ff8 <MX_USART2_UART_Init+0x58>)
 8000fd8:	2200      	movs	r2, #0
 8000fda:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000fdc:	4b06      	ldr	r3, [pc, #24]	; (8000ff8 <MX_USART2_UART_Init+0x58>)
 8000fde:	2200      	movs	r2, #0
 8000fe0:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000fe2:	4805      	ldr	r0, [pc, #20]	; (8000ff8 <MX_USART2_UART_Init+0x58>)
 8000fe4:	f002 fb35 	bl	8003652 <HAL_UART_Init>
 8000fe8:	4603      	mov	r3, r0
 8000fea:	2b00      	cmp	r3, #0
 8000fec:	d001      	beq.n	8000ff2 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000fee:	f7ff fe24 	bl	8000c3a <Error_Handler>
  }

}
 8000ff2:	bf00      	nop
 8000ff4:	bd80      	pop	{r7, pc}
 8000ff6:	bf00      	nop
 8000ff8:	200001d8 	.word	0x200001d8
 8000ffc:	40004400 	.word	0x40004400

08001000 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001000:	b580      	push	{r7, lr}
 8001002:	b08e      	sub	sp, #56	; 0x38
 8001004:	af00      	add	r7, sp, #0
 8001006:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001008:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800100c:	2200      	movs	r2, #0
 800100e:	601a      	str	r2, [r3, #0]
 8001010:	605a      	str	r2, [r3, #4]
 8001012:	609a      	str	r2, [r3, #8]
 8001014:	60da      	str	r2, [r3, #12]
 8001016:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==UART4)
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	681b      	ldr	r3, [r3, #0]
 800101c:	4a54      	ldr	r2, [pc, #336]	; (8001170 <HAL_UART_MspInit+0x170>)
 800101e:	4293      	cmp	r3, r2
 8001020:	d129      	bne.n	8001076 <HAL_UART_MspInit+0x76>
  {
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
    /* UART4 clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8001022:	4b54      	ldr	r3, [pc, #336]	; (8001174 <HAL_UART_MspInit+0x174>)
 8001024:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001026:	4a53      	ldr	r2, [pc, #332]	; (8001174 <HAL_UART_MspInit+0x174>)
 8001028:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800102c:	6593      	str	r3, [r2, #88]	; 0x58
 800102e:	4b51      	ldr	r3, [pc, #324]	; (8001174 <HAL_UART_MspInit+0x174>)
 8001030:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001032:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001036:	623b      	str	r3, [r7, #32]
 8001038:	6a3b      	ldr	r3, [r7, #32]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800103a:	4b4e      	ldr	r3, [pc, #312]	; (8001174 <HAL_UART_MspInit+0x174>)
 800103c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800103e:	4a4d      	ldr	r2, [pc, #308]	; (8001174 <HAL_UART_MspInit+0x174>)
 8001040:	f043 0301 	orr.w	r3, r3, #1
 8001044:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001046:	4b4b      	ldr	r3, [pc, #300]	; (8001174 <HAL_UART_MspInit+0x174>)
 8001048:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800104a:	f003 0301 	and.w	r3, r3, #1
 800104e:	61fb      	str	r3, [r7, #28]
 8001050:	69fb      	ldr	r3, [r7, #28]
    /**UART4 GPIO Configuration    
    PA0     ------> UART4_TX
    PA1     ------> UART4_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001052:	2303      	movs	r3, #3
 8001054:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001056:	2302      	movs	r3, #2
 8001058:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800105a:	2300      	movs	r3, #0
 800105c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800105e:	2303      	movs	r3, #3
 8001060:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8001062:	2308      	movs	r3, #8
 8001064:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001066:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800106a:	4619      	mov	r1, r3
 800106c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001070:	f000 fa34 	bl	80014dc <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8001074:	e078      	b.n	8001168 <HAL_UART_MspInit+0x168>
  else if(uartHandle->Instance==UART5)
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	681b      	ldr	r3, [r3, #0]
 800107a:	4a3f      	ldr	r2, [pc, #252]	; (8001178 <HAL_UART_MspInit+0x178>)
 800107c:	4293      	cmp	r3, r2
 800107e:	d145      	bne.n	800110c <HAL_UART_MspInit+0x10c>
    __HAL_RCC_UART5_CLK_ENABLE();
 8001080:	4b3c      	ldr	r3, [pc, #240]	; (8001174 <HAL_UART_MspInit+0x174>)
 8001082:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001084:	4a3b      	ldr	r2, [pc, #236]	; (8001174 <HAL_UART_MspInit+0x174>)
 8001086:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800108a:	6593      	str	r3, [r2, #88]	; 0x58
 800108c:	4b39      	ldr	r3, [pc, #228]	; (8001174 <HAL_UART_MspInit+0x174>)
 800108e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001090:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001094:	61bb      	str	r3, [r7, #24]
 8001096:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001098:	4b36      	ldr	r3, [pc, #216]	; (8001174 <HAL_UART_MspInit+0x174>)
 800109a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800109c:	4a35      	ldr	r2, [pc, #212]	; (8001174 <HAL_UART_MspInit+0x174>)
 800109e:	f043 0304 	orr.w	r3, r3, #4
 80010a2:	64d3      	str	r3, [r2, #76]	; 0x4c
 80010a4:	4b33      	ldr	r3, [pc, #204]	; (8001174 <HAL_UART_MspInit+0x174>)
 80010a6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010a8:	f003 0304 	and.w	r3, r3, #4
 80010ac:	617b      	str	r3, [r7, #20]
 80010ae:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80010b0:	4b30      	ldr	r3, [pc, #192]	; (8001174 <HAL_UART_MspInit+0x174>)
 80010b2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010b4:	4a2f      	ldr	r2, [pc, #188]	; (8001174 <HAL_UART_MspInit+0x174>)
 80010b6:	f043 0308 	orr.w	r3, r3, #8
 80010ba:	64d3      	str	r3, [r2, #76]	; 0x4c
 80010bc:	4b2d      	ldr	r3, [pc, #180]	; (8001174 <HAL_UART_MspInit+0x174>)
 80010be:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010c0:	f003 0308 	and.w	r3, r3, #8
 80010c4:	613b      	str	r3, [r7, #16]
 80010c6:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 80010c8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80010cc:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010ce:	2302      	movs	r3, #2
 80010d0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010d2:	2300      	movs	r3, #0
 80010d4:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80010d6:	2303      	movs	r3, #3
 80010d8:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 80010da:	2308      	movs	r3, #8
 80010dc:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80010de:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80010e2:	4619      	mov	r1, r3
 80010e4:	4825      	ldr	r0, [pc, #148]	; (800117c <HAL_UART_MspInit+0x17c>)
 80010e6:	f000 f9f9 	bl	80014dc <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80010ea:	2304      	movs	r3, #4
 80010ec:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010ee:	2302      	movs	r3, #2
 80010f0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010f2:	2300      	movs	r3, #0
 80010f4:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80010f6:	2303      	movs	r3, #3
 80010f8:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 80010fa:	2308      	movs	r3, #8
 80010fc:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80010fe:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001102:	4619      	mov	r1, r3
 8001104:	481e      	ldr	r0, [pc, #120]	; (8001180 <HAL_UART_MspInit+0x180>)
 8001106:	f000 f9e9 	bl	80014dc <HAL_GPIO_Init>
}
 800110a:	e02d      	b.n	8001168 <HAL_UART_MspInit+0x168>
  else if(uartHandle->Instance==USART2)
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	681b      	ldr	r3, [r3, #0]
 8001110:	4a1c      	ldr	r2, [pc, #112]	; (8001184 <HAL_UART_MspInit+0x184>)
 8001112:	4293      	cmp	r3, r2
 8001114:	d128      	bne.n	8001168 <HAL_UART_MspInit+0x168>
    __HAL_RCC_USART2_CLK_ENABLE();
 8001116:	4b17      	ldr	r3, [pc, #92]	; (8001174 <HAL_UART_MspInit+0x174>)
 8001118:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800111a:	4a16      	ldr	r2, [pc, #88]	; (8001174 <HAL_UART_MspInit+0x174>)
 800111c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001120:	6593      	str	r3, [r2, #88]	; 0x58
 8001122:	4b14      	ldr	r3, [pc, #80]	; (8001174 <HAL_UART_MspInit+0x174>)
 8001124:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001126:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800112a:	60fb      	str	r3, [r7, #12]
 800112c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800112e:	4b11      	ldr	r3, [pc, #68]	; (8001174 <HAL_UART_MspInit+0x174>)
 8001130:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001132:	4a10      	ldr	r2, [pc, #64]	; (8001174 <HAL_UART_MspInit+0x174>)
 8001134:	f043 0301 	orr.w	r3, r3, #1
 8001138:	64d3      	str	r3, [r2, #76]	; 0x4c
 800113a:	4b0e      	ldr	r3, [pc, #56]	; (8001174 <HAL_UART_MspInit+0x174>)
 800113c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800113e:	f003 0301 	and.w	r3, r3, #1
 8001142:	60bb      	str	r3, [r7, #8]
 8001144:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001146:	230c      	movs	r3, #12
 8001148:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800114a:	2302      	movs	r3, #2
 800114c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800114e:	2300      	movs	r3, #0
 8001150:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001152:	2303      	movs	r3, #3
 8001154:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001156:	2307      	movs	r3, #7
 8001158:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800115a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800115e:	4619      	mov	r1, r3
 8001160:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001164:	f000 f9ba 	bl	80014dc <HAL_GPIO_Init>
}
 8001168:	bf00      	nop
 800116a:	3738      	adds	r7, #56	; 0x38
 800116c:	46bd      	mov	sp, r7
 800116e:	bd80      	pop	{r7, pc}
 8001170:	40004c00 	.word	0x40004c00
 8001174:	40021000 	.word	0x40021000
 8001178:	40005000 	.word	0x40005000
 800117c:	48000800 	.word	0x48000800
 8001180:	48000c00 	.word	0x48000c00
 8001184:	40004400 	.word	0x40004400

08001188 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001188:	f8df d034 	ldr.w	sp, [pc, #52]	; 80011c0 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 800118c:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 800118e:	e003      	b.n	8001198 <LoopCopyDataInit>

08001190 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8001190:	4b0c      	ldr	r3, [pc, #48]	; (80011c4 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8001192:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8001194:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8001196:	3104      	adds	r1, #4

08001198 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8001198:	480b      	ldr	r0, [pc, #44]	; (80011c8 <LoopForever+0xa>)
	ldr	r3, =_edata
 800119a:	4b0c      	ldr	r3, [pc, #48]	; (80011cc <LoopForever+0xe>)
	adds	r2, r0, r1
 800119c:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 800119e:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 80011a0:	d3f6      	bcc.n	8001190 <CopyDataInit>
	ldr	r2, =_sbss
 80011a2:	4a0b      	ldr	r2, [pc, #44]	; (80011d0 <LoopForever+0x12>)
	b	LoopFillZerobss
 80011a4:	e002      	b.n	80011ac <LoopFillZerobss>

080011a6 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 80011a6:	2300      	movs	r3, #0
	str	r3, [r2], #4
 80011a8:	f842 3b04 	str.w	r3, [r2], #4

080011ac <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 80011ac:	4b09      	ldr	r3, [pc, #36]	; (80011d4 <LoopForever+0x16>)
	cmp	r2, r3
 80011ae:	429a      	cmp	r2, r3
	bcc	FillZerobss
 80011b0:	d3f9      	bcc.n	80011a6 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80011b2:	f7ff fe3b 	bl	8000e2c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80011b6:	f002 ff13 	bl	8003fe0 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80011ba:	f7ff fcad 	bl	8000b18 <main>

080011be <LoopForever>:

LoopForever:
    b LoopForever
 80011be:	e7fe      	b.n	80011be <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80011c0:	20018000 	.word	0x20018000
	ldr	r3, =_sidata
 80011c4:	080040c0 	.word	0x080040c0
	ldr	r0, =_sdata
 80011c8:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 80011cc:	2000000c 	.word	0x2000000c
	ldr	r2, =_sbss
 80011d0:	2000000c 	.word	0x2000000c
	ldr	r3, = _ebss
 80011d4:	2000025c 	.word	0x2000025c

080011d8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80011d8:	e7fe      	b.n	80011d8 <ADC1_2_IRQHandler>
	...

080011dc <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80011dc:	b580      	push	{r7, lr}
 80011de:	b082      	sub	sp, #8
 80011e0:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80011e2:	2300      	movs	r3, #0
 80011e4:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80011e6:	4b0c      	ldr	r3, [pc, #48]	; (8001218 <HAL_Init+0x3c>)
 80011e8:	681b      	ldr	r3, [r3, #0]
 80011ea:	4a0b      	ldr	r2, [pc, #44]	; (8001218 <HAL_Init+0x3c>)
 80011ec:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80011f0:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80011f2:	2003      	movs	r0, #3
 80011f4:	f000 f93e 	bl	8001474 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80011f8:	2000      	movs	r0, #0
 80011fa:	f000 f80f 	bl	800121c <HAL_InitTick>
 80011fe:	4603      	mov	r3, r0
 8001200:	2b00      	cmp	r3, #0
 8001202:	d002      	beq.n	800120a <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8001204:	2301      	movs	r3, #1
 8001206:	71fb      	strb	r3, [r7, #7]
 8001208:	e001      	b.n	800120e <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800120a:	f7ff fdbd 	bl	8000d88 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800120e:	79fb      	ldrb	r3, [r7, #7]
}
 8001210:	4618      	mov	r0, r3
 8001212:	3708      	adds	r7, #8
 8001214:	46bd      	mov	sp, r7
 8001216:	bd80      	pop	{r7, pc}
 8001218:	40022000 	.word	0x40022000

0800121c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800121c:	b580      	push	{r7, lr}
 800121e:	b084      	sub	sp, #16
 8001220:	af00      	add	r7, sp, #0
 8001222:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001224:	2300      	movs	r3, #0
 8001226:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8001228:	4b16      	ldr	r3, [pc, #88]	; (8001284 <HAL_InitTick+0x68>)
 800122a:	681b      	ldr	r3, [r3, #0]
 800122c:	2b00      	cmp	r3, #0
 800122e:	d022      	beq.n	8001276 <HAL_InitTick+0x5a>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8001230:	4b15      	ldr	r3, [pc, #84]	; (8001288 <HAL_InitTick+0x6c>)
 8001232:	681a      	ldr	r2, [r3, #0]
 8001234:	4b13      	ldr	r3, [pc, #76]	; (8001284 <HAL_InitTick+0x68>)
 8001236:	681b      	ldr	r3, [r3, #0]
 8001238:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800123c:	fbb1 f3f3 	udiv	r3, r1, r3
 8001240:	fbb2 f3f3 	udiv	r3, r2, r3
 8001244:	4618      	mov	r0, r3
 8001246:	f000 f93c 	bl	80014c2 <HAL_SYSTICK_Config>
 800124a:	4603      	mov	r3, r0
 800124c:	2b00      	cmp	r3, #0
 800124e:	d10f      	bne.n	8001270 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	2b0f      	cmp	r3, #15
 8001254:	d809      	bhi.n	800126a <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001256:	2200      	movs	r2, #0
 8001258:	6879      	ldr	r1, [r7, #4]
 800125a:	f04f 30ff 	mov.w	r0, #4294967295
 800125e:	f000 f914 	bl	800148a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001262:	4a0a      	ldr	r2, [pc, #40]	; (800128c <HAL_InitTick+0x70>)
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	6013      	str	r3, [r2, #0]
 8001268:	e007      	b.n	800127a <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 800126a:	2301      	movs	r3, #1
 800126c:	73fb      	strb	r3, [r7, #15]
 800126e:	e004      	b.n	800127a <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001270:	2301      	movs	r3, #1
 8001272:	73fb      	strb	r3, [r7, #15]
 8001274:	e001      	b.n	800127a <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001276:	2301      	movs	r3, #1
 8001278:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 800127a:	7bfb      	ldrb	r3, [r7, #15]
}
 800127c:	4618      	mov	r0, r3
 800127e:	3710      	adds	r7, #16
 8001280:	46bd      	mov	sp, r7
 8001282:	bd80      	pop	{r7, pc}
 8001284:	20000008 	.word	0x20000008
 8001288:	20000000 	.word	0x20000000
 800128c:	20000004 	.word	0x20000004

08001290 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001290:	b480      	push	{r7}
 8001292:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001294:	4b05      	ldr	r3, [pc, #20]	; (80012ac <HAL_IncTick+0x1c>)
 8001296:	681a      	ldr	r2, [r3, #0]
 8001298:	4b05      	ldr	r3, [pc, #20]	; (80012b0 <HAL_IncTick+0x20>)
 800129a:	681b      	ldr	r3, [r3, #0]
 800129c:	4413      	add	r3, r2
 800129e:	4a03      	ldr	r2, [pc, #12]	; (80012ac <HAL_IncTick+0x1c>)
 80012a0:	6013      	str	r3, [r2, #0]
}
 80012a2:	bf00      	nop
 80012a4:	46bd      	mov	sp, r7
 80012a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012aa:	4770      	bx	lr
 80012ac:	20000258 	.word	0x20000258
 80012b0:	20000008 	.word	0x20000008

080012b4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80012b4:	b480      	push	{r7}
 80012b6:	af00      	add	r7, sp, #0
  return uwTick;
 80012b8:	4b03      	ldr	r3, [pc, #12]	; (80012c8 <HAL_GetTick+0x14>)
 80012ba:	681b      	ldr	r3, [r3, #0]
}
 80012bc:	4618      	mov	r0, r3
 80012be:	46bd      	mov	sp, r7
 80012c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012c4:	4770      	bx	lr
 80012c6:	bf00      	nop
 80012c8:	20000258 	.word	0x20000258

080012cc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80012cc:	b580      	push	{r7, lr}
 80012ce:	b084      	sub	sp, #16
 80012d0:	af00      	add	r7, sp, #0
 80012d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80012d4:	f7ff ffee 	bl	80012b4 <HAL_GetTick>
 80012d8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 80012de:	68fb      	ldr	r3, [r7, #12]
 80012e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80012e4:	d004      	beq.n	80012f0 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 80012e6:	4b09      	ldr	r3, [pc, #36]	; (800130c <HAL_Delay+0x40>)
 80012e8:	681b      	ldr	r3, [r3, #0]
 80012ea:	68fa      	ldr	r2, [r7, #12]
 80012ec:	4413      	add	r3, r2
 80012ee:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80012f0:	bf00      	nop
 80012f2:	f7ff ffdf 	bl	80012b4 <HAL_GetTick>
 80012f6:	4602      	mov	r2, r0
 80012f8:	68bb      	ldr	r3, [r7, #8]
 80012fa:	1ad3      	subs	r3, r2, r3
 80012fc:	68fa      	ldr	r2, [r7, #12]
 80012fe:	429a      	cmp	r2, r3
 8001300:	d8f7      	bhi.n	80012f2 <HAL_Delay+0x26>
  {
  }
}
 8001302:	bf00      	nop
 8001304:	3710      	adds	r7, #16
 8001306:	46bd      	mov	sp, r7
 8001308:	bd80      	pop	{r7, pc}
 800130a:	bf00      	nop
 800130c:	20000008 	.word	0x20000008

08001310 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001310:	b480      	push	{r7}
 8001312:	b085      	sub	sp, #20
 8001314:	af00      	add	r7, sp, #0
 8001316:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	f003 0307 	and.w	r3, r3, #7
 800131e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001320:	4b0c      	ldr	r3, [pc, #48]	; (8001354 <__NVIC_SetPriorityGrouping+0x44>)
 8001322:	68db      	ldr	r3, [r3, #12]
 8001324:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001326:	68ba      	ldr	r2, [r7, #8]
 8001328:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800132c:	4013      	ands	r3, r2
 800132e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001330:	68fb      	ldr	r3, [r7, #12]
 8001332:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001334:	68bb      	ldr	r3, [r7, #8]
 8001336:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001338:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800133c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001340:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001342:	4a04      	ldr	r2, [pc, #16]	; (8001354 <__NVIC_SetPriorityGrouping+0x44>)
 8001344:	68bb      	ldr	r3, [r7, #8]
 8001346:	60d3      	str	r3, [r2, #12]
}
 8001348:	bf00      	nop
 800134a:	3714      	adds	r7, #20
 800134c:	46bd      	mov	sp, r7
 800134e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001352:	4770      	bx	lr
 8001354:	e000ed00 	.word	0xe000ed00

08001358 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001358:	b480      	push	{r7}
 800135a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800135c:	4b04      	ldr	r3, [pc, #16]	; (8001370 <__NVIC_GetPriorityGrouping+0x18>)
 800135e:	68db      	ldr	r3, [r3, #12]
 8001360:	0a1b      	lsrs	r3, r3, #8
 8001362:	f003 0307 	and.w	r3, r3, #7
}
 8001366:	4618      	mov	r0, r3
 8001368:	46bd      	mov	sp, r7
 800136a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800136e:	4770      	bx	lr
 8001370:	e000ed00 	.word	0xe000ed00

08001374 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001374:	b480      	push	{r7}
 8001376:	b083      	sub	sp, #12
 8001378:	af00      	add	r7, sp, #0
 800137a:	4603      	mov	r3, r0
 800137c:	6039      	str	r1, [r7, #0]
 800137e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001380:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001384:	2b00      	cmp	r3, #0
 8001386:	db0a      	blt.n	800139e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001388:	683b      	ldr	r3, [r7, #0]
 800138a:	b2da      	uxtb	r2, r3
 800138c:	490c      	ldr	r1, [pc, #48]	; (80013c0 <__NVIC_SetPriority+0x4c>)
 800138e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001392:	0112      	lsls	r2, r2, #4
 8001394:	b2d2      	uxtb	r2, r2
 8001396:	440b      	add	r3, r1
 8001398:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800139c:	e00a      	b.n	80013b4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800139e:	683b      	ldr	r3, [r7, #0]
 80013a0:	b2da      	uxtb	r2, r3
 80013a2:	4908      	ldr	r1, [pc, #32]	; (80013c4 <__NVIC_SetPriority+0x50>)
 80013a4:	79fb      	ldrb	r3, [r7, #7]
 80013a6:	f003 030f 	and.w	r3, r3, #15
 80013aa:	3b04      	subs	r3, #4
 80013ac:	0112      	lsls	r2, r2, #4
 80013ae:	b2d2      	uxtb	r2, r2
 80013b0:	440b      	add	r3, r1
 80013b2:	761a      	strb	r2, [r3, #24]
}
 80013b4:	bf00      	nop
 80013b6:	370c      	adds	r7, #12
 80013b8:	46bd      	mov	sp, r7
 80013ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013be:	4770      	bx	lr
 80013c0:	e000e100 	.word	0xe000e100
 80013c4:	e000ed00 	.word	0xe000ed00

080013c8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80013c8:	b480      	push	{r7}
 80013ca:	b089      	sub	sp, #36	; 0x24
 80013cc:	af00      	add	r7, sp, #0
 80013ce:	60f8      	str	r0, [r7, #12]
 80013d0:	60b9      	str	r1, [r7, #8]
 80013d2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80013d4:	68fb      	ldr	r3, [r7, #12]
 80013d6:	f003 0307 	and.w	r3, r3, #7
 80013da:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80013dc:	69fb      	ldr	r3, [r7, #28]
 80013de:	f1c3 0307 	rsb	r3, r3, #7
 80013e2:	2b04      	cmp	r3, #4
 80013e4:	bf28      	it	cs
 80013e6:	2304      	movcs	r3, #4
 80013e8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80013ea:	69fb      	ldr	r3, [r7, #28]
 80013ec:	3304      	adds	r3, #4
 80013ee:	2b06      	cmp	r3, #6
 80013f0:	d902      	bls.n	80013f8 <NVIC_EncodePriority+0x30>
 80013f2:	69fb      	ldr	r3, [r7, #28]
 80013f4:	3b03      	subs	r3, #3
 80013f6:	e000      	b.n	80013fa <NVIC_EncodePriority+0x32>
 80013f8:	2300      	movs	r3, #0
 80013fa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80013fc:	f04f 32ff 	mov.w	r2, #4294967295
 8001400:	69bb      	ldr	r3, [r7, #24]
 8001402:	fa02 f303 	lsl.w	r3, r2, r3
 8001406:	43da      	mvns	r2, r3
 8001408:	68bb      	ldr	r3, [r7, #8]
 800140a:	401a      	ands	r2, r3
 800140c:	697b      	ldr	r3, [r7, #20]
 800140e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001410:	f04f 31ff 	mov.w	r1, #4294967295
 8001414:	697b      	ldr	r3, [r7, #20]
 8001416:	fa01 f303 	lsl.w	r3, r1, r3
 800141a:	43d9      	mvns	r1, r3
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001420:	4313      	orrs	r3, r2
         );
}
 8001422:	4618      	mov	r0, r3
 8001424:	3724      	adds	r7, #36	; 0x24
 8001426:	46bd      	mov	sp, r7
 8001428:	f85d 7b04 	ldr.w	r7, [sp], #4
 800142c:	4770      	bx	lr
	...

08001430 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001430:	b580      	push	{r7, lr}
 8001432:	b082      	sub	sp, #8
 8001434:	af00      	add	r7, sp, #0
 8001436:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	3b01      	subs	r3, #1
 800143c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001440:	d301      	bcc.n	8001446 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001442:	2301      	movs	r3, #1
 8001444:	e00f      	b.n	8001466 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001446:	4a0a      	ldr	r2, [pc, #40]	; (8001470 <SysTick_Config+0x40>)
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	3b01      	subs	r3, #1
 800144c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800144e:	210f      	movs	r1, #15
 8001450:	f04f 30ff 	mov.w	r0, #4294967295
 8001454:	f7ff ff8e 	bl	8001374 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001458:	4b05      	ldr	r3, [pc, #20]	; (8001470 <SysTick_Config+0x40>)
 800145a:	2200      	movs	r2, #0
 800145c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800145e:	4b04      	ldr	r3, [pc, #16]	; (8001470 <SysTick_Config+0x40>)
 8001460:	2207      	movs	r2, #7
 8001462:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001464:	2300      	movs	r3, #0
}
 8001466:	4618      	mov	r0, r3
 8001468:	3708      	adds	r7, #8
 800146a:	46bd      	mov	sp, r7
 800146c:	bd80      	pop	{r7, pc}
 800146e:	bf00      	nop
 8001470:	e000e010 	.word	0xe000e010

08001474 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001474:	b580      	push	{r7, lr}
 8001476:	b082      	sub	sp, #8
 8001478:	af00      	add	r7, sp, #0
 800147a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800147c:	6878      	ldr	r0, [r7, #4]
 800147e:	f7ff ff47 	bl	8001310 <__NVIC_SetPriorityGrouping>
}
 8001482:	bf00      	nop
 8001484:	3708      	adds	r7, #8
 8001486:	46bd      	mov	sp, r7
 8001488:	bd80      	pop	{r7, pc}

0800148a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800148a:	b580      	push	{r7, lr}
 800148c:	b086      	sub	sp, #24
 800148e:	af00      	add	r7, sp, #0
 8001490:	4603      	mov	r3, r0
 8001492:	60b9      	str	r1, [r7, #8]
 8001494:	607a      	str	r2, [r7, #4]
 8001496:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001498:	2300      	movs	r3, #0
 800149a:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800149c:	f7ff ff5c 	bl	8001358 <__NVIC_GetPriorityGrouping>
 80014a0:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80014a2:	687a      	ldr	r2, [r7, #4]
 80014a4:	68b9      	ldr	r1, [r7, #8]
 80014a6:	6978      	ldr	r0, [r7, #20]
 80014a8:	f7ff ff8e 	bl	80013c8 <NVIC_EncodePriority>
 80014ac:	4602      	mov	r2, r0
 80014ae:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80014b2:	4611      	mov	r1, r2
 80014b4:	4618      	mov	r0, r3
 80014b6:	f7ff ff5d 	bl	8001374 <__NVIC_SetPriority>
}
 80014ba:	bf00      	nop
 80014bc:	3718      	adds	r7, #24
 80014be:	46bd      	mov	sp, r7
 80014c0:	bd80      	pop	{r7, pc}

080014c2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80014c2:	b580      	push	{r7, lr}
 80014c4:	b082      	sub	sp, #8
 80014c6:	af00      	add	r7, sp, #0
 80014c8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80014ca:	6878      	ldr	r0, [r7, #4]
 80014cc:	f7ff ffb0 	bl	8001430 <SysTick_Config>
 80014d0:	4603      	mov	r3, r0
}
 80014d2:	4618      	mov	r0, r3
 80014d4:	3708      	adds	r7, #8
 80014d6:	46bd      	mov	sp, r7
 80014d8:	bd80      	pop	{r7, pc}
	...

080014dc <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80014dc:	b480      	push	{r7}
 80014de:	b087      	sub	sp, #28
 80014e0:	af00      	add	r7, sp, #0
 80014e2:	6078      	str	r0, [r7, #4]
 80014e4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80014e6:	2300      	movs	r3, #0
 80014e8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80014ea:	e17f      	b.n	80017ec <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80014ec:	683b      	ldr	r3, [r7, #0]
 80014ee:	681a      	ldr	r2, [r3, #0]
 80014f0:	2101      	movs	r1, #1
 80014f2:	697b      	ldr	r3, [r7, #20]
 80014f4:	fa01 f303 	lsl.w	r3, r1, r3
 80014f8:	4013      	ands	r3, r2
 80014fa:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80014fc:	68fb      	ldr	r3, [r7, #12]
 80014fe:	2b00      	cmp	r3, #0
 8001500:	f000 8171 	beq.w	80017e6 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001504:	683b      	ldr	r3, [r7, #0]
 8001506:	685b      	ldr	r3, [r3, #4]
 8001508:	2b02      	cmp	r3, #2
 800150a:	d003      	beq.n	8001514 <HAL_GPIO_Init+0x38>
 800150c:	683b      	ldr	r3, [r7, #0]
 800150e:	685b      	ldr	r3, [r3, #4]
 8001510:	2b12      	cmp	r3, #18
 8001512:	d123      	bne.n	800155c <HAL_GPIO_Init+0x80>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001514:	697b      	ldr	r3, [r7, #20]
 8001516:	08da      	lsrs	r2, r3, #3
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	3208      	adds	r2, #8
 800151c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001520:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001522:	697b      	ldr	r3, [r7, #20]
 8001524:	f003 0307 	and.w	r3, r3, #7
 8001528:	009b      	lsls	r3, r3, #2
 800152a:	220f      	movs	r2, #15
 800152c:	fa02 f303 	lsl.w	r3, r2, r3
 8001530:	43db      	mvns	r3, r3
 8001532:	693a      	ldr	r2, [r7, #16]
 8001534:	4013      	ands	r3, r2
 8001536:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001538:	683b      	ldr	r3, [r7, #0]
 800153a:	691a      	ldr	r2, [r3, #16]
 800153c:	697b      	ldr	r3, [r7, #20]
 800153e:	f003 0307 	and.w	r3, r3, #7
 8001542:	009b      	lsls	r3, r3, #2
 8001544:	fa02 f303 	lsl.w	r3, r2, r3
 8001548:	693a      	ldr	r2, [r7, #16]
 800154a:	4313      	orrs	r3, r2
 800154c:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800154e:	697b      	ldr	r3, [r7, #20]
 8001550:	08da      	lsrs	r2, r3, #3
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	3208      	adds	r2, #8
 8001556:	6939      	ldr	r1, [r7, #16]
 8001558:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	681b      	ldr	r3, [r3, #0]
 8001560:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001562:	697b      	ldr	r3, [r7, #20]
 8001564:	005b      	lsls	r3, r3, #1
 8001566:	2203      	movs	r2, #3
 8001568:	fa02 f303 	lsl.w	r3, r2, r3
 800156c:	43db      	mvns	r3, r3
 800156e:	693a      	ldr	r2, [r7, #16]
 8001570:	4013      	ands	r3, r2
 8001572:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001574:	683b      	ldr	r3, [r7, #0]
 8001576:	685b      	ldr	r3, [r3, #4]
 8001578:	f003 0203 	and.w	r2, r3, #3
 800157c:	697b      	ldr	r3, [r7, #20]
 800157e:	005b      	lsls	r3, r3, #1
 8001580:	fa02 f303 	lsl.w	r3, r2, r3
 8001584:	693a      	ldr	r2, [r7, #16]
 8001586:	4313      	orrs	r3, r2
 8001588:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	693a      	ldr	r2, [r7, #16]
 800158e:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001590:	683b      	ldr	r3, [r7, #0]
 8001592:	685b      	ldr	r3, [r3, #4]
 8001594:	2b01      	cmp	r3, #1
 8001596:	d00b      	beq.n	80015b0 <HAL_GPIO_Init+0xd4>
 8001598:	683b      	ldr	r3, [r7, #0]
 800159a:	685b      	ldr	r3, [r3, #4]
 800159c:	2b02      	cmp	r3, #2
 800159e:	d007      	beq.n	80015b0 <HAL_GPIO_Init+0xd4>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80015a0:	683b      	ldr	r3, [r7, #0]
 80015a2:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80015a4:	2b11      	cmp	r3, #17
 80015a6:	d003      	beq.n	80015b0 <HAL_GPIO_Init+0xd4>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80015a8:	683b      	ldr	r3, [r7, #0]
 80015aa:	685b      	ldr	r3, [r3, #4]
 80015ac:	2b12      	cmp	r3, #18
 80015ae:	d130      	bne.n	8001612 <HAL_GPIO_Init+0x136>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	689b      	ldr	r3, [r3, #8]
 80015b4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80015b6:	697b      	ldr	r3, [r7, #20]
 80015b8:	005b      	lsls	r3, r3, #1
 80015ba:	2203      	movs	r2, #3
 80015bc:	fa02 f303 	lsl.w	r3, r2, r3
 80015c0:	43db      	mvns	r3, r3
 80015c2:	693a      	ldr	r2, [r7, #16]
 80015c4:	4013      	ands	r3, r2
 80015c6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80015c8:	683b      	ldr	r3, [r7, #0]
 80015ca:	68da      	ldr	r2, [r3, #12]
 80015cc:	697b      	ldr	r3, [r7, #20]
 80015ce:	005b      	lsls	r3, r3, #1
 80015d0:	fa02 f303 	lsl.w	r3, r2, r3
 80015d4:	693a      	ldr	r2, [r7, #16]
 80015d6:	4313      	orrs	r3, r2
 80015d8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	693a      	ldr	r2, [r7, #16]
 80015de:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	685b      	ldr	r3, [r3, #4]
 80015e4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80015e6:	2201      	movs	r2, #1
 80015e8:	697b      	ldr	r3, [r7, #20]
 80015ea:	fa02 f303 	lsl.w	r3, r2, r3
 80015ee:	43db      	mvns	r3, r3
 80015f0:	693a      	ldr	r2, [r7, #16]
 80015f2:	4013      	ands	r3, r2
 80015f4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 80015f6:	683b      	ldr	r3, [r7, #0]
 80015f8:	685b      	ldr	r3, [r3, #4]
 80015fa:	091b      	lsrs	r3, r3, #4
 80015fc:	f003 0201 	and.w	r2, r3, #1
 8001600:	697b      	ldr	r3, [r7, #20]
 8001602:	fa02 f303 	lsl.w	r3, r2, r3
 8001606:	693a      	ldr	r2, [r7, #16]
 8001608:	4313      	orrs	r3, r2
 800160a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	693a      	ldr	r2, [r7, #16]
 8001610:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8001612:	683b      	ldr	r3, [r7, #0]
 8001614:	685b      	ldr	r3, [r3, #4]
 8001616:	f003 0303 	and.w	r3, r3, #3
 800161a:	2b03      	cmp	r3, #3
 800161c:	d118      	bne.n	8001650 <HAL_GPIO_Init+0x174>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001622:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8001624:	2201      	movs	r2, #1
 8001626:	697b      	ldr	r3, [r7, #20]
 8001628:	fa02 f303 	lsl.w	r3, r2, r3
 800162c:	43db      	mvns	r3, r3
 800162e:	693a      	ldr	r2, [r7, #16]
 8001630:	4013      	ands	r3, r2
 8001632:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & ANALOG_MODE) >> 3) << position);
 8001634:	683b      	ldr	r3, [r7, #0]
 8001636:	685b      	ldr	r3, [r3, #4]
 8001638:	08db      	lsrs	r3, r3, #3
 800163a:	f003 0201 	and.w	r2, r3, #1
 800163e:	697b      	ldr	r3, [r7, #20]
 8001640:	fa02 f303 	lsl.w	r3, r2, r3
 8001644:	693a      	ldr	r2, [r7, #16]
 8001646:	4313      	orrs	r3, r2
 8001648:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	693a      	ldr	r2, [r7, #16]
 800164e:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	68db      	ldr	r3, [r3, #12]
 8001654:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8001656:	697b      	ldr	r3, [r7, #20]
 8001658:	005b      	lsls	r3, r3, #1
 800165a:	2203      	movs	r2, #3
 800165c:	fa02 f303 	lsl.w	r3, r2, r3
 8001660:	43db      	mvns	r3, r3
 8001662:	693a      	ldr	r2, [r7, #16]
 8001664:	4013      	ands	r3, r2
 8001666:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001668:	683b      	ldr	r3, [r7, #0]
 800166a:	689a      	ldr	r2, [r3, #8]
 800166c:	697b      	ldr	r3, [r7, #20]
 800166e:	005b      	lsls	r3, r3, #1
 8001670:	fa02 f303 	lsl.w	r3, r2, r3
 8001674:	693a      	ldr	r2, [r7, #16]
 8001676:	4313      	orrs	r3, r2
 8001678:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	693a      	ldr	r2, [r7, #16]
 800167e:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001680:	683b      	ldr	r3, [r7, #0]
 8001682:	685b      	ldr	r3, [r3, #4]
 8001684:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001688:	2b00      	cmp	r3, #0
 800168a:	f000 80ac 	beq.w	80017e6 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800168e:	4b5e      	ldr	r3, [pc, #376]	; (8001808 <HAL_GPIO_Init+0x32c>)
 8001690:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001692:	4a5d      	ldr	r2, [pc, #372]	; (8001808 <HAL_GPIO_Init+0x32c>)
 8001694:	f043 0301 	orr.w	r3, r3, #1
 8001698:	6613      	str	r3, [r2, #96]	; 0x60
 800169a:	4b5b      	ldr	r3, [pc, #364]	; (8001808 <HAL_GPIO_Init+0x32c>)
 800169c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800169e:	f003 0301 	and.w	r3, r3, #1
 80016a2:	60bb      	str	r3, [r7, #8]
 80016a4:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80016a6:	4a59      	ldr	r2, [pc, #356]	; (800180c <HAL_GPIO_Init+0x330>)
 80016a8:	697b      	ldr	r3, [r7, #20]
 80016aa:	089b      	lsrs	r3, r3, #2
 80016ac:	3302      	adds	r3, #2
 80016ae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80016b2:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80016b4:	697b      	ldr	r3, [r7, #20]
 80016b6:	f003 0303 	and.w	r3, r3, #3
 80016ba:	009b      	lsls	r3, r3, #2
 80016bc:	220f      	movs	r2, #15
 80016be:	fa02 f303 	lsl.w	r3, r2, r3
 80016c2:	43db      	mvns	r3, r3
 80016c4:	693a      	ldr	r2, [r7, #16]
 80016c6:	4013      	ands	r3, r2
 80016c8:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80016d0:	d025      	beq.n	800171e <HAL_GPIO_Init+0x242>
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	4a4e      	ldr	r2, [pc, #312]	; (8001810 <HAL_GPIO_Init+0x334>)
 80016d6:	4293      	cmp	r3, r2
 80016d8:	d01f      	beq.n	800171a <HAL_GPIO_Init+0x23e>
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	4a4d      	ldr	r2, [pc, #308]	; (8001814 <HAL_GPIO_Init+0x338>)
 80016de:	4293      	cmp	r3, r2
 80016e0:	d019      	beq.n	8001716 <HAL_GPIO_Init+0x23a>
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	4a4c      	ldr	r2, [pc, #304]	; (8001818 <HAL_GPIO_Init+0x33c>)
 80016e6:	4293      	cmp	r3, r2
 80016e8:	d013      	beq.n	8001712 <HAL_GPIO_Init+0x236>
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	4a4b      	ldr	r2, [pc, #300]	; (800181c <HAL_GPIO_Init+0x340>)
 80016ee:	4293      	cmp	r3, r2
 80016f0:	d00d      	beq.n	800170e <HAL_GPIO_Init+0x232>
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	4a4a      	ldr	r2, [pc, #296]	; (8001820 <HAL_GPIO_Init+0x344>)
 80016f6:	4293      	cmp	r3, r2
 80016f8:	d007      	beq.n	800170a <HAL_GPIO_Init+0x22e>
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	4a49      	ldr	r2, [pc, #292]	; (8001824 <HAL_GPIO_Init+0x348>)
 80016fe:	4293      	cmp	r3, r2
 8001700:	d101      	bne.n	8001706 <HAL_GPIO_Init+0x22a>
 8001702:	2306      	movs	r3, #6
 8001704:	e00c      	b.n	8001720 <HAL_GPIO_Init+0x244>
 8001706:	2307      	movs	r3, #7
 8001708:	e00a      	b.n	8001720 <HAL_GPIO_Init+0x244>
 800170a:	2305      	movs	r3, #5
 800170c:	e008      	b.n	8001720 <HAL_GPIO_Init+0x244>
 800170e:	2304      	movs	r3, #4
 8001710:	e006      	b.n	8001720 <HAL_GPIO_Init+0x244>
 8001712:	2303      	movs	r3, #3
 8001714:	e004      	b.n	8001720 <HAL_GPIO_Init+0x244>
 8001716:	2302      	movs	r3, #2
 8001718:	e002      	b.n	8001720 <HAL_GPIO_Init+0x244>
 800171a:	2301      	movs	r3, #1
 800171c:	e000      	b.n	8001720 <HAL_GPIO_Init+0x244>
 800171e:	2300      	movs	r3, #0
 8001720:	697a      	ldr	r2, [r7, #20]
 8001722:	f002 0203 	and.w	r2, r2, #3
 8001726:	0092      	lsls	r2, r2, #2
 8001728:	4093      	lsls	r3, r2
 800172a:	693a      	ldr	r2, [r7, #16]
 800172c:	4313      	orrs	r3, r2
 800172e:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001730:	4936      	ldr	r1, [pc, #216]	; (800180c <HAL_GPIO_Init+0x330>)
 8001732:	697b      	ldr	r3, [r7, #20]
 8001734:	089b      	lsrs	r3, r3, #2
 8001736:	3302      	adds	r3, #2
 8001738:	693a      	ldr	r2, [r7, #16]
 800173a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 800173e:	4b3a      	ldr	r3, [pc, #232]	; (8001828 <HAL_GPIO_Init+0x34c>)
 8001740:	681b      	ldr	r3, [r3, #0]
 8001742:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001744:	68fb      	ldr	r3, [r7, #12]
 8001746:	43db      	mvns	r3, r3
 8001748:	693a      	ldr	r2, [r7, #16]
 800174a:	4013      	ands	r3, r2
 800174c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800174e:	683b      	ldr	r3, [r7, #0]
 8001750:	685b      	ldr	r3, [r3, #4]
 8001752:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001756:	2b00      	cmp	r3, #0
 8001758:	d003      	beq.n	8001762 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 800175a:	693a      	ldr	r2, [r7, #16]
 800175c:	68fb      	ldr	r3, [r7, #12]
 800175e:	4313      	orrs	r3, r2
 8001760:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001762:	4a31      	ldr	r2, [pc, #196]	; (8001828 <HAL_GPIO_Init+0x34c>)
 8001764:	693b      	ldr	r3, [r7, #16]
 8001766:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 8001768:	4b2f      	ldr	r3, [pc, #188]	; (8001828 <HAL_GPIO_Init+0x34c>)
 800176a:	685b      	ldr	r3, [r3, #4]
 800176c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800176e:	68fb      	ldr	r3, [r7, #12]
 8001770:	43db      	mvns	r3, r3
 8001772:	693a      	ldr	r2, [r7, #16]
 8001774:	4013      	ands	r3, r2
 8001776:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001778:	683b      	ldr	r3, [r7, #0]
 800177a:	685b      	ldr	r3, [r3, #4]
 800177c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001780:	2b00      	cmp	r3, #0
 8001782:	d003      	beq.n	800178c <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8001784:	693a      	ldr	r2, [r7, #16]
 8001786:	68fb      	ldr	r3, [r7, #12]
 8001788:	4313      	orrs	r3, r2
 800178a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800178c:	4a26      	ldr	r2, [pc, #152]	; (8001828 <HAL_GPIO_Init+0x34c>)
 800178e:	693b      	ldr	r3, [r7, #16]
 8001790:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001792:	4b25      	ldr	r3, [pc, #148]	; (8001828 <HAL_GPIO_Init+0x34c>)
 8001794:	689b      	ldr	r3, [r3, #8]
 8001796:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001798:	68fb      	ldr	r3, [r7, #12]
 800179a:	43db      	mvns	r3, r3
 800179c:	693a      	ldr	r2, [r7, #16]
 800179e:	4013      	ands	r3, r2
 80017a0:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80017a2:	683b      	ldr	r3, [r7, #0]
 80017a4:	685b      	ldr	r3, [r3, #4]
 80017a6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80017aa:	2b00      	cmp	r3, #0
 80017ac:	d003      	beq.n	80017b6 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 80017ae:	693a      	ldr	r2, [r7, #16]
 80017b0:	68fb      	ldr	r3, [r7, #12]
 80017b2:	4313      	orrs	r3, r2
 80017b4:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80017b6:	4a1c      	ldr	r2, [pc, #112]	; (8001828 <HAL_GPIO_Init+0x34c>)
 80017b8:	693b      	ldr	r3, [r7, #16]
 80017ba:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80017bc:	4b1a      	ldr	r3, [pc, #104]	; (8001828 <HAL_GPIO_Init+0x34c>)
 80017be:	68db      	ldr	r3, [r3, #12]
 80017c0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80017c2:	68fb      	ldr	r3, [r7, #12]
 80017c4:	43db      	mvns	r3, r3
 80017c6:	693a      	ldr	r2, [r7, #16]
 80017c8:	4013      	ands	r3, r2
 80017ca:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80017cc:	683b      	ldr	r3, [r7, #0]
 80017ce:	685b      	ldr	r3, [r3, #4]
 80017d0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80017d4:	2b00      	cmp	r3, #0
 80017d6:	d003      	beq.n	80017e0 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 80017d8:	693a      	ldr	r2, [r7, #16]
 80017da:	68fb      	ldr	r3, [r7, #12]
 80017dc:	4313      	orrs	r3, r2
 80017de:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80017e0:	4a11      	ldr	r2, [pc, #68]	; (8001828 <HAL_GPIO_Init+0x34c>)
 80017e2:	693b      	ldr	r3, [r7, #16]
 80017e4:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 80017e6:	697b      	ldr	r3, [r7, #20]
 80017e8:	3301      	adds	r3, #1
 80017ea:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80017ec:	683b      	ldr	r3, [r7, #0]
 80017ee:	681a      	ldr	r2, [r3, #0]
 80017f0:	697b      	ldr	r3, [r7, #20]
 80017f2:	fa22 f303 	lsr.w	r3, r2, r3
 80017f6:	2b00      	cmp	r3, #0
 80017f8:	f47f ae78 	bne.w	80014ec <HAL_GPIO_Init+0x10>
  }
}
 80017fc:	bf00      	nop
 80017fe:	371c      	adds	r7, #28
 8001800:	46bd      	mov	sp, r7
 8001802:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001806:	4770      	bx	lr
 8001808:	40021000 	.word	0x40021000
 800180c:	40010000 	.word	0x40010000
 8001810:	48000400 	.word	0x48000400
 8001814:	48000800 	.word	0x48000800
 8001818:	48000c00 	.word	0x48000c00
 800181c:	48001000 	.word	0x48001000
 8001820:	48001400 	.word	0x48001400
 8001824:	48001800 	.word	0x48001800
 8001828:	40010400 	.word	0x40010400

0800182c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800182c:	b480      	push	{r7}
 800182e:	b083      	sub	sp, #12
 8001830:	af00      	add	r7, sp, #0
 8001832:	6078      	str	r0, [r7, #4]
 8001834:	460b      	mov	r3, r1
 8001836:	807b      	strh	r3, [r7, #2]
 8001838:	4613      	mov	r3, r2
 800183a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800183c:	787b      	ldrb	r3, [r7, #1]
 800183e:	2b00      	cmp	r3, #0
 8001840:	d003      	beq.n	800184a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001842:	887a      	ldrh	r2, [r7, #2]
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001848:	e002      	b.n	8001850 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800184a:	887a      	ldrh	r2, [r7, #2]
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001850:	bf00      	nop
 8001852:	370c      	adds	r7, #12
 8001854:	46bd      	mov	sp, r7
 8001856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800185a:	4770      	bx	lr

0800185c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800185c:	b580      	push	{r7, lr}
 800185e:	b082      	sub	sp, #8
 8001860:	af00      	add	r7, sp, #0
 8001862:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	2b00      	cmp	r3, #0
 8001868:	d101      	bne.n	800186e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800186a:	2301      	movs	r3, #1
 800186c:	e081      	b.n	8001972 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001874:	b2db      	uxtb	r3, r3
 8001876:	2b00      	cmp	r3, #0
 8001878:	d106      	bne.n	8001888 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	2200      	movs	r2, #0
 800187e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8001882:	6878      	ldr	r0, [r7, #4]
 8001884:	f7ff f904 	bl	8000a90 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	2224      	movs	r2, #36	; 0x24
 800188c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	681a      	ldr	r2, [r3, #0]
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	681b      	ldr	r3, [r3, #0]
 800189a:	f022 0201 	bic.w	r2, r2, #1
 800189e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	685a      	ldr	r2, [r3, #4]
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80018ac:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	681b      	ldr	r3, [r3, #0]
 80018b2:	689a      	ldr	r2, [r3, #8]
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80018bc:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	68db      	ldr	r3, [r3, #12]
 80018c2:	2b01      	cmp	r3, #1
 80018c4:	d107      	bne.n	80018d6 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	689a      	ldr	r2, [r3, #8]
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80018d2:	609a      	str	r2, [r3, #8]
 80018d4:	e006      	b.n	80018e4 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	689a      	ldr	r2, [r3, #8]
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 80018e2:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	68db      	ldr	r3, [r3, #12]
 80018e8:	2b02      	cmp	r3, #2
 80018ea:	d104      	bne.n	80018f6 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80018f4:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	685b      	ldr	r3, [r3, #4]
 80018fc:	687a      	ldr	r2, [r7, #4]
 80018fe:	6812      	ldr	r2, [r2, #0]
 8001900:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001904:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001908:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	68da      	ldr	r2, [r3, #12]
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001918:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	691a      	ldr	r2, [r3, #16]
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	695b      	ldr	r3, [r3, #20]
 8001922:	ea42 0103 	orr.w	r1, r2, r3
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	699b      	ldr	r3, [r3, #24]
 800192a:	021a      	lsls	r2, r3, #8
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	430a      	orrs	r2, r1
 8001932:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	69d9      	ldr	r1, [r3, #28]
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	6a1a      	ldr	r2, [r3, #32]
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	430a      	orrs	r2, r1
 8001942:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	681a      	ldr	r2, [r3, #0]
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	f042 0201 	orr.w	r2, r2, #1
 8001952:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	2200      	movs	r2, #0
 8001958:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	2220      	movs	r2, #32
 800195e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	2200      	movs	r2, #0
 8001966:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	2200      	movs	r2, #0
 800196c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8001970:	2300      	movs	r3, #0
}
 8001972:	4618      	mov	r0, r3
 8001974:	3708      	adds	r7, #8
 8001976:	46bd      	mov	sp, r7
 8001978:	bd80      	pop	{r7, pc}

0800197a <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800197a:	b480      	push	{r7}
 800197c:	b083      	sub	sp, #12
 800197e:	af00      	add	r7, sp, #0
 8001980:	6078      	str	r0, [r7, #4]
 8001982:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800198a:	b2db      	uxtb	r3, r3
 800198c:	2b20      	cmp	r3, #32
 800198e:	d138      	bne.n	8001a02 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001996:	2b01      	cmp	r3, #1
 8001998:	d101      	bne.n	800199e <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800199a:	2302      	movs	r3, #2
 800199c:	e032      	b.n	8001a04 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	2201      	movs	r2, #1
 80019a2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	2224      	movs	r2, #36	; 0x24
 80019aa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	681b      	ldr	r3, [r3, #0]
 80019b2:	681a      	ldr	r2, [r3, #0]
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	f022 0201 	bic.w	r2, r2, #1
 80019bc:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	681a      	ldr	r2, [r3, #0]
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80019cc:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	6819      	ldr	r1, [r3, #0]
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	683a      	ldr	r2, [r7, #0]
 80019da:	430a      	orrs	r2, r1
 80019dc:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	681a      	ldr	r2, [r3, #0]
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	f042 0201 	orr.w	r2, r2, #1
 80019ec:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	2220      	movs	r2, #32
 80019f2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	2200      	movs	r2, #0
 80019fa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80019fe:	2300      	movs	r3, #0
 8001a00:	e000      	b.n	8001a04 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8001a02:	2302      	movs	r3, #2
  }
}
 8001a04:	4618      	mov	r0, r3
 8001a06:	370c      	adds	r7, #12
 8001a08:	46bd      	mov	sp, r7
 8001a0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a0e:	4770      	bx	lr

08001a10 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8001a10:	b480      	push	{r7}
 8001a12:	b085      	sub	sp, #20
 8001a14:	af00      	add	r7, sp, #0
 8001a16:	6078      	str	r0, [r7, #4]
 8001a18:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001a20:	b2db      	uxtb	r3, r3
 8001a22:	2b20      	cmp	r3, #32
 8001a24:	d139      	bne.n	8001a9a <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001a2c:	2b01      	cmp	r3, #1
 8001a2e:	d101      	bne.n	8001a34 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8001a30:	2302      	movs	r3, #2
 8001a32:	e033      	b.n	8001a9c <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	2201      	movs	r2, #1
 8001a38:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	2224      	movs	r2, #36	; 0x24
 8001a40:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	681a      	ldr	r2, [r3, #0]
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	681b      	ldr	r3, [r3, #0]
 8001a4e:	f022 0201 	bic.w	r2, r2, #1
 8001a52:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8001a5c:	68fb      	ldr	r3, [r7, #12]
 8001a5e:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8001a62:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8001a64:	683b      	ldr	r3, [r7, #0]
 8001a66:	021b      	lsls	r3, r3, #8
 8001a68:	68fa      	ldr	r2, [r7, #12]
 8001a6a:	4313      	orrs	r3, r2
 8001a6c:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	68fa      	ldr	r2, [r7, #12]
 8001a74:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	681a      	ldr	r2, [r3, #0]
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	f042 0201 	orr.w	r2, r2, #1
 8001a84:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	2220      	movs	r2, #32
 8001a8a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	2200      	movs	r2, #0
 8001a92:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8001a96:	2300      	movs	r3, #0
 8001a98:	e000      	b.n	8001a9c <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8001a9a:	2302      	movs	r3, #2
  }
}
 8001a9c:	4618      	mov	r0, r3
 8001a9e:	3714      	adds	r7, #20
 8001aa0:	46bd      	mov	sp, r7
 8001aa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aa6:	4770      	bx	lr

08001aa8 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_RANGE1 or PWR_REGULATOR_VOLTAGE_RANGE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8001aa8:	b480      	push	{r7}
 8001aaa:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8001aac:	4b04      	ldr	r3, [pc, #16]	; (8001ac0 <HAL_PWREx_GetVoltageRange+0x18>)
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8001ab4:	4618      	mov	r0, r3
 8001ab6:	46bd      	mov	sp, r7
 8001ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001abc:	4770      	bx	lr
 8001abe:	bf00      	nop
 8001ac0:	40007000 	.word	0x40007000

08001ac4 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001ac4:	b480      	push	{r7}
 8001ac6:	b085      	sub	sp, #20
 8001ac8:	af00      	add	r7, sp, #0
 8001aca:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001ad2:	d130      	bne.n	8001b36 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8001ad4:	4b23      	ldr	r3, [pc, #140]	; (8001b64 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001adc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001ae0:	d038      	beq.n	8001b54 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001ae2:	4b20      	ldr	r3, [pc, #128]	; (8001b64 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001aea:	4a1e      	ldr	r2, [pc, #120]	; (8001b64 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001aec:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001af0:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001af2:	4b1d      	ldr	r3, [pc, #116]	; (8001b68 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	2232      	movs	r2, #50	; 0x32
 8001af8:	fb02 f303 	mul.w	r3, r2, r3
 8001afc:	4a1b      	ldr	r2, [pc, #108]	; (8001b6c <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8001afe:	fba2 2303 	umull	r2, r3, r2, r3
 8001b02:	0c9b      	lsrs	r3, r3, #18
 8001b04:	3301      	adds	r3, #1
 8001b06:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001b08:	e002      	b.n	8001b10 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8001b0a:	68fb      	ldr	r3, [r7, #12]
 8001b0c:	3b01      	subs	r3, #1
 8001b0e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001b10:	4b14      	ldr	r3, [pc, #80]	; (8001b64 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001b12:	695b      	ldr	r3, [r3, #20]
 8001b14:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001b18:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001b1c:	d102      	bne.n	8001b24 <HAL_PWREx_ControlVoltageScaling+0x60>
 8001b1e:	68fb      	ldr	r3, [r7, #12]
 8001b20:	2b00      	cmp	r3, #0
 8001b22:	d1f2      	bne.n	8001b0a <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001b24:	4b0f      	ldr	r3, [pc, #60]	; (8001b64 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001b26:	695b      	ldr	r3, [r3, #20]
 8001b28:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001b2c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001b30:	d110      	bne.n	8001b54 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8001b32:	2303      	movs	r3, #3
 8001b34:	e00f      	b.n	8001b56 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8001b36:	4b0b      	ldr	r3, [pc, #44]	; (8001b64 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001b3e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001b42:	d007      	beq.n	8001b54 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001b44:	4b07      	ldr	r3, [pc, #28]	; (8001b64 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001b4c:	4a05      	ldr	r2, [pc, #20]	; (8001b64 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001b4e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001b52:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8001b54:	2300      	movs	r3, #0
}
 8001b56:	4618      	mov	r0, r3
 8001b58:	3714      	adds	r7, #20
 8001b5a:	46bd      	mov	sp, r7
 8001b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b60:	4770      	bx	lr
 8001b62:	bf00      	nop
 8001b64:	40007000 	.word	0x40007000
 8001b68:	20000000 	.word	0x20000000
 8001b6c:	431bde83 	.word	0x431bde83

08001b70 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001b70:	b580      	push	{r7, lr}
 8001b72:	b088      	sub	sp, #32
 8001b74:	af00      	add	r7, sp, #0
 8001b76:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	2b00      	cmp	r3, #0
 8001b7c:	d101      	bne.n	8001b82 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001b7e:	2301      	movs	r3, #1
 8001b80:	e39d      	b.n	80022be <HAL_RCC_OscConfig+0x74e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001b82:	4ba4      	ldr	r3, [pc, #656]	; (8001e14 <HAL_RCC_OscConfig+0x2a4>)
 8001b84:	689b      	ldr	r3, [r3, #8]
 8001b86:	f003 030c 	and.w	r3, r3, #12
 8001b8a:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001b8c:	4ba1      	ldr	r3, [pc, #644]	; (8001e14 <HAL_RCC_OscConfig+0x2a4>)
 8001b8e:	68db      	ldr	r3, [r3, #12]
 8001b90:	f003 0303 	and.w	r3, r3, #3
 8001b94:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	f003 0310 	and.w	r3, r3, #16
 8001b9e:	2b00      	cmp	r3, #0
 8001ba0:	f000 80e1 	beq.w	8001d66 <HAL_RCC_OscConfig+0x1f6>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001ba4:	69bb      	ldr	r3, [r7, #24]
 8001ba6:	2b00      	cmp	r3, #0
 8001ba8:	d007      	beq.n	8001bba <HAL_RCC_OscConfig+0x4a>
 8001baa:	69bb      	ldr	r3, [r7, #24]
 8001bac:	2b0c      	cmp	r3, #12
 8001bae:	f040 8088 	bne.w	8001cc2 <HAL_RCC_OscConfig+0x152>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8001bb2:	697b      	ldr	r3, [r7, #20]
 8001bb4:	2b01      	cmp	r3, #1
 8001bb6:	f040 8084 	bne.w	8001cc2 <HAL_RCC_OscConfig+0x152>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001bba:	4b96      	ldr	r3, [pc, #600]	; (8001e14 <HAL_RCC_OscConfig+0x2a4>)
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	f003 0302 	and.w	r3, r3, #2
 8001bc2:	2b00      	cmp	r3, #0
 8001bc4:	d005      	beq.n	8001bd2 <HAL_RCC_OscConfig+0x62>
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	699b      	ldr	r3, [r3, #24]
 8001bca:	2b00      	cmp	r3, #0
 8001bcc:	d101      	bne.n	8001bd2 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8001bce:	2301      	movs	r3, #1
 8001bd0:	e375      	b.n	80022be <HAL_RCC_OscConfig+0x74e>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	6a1a      	ldr	r2, [r3, #32]
 8001bd6:	4b8f      	ldr	r3, [pc, #572]	; (8001e14 <HAL_RCC_OscConfig+0x2a4>)
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	f003 0308 	and.w	r3, r3, #8
 8001bde:	2b00      	cmp	r3, #0
 8001be0:	d004      	beq.n	8001bec <HAL_RCC_OscConfig+0x7c>
 8001be2:	4b8c      	ldr	r3, [pc, #560]	; (8001e14 <HAL_RCC_OscConfig+0x2a4>)
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001bea:	e005      	b.n	8001bf8 <HAL_RCC_OscConfig+0x88>
 8001bec:	4b89      	ldr	r3, [pc, #548]	; (8001e14 <HAL_RCC_OscConfig+0x2a4>)
 8001bee:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001bf2:	091b      	lsrs	r3, r3, #4
 8001bf4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001bf8:	4293      	cmp	r3, r2
 8001bfa:	d223      	bcs.n	8001c44 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	6a1b      	ldr	r3, [r3, #32]
 8001c00:	4618      	mov	r0, r3
 8001c02:	f000 fd09 	bl	8002618 <RCC_SetFlashLatencyFromMSIRange>
 8001c06:	4603      	mov	r3, r0
 8001c08:	2b00      	cmp	r3, #0
 8001c0a:	d001      	beq.n	8001c10 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8001c0c:	2301      	movs	r3, #1
 8001c0e:	e356      	b.n	80022be <HAL_RCC_OscConfig+0x74e>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001c10:	4b80      	ldr	r3, [pc, #512]	; (8001e14 <HAL_RCC_OscConfig+0x2a4>)
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	4a7f      	ldr	r2, [pc, #508]	; (8001e14 <HAL_RCC_OscConfig+0x2a4>)
 8001c16:	f043 0308 	orr.w	r3, r3, #8
 8001c1a:	6013      	str	r3, [r2, #0]
 8001c1c:	4b7d      	ldr	r3, [pc, #500]	; (8001e14 <HAL_RCC_OscConfig+0x2a4>)
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	6a1b      	ldr	r3, [r3, #32]
 8001c28:	497a      	ldr	r1, [pc, #488]	; (8001e14 <HAL_RCC_OscConfig+0x2a4>)
 8001c2a:	4313      	orrs	r3, r2
 8001c2c:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001c2e:	4b79      	ldr	r3, [pc, #484]	; (8001e14 <HAL_RCC_OscConfig+0x2a4>)
 8001c30:	685b      	ldr	r3, [r3, #4]
 8001c32:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	69db      	ldr	r3, [r3, #28]
 8001c3a:	021b      	lsls	r3, r3, #8
 8001c3c:	4975      	ldr	r1, [pc, #468]	; (8001e14 <HAL_RCC_OscConfig+0x2a4>)
 8001c3e:	4313      	orrs	r3, r2
 8001c40:	604b      	str	r3, [r1, #4]
 8001c42:	e022      	b.n	8001c8a <HAL_RCC_OscConfig+0x11a>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001c44:	4b73      	ldr	r3, [pc, #460]	; (8001e14 <HAL_RCC_OscConfig+0x2a4>)
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	4a72      	ldr	r2, [pc, #456]	; (8001e14 <HAL_RCC_OscConfig+0x2a4>)
 8001c4a:	f043 0308 	orr.w	r3, r3, #8
 8001c4e:	6013      	str	r3, [r2, #0]
 8001c50:	4b70      	ldr	r3, [pc, #448]	; (8001e14 <HAL_RCC_OscConfig+0x2a4>)
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	6a1b      	ldr	r3, [r3, #32]
 8001c5c:	496d      	ldr	r1, [pc, #436]	; (8001e14 <HAL_RCC_OscConfig+0x2a4>)
 8001c5e:	4313      	orrs	r3, r2
 8001c60:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001c62:	4b6c      	ldr	r3, [pc, #432]	; (8001e14 <HAL_RCC_OscConfig+0x2a4>)
 8001c64:	685b      	ldr	r3, [r3, #4]
 8001c66:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	69db      	ldr	r3, [r3, #28]
 8001c6e:	021b      	lsls	r3, r3, #8
 8001c70:	4968      	ldr	r1, [pc, #416]	; (8001e14 <HAL_RCC_OscConfig+0x2a4>)
 8001c72:	4313      	orrs	r3, r2
 8001c74:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	6a1b      	ldr	r3, [r3, #32]
 8001c7a:	4618      	mov	r0, r3
 8001c7c:	f000 fccc 	bl	8002618 <RCC_SetFlashLatencyFromMSIRange>
 8001c80:	4603      	mov	r3, r0
 8001c82:	2b00      	cmp	r3, #0
 8001c84:	d001      	beq.n	8001c8a <HAL_RCC_OscConfig+0x11a>
          {
            return HAL_ERROR;
 8001c86:	2301      	movs	r3, #1
 8001c88:	e319      	b.n	80022be <HAL_RCC_OscConfig+0x74e>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001c8a:	f000 fc03 	bl	8002494 <HAL_RCC_GetSysClockFreq>
 8001c8e:	4601      	mov	r1, r0
 8001c90:	4b60      	ldr	r3, [pc, #384]	; (8001e14 <HAL_RCC_OscConfig+0x2a4>)
 8001c92:	689b      	ldr	r3, [r3, #8]
 8001c94:	091b      	lsrs	r3, r3, #4
 8001c96:	f003 030f 	and.w	r3, r3, #15
 8001c9a:	4a5f      	ldr	r2, [pc, #380]	; (8001e18 <HAL_RCC_OscConfig+0x2a8>)
 8001c9c:	5cd3      	ldrb	r3, [r2, r3]
 8001c9e:	f003 031f 	and.w	r3, r3, #31
 8001ca2:	fa21 f303 	lsr.w	r3, r1, r3
 8001ca6:	4a5d      	ldr	r2, [pc, #372]	; (8001e1c <HAL_RCC_OscConfig+0x2ac>)
 8001ca8:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8001caa:	4b5d      	ldr	r3, [pc, #372]	; (8001e20 <HAL_RCC_OscConfig+0x2b0>)
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	4618      	mov	r0, r3
 8001cb0:	f7ff fab4 	bl	800121c <HAL_InitTick>
 8001cb4:	4603      	mov	r3, r0
 8001cb6:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8001cb8:	7bfb      	ldrb	r3, [r7, #15]
 8001cba:	2b00      	cmp	r3, #0
 8001cbc:	d052      	beq.n	8001d64 <HAL_RCC_OscConfig+0x1f4>
        {
          return status;
 8001cbe:	7bfb      	ldrb	r3, [r7, #15]
 8001cc0:	e2fd      	b.n	80022be <HAL_RCC_OscConfig+0x74e>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	699b      	ldr	r3, [r3, #24]
 8001cc6:	2b00      	cmp	r3, #0
 8001cc8:	d032      	beq.n	8001d30 <HAL_RCC_OscConfig+0x1c0>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001cca:	4b52      	ldr	r3, [pc, #328]	; (8001e14 <HAL_RCC_OscConfig+0x2a4>)
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	4a51      	ldr	r2, [pc, #324]	; (8001e14 <HAL_RCC_OscConfig+0x2a4>)
 8001cd0:	f043 0301 	orr.w	r3, r3, #1
 8001cd4:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001cd6:	f7ff faed 	bl	80012b4 <HAL_GetTick>
 8001cda:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001cdc:	e008      	b.n	8001cf0 <HAL_RCC_OscConfig+0x180>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001cde:	f7ff fae9 	bl	80012b4 <HAL_GetTick>
 8001ce2:	4602      	mov	r2, r0
 8001ce4:	693b      	ldr	r3, [r7, #16]
 8001ce6:	1ad3      	subs	r3, r2, r3
 8001ce8:	2b02      	cmp	r3, #2
 8001cea:	d901      	bls.n	8001cf0 <HAL_RCC_OscConfig+0x180>
          {
            return HAL_TIMEOUT;
 8001cec:	2303      	movs	r3, #3
 8001cee:	e2e6      	b.n	80022be <HAL_RCC_OscConfig+0x74e>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001cf0:	4b48      	ldr	r3, [pc, #288]	; (8001e14 <HAL_RCC_OscConfig+0x2a4>)
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	f003 0302 	and.w	r3, r3, #2
 8001cf8:	2b00      	cmp	r3, #0
 8001cfa:	d0f0      	beq.n	8001cde <HAL_RCC_OscConfig+0x16e>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001cfc:	4b45      	ldr	r3, [pc, #276]	; (8001e14 <HAL_RCC_OscConfig+0x2a4>)
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	4a44      	ldr	r2, [pc, #272]	; (8001e14 <HAL_RCC_OscConfig+0x2a4>)
 8001d02:	f043 0308 	orr.w	r3, r3, #8
 8001d06:	6013      	str	r3, [r2, #0]
 8001d08:	4b42      	ldr	r3, [pc, #264]	; (8001e14 <HAL_RCC_OscConfig+0x2a4>)
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	6a1b      	ldr	r3, [r3, #32]
 8001d14:	493f      	ldr	r1, [pc, #252]	; (8001e14 <HAL_RCC_OscConfig+0x2a4>)
 8001d16:	4313      	orrs	r3, r2
 8001d18:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001d1a:	4b3e      	ldr	r3, [pc, #248]	; (8001e14 <HAL_RCC_OscConfig+0x2a4>)
 8001d1c:	685b      	ldr	r3, [r3, #4]
 8001d1e:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	69db      	ldr	r3, [r3, #28]
 8001d26:	021b      	lsls	r3, r3, #8
 8001d28:	493a      	ldr	r1, [pc, #232]	; (8001e14 <HAL_RCC_OscConfig+0x2a4>)
 8001d2a:	4313      	orrs	r3, r2
 8001d2c:	604b      	str	r3, [r1, #4]
 8001d2e:	e01a      	b.n	8001d66 <HAL_RCC_OscConfig+0x1f6>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001d30:	4b38      	ldr	r3, [pc, #224]	; (8001e14 <HAL_RCC_OscConfig+0x2a4>)
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	4a37      	ldr	r2, [pc, #220]	; (8001e14 <HAL_RCC_OscConfig+0x2a4>)
 8001d36:	f023 0301 	bic.w	r3, r3, #1
 8001d3a:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001d3c:	f7ff faba 	bl	80012b4 <HAL_GetTick>
 8001d40:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001d42:	e008      	b.n	8001d56 <HAL_RCC_OscConfig+0x1e6>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001d44:	f7ff fab6 	bl	80012b4 <HAL_GetTick>
 8001d48:	4602      	mov	r2, r0
 8001d4a:	693b      	ldr	r3, [r7, #16]
 8001d4c:	1ad3      	subs	r3, r2, r3
 8001d4e:	2b02      	cmp	r3, #2
 8001d50:	d901      	bls.n	8001d56 <HAL_RCC_OscConfig+0x1e6>
          {
            return HAL_TIMEOUT;
 8001d52:	2303      	movs	r3, #3
 8001d54:	e2b3      	b.n	80022be <HAL_RCC_OscConfig+0x74e>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001d56:	4b2f      	ldr	r3, [pc, #188]	; (8001e14 <HAL_RCC_OscConfig+0x2a4>)
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	f003 0302 	and.w	r3, r3, #2
 8001d5e:	2b00      	cmp	r3, #0
 8001d60:	d1f0      	bne.n	8001d44 <HAL_RCC_OscConfig+0x1d4>
 8001d62:	e000      	b.n	8001d66 <HAL_RCC_OscConfig+0x1f6>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001d64:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	f003 0301 	and.w	r3, r3, #1
 8001d6e:	2b00      	cmp	r3, #0
 8001d70:	d074      	beq.n	8001e5c <HAL_RCC_OscConfig+0x2ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8001d72:	69bb      	ldr	r3, [r7, #24]
 8001d74:	2b08      	cmp	r3, #8
 8001d76:	d005      	beq.n	8001d84 <HAL_RCC_OscConfig+0x214>
 8001d78:	69bb      	ldr	r3, [r7, #24]
 8001d7a:	2b0c      	cmp	r3, #12
 8001d7c:	d10e      	bne.n	8001d9c <HAL_RCC_OscConfig+0x22c>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001d7e:	697b      	ldr	r3, [r7, #20]
 8001d80:	2b03      	cmp	r3, #3
 8001d82:	d10b      	bne.n	8001d9c <HAL_RCC_OscConfig+0x22c>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001d84:	4b23      	ldr	r3, [pc, #140]	; (8001e14 <HAL_RCC_OscConfig+0x2a4>)
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d8c:	2b00      	cmp	r3, #0
 8001d8e:	d064      	beq.n	8001e5a <HAL_RCC_OscConfig+0x2ea>
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	685b      	ldr	r3, [r3, #4]
 8001d94:	2b00      	cmp	r3, #0
 8001d96:	d160      	bne.n	8001e5a <HAL_RCC_OscConfig+0x2ea>
      {
        return HAL_ERROR;
 8001d98:	2301      	movs	r3, #1
 8001d9a:	e290      	b.n	80022be <HAL_RCC_OscConfig+0x74e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	685b      	ldr	r3, [r3, #4]
 8001da0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001da4:	d106      	bne.n	8001db4 <HAL_RCC_OscConfig+0x244>
 8001da6:	4b1b      	ldr	r3, [pc, #108]	; (8001e14 <HAL_RCC_OscConfig+0x2a4>)
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	4a1a      	ldr	r2, [pc, #104]	; (8001e14 <HAL_RCC_OscConfig+0x2a4>)
 8001dac:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001db0:	6013      	str	r3, [r2, #0]
 8001db2:	e01d      	b.n	8001df0 <HAL_RCC_OscConfig+0x280>
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	685b      	ldr	r3, [r3, #4]
 8001db8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001dbc:	d10c      	bne.n	8001dd8 <HAL_RCC_OscConfig+0x268>
 8001dbe:	4b15      	ldr	r3, [pc, #84]	; (8001e14 <HAL_RCC_OscConfig+0x2a4>)
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	4a14      	ldr	r2, [pc, #80]	; (8001e14 <HAL_RCC_OscConfig+0x2a4>)
 8001dc4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001dc8:	6013      	str	r3, [r2, #0]
 8001dca:	4b12      	ldr	r3, [pc, #72]	; (8001e14 <HAL_RCC_OscConfig+0x2a4>)
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	4a11      	ldr	r2, [pc, #68]	; (8001e14 <HAL_RCC_OscConfig+0x2a4>)
 8001dd0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001dd4:	6013      	str	r3, [r2, #0]
 8001dd6:	e00b      	b.n	8001df0 <HAL_RCC_OscConfig+0x280>
 8001dd8:	4b0e      	ldr	r3, [pc, #56]	; (8001e14 <HAL_RCC_OscConfig+0x2a4>)
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	4a0d      	ldr	r2, [pc, #52]	; (8001e14 <HAL_RCC_OscConfig+0x2a4>)
 8001dde:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001de2:	6013      	str	r3, [r2, #0]
 8001de4:	4b0b      	ldr	r3, [pc, #44]	; (8001e14 <HAL_RCC_OscConfig+0x2a4>)
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	4a0a      	ldr	r2, [pc, #40]	; (8001e14 <HAL_RCC_OscConfig+0x2a4>)
 8001dea:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001dee:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	685b      	ldr	r3, [r3, #4]
 8001df4:	2b00      	cmp	r3, #0
 8001df6:	d01c      	beq.n	8001e32 <HAL_RCC_OscConfig+0x2c2>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001df8:	f7ff fa5c 	bl	80012b4 <HAL_GetTick>
 8001dfc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001dfe:	e011      	b.n	8001e24 <HAL_RCC_OscConfig+0x2b4>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001e00:	f7ff fa58 	bl	80012b4 <HAL_GetTick>
 8001e04:	4602      	mov	r2, r0
 8001e06:	693b      	ldr	r3, [r7, #16]
 8001e08:	1ad3      	subs	r3, r2, r3
 8001e0a:	2b64      	cmp	r3, #100	; 0x64
 8001e0c:	d90a      	bls.n	8001e24 <HAL_RCC_OscConfig+0x2b4>
          {
            return HAL_TIMEOUT;
 8001e0e:	2303      	movs	r3, #3
 8001e10:	e255      	b.n	80022be <HAL_RCC_OscConfig+0x74e>
 8001e12:	bf00      	nop
 8001e14:	40021000 	.word	0x40021000
 8001e18:	08004068 	.word	0x08004068
 8001e1c:	20000000 	.word	0x20000000
 8001e20:	20000004 	.word	0x20000004
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001e24:	4bae      	ldr	r3, [pc, #696]	; (80020e0 <HAL_RCC_OscConfig+0x570>)
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e2c:	2b00      	cmp	r3, #0
 8001e2e:	d0e7      	beq.n	8001e00 <HAL_RCC_OscConfig+0x290>
 8001e30:	e014      	b.n	8001e5c <HAL_RCC_OscConfig+0x2ec>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e32:	f7ff fa3f 	bl	80012b4 <HAL_GetTick>
 8001e36:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001e38:	e008      	b.n	8001e4c <HAL_RCC_OscConfig+0x2dc>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001e3a:	f7ff fa3b 	bl	80012b4 <HAL_GetTick>
 8001e3e:	4602      	mov	r2, r0
 8001e40:	693b      	ldr	r3, [r7, #16]
 8001e42:	1ad3      	subs	r3, r2, r3
 8001e44:	2b64      	cmp	r3, #100	; 0x64
 8001e46:	d901      	bls.n	8001e4c <HAL_RCC_OscConfig+0x2dc>
          {
            return HAL_TIMEOUT;
 8001e48:	2303      	movs	r3, #3
 8001e4a:	e238      	b.n	80022be <HAL_RCC_OscConfig+0x74e>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001e4c:	4ba4      	ldr	r3, [pc, #656]	; (80020e0 <HAL_RCC_OscConfig+0x570>)
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e54:	2b00      	cmp	r3, #0
 8001e56:	d1f0      	bne.n	8001e3a <HAL_RCC_OscConfig+0x2ca>
 8001e58:	e000      	b.n	8001e5c <HAL_RCC_OscConfig+0x2ec>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001e5a:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	f003 0302 	and.w	r3, r3, #2
 8001e64:	2b00      	cmp	r3, #0
 8001e66:	d060      	beq.n	8001f2a <HAL_RCC_OscConfig+0x3ba>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8001e68:	69bb      	ldr	r3, [r7, #24]
 8001e6a:	2b04      	cmp	r3, #4
 8001e6c:	d005      	beq.n	8001e7a <HAL_RCC_OscConfig+0x30a>
 8001e6e:	69bb      	ldr	r3, [r7, #24]
 8001e70:	2b0c      	cmp	r3, #12
 8001e72:	d119      	bne.n	8001ea8 <HAL_RCC_OscConfig+0x338>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001e74:	697b      	ldr	r3, [r7, #20]
 8001e76:	2b02      	cmp	r3, #2
 8001e78:	d116      	bne.n	8001ea8 <HAL_RCC_OscConfig+0x338>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001e7a:	4b99      	ldr	r3, [pc, #612]	; (80020e0 <HAL_RCC_OscConfig+0x570>)
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001e82:	2b00      	cmp	r3, #0
 8001e84:	d005      	beq.n	8001e92 <HAL_RCC_OscConfig+0x322>
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	68db      	ldr	r3, [r3, #12]
 8001e8a:	2b00      	cmp	r3, #0
 8001e8c:	d101      	bne.n	8001e92 <HAL_RCC_OscConfig+0x322>
      {
        return HAL_ERROR;
 8001e8e:	2301      	movs	r3, #1
 8001e90:	e215      	b.n	80022be <HAL_RCC_OscConfig+0x74e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001e92:	4b93      	ldr	r3, [pc, #588]	; (80020e0 <HAL_RCC_OscConfig+0x570>)
 8001e94:	685b      	ldr	r3, [r3, #4]
 8001e96:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	691b      	ldr	r3, [r3, #16]
 8001e9e:	061b      	lsls	r3, r3, #24
 8001ea0:	498f      	ldr	r1, [pc, #572]	; (80020e0 <HAL_RCC_OscConfig+0x570>)
 8001ea2:	4313      	orrs	r3, r2
 8001ea4:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001ea6:	e040      	b.n	8001f2a <HAL_RCC_OscConfig+0x3ba>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	68db      	ldr	r3, [r3, #12]
 8001eac:	2b00      	cmp	r3, #0
 8001eae:	d023      	beq.n	8001ef8 <HAL_RCC_OscConfig+0x388>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001eb0:	4b8b      	ldr	r3, [pc, #556]	; (80020e0 <HAL_RCC_OscConfig+0x570>)
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	4a8a      	ldr	r2, [pc, #552]	; (80020e0 <HAL_RCC_OscConfig+0x570>)
 8001eb6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001eba:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ebc:	f7ff f9fa 	bl	80012b4 <HAL_GetTick>
 8001ec0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001ec2:	e008      	b.n	8001ed6 <HAL_RCC_OscConfig+0x366>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001ec4:	f7ff f9f6 	bl	80012b4 <HAL_GetTick>
 8001ec8:	4602      	mov	r2, r0
 8001eca:	693b      	ldr	r3, [r7, #16]
 8001ecc:	1ad3      	subs	r3, r2, r3
 8001ece:	2b02      	cmp	r3, #2
 8001ed0:	d901      	bls.n	8001ed6 <HAL_RCC_OscConfig+0x366>
          {
            return HAL_TIMEOUT;
 8001ed2:	2303      	movs	r3, #3
 8001ed4:	e1f3      	b.n	80022be <HAL_RCC_OscConfig+0x74e>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001ed6:	4b82      	ldr	r3, [pc, #520]	; (80020e0 <HAL_RCC_OscConfig+0x570>)
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001ede:	2b00      	cmp	r3, #0
 8001ee0:	d0f0      	beq.n	8001ec4 <HAL_RCC_OscConfig+0x354>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001ee2:	4b7f      	ldr	r3, [pc, #508]	; (80020e0 <HAL_RCC_OscConfig+0x570>)
 8001ee4:	685b      	ldr	r3, [r3, #4]
 8001ee6:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	691b      	ldr	r3, [r3, #16]
 8001eee:	061b      	lsls	r3, r3, #24
 8001ef0:	497b      	ldr	r1, [pc, #492]	; (80020e0 <HAL_RCC_OscConfig+0x570>)
 8001ef2:	4313      	orrs	r3, r2
 8001ef4:	604b      	str	r3, [r1, #4]
 8001ef6:	e018      	b.n	8001f2a <HAL_RCC_OscConfig+0x3ba>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001ef8:	4b79      	ldr	r3, [pc, #484]	; (80020e0 <HAL_RCC_OscConfig+0x570>)
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	4a78      	ldr	r2, [pc, #480]	; (80020e0 <HAL_RCC_OscConfig+0x570>)
 8001efe:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001f02:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f04:	f7ff f9d6 	bl	80012b4 <HAL_GetTick>
 8001f08:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001f0a:	e008      	b.n	8001f1e <HAL_RCC_OscConfig+0x3ae>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001f0c:	f7ff f9d2 	bl	80012b4 <HAL_GetTick>
 8001f10:	4602      	mov	r2, r0
 8001f12:	693b      	ldr	r3, [r7, #16]
 8001f14:	1ad3      	subs	r3, r2, r3
 8001f16:	2b02      	cmp	r3, #2
 8001f18:	d901      	bls.n	8001f1e <HAL_RCC_OscConfig+0x3ae>
          {
            return HAL_TIMEOUT;
 8001f1a:	2303      	movs	r3, #3
 8001f1c:	e1cf      	b.n	80022be <HAL_RCC_OscConfig+0x74e>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001f1e:	4b70      	ldr	r3, [pc, #448]	; (80020e0 <HAL_RCC_OscConfig+0x570>)
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001f26:	2b00      	cmp	r3, #0
 8001f28:	d1f0      	bne.n	8001f0c <HAL_RCC_OscConfig+0x39c>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	f003 0308 	and.w	r3, r3, #8
 8001f32:	2b00      	cmp	r3, #0
 8001f34:	d03c      	beq.n	8001fb0 <HAL_RCC_OscConfig+0x440>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	695b      	ldr	r3, [r3, #20]
 8001f3a:	2b00      	cmp	r3, #0
 8001f3c:	d01c      	beq.n	8001f78 <HAL_RCC_OscConfig+0x408>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001f3e:	4b68      	ldr	r3, [pc, #416]	; (80020e0 <HAL_RCC_OscConfig+0x570>)
 8001f40:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001f44:	4a66      	ldr	r2, [pc, #408]	; (80020e0 <HAL_RCC_OscConfig+0x570>)
 8001f46:	f043 0301 	orr.w	r3, r3, #1
 8001f4a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001f4e:	f7ff f9b1 	bl	80012b4 <HAL_GetTick>
 8001f52:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001f54:	e008      	b.n	8001f68 <HAL_RCC_OscConfig+0x3f8>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001f56:	f7ff f9ad 	bl	80012b4 <HAL_GetTick>
 8001f5a:	4602      	mov	r2, r0
 8001f5c:	693b      	ldr	r3, [r7, #16]
 8001f5e:	1ad3      	subs	r3, r2, r3
 8001f60:	2b02      	cmp	r3, #2
 8001f62:	d901      	bls.n	8001f68 <HAL_RCC_OscConfig+0x3f8>
        {
          return HAL_TIMEOUT;
 8001f64:	2303      	movs	r3, #3
 8001f66:	e1aa      	b.n	80022be <HAL_RCC_OscConfig+0x74e>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001f68:	4b5d      	ldr	r3, [pc, #372]	; (80020e0 <HAL_RCC_OscConfig+0x570>)
 8001f6a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001f6e:	f003 0302 	and.w	r3, r3, #2
 8001f72:	2b00      	cmp	r3, #0
 8001f74:	d0ef      	beq.n	8001f56 <HAL_RCC_OscConfig+0x3e6>
 8001f76:	e01b      	b.n	8001fb0 <HAL_RCC_OscConfig+0x440>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001f78:	4b59      	ldr	r3, [pc, #356]	; (80020e0 <HAL_RCC_OscConfig+0x570>)
 8001f7a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001f7e:	4a58      	ldr	r2, [pc, #352]	; (80020e0 <HAL_RCC_OscConfig+0x570>)
 8001f80:	f023 0301 	bic.w	r3, r3, #1
 8001f84:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001f88:	f7ff f994 	bl	80012b4 <HAL_GetTick>
 8001f8c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001f8e:	e008      	b.n	8001fa2 <HAL_RCC_OscConfig+0x432>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001f90:	f7ff f990 	bl	80012b4 <HAL_GetTick>
 8001f94:	4602      	mov	r2, r0
 8001f96:	693b      	ldr	r3, [r7, #16]
 8001f98:	1ad3      	subs	r3, r2, r3
 8001f9a:	2b02      	cmp	r3, #2
 8001f9c:	d901      	bls.n	8001fa2 <HAL_RCC_OscConfig+0x432>
        {
          return HAL_TIMEOUT;
 8001f9e:	2303      	movs	r3, #3
 8001fa0:	e18d      	b.n	80022be <HAL_RCC_OscConfig+0x74e>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001fa2:	4b4f      	ldr	r3, [pc, #316]	; (80020e0 <HAL_RCC_OscConfig+0x570>)
 8001fa4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001fa8:	f003 0302 	and.w	r3, r3, #2
 8001fac:	2b00      	cmp	r3, #0
 8001fae:	d1ef      	bne.n	8001f90 <HAL_RCC_OscConfig+0x420>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	f003 0304 	and.w	r3, r3, #4
 8001fb8:	2b00      	cmp	r3, #0
 8001fba:	f000 80a5 	beq.w	8002108 <HAL_RCC_OscConfig+0x598>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001fbe:	2300      	movs	r3, #0
 8001fc0:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8001fc2:	4b47      	ldr	r3, [pc, #284]	; (80020e0 <HAL_RCC_OscConfig+0x570>)
 8001fc4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001fc6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001fca:	2b00      	cmp	r3, #0
 8001fcc:	d10d      	bne.n	8001fea <HAL_RCC_OscConfig+0x47a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001fce:	4b44      	ldr	r3, [pc, #272]	; (80020e0 <HAL_RCC_OscConfig+0x570>)
 8001fd0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001fd2:	4a43      	ldr	r2, [pc, #268]	; (80020e0 <HAL_RCC_OscConfig+0x570>)
 8001fd4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001fd8:	6593      	str	r3, [r2, #88]	; 0x58
 8001fda:	4b41      	ldr	r3, [pc, #260]	; (80020e0 <HAL_RCC_OscConfig+0x570>)
 8001fdc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001fde:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001fe2:	60bb      	str	r3, [r7, #8]
 8001fe4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001fe6:	2301      	movs	r3, #1
 8001fe8:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001fea:	4b3e      	ldr	r3, [pc, #248]	; (80020e4 <HAL_RCC_OscConfig+0x574>)
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ff2:	2b00      	cmp	r3, #0
 8001ff4:	d118      	bne.n	8002028 <HAL_RCC_OscConfig+0x4b8>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001ff6:	4b3b      	ldr	r3, [pc, #236]	; (80020e4 <HAL_RCC_OscConfig+0x574>)
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	4a3a      	ldr	r2, [pc, #232]	; (80020e4 <HAL_RCC_OscConfig+0x574>)
 8001ffc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002000:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002002:	f7ff f957 	bl	80012b4 <HAL_GetTick>
 8002006:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002008:	e008      	b.n	800201c <HAL_RCC_OscConfig+0x4ac>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800200a:	f7ff f953 	bl	80012b4 <HAL_GetTick>
 800200e:	4602      	mov	r2, r0
 8002010:	693b      	ldr	r3, [r7, #16]
 8002012:	1ad3      	subs	r3, r2, r3
 8002014:	2b02      	cmp	r3, #2
 8002016:	d901      	bls.n	800201c <HAL_RCC_OscConfig+0x4ac>
        {
          return HAL_TIMEOUT;
 8002018:	2303      	movs	r3, #3
 800201a:	e150      	b.n	80022be <HAL_RCC_OscConfig+0x74e>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800201c:	4b31      	ldr	r3, [pc, #196]	; (80020e4 <HAL_RCC_OscConfig+0x574>)
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002024:	2b00      	cmp	r3, #0
 8002026:	d0f0      	beq.n	800200a <HAL_RCC_OscConfig+0x49a>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	689b      	ldr	r3, [r3, #8]
 800202c:	2b01      	cmp	r3, #1
 800202e:	d108      	bne.n	8002042 <HAL_RCC_OscConfig+0x4d2>
 8002030:	4b2b      	ldr	r3, [pc, #172]	; (80020e0 <HAL_RCC_OscConfig+0x570>)
 8002032:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002036:	4a2a      	ldr	r2, [pc, #168]	; (80020e0 <HAL_RCC_OscConfig+0x570>)
 8002038:	f043 0301 	orr.w	r3, r3, #1
 800203c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002040:	e024      	b.n	800208c <HAL_RCC_OscConfig+0x51c>
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	689b      	ldr	r3, [r3, #8]
 8002046:	2b05      	cmp	r3, #5
 8002048:	d110      	bne.n	800206c <HAL_RCC_OscConfig+0x4fc>
 800204a:	4b25      	ldr	r3, [pc, #148]	; (80020e0 <HAL_RCC_OscConfig+0x570>)
 800204c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002050:	4a23      	ldr	r2, [pc, #140]	; (80020e0 <HAL_RCC_OscConfig+0x570>)
 8002052:	f043 0304 	orr.w	r3, r3, #4
 8002056:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800205a:	4b21      	ldr	r3, [pc, #132]	; (80020e0 <HAL_RCC_OscConfig+0x570>)
 800205c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002060:	4a1f      	ldr	r2, [pc, #124]	; (80020e0 <HAL_RCC_OscConfig+0x570>)
 8002062:	f043 0301 	orr.w	r3, r3, #1
 8002066:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800206a:	e00f      	b.n	800208c <HAL_RCC_OscConfig+0x51c>
 800206c:	4b1c      	ldr	r3, [pc, #112]	; (80020e0 <HAL_RCC_OscConfig+0x570>)
 800206e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002072:	4a1b      	ldr	r2, [pc, #108]	; (80020e0 <HAL_RCC_OscConfig+0x570>)
 8002074:	f023 0301 	bic.w	r3, r3, #1
 8002078:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800207c:	4b18      	ldr	r3, [pc, #96]	; (80020e0 <HAL_RCC_OscConfig+0x570>)
 800207e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002082:	4a17      	ldr	r2, [pc, #92]	; (80020e0 <HAL_RCC_OscConfig+0x570>)
 8002084:	f023 0304 	bic.w	r3, r3, #4
 8002088:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	689b      	ldr	r3, [r3, #8]
 8002090:	2b00      	cmp	r3, #0
 8002092:	d016      	beq.n	80020c2 <HAL_RCC_OscConfig+0x552>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002094:	f7ff f90e 	bl	80012b4 <HAL_GetTick>
 8002098:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800209a:	e00a      	b.n	80020b2 <HAL_RCC_OscConfig+0x542>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800209c:	f7ff f90a 	bl	80012b4 <HAL_GetTick>
 80020a0:	4602      	mov	r2, r0
 80020a2:	693b      	ldr	r3, [r7, #16]
 80020a4:	1ad3      	subs	r3, r2, r3
 80020a6:	f241 3288 	movw	r2, #5000	; 0x1388
 80020aa:	4293      	cmp	r3, r2
 80020ac:	d901      	bls.n	80020b2 <HAL_RCC_OscConfig+0x542>
        {
          return HAL_TIMEOUT;
 80020ae:	2303      	movs	r3, #3
 80020b0:	e105      	b.n	80022be <HAL_RCC_OscConfig+0x74e>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80020b2:	4b0b      	ldr	r3, [pc, #44]	; (80020e0 <HAL_RCC_OscConfig+0x570>)
 80020b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80020b8:	f003 0302 	and.w	r3, r3, #2
 80020bc:	2b00      	cmp	r3, #0
 80020be:	d0ed      	beq.n	800209c <HAL_RCC_OscConfig+0x52c>
 80020c0:	e019      	b.n	80020f6 <HAL_RCC_OscConfig+0x586>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80020c2:	f7ff f8f7 	bl	80012b4 <HAL_GetTick>
 80020c6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80020c8:	e00e      	b.n	80020e8 <HAL_RCC_OscConfig+0x578>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80020ca:	f7ff f8f3 	bl	80012b4 <HAL_GetTick>
 80020ce:	4602      	mov	r2, r0
 80020d0:	693b      	ldr	r3, [r7, #16]
 80020d2:	1ad3      	subs	r3, r2, r3
 80020d4:	f241 3288 	movw	r2, #5000	; 0x1388
 80020d8:	4293      	cmp	r3, r2
 80020da:	d905      	bls.n	80020e8 <HAL_RCC_OscConfig+0x578>
        {
          return HAL_TIMEOUT;
 80020dc:	2303      	movs	r3, #3
 80020de:	e0ee      	b.n	80022be <HAL_RCC_OscConfig+0x74e>
 80020e0:	40021000 	.word	0x40021000
 80020e4:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80020e8:	4b77      	ldr	r3, [pc, #476]	; (80022c8 <HAL_RCC_OscConfig+0x758>)
 80020ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80020ee:	f003 0302 	and.w	r3, r3, #2
 80020f2:	2b00      	cmp	r3, #0
 80020f4:	d1e9      	bne.n	80020ca <HAL_RCC_OscConfig+0x55a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80020f6:	7ffb      	ldrb	r3, [r7, #31]
 80020f8:	2b01      	cmp	r3, #1
 80020fa:	d105      	bne.n	8002108 <HAL_RCC_OscConfig+0x598>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80020fc:	4b72      	ldr	r3, [pc, #456]	; (80022c8 <HAL_RCC_OscConfig+0x758>)
 80020fe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002100:	4a71      	ldr	r2, [pc, #452]	; (80022c8 <HAL_RCC_OscConfig+0x758>)
 8002102:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002106:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800210c:	2b00      	cmp	r3, #0
 800210e:	f000 80d5 	beq.w	80022bc <HAL_RCC_OscConfig+0x74c>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002112:	69bb      	ldr	r3, [r7, #24]
 8002114:	2b0c      	cmp	r3, #12
 8002116:	f000 808e 	beq.w	8002236 <HAL_RCC_OscConfig+0x6c6>
    {
      if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800211e:	2b02      	cmp	r3, #2
 8002120:	d15b      	bne.n	80021da <HAL_RCC_OscConfig+0x66a>
#endif /* RCC_PLLP_SUPPORT */
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002122:	4b69      	ldr	r3, [pc, #420]	; (80022c8 <HAL_RCC_OscConfig+0x758>)
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	4a68      	ldr	r2, [pc, #416]	; (80022c8 <HAL_RCC_OscConfig+0x758>)
 8002128:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800212c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800212e:	f7ff f8c1 	bl	80012b4 <HAL_GetTick>
 8002132:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002134:	e008      	b.n	8002148 <HAL_RCC_OscConfig+0x5d8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002136:	f7ff f8bd 	bl	80012b4 <HAL_GetTick>
 800213a:	4602      	mov	r2, r0
 800213c:	693b      	ldr	r3, [r7, #16]
 800213e:	1ad3      	subs	r3, r2, r3
 8002140:	2b02      	cmp	r3, #2
 8002142:	d901      	bls.n	8002148 <HAL_RCC_OscConfig+0x5d8>
          {
            return HAL_TIMEOUT;
 8002144:	2303      	movs	r3, #3
 8002146:	e0ba      	b.n	80022be <HAL_RCC_OscConfig+0x74e>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002148:	4b5f      	ldr	r3, [pc, #380]	; (80022c8 <HAL_RCC_OscConfig+0x758>)
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002150:	2b00      	cmp	r3, #0
 8002152:	d1f0      	bne.n	8002136 <HAL_RCC_OscConfig+0x5c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002154:	4b5c      	ldr	r3, [pc, #368]	; (80022c8 <HAL_RCC_OscConfig+0x758>)
 8002156:	68da      	ldr	r2, [r3, #12]
 8002158:	4b5c      	ldr	r3, [pc, #368]	; (80022cc <HAL_RCC_OscConfig+0x75c>)
 800215a:	4013      	ands	r3, r2
 800215c:	687a      	ldr	r2, [r7, #4]
 800215e:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8002160:	687a      	ldr	r2, [r7, #4]
 8002162:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8002164:	3a01      	subs	r2, #1
 8002166:	0112      	lsls	r2, r2, #4
 8002168:	4311      	orrs	r1, r2
 800216a:	687a      	ldr	r2, [r7, #4]
 800216c:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800216e:	0212      	lsls	r2, r2, #8
 8002170:	4311      	orrs	r1, r2
 8002172:	687a      	ldr	r2, [r7, #4]
 8002174:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8002176:	0852      	lsrs	r2, r2, #1
 8002178:	3a01      	subs	r2, #1
 800217a:	0552      	lsls	r2, r2, #21
 800217c:	4311      	orrs	r1, r2
 800217e:	687a      	ldr	r2, [r7, #4]
 8002180:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8002182:	0852      	lsrs	r2, r2, #1
 8002184:	3a01      	subs	r2, #1
 8002186:	0652      	lsls	r2, r2, #25
 8002188:	4311      	orrs	r1, r2
 800218a:	687a      	ldr	r2, [r7, #4]
 800218c:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800218e:	0912      	lsrs	r2, r2, #4
 8002190:	0452      	lsls	r2, r2, #17
 8002192:	430a      	orrs	r2, r1
 8002194:	494c      	ldr	r1, [pc, #304]	; (80022c8 <HAL_RCC_OscConfig+0x758>)
 8002196:	4313      	orrs	r3, r2
 8002198:	60cb      	str	r3, [r1, #12]
#endif
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800219a:	4b4b      	ldr	r3, [pc, #300]	; (80022c8 <HAL_RCC_OscConfig+0x758>)
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	4a4a      	ldr	r2, [pc, #296]	; (80022c8 <HAL_RCC_OscConfig+0x758>)
 80021a0:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80021a4:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80021a6:	4b48      	ldr	r3, [pc, #288]	; (80022c8 <HAL_RCC_OscConfig+0x758>)
 80021a8:	68db      	ldr	r3, [r3, #12]
 80021aa:	4a47      	ldr	r2, [pc, #284]	; (80022c8 <HAL_RCC_OscConfig+0x758>)
 80021ac:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80021b0:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80021b2:	f7ff f87f 	bl	80012b4 <HAL_GetTick>
 80021b6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80021b8:	e008      	b.n	80021cc <HAL_RCC_OscConfig+0x65c>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80021ba:	f7ff f87b 	bl	80012b4 <HAL_GetTick>
 80021be:	4602      	mov	r2, r0
 80021c0:	693b      	ldr	r3, [r7, #16]
 80021c2:	1ad3      	subs	r3, r2, r3
 80021c4:	2b02      	cmp	r3, #2
 80021c6:	d901      	bls.n	80021cc <HAL_RCC_OscConfig+0x65c>
          {
            return HAL_TIMEOUT;
 80021c8:	2303      	movs	r3, #3
 80021ca:	e078      	b.n	80022be <HAL_RCC_OscConfig+0x74e>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80021cc:	4b3e      	ldr	r3, [pc, #248]	; (80022c8 <HAL_RCC_OscConfig+0x758>)
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80021d4:	2b00      	cmp	r3, #0
 80021d6:	d0f0      	beq.n	80021ba <HAL_RCC_OscConfig+0x64a>
 80021d8:	e070      	b.n	80022bc <HAL_RCC_OscConfig+0x74c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80021da:	4b3b      	ldr	r3, [pc, #236]	; (80022c8 <HAL_RCC_OscConfig+0x758>)
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	4a3a      	ldr	r2, [pc, #232]	; (80022c8 <HAL_RCC_OscConfig+0x758>)
 80021e0:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80021e4:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 80021e6:	4b38      	ldr	r3, [pc, #224]	; (80022c8 <HAL_RCC_OscConfig+0x758>)
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 80021ee:	2b00      	cmp	r3, #0
 80021f0:	d105      	bne.n	80021fe <HAL_RCC_OscConfig+0x68e>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 80021f2:	4b35      	ldr	r3, [pc, #212]	; (80022c8 <HAL_RCC_OscConfig+0x758>)
 80021f4:	68db      	ldr	r3, [r3, #12]
 80021f6:	4a34      	ldr	r2, [pc, #208]	; (80022c8 <HAL_RCC_OscConfig+0x758>)
 80021f8:	f023 0303 	bic.w	r3, r3, #3
 80021fc:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 80021fe:	4b32      	ldr	r3, [pc, #200]	; (80022c8 <HAL_RCC_OscConfig+0x758>)
 8002200:	68db      	ldr	r3, [r3, #12]
 8002202:	4a31      	ldr	r2, [pc, #196]	; (80022c8 <HAL_RCC_OscConfig+0x758>)
 8002204:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8002208:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800220c:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800220e:	f7ff f851 	bl	80012b4 <HAL_GetTick>
 8002212:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002214:	e008      	b.n	8002228 <HAL_RCC_OscConfig+0x6b8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002216:	f7ff f84d 	bl	80012b4 <HAL_GetTick>
 800221a:	4602      	mov	r2, r0
 800221c:	693b      	ldr	r3, [r7, #16]
 800221e:	1ad3      	subs	r3, r2, r3
 8002220:	2b02      	cmp	r3, #2
 8002222:	d901      	bls.n	8002228 <HAL_RCC_OscConfig+0x6b8>
          {
            return HAL_TIMEOUT;
 8002224:	2303      	movs	r3, #3
 8002226:	e04a      	b.n	80022be <HAL_RCC_OscConfig+0x74e>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002228:	4b27      	ldr	r3, [pc, #156]	; (80022c8 <HAL_RCC_OscConfig+0x758>)
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002230:	2b00      	cmp	r3, #0
 8002232:	d1f0      	bne.n	8002216 <HAL_RCC_OscConfig+0x6a6>
 8002234:	e042      	b.n	80022bc <HAL_RCC_OscConfig+0x74c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800223a:	2b01      	cmp	r3, #1
 800223c:	d101      	bne.n	8002242 <HAL_RCC_OscConfig+0x6d2>
      {
        return HAL_ERROR;
 800223e:	2301      	movs	r3, #1
 8002240:	e03d      	b.n	80022be <HAL_RCC_OscConfig+0x74e>
      }
      else
      {
        pll_config = RCC->PLLCFGR;
 8002242:	4b21      	ldr	r3, [pc, #132]	; (80022c8 <HAL_RCC_OscConfig+0x758>)
 8002244:	68db      	ldr	r3, [r3, #12]
 8002246:	617b      	str	r3, [r7, #20]
        /* Do not return HAL_ERROR if request repeats the current configuration */
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002248:	697b      	ldr	r3, [r7, #20]
 800224a:	f003 0203 	and.w	r2, r3, #3
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002252:	429a      	cmp	r2, r3
 8002254:	d130      	bne.n	80022b8 <HAL_RCC_OscConfig+0x748>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002256:	697b      	ldr	r3, [r7, #20]
 8002258:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002260:	3b01      	subs	r3, #1
 8002262:	011b      	lsls	r3, r3, #4
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002264:	429a      	cmp	r2, r3
 8002266:	d127      	bne.n	80022b8 <HAL_RCC_OscConfig+0x748>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002268:	697b      	ldr	r3, [r7, #20]
 800226a:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002272:	021b      	lsls	r3, r3, #8
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002274:	429a      	cmp	r2, r3
 8002276:	d11f      	bne.n	80022b8 <HAL_RCC_OscConfig+0x748>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8002278:	697b      	ldr	r3, [r7, #20]
 800227a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800227e:	687a      	ldr	r2, [r7, #4]
 8002280:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002282:	2a07      	cmp	r2, #7
 8002284:	bf14      	ite	ne
 8002286:	2201      	movne	r2, #1
 8002288:	2200      	moveq	r2, #0
 800228a:	b2d2      	uxtb	r2, r2
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800228c:	4293      	cmp	r3, r2
 800228e:	d113      	bne.n	80022b8 <HAL_RCC_OscConfig+0x748>
#endif
#endif
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002290:	697b      	ldr	r3, [r7, #20]
 8002292:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800229a:	085b      	lsrs	r3, r3, #1
 800229c:	3b01      	subs	r3, #1
 800229e:	055b      	lsls	r3, r3, #21
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80022a0:	429a      	cmp	r2, r3
 80022a2:	d109      	bne.n	80022b8 <HAL_RCC_OscConfig+0x748>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80022a4:	697b      	ldr	r3, [r7, #20]
 80022a6:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022ae:	085b      	lsrs	r3, r3, #1
 80022b0:	3b01      	subs	r3, #1
 80022b2:	065b      	lsls	r3, r3, #25
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80022b4:	429a      	cmp	r2, r3
 80022b6:	d001      	beq.n	80022bc <HAL_RCC_OscConfig+0x74c>
        {
          return HAL_ERROR;
 80022b8:	2301      	movs	r3, #1
 80022ba:	e000      	b.n	80022be <HAL_RCC_OscConfig+0x74e>
        }
      }
    }
  }
  return HAL_OK;
 80022bc:	2300      	movs	r3, #0
}
 80022be:	4618      	mov	r0, r3
 80022c0:	3720      	adds	r7, #32
 80022c2:	46bd      	mov	sp, r7
 80022c4:	bd80      	pop	{r7, pc}
 80022c6:	bf00      	nop
 80022c8:	40021000 	.word	0x40021000
 80022cc:	f99d808c 	.word	0xf99d808c

080022d0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80022d0:	b580      	push	{r7, lr}
 80022d2:	b084      	sub	sp, #16
 80022d4:	af00      	add	r7, sp, #0
 80022d6:	6078      	str	r0, [r7, #4]
 80022d8:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	2b00      	cmp	r3, #0
 80022de:	d101      	bne.n	80022e4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80022e0:	2301      	movs	r3, #1
 80022e2:	e0c8      	b.n	8002476 <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80022e4:	4b66      	ldr	r3, [pc, #408]	; (8002480 <HAL_RCC_ClockConfig+0x1b0>)
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	f003 0307 	and.w	r3, r3, #7
 80022ec:	683a      	ldr	r2, [r7, #0]
 80022ee:	429a      	cmp	r2, r3
 80022f0:	d910      	bls.n	8002314 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80022f2:	4b63      	ldr	r3, [pc, #396]	; (8002480 <HAL_RCC_ClockConfig+0x1b0>)
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	f023 0207 	bic.w	r2, r3, #7
 80022fa:	4961      	ldr	r1, [pc, #388]	; (8002480 <HAL_RCC_ClockConfig+0x1b0>)
 80022fc:	683b      	ldr	r3, [r7, #0]
 80022fe:	4313      	orrs	r3, r2
 8002300:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002302:	4b5f      	ldr	r3, [pc, #380]	; (8002480 <HAL_RCC_ClockConfig+0x1b0>)
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	f003 0307 	and.w	r3, r3, #7
 800230a:	683a      	ldr	r2, [r7, #0]
 800230c:	429a      	cmp	r2, r3
 800230e:	d001      	beq.n	8002314 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002310:	2301      	movs	r3, #1
 8002312:	e0b0      	b.n	8002476 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	f003 0301 	and.w	r3, r3, #1
 800231c:	2b00      	cmp	r3, #0
 800231e:	d04c      	beq.n	80023ba <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	685b      	ldr	r3, [r3, #4]
 8002324:	2b03      	cmp	r3, #3
 8002326:	d107      	bne.n	8002338 <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002328:	4b56      	ldr	r3, [pc, #344]	; (8002484 <HAL_RCC_ClockConfig+0x1b4>)
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002330:	2b00      	cmp	r3, #0
 8002332:	d121      	bne.n	8002378 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 8002334:	2301      	movs	r3, #1
 8002336:	e09e      	b.n	8002476 <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	685b      	ldr	r3, [r3, #4]
 800233c:	2b02      	cmp	r3, #2
 800233e:	d107      	bne.n	8002350 <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002340:	4b50      	ldr	r3, [pc, #320]	; (8002484 <HAL_RCC_ClockConfig+0x1b4>)
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002348:	2b00      	cmp	r3, #0
 800234a:	d115      	bne.n	8002378 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 800234c:	2301      	movs	r3, #1
 800234e:	e092      	b.n	8002476 <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	685b      	ldr	r3, [r3, #4]
 8002354:	2b00      	cmp	r3, #0
 8002356:	d107      	bne.n	8002368 <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002358:	4b4a      	ldr	r3, [pc, #296]	; (8002484 <HAL_RCC_ClockConfig+0x1b4>)
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	f003 0302 	and.w	r3, r3, #2
 8002360:	2b00      	cmp	r3, #0
 8002362:	d109      	bne.n	8002378 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8002364:	2301      	movs	r3, #1
 8002366:	e086      	b.n	8002476 <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002368:	4b46      	ldr	r3, [pc, #280]	; (8002484 <HAL_RCC_ClockConfig+0x1b4>)
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002370:	2b00      	cmp	r3, #0
 8002372:	d101      	bne.n	8002378 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8002374:	2301      	movs	r3, #1
 8002376:	e07e      	b.n	8002476 <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002378:	4b42      	ldr	r3, [pc, #264]	; (8002484 <HAL_RCC_ClockConfig+0x1b4>)
 800237a:	689b      	ldr	r3, [r3, #8]
 800237c:	f023 0203 	bic.w	r2, r3, #3
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	685b      	ldr	r3, [r3, #4]
 8002384:	493f      	ldr	r1, [pc, #252]	; (8002484 <HAL_RCC_ClockConfig+0x1b4>)
 8002386:	4313      	orrs	r3, r2
 8002388:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800238a:	f7fe ff93 	bl	80012b4 <HAL_GetTick>
 800238e:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002390:	e00a      	b.n	80023a8 <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002392:	f7fe ff8f 	bl	80012b4 <HAL_GetTick>
 8002396:	4602      	mov	r2, r0
 8002398:	68fb      	ldr	r3, [r7, #12]
 800239a:	1ad3      	subs	r3, r2, r3
 800239c:	f241 3288 	movw	r2, #5000	; 0x1388
 80023a0:	4293      	cmp	r3, r2
 80023a2:	d901      	bls.n	80023a8 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 80023a4:	2303      	movs	r3, #3
 80023a6:	e066      	b.n	8002476 <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80023a8:	4b36      	ldr	r3, [pc, #216]	; (8002484 <HAL_RCC_ClockConfig+0x1b4>)
 80023aa:	689b      	ldr	r3, [r3, #8]
 80023ac:	f003 020c 	and.w	r2, r3, #12
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	685b      	ldr	r3, [r3, #4]
 80023b4:	009b      	lsls	r3, r3, #2
 80023b6:	429a      	cmp	r2, r3
 80023b8:	d1eb      	bne.n	8002392 <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	f003 0302 	and.w	r3, r3, #2
 80023c2:	2b00      	cmp	r3, #0
 80023c4:	d008      	beq.n	80023d8 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80023c6:	4b2f      	ldr	r3, [pc, #188]	; (8002484 <HAL_RCC_ClockConfig+0x1b4>)
 80023c8:	689b      	ldr	r3, [r3, #8]
 80023ca:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	689b      	ldr	r3, [r3, #8]
 80023d2:	492c      	ldr	r1, [pc, #176]	; (8002484 <HAL_RCC_ClockConfig+0x1b4>)
 80023d4:	4313      	orrs	r3, r2
 80023d6:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80023d8:	4b29      	ldr	r3, [pc, #164]	; (8002480 <HAL_RCC_ClockConfig+0x1b0>)
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	f003 0307 	and.w	r3, r3, #7
 80023e0:	683a      	ldr	r2, [r7, #0]
 80023e2:	429a      	cmp	r2, r3
 80023e4:	d210      	bcs.n	8002408 <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80023e6:	4b26      	ldr	r3, [pc, #152]	; (8002480 <HAL_RCC_ClockConfig+0x1b0>)
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	f023 0207 	bic.w	r2, r3, #7
 80023ee:	4924      	ldr	r1, [pc, #144]	; (8002480 <HAL_RCC_ClockConfig+0x1b0>)
 80023f0:	683b      	ldr	r3, [r7, #0]
 80023f2:	4313      	orrs	r3, r2
 80023f4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80023f6:	4b22      	ldr	r3, [pc, #136]	; (8002480 <HAL_RCC_ClockConfig+0x1b0>)
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	f003 0307 	and.w	r3, r3, #7
 80023fe:	683a      	ldr	r2, [r7, #0]
 8002400:	429a      	cmp	r2, r3
 8002402:	d001      	beq.n	8002408 <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 8002404:	2301      	movs	r3, #1
 8002406:	e036      	b.n	8002476 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	f003 0304 	and.w	r3, r3, #4
 8002410:	2b00      	cmp	r3, #0
 8002412:	d008      	beq.n	8002426 <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002414:	4b1b      	ldr	r3, [pc, #108]	; (8002484 <HAL_RCC_ClockConfig+0x1b4>)
 8002416:	689b      	ldr	r3, [r3, #8]
 8002418:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	68db      	ldr	r3, [r3, #12]
 8002420:	4918      	ldr	r1, [pc, #96]	; (8002484 <HAL_RCC_ClockConfig+0x1b4>)
 8002422:	4313      	orrs	r3, r2
 8002424:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	f003 0308 	and.w	r3, r3, #8
 800242e:	2b00      	cmp	r3, #0
 8002430:	d009      	beq.n	8002446 <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002432:	4b14      	ldr	r3, [pc, #80]	; (8002484 <HAL_RCC_ClockConfig+0x1b4>)
 8002434:	689b      	ldr	r3, [r3, #8]
 8002436:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	691b      	ldr	r3, [r3, #16]
 800243e:	00db      	lsls	r3, r3, #3
 8002440:	4910      	ldr	r1, [pc, #64]	; (8002484 <HAL_RCC_ClockConfig+0x1b4>)
 8002442:	4313      	orrs	r3, r2
 8002444:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002446:	f000 f825 	bl	8002494 <HAL_RCC_GetSysClockFreq>
 800244a:	4601      	mov	r1, r0
 800244c:	4b0d      	ldr	r3, [pc, #52]	; (8002484 <HAL_RCC_ClockConfig+0x1b4>)
 800244e:	689b      	ldr	r3, [r3, #8]
 8002450:	091b      	lsrs	r3, r3, #4
 8002452:	f003 030f 	and.w	r3, r3, #15
 8002456:	4a0c      	ldr	r2, [pc, #48]	; (8002488 <HAL_RCC_ClockConfig+0x1b8>)
 8002458:	5cd3      	ldrb	r3, [r2, r3]
 800245a:	f003 031f 	and.w	r3, r3, #31
 800245e:	fa21 f303 	lsr.w	r3, r1, r3
 8002462:	4a0a      	ldr	r2, [pc, #40]	; (800248c <HAL_RCC_ClockConfig+0x1bc>)
 8002464:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8002466:	4b0a      	ldr	r3, [pc, #40]	; (8002490 <HAL_RCC_ClockConfig+0x1c0>)
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	4618      	mov	r0, r3
 800246c:	f7fe fed6 	bl	800121c <HAL_InitTick>
 8002470:	4603      	mov	r3, r0
 8002472:	72fb      	strb	r3, [r7, #11]

  return status;
 8002474:	7afb      	ldrb	r3, [r7, #11]
}
 8002476:	4618      	mov	r0, r3
 8002478:	3710      	adds	r7, #16
 800247a:	46bd      	mov	sp, r7
 800247c:	bd80      	pop	{r7, pc}
 800247e:	bf00      	nop
 8002480:	40022000 	.word	0x40022000
 8002484:	40021000 	.word	0x40021000
 8002488:	08004068 	.word	0x08004068
 800248c:	20000000 	.word	0x20000000
 8002490:	20000004 	.word	0x20000004

08002494 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002494:	b480      	push	{r7}
 8002496:	b089      	sub	sp, #36	; 0x24
 8002498:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800249a:	2300      	movs	r3, #0
 800249c:	61fb      	str	r3, [r7, #28]
 800249e:	2300      	movs	r3, #0
 80024a0:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80024a2:	4b3d      	ldr	r3, [pc, #244]	; (8002598 <HAL_RCC_GetSysClockFreq+0x104>)
 80024a4:	689b      	ldr	r3, [r3, #8]
 80024a6:	f003 030c 	and.w	r3, r3, #12
 80024aa:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80024ac:	4b3a      	ldr	r3, [pc, #232]	; (8002598 <HAL_RCC_GetSysClockFreq+0x104>)
 80024ae:	68db      	ldr	r3, [r3, #12]
 80024b0:	f003 0303 	and.w	r3, r3, #3
 80024b4:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80024b6:	693b      	ldr	r3, [r7, #16]
 80024b8:	2b00      	cmp	r3, #0
 80024ba:	d005      	beq.n	80024c8 <HAL_RCC_GetSysClockFreq+0x34>
 80024bc:	693b      	ldr	r3, [r7, #16]
 80024be:	2b0c      	cmp	r3, #12
 80024c0:	d121      	bne.n	8002506 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80024c2:	68fb      	ldr	r3, [r7, #12]
 80024c4:	2b01      	cmp	r3, #1
 80024c6:	d11e      	bne.n	8002506 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80024c8:	4b33      	ldr	r3, [pc, #204]	; (8002598 <HAL_RCC_GetSysClockFreq+0x104>)
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	f003 0308 	and.w	r3, r3, #8
 80024d0:	2b00      	cmp	r3, #0
 80024d2:	d107      	bne.n	80024e4 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80024d4:	4b30      	ldr	r3, [pc, #192]	; (8002598 <HAL_RCC_GetSysClockFreq+0x104>)
 80024d6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80024da:	0a1b      	lsrs	r3, r3, #8
 80024dc:	f003 030f 	and.w	r3, r3, #15
 80024e0:	61fb      	str	r3, [r7, #28]
 80024e2:	e005      	b.n	80024f0 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80024e4:	4b2c      	ldr	r3, [pc, #176]	; (8002598 <HAL_RCC_GetSysClockFreq+0x104>)
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	091b      	lsrs	r3, r3, #4
 80024ea:	f003 030f 	and.w	r3, r3, #15
 80024ee:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80024f0:	4a2a      	ldr	r2, [pc, #168]	; (800259c <HAL_RCC_GetSysClockFreq+0x108>)
 80024f2:	69fb      	ldr	r3, [r7, #28]
 80024f4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80024f8:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80024fa:	693b      	ldr	r3, [r7, #16]
 80024fc:	2b00      	cmp	r3, #0
 80024fe:	d10d      	bne.n	800251c <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8002500:	69fb      	ldr	r3, [r7, #28]
 8002502:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002504:	e00a      	b.n	800251c <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8002506:	693b      	ldr	r3, [r7, #16]
 8002508:	2b04      	cmp	r3, #4
 800250a:	d102      	bne.n	8002512 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800250c:	4b24      	ldr	r3, [pc, #144]	; (80025a0 <HAL_RCC_GetSysClockFreq+0x10c>)
 800250e:	61bb      	str	r3, [r7, #24]
 8002510:	e004      	b.n	800251c <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8002512:	693b      	ldr	r3, [r7, #16]
 8002514:	2b08      	cmp	r3, #8
 8002516:	d101      	bne.n	800251c <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002518:	4b22      	ldr	r3, [pc, #136]	; (80025a4 <HAL_RCC_GetSysClockFreq+0x110>)
 800251a:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 800251c:	693b      	ldr	r3, [r7, #16]
 800251e:	2b0c      	cmp	r3, #12
 8002520:	d133      	bne.n	800258a <HAL_RCC_GetSysClockFreq+0xf6>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002522:	4b1d      	ldr	r3, [pc, #116]	; (8002598 <HAL_RCC_GetSysClockFreq+0x104>)
 8002524:	68db      	ldr	r3, [r3, #12]
 8002526:	f003 0303 	and.w	r3, r3, #3
 800252a:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800252c:	68bb      	ldr	r3, [r7, #8]
 800252e:	2b02      	cmp	r3, #2
 8002530:	d002      	beq.n	8002538 <HAL_RCC_GetSysClockFreq+0xa4>
 8002532:	2b03      	cmp	r3, #3
 8002534:	d003      	beq.n	800253e <HAL_RCC_GetSysClockFreq+0xaa>
 8002536:	e005      	b.n	8002544 <HAL_RCC_GetSysClockFreq+0xb0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8002538:	4b19      	ldr	r3, [pc, #100]	; (80025a0 <HAL_RCC_GetSysClockFreq+0x10c>)
 800253a:	617b      	str	r3, [r7, #20]
      break;
 800253c:	e005      	b.n	800254a <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 800253e:	4b19      	ldr	r3, [pc, #100]	; (80025a4 <HAL_RCC_GetSysClockFreq+0x110>)
 8002540:	617b      	str	r3, [r7, #20]
      break;
 8002542:	e002      	b.n	800254a <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8002544:	69fb      	ldr	r3, [r7, #28]
 8002546:	617b      	str	r3, [r7, #20]
      break;
 8002548:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800254a:	4b13      	ldr	r3, [pc, #76]	; (8002598 <HAL_RCC_GetSysClockFreq+0x104>)
 800254c:	68db      	ldr	r3, [r3, #12]
 800254e:	091b      	lsrs	r3, r3, #4
 8002550:	f003 0307 	and.w	r3, r3, #7
 8002554:	3301      	adds	r3, #1
 8002556:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8002558:	4b0f      	ldr	r3, [pc, #60]	; (8002598 <HAL_RCC_GetSysClockFreq+0x104>)
 800255a:	68db      	ldr	r3, [r3, #12]
 800255c:	0a1b      	lsrs	r3, r3, #8
 800255e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002562:	697a      	ldr	r2, [r7, #20]
 8002564:	fb02 f203 	mul.w	r2, r2, r3
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	fbb2 f3f3 	udiv	r3, r2, r3
 800256e:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002570:	4b09      	ldr	r3, [pc, #36]	; (8002598 <HAL_RCC_GetSysClockFreq+0x104>)
 8002572:	68db      	ldr	r3, [r3, #12]
 8002574:	0e5b      	lsrs	r3, r3, #25
 8002576:	f003 0303 	and.w	r3, r3, #3
 800257a:	3301      	adds	r3, #1
 800257c:	005b      	lsls	r3, r3, #1
 800257e:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8002580:	697a      	ldr	r2, [r7, #20]
 8002582:	683b      	ldr	r3, [r7, #0]
 8002584:	fbb2 f3f3 	udiv	r3, r2, r3
 8002588:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 800258a:	69bb      	ldr	r3, [r7, #24]
}
 800258c:	4618      	mov	r0, r3
 800258e:	3724      	adds	r7, #36	; 0x24
 8002590:	46bd      	mov	sp, r7
 8002592:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002596:	4770      	bx	lr
 8002598:	40021000 	.word	0x40021000
 800259c:	08004080 	.word	0x08004080
 80025a0:	00f42400 	.word	0x00f42400
 80025a4:	007a1200 	.word	0x007a1200

080025a8 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80025a8:	b480      	push	{r7}
 80025aa:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80025ac:	4b03      	ldr	r3, [pc, #12]	; (80025bc <HAL_RCC_GetHCLKFreq+0x14>)
 80025ae:	681b      	ldr	r3, [r3, #0]
}
 80025b0:	4618      	mov	r0, r3
 80025b2:	46bd      	mov	sp, r7
 80025b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025b8:	4770      	bx	lr
 80025ba:	bf00      	nop
 80025bc:	20000000 	.word	0x20000000

080025c0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80025c0:	b580      	push	{r7, lr}
 80025c2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80025c4:	f7ff fff0 	bl	80025a8 <HAL_RCC_GetHCLKFreq>
 80025c8:	4601      	mov	r1, r0
 80025ca:	4b06      	ldr	r3, [pc, #24]	; (80025e4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80025cc:	689b      	ldr	r3, [r3, #8]
 80025ce:	0a1b      	lsrs	r3, r3, #8
 80025d0:	f003 0307 	and.w	r3, r3, #7
 80025d4:	4a04      	ldr	r2, [pc, #16]	; (80025e8 <HAL_RCC_GetPCLK1Freq+0x28>)
 80025d6:	5cd3      	ldrb	r3, [r2, r3]
 80025d8:	f003 031f 	and.w	r3, r3, #31
 80025dc:	fa21 f303 	lsr.w	r3, r1, r3
}
 80025e0:	4618      	mov	r0, r3
 80025e2:	bd80      	pop	{r7, pc}
 80025e4:	40021000 	.word	0x40021000
 80025e8:	08004078 	.word	0x08004078

080025ec <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80025ec:	b580      	push	{r7, lr}
 80025ee:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80025f0:	f7ff ffda 	bl	80025a8 <HAL_RCC_GetHCLKFreq>
 80025f4:	4601      	mov	r1, r0
 80025f6:	4b06      	ldr	r3, [pc, #24]	; (8002610 <HAL_RCC_GetPCLK2Freq+0x24>)
 80025f8:	689b      	ldr	r3, [r3, #8]
 80025fa:	0adb      	lsrs	r3, r3, #11
 80025fc:	f003 0307 	and.w	r3, r3, #7
 8002600:	4a04      	ldr	r2, [pc, #16]	; (8002614 <HAL_RCC_GetPCLK2Freq+0x28>)
 8002602:	5cd3      	ldrb	r3, [r2, r3]
 8002604:	f003 031f 	and.w	r3, r3, #31
 8002608:	fa21 f303 	lsr.w	r3, r1, r3
}
 800260c:	4618      	mov	r0, r3
 800260e:	bd80      	pop	{r7, pc}
 8002610:	40021000 	.word	0x40021000
 8002614:	08004078 	.word	0x08004078

08002618 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8002618:	b580      	push	{r7, lr}
 800261a:	b086      	sub	sp, #24
 800261c:	af00      	add	r7, sp, #0
 800261e:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8002620:	2300      	movs	r3, #0
 8002622:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8002624:	4b2a      	ldr	r3, [pc, #168]	; (80026d0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002626:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002628:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800262c:	2b00      	cmp	r3, #0
 800262e:	d003      	beq.n	8002638 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8002630:	f7ff fa3a 	bl	8001aa8 <HAL_PWREx_GetVoltageRange>
 8002634:	6178      	str	r0, [r7, #20]
 8002636:	e014      	b.n	8002662 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8002638:	4b25      	ldr	r3, [pc, #148]	; (80026d0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800263a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800263c:	4a24      	ldr	r2, [pc, #144]	; (80026d0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800263e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002642:	6593      	str	r3, [r2, #88]	; 0x58
 8002644:	4b22      	ldr	r3, [pc, #136]	; (80026d0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002646:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002648:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800264c:	60fb      	str	r3, [r7, #12]
 800264e:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8002650:	f7ff fa2a 	bl	8001aa8 <HAL_PWREx_GetVoltageRange>
 8002654:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8002656:	4b1e      	ldr	r3, [pc, #120]	; (80026d0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002658:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800265a:	4a1d      	ldr	r2, [pc, #116]	; (80026d0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800265c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002660:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002662:	697b      	ldr	r3, [r7, #20]
 8002664:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002668:	d10b      	bne.n	8002682 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	2b80      	cmp	r3, #128	; 0x80
 800266e:	d919      	bls.n	80026a4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	2ba0      	cmp	r3, #160	; 0xa0
 8002674:	d902      	bls.n	800267c <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002676:	2302      	movs	r3, #2
 8002678:	613b      	str	r3, [r7, #16]
 800267a:	e013      	b.n	80026a4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800267c:	2301      	movs	r3, #1
 800267e:	613b      	str	r3, [r7, #16]
 8002680:	e010      	b.n	80026a4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	2b80      	cmp	r3, #128	; 0x80
 8002686:	d902      	bls.n	800268e <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8002688:	2303      	movs	r3, #3
 800268a:	613b      	str	r3, [r7, #16]
 800268c:	e00a      	b.n	80026a4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	2b80      	cmp	r3, #128	; 0x80
 8002692:	d102      	bne.n	800269a <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002694:	2302      	movs	r3, #2
 8002696:	613b      	str	r3, [r7, #16]
 8002698:	e004      	b.n	80026a4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	2b70      	cmp	r3, #112	; 0x70
 800269e:	d101      	bne.n	80026a4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80026a0:	2301      	movs	r3, #1
 80026a2:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80026a4:	4b0b      	ldr	r3, [pc, #44]	; (80026d4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	f023 0207 	bic.w	r2, r3, #7
 80026ac:	4909      	ldr	r1, [pc, #36]	; (80026d4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80026ae:	693b      	ldr	r3, [r7, #16]
 80026b0:	4313      	orrs	r3, r2
 80026b2:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80026b4:	4b07      	ldr	r3, [pc, #28]	; (80026d4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	f003 0307 	and.w	r3, r3, #7
 80026bc:	693a      	ldr	r2, [r7, #16]
 80026be:	429a      	cmp	r2, r3
 80026c0:	d001      	beq.n	80026c6 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 80026c2:	2301      	movs	r3, #1
 80026c4:	e000      	b.n	80026c8 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 80026c6:	2300      	movs	r3, #0
}
 80026c8:	4618      	mov	r0, r3
 80026ca:	3718      	adds	r7, #24
 80026cc:	46bd      	mov	sp, r7
 80026ce:	bd80      	pop	{r7, pc}
 80026d0:	40021000 	.word	0x40021000
 80026d4:	40022000 	.word	0x40022000

080026d8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80026d8:	b580      	push	{r7, lr}
 80026da:	b086      	sub	sp, #24
 80026dc:	af00      	add	r7, sp, #0
 80026de:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80026e0:	2300      	movs	r3, #0
 80026e2:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80026e4:	2300      	movs	r3, #0
 80026e6:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80026f0:	2b00      	cmp	r3, #0
 80026f2:	d03f      	beq.n	8002774 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80026f8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80026fc:	d01c      	beq.n	8002738 <HAL_RCCEx_PeriphCLKConfig+0x60>
 80026fe:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002702:	d802      	bhi.n	800270a <HAL_RCCEx_PeriphCLKConfig+0x32>
 8002704:	2b00      	cmp	r3, #0
 8002706:	d00e      	beq.n	8002726 <HAL_RCCEx_PeriphCLKConfig+0x4e>
 8002708:	e01f      	b.n	800274a <HAL_RCCEx_PeriphCLKConfig+0x72>
 800270a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800270e:	d003      	beq.n	8002718 <HAL_RCCEx_PeriphCLKConfig+0x40>
 8002710:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8002714:	d01c      	beq.n	8002750 <HAL_RCCEx_PeriphCLKConfig+0x78>
 8002716:	e018      	b.n	800274a <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002718:	4b85      	ldr	r3, [pc, #532]	; (8002930 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800271a:	68db      	ldr	r3, [r3, #12]
 800271c:	4a84      	ldr	r2, [pc, #528]	; (8002930 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800271e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002722:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002724:	e015      	b.n	8002752 <HAL_RCCEx_PeriphCLKConfig+0x7a>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	3304      	adds	r3, #4
 800272a:	2100      	movs	r1, #0
 800272c:	4618      	mov	r0, r3
 800272e:	f000 fab9 	bl	8002ca4 <RCCEx_PLLSAI1_Config>
 8002732:	4603      	mov	r3, r0
 8002734:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002736:	e00c      	b.n	8002752 <HAL_RCCEx_PeriphCLKConfig+0x7a>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	3320      	adds	r3, #32
 800273c:	2100      	movs	r1, #0
 800273e:	4618      	mov	r0, r3
 8002740:	f000 fba0 	bl	8002e84 <RCCEx_PLLSAI2_Config>
 8002744:	4603      	mov	r3, r0
 8002746:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002748:	e003      	b.n	8002752 <HAL_RCCEx_PeriphCLKConfig+0x7a>
#endif /* STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800274a:	2301      	movs	r3, #1
 800274c:	74fb      	strb	r3, [r7, #19]
      break;
 800274e:	e000      	b.n	8002752 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      break;
 8002750:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002752:	7cfb      	ldrb	r3, [r7, #19]
 8002754:	2b00      	cmp	r3, #0
 8002756:	d10b      	bne.n	8002770 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002758:	4b75      	ldr	r3, [pc, #468]	; (8002930 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800275a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800275e:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002766:	4972      	ldr	r1, [pc, #456]	; (8002930 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002768:	4313      	orrs	r3, r2
 800276a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800276e:	e001      	b.n	8002774 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002770:	7cfb      	ldrb	r3, [r7, #19]
 8002772:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800277c:	2b00      	cmp	r3, #0
 800277e:	d03f      	beq.n	8002800 <HAL_RCCEx_PeriphCLKConfig+0x128>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002784:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002788:	d01c      	beq.n	80027c4 <HAL_RCCEx_PeriphCLKConfig+0xec>
 800278a:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800278e:	d802      	bhi.n	8002796 <HAL_RCCEx_PeriphCLKConfig+0xbe>
 8002790:	2b00      	cmp	r3, #0
 8002792:	d00e      	beq.n	80027b2 <HAL_RCCEx_PeriphCLKConfig+0xda>
 8002794:	e01f      	b.n	80027d6 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8002796:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800279a:	d003      	beq.n	80027a4 <HAL_RCCEx_PeriphCLKConfig+0xcc>
 800279c:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80027a0:	d01c      	beq.n	80027dc <HAL_RCCEx_PeriphCLKConfig+0x104>
 80027a2:	e018      	b.n	80027d6 <HAL_RCCEx_PeriphCLKConfig+0xfe>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80027a4:	4b62      	ldr	r3, [pc, #392]	; (8002930 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80027a6:	68db      	ldr	r3, [r3, #12]
 80027a8:	4a61      	ldr	r2, [pc, #388]	; (8002930 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80027aa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80027ae:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80027b0:	e015      	b.n	80027de <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	3304      	adds	r3, #4
 80027b6:	2100      	movs	r1, #0
 80027b8:	4618      	mov	r0, r3
 80027ba:	f000 fa73 	bl	8002ca4 <RCCEx_PLLSAI1_Config>
 80027be:	4603      	mov	r3, r0
 80027c0:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80027c2:	e00c      	b.n	80027de <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	3320      	adds	r3, #32
 80027c8:	2100      	movs	r1, #0
 80027ca:	4618      	mov	r0, r3
 80027cc:	f000 fb5a 	bl	8002e84 <RCCEx_PLLSAI2_Config>
 80027d0:	4603      	mov	r3, r0
 80027d2:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80027d4:	e003      	b.n	80027de <HAL_RCCEx_PeriphCLKConfig+0x106>
#endif /* STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80027d6:	2301      	movs	r3, #1
 80027d8:	74fb      	strb	r3, [r7, #19]
      break;
 80027da:	e000      	b.n	80027de <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 80027dc:	bf00      	nop
    }

    if(ret == HAL_OK)
 80027de:	7cfb      	ldrb	r3, [r7, #19]
 80027e0:	2b00      	cmp	r3, #0
 80027e2:	d10b      	bne.n	80027fc <HAL_RCCEx_PeriphCLKConfig+0x124>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80027e4:	4b52      	ldr	r3, [pc, #328]	; (8002930 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80027e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80027ea:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80027f2:	494f      	ldr	r1, [pc, #316]	; (8002930 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80027f4:	4313      	orrs	r3, r2
 80027f6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80027fa:	e001      	b.n	8002800 <HAL_RCCEx_PeriphCLKConfig+0x128>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80027fc:	7cfb      	ldrb	r3, [r7, #19]
 80027fe:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002808:	2b00      	cmp	r3, #0
 800280a:	f000 80a0 	beq.w	800294e <HAL_RCCEx_PeriphCLKConfig+0x276>
  {
    FlagStatus       pwrclkchanged = RESET;
 800280e:	2300      	movs	r3, #0
 8002810:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002812:	4b47      	ldr	r3, [pc, #284]	; (8002930 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002814:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002816:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800281a:	2b00      	cmp	r3, #0
 800281c:	d101      	bne.n	8002822 <HAL_RCCEx_PeriphCLKConfig+0x14a>
 800281e:	2301      	movs	r3, #1
 8002820:	e000      	b.n	8002824 <HAL_RCCEx_PeriphCLKConfig+0x14c>
 8002822:	2300      	movs	r3, #0
 8002824:	2b00      	cmp	r3, #0
 8002826:	d00d      	beq.n	8002844 <HAL_RCCEx_PeriphCLKConfig+0x16c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002828:	4b41      	ldr	r3, [pc, #260]	; (8002930 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800282a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800282c:	4a40      	ldr	r2, [pc, #256]	; (8002930 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800282e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002832:	6593      	str	r3, [r2, #88]	; 0x58
 8002834:	4b3e      	ldr	r3, [pc, #248]	; (8002930 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002836:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002838:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800283c:	60bb      	str	r3, [r7, #8]
 800283e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002840:	2301      	movs	r3, #1
 8002842:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002844:	4b3b      	ldr	r3, [pc, #236]	; (8002934 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	4a3a      	ldr	r2, [pc, #232]	; (8002934 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 800284a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800284e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002850:	f7fe fd30 	bl	80012b4 <HAL_GetTick>
 8002854:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002856:	e009      	b.n	800286c <HAL_RCCEx_PeriphCLKConfig+0x194>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002858:	f7fe fd2c 	bl	80012b4 <HAL_GetTick>
 800285c:	4602      	mov	r2, r0
 800285e:	68fb      	ldr	r3, [r7, #12]
 8002860:	1ad3      	subs	r3, r2, r3
 8002862:	2b02      	cmp	r3, #2
 8002864:	d902      	bls.n	800286c <HAL_RCCEx_PeriphCLKConfig+0x194>
      {
        ret = HAL_TIMEOUT;
 8002866:	2303      	movs	r3, #3
 8002868:	74fb      	strb	r3, [r7, #19]
        break;
 800286a:	e005      	b.n	8002878 <HAL_RCCEx_PeriphCLKConfig+0x1a0>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800286c:	4b31      	ldr	r3, [pc, #196]	; (8002934 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002874:	2b00      	cmp	r3, #0
 8002876:	d0ef      	beq.n	8002858 <HAL_RCCEx_PeriphCLKConfig+0x180>
      }
    }

    if(ret == HAL_OK)
 8002878:	7cfb      	ldrb	r3, [r7, #19]
 800287a:	2b00      	cmp	r3, #0
 800287c:	d15c      	bne.n	8002938 <HAL_RCCEx_PeriphCLKConfig+0x260>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800287e:	4b2c      	ldr	r3, [pc, #176]	; (8002930 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002880:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002884:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002888:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800288a:	697b      	ldr	r3, [r7, #20]
 800288c:	2b00      	cmp	r3, #0
 800288e:	d01f      	beq.n	80028d0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002896:	697a      	ldr	r2, [r7, #20]
 8002898:	429a      	cmp	r2, r3
 800289a:	d019      	beq.n	80028d0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800289c:	4b24      	ldr	r3, [pc, #144]	; (8002930 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800289e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80028a2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80028a6:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80028a8:	4b21      	ldr	r3, [pc, #132]	; (8002930 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80028aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80028ae:	4a20      	ldr	r2, [pc, #128]	; (8002930 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80028b0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80028b4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80028b8:	4b1d      	ldr	r3, [pc, #116]	; (8002930 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80028ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80028be:	4a1c      	ldr	r2, [pc, #112]	; (8002930 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80028c0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80028c4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80028c8:	4a19      	ldr	r2, [pc, #100]	; (8002930 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80028ca:	697b      	ldr	r3, [r7, #20]
 80028cc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80028d0:	697b      	ldr	r3, [r7, #20]
 80028d2:	f003 0301 	and.w	r3, r3, #1
 80028d6:	2b00      	cmp	r3, #0
 80028d8:	d016      	beq.n	8002908 <HAL_RCCEx_PeriphCLKConfig+0x230>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80028da:	f7fe fceb 	bl	80012b4 <HAL_GetTick>
 80028de:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80028e0:	e00b      	b.n	80028fa <HAL_RCCEx_PeriphCLKConfig+0x222>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80028e2:	f7fe fce7 	bl	80012b4 <HAL_GetTick>
 80028e6:	4602      	mov	r2, r0
 80028e8:	68fb      	ldr	r3, [r7, #12]
 80028ea:	1ad3      	subs	r3, r2, r3
 80028ec:	f241 3288 	movw	r2, #5000	; 0x1388
 80028f0:	4293      	cmp	r3, r2
 80028f2:	d902      	bls.n	80028fa <HAL_RCCEx_PeriphCLKConfig+0x222>
          {
            ret = HAL_TIMEOUT;
 80028f4:	2303      	movs	r3, #3
 80028f6:	74fb      	strb	r3, [r7, #19]
            break;
 80028f8:	e006      	b.n	8002908 <HAL_RCCEx_PeriphCLKConfig+0x230>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80028fa:	4b0d      	ldr	r3, [pc, #52]	; (8002930 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80028fc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002900:	f003 0302 	and.w	r3, r3, #2
 8002904:	2b00      	cmp	r3, #0
 8002906:	d0ec      	beq.n	80028e2 <HAL_RCCEx_PeriphCLKConfig+0x20a>
          }
        }
      }

      if(ret == HAL_OK)
 8002908:	7cfb      	ldrb	r3, [r7, #19]
 800290a:	2b00      	cmp	r3, #0
 800290c:	d10c      	bne.n	8002928 <HAL_RCCEx_PeriphCLKConfig+0x250>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800290e:	4b08      	ldr	r3, [pc, #32]	; (8002930 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002910:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002914:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800291e:	4904      	ldr	r1, [pc, #16]	; (8002930 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002920:	4313      	orrs	r3, r2
 8002922:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8002926:	e009      	b.n	800293c <HAL_RCCEx_PeriphCLKConfig+0x264>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002928:	7cfb      	ldrb	r3, [r7, #19]
 800292a:	74bb      	strb	r3, [r7, #18]
 800292c:	e006      	b.n	800293c <HAL_RCCEx_PeriphCLKConfig+0x264>
 800292e:	bf00      	nop
 8002930:	40021000 	.word	0x40021000
 8002934:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002938:	7cfb      	ldrb	r3, [r7, #19]
 800293a:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800293c:	7c7b      	ldrb	r3, [r7, #17]
 800293e:	2b01      	cmp	r3, #1
 8002940:	d105      	bne.n	800294e <HAL_RCCEx_PeriphCLKConfig+0x276>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002942:	4b9e      	ldr	r3, [pc, #632]	; (8002bbc <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002944:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002946:	4a9d      	ldr	r2, [pc, #628]	; (8002bbc <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002948:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800294c:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	f003 0301 	and.w	r3, r3, #1
 8002956:	2b00      	cmp	r3, #0
 8002958:	d00a      	beq.n	8002970 <HAL_RCCEx_PeriphCLKConfig+0x298>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800295a:	4b98      	ldr	r3, [pc, #608]	; (8002bbc <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800295c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002960:	f023 0203 	bic.w	r2, r3, #3
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002968:	4994      	ldr	r1, [pc, #592]	; (8002bbc <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800296a:	4313      	orrs	r3, r2
 800296c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	f003 0302 	and.w	r3, r3, #2
 8002978:	2b00      	cmp	r3, #0
 800297a:	d00a      	beq.n	8002992 <HAL_RCCEx_PeriphCLKConfig+0x2ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800297c:	4b8f      	ldr	r3, [pc, #572]	; (8002bbc <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800297e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002982:	f023 020c 	bic.w	r2, r3, #12
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800298a:	498c      	ldr	r1, [pc, #560]	; (8002bbc <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800298c:	4313      	orrs	r3, r2
 800298e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	f003 0304 	and.w	r3, r3, #4
 800299a:	2b00      	cmp	r3, #0
 800299c:	d00a      	beq.n	80029b4 <HAL_RCCEx_PeriphCLKConfig+0x2dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800299e:	4b87      	ldr	r3, [pc, #540]	; (8002bbc <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80029a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80029a4:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029ac:	4983      	ldr	r1, [pc, #524]	; (8002bbc <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80029ae:	4313      	orrs	r3, r2
 80029b0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	f003 0308 	and.w	r3, r3, #8
 80029bc:	2b00      	cmp	r3, #0
 80029be:	d00a      	beq.n	80029d6 <HAL_RCCEx_PeriphCLKConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80029c0:	4b7e      	ldr	r3, [pc, #504]	; (8002bbc <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80029c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80029c6:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029ce:	497b      	ldr	r1, [pc, #492]	; (8002bbc <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80029d0:	4313      	orrs	r3, r2
 80029d2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	f003 0310 	and.w	r3, r3, #16
 80029de:	2b00      	cmp	r3, #0
 80029e0:	d00a      	beq.n	80029f8 <HAL_RCCEx_PeriphCLKConfig+0x320>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80029e2:	4b76      	ldr	r3, [pc, #472]	; (8002bbc <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80029e4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80029e8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80029f0:	4972      	ldr	r1, [pc, #456]	; (8002bbc <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80029f2:	4313      	orrs	r3, r2
 80029f4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	f003 0320 	and.w	r3, r3, #32
 8002a00:	2b00      	cmp	r3, #0
 8002a02:	d00a      	beq.n	8002a1a <HAL_RCCEx_PeriphCLKConfig+0x342>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002a04:	4b6d      	ldr	r3, [pc, #436]	; (8002bbc <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002a06:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a0a:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002a12:	496a      	ldr	r1, [pc, #424]	; (8002bbc <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002a14:	4313      	orrs	r3, r2
 8002a16:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002a22:	2b00      	cmp	r3, #0
 8002a24:	d00a      	beq.n	8002a3c <HAL_RCCEx_PeriphCLKConfig+0x364>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002a26:	4b65      	ldr	r3, [pc, #404]	; (8002bbc <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002a28:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a2c:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002a34:	4961      	ldr	r1, [pc, #388]	; (8002bbc <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002a36:	4313      	orrs	r3, r2
 8002a38:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002a44:	2b00      	cmp	r3, #0
 8002a46:	d00a      	beq.n	8002a5e <HAL_RCCEx_PeriphCLKConfig+0x386>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002a48:	4b5c      	ldr	r3, [pc, #368]	; (8002bbc <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002a4a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a4e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002a56:	4959      	ldr	r1, [pc, #356]	; (8002bbc <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002a58:	4313      	orrs	r3, r2
 8002a5a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002a66:	2b00      	cmp	r3, #0
 8002a68:	d00a      	beq.n	8002a80 <HAL_RCCEx_PeriphCLKConfig+0x3a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002a6a:	4b54      	ldr	r3, [pc, #336]	; (8002bbc <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002a6c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a70:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002a78:	4950      	ldr	r1, [pc, #320]	; (8002bbc <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002a7a:	4313      	orrs	r3, r2
 8002a7c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002a88:	2b00      	cmp	r3, #0
 8002a8a:	d00a      	beq.n	8002aa2 <HAL_RCCEx_PeriphCLKConfig+0x3ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002a8c:	4b4b      	ldr	r3, [pc, #300]	; (8002bbc <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002a8e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a92:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002a9a:	4948      	ldr	r1, [pc, #288]	; (8002bbc <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002a9c:	4313      	orrs	r3, r2
 8002a9e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002aaa:	2b00      	cmp	r3, #0
 8002aac:	d00a      	beq.n	8002ac4 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002aae:	4b43      	ldr	r3, [pc, #268]	; (8002bbc <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002ab0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002ab4:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002abc:	493f      	ldr	r1, [pc, #252]	; (8002bbc <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002abe:	4313      	orrs	r3, r2
 8002ac0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002acc:	2b00      	cmp	r3, #0
 8002ace:	d028      	beq.n	8002b22 <HAL_RCCEx_PeriphCLKConfig+0x44a>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002ad0:	4b3a      	ldr	r3, [pc, #232]	; (8002bbc <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002ad2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002ad6:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002ade:	4937      	ldr	r1, [pc, #220]	; (8002bbc <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002ae0:	4313      	orrs	r3, r2
 8002ae2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002aea:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002aee:	d106      	bne.n	8002afe <HAL_RCCEx_PeriphCLKConfig+0x426>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002af0:	4b32      	ldr	r3, [pc, #200]	; (8002bbc <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002af2:	68db      	ldr	r3, [r3, #12]
 8002af4:	4a31      	ldr	r2, [pc, #196]	; (8002bbc <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002af6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002afa:	60d3      	str	r3, [r2, #12]
 8002afc:	e011      	b.n	8002b22 <HAL_RCCEx_PeriphCLKConfig+0x44a>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002b02:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002b06:	d10c      	bne.n	8002b22 <HAL_RCCEx_PeriphCLKConfig+0x44a>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	3304      	adds	r3, #4
 8002b0c:	2101      	movs	r1, #1
 8002b0e:	4618      	mov	r0, r3
 8002b10:	f000 f8c8 	bl	8002ca4 <RCCEx_PLLSAI1_Config>
 8002b14:	4603      	mov	r3, r0
 8002b16:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8002b18:	7cfb      	ldrb	r3, [r7, #19]
 8002b1a:	2b00      	cmp	r3, #0
 8002b1c:	d001      	beq.n	8002b22 <HAL_RCCEx_PeriphCLKConfig+0x44a>
        {
          /* set overall return value */
          status = ret;
 8002b1e:	7cfb      	ldrb	r3, [r7, #19]
 8002b20:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002b2a:	2b00      	cmp	r3, #0
 8002b2c:	d028      	beq.n	8002b80 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8002b2e:	4b23      	ldr	r3, [pc, #140]	; (8002bbc <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002b30:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b34:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b3c:	491f      	ldr	r1, [pc, #124]	; (8002bbc <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002b3e:	4313      	orrs	r3, r2
 8002b40:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b48:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002b4c:	d106      	bne.n	8002b5c <HAL_RCCEx_PeriphCLKConfig+0x484>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002b4e:	4b1b      	ldr	r3, [pc, #108]	; (8002bbc <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002b50:	68db      	ldr	r3, [r3, #12]
 8002b52:	4a1a      	ldr	r2, [pc, #104]	; (8002bbc <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002b54:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002b58:	60d3      	str	r3, [r2, #12]
 8002b5a:	e011      	b.n	8002b80 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b60:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002b64:	d10c      	bne.n	8002b80 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	3304      	adds	r3, #4
 8002b6a:	2101      	movs	r1, #1
 8002b6c:	4618      	mov	r0, r3
 8002b6e:	f000 f899 	bl	8002ca4 <RCCEx_PLLSAI1_Config>
 8002b72:	4603      	mov	r3, r0
 8002b74:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002b76:	7cfb      	ldrb	r3, [r7, #19]
 8002b78:	2b00      	cmp	r3, #0
 8002b7a:	d001      	beq.n	8002b80 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* set overall return value */
        status = ret;
 8002b7c:	7cfb      	ldrb	r3, [r7, #19]
 8002b7e:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002b88:	2b00      	cmp	r3, #0
 8002b8a:	d02b      	beq.n	8002be4 <HAL_RCCEx_PeriphCLKConfig+0x50c>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002b8c:	4b0b      	ldr	r3, [pc, #44]	; (8002bbc <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002b8e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b92:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002b9a:	4908      	ldr	r1, [pc, #32]	; (8002bbc <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002b9c:	4313      	orrs	r3, r2
 8002b9e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002ba6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002baa:	d109      	bne.n	8002bc0 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002bac:	4b03      	ldr	r3, [pc, #12]	; (8002bbc <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002bae:	68db      	ldr	r3, [r3, #12]
 8002bb0:	4a02      	ldr	r2, [pc, #8]	; (8002bbc <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002bb2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002bb6:	60d3      	str	r3, [r2, #12]
 8002bb8:	e014      	b.n	8002be4 <HAL_RCCEx_PeriphCLKConfig+0x50c>
 8002bba:	bf00      	nop
 8002bbc:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002bc4:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002bc8:	d10c      	bne.n	8002be4 <HAL_RCCEx_PeriphCLKConfig+0x50c>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	3304      	adds	r3, #4
 8002bce:	2101      	movs	r1, #1
 8002bd0:	4618      	mov	r0, r3
 8002bd2:	f000 f867 	bl	8002ca4 <RCCEx_PLLSAI1_Config>
 8002bd6:	4603      	mov	r3, r0
 8002bd8:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002bda:	7cfb      	ldrb	r3, [r7, #19]
 8002bdc:	2b00      	cmp	r3, #0
 8002bde:	d001      	beq.n	8002be4 <HAL_RCCEx_PeriphCLKConfig+0x50c>
      {
        /* set overall return value */
        status = ret;
 8002be0:	7cfb      	ldrb	r3, [r7, #19]
 8002be2:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002bec:	2b00      	cmp	r3, #0
 8002bee:	d02f      	beq.n	8002c50 <HAL_RCCEx_PeriphCLKConfig+0x578>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002bf0:	4b2b      	ldr	r3, [pc, #172]	; (8002ca0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002bf2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002bf6:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002bfe:	4928      	ldr	r1, [pc, #160]	; (8002ca0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002c00:	4313      	orrs	r3, r2
 8002c02:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002c0a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002c0e:	d10d      	bne.n	8002c2c <HAL_RCCEx_PeriphCLKConfig+0x554>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	3304      	adds	r3, #4
 8002c14:	2102      	movs	r1, #2
 8002c16:	4618      	mov	r0, r3
 8002c18:	f000 f844 	bl	8002ca4 <RCCEx_PLLSAI1_Config>
 8002c1c:	4603      	mov	r3, r0
 8002c1e:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002c20:	7cfb      	ldrb	r3, [r7, #19]
 8002c22:	2b00      	cmp	r3, #0
 8002c24:	d014      	beq.n	8002c50 <HAL_RCCEx_PeriphCLKConfig+0x578>
      {
        /* set overall return value */
        status = ret;
 8002c26:	7cfb      	ldrb	r3, [r7, #19]
 8002c28:	74bb      	strb	r3, [r7, #18]
 8002c2a:	e011      	b.n	8002c50 <HAL_RCCEx_PeriphCLKConfig+0x578>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002c30:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002c34:	d10c      	bne.n	8002c50 <HAL_RCCEx_PeriphCLKConfig+0x578>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	3320      	adds	r3, #32
 8002c3a:	2102      	movs	r1, #2
 8002c3c:	4618      	mov	r0, r3
 8002c3e:	f000 f921 	bl	8002e84 <RCCEx_PLLSAI2_Config>
 8002c42:	4603      	mov	r3, r0
 8002c44:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002c46:	7cfb      	ldrb	r3, [r7, #19]
 8002c48:	2b00      	cmp	r3, #0
 8002c4a:	d001      	beq.n	8002c50 <HAL_RCCEx_PeriphCLKConfig+0x578>
      {
        /* set overall return value */
        status = ret;
 8002c4c:	7cfb      	ldrb	r3, [r7, #19]
 8002c4e:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002c58:	2b00      	cmp	r3, #0
 8002c5a:	d00a      	beq.n	8002c72 <HAL_RCCEx_PeriphCLKConfig+0x59a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8002c5c:	4b10      	ldr	r3, [pc, #64]	; (8002ca0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002c5e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002c62:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002c6a:	490d      	ldr	r1, [pc, #52]	; (8002ca0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002c6c:	4313      	orrs	r3, r2
 8002c6e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002c7a:	2b00      	cmp	r3, #0
 8002c7c:	d00b      	beq.n	8002c96 <HAL_RCCEx_PeriphCLKConfig+0x5be>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8002c7e:	4b08      	ldr	r3, [pc, #32]	; (8002ca0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002c80:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002c84:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002c8e:	4904      	ldr	r1, [pc, #16]	; (8002ca0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002c90:	4313      	orrs	r3, r2
 8002c92:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8002c96:	7cbb      	ldrb	r3, [r7, #18]
}
 8002c98:	4618      	mov	r0, r3
 8002c9a:	3718      	adds	r7, #24
 8002c9c:	46bd      	mov	sp, r7
 8002c9e:	bd80      	pop	{r7, pc}
 8002ca0:	40021000 	.word	0x40021000

08002ca4 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8002ca4:	b580      	push	{r7, lr}
 8002ca6:	b084      	sub	sp, #16
 8002ca8:	af00      	add	r7, sp, #0
 8002caa:	6078      	str	r0, [r7, #4]
 8002cac:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002cae:	2300      	movs	r3, #0
 8002cb0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002cb2:	4b73      	ldr	r3, [pc, #460]	; (8002e80 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002cb4:	68db      	ldr	r3, [r3, #12]
 8002cb6:	f003 0303 	and.w	r3, r3, #3
 8002cba:	2b00      	cmp	r3, #0
 8002cbc:	d018      	beq.n	8002cf0 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8002cbe:	4b70      	ldr	r3, [pc, #448]	; (8002e80 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002cc0:	68db      	ldr	r3, [r3, #12]
 8002cc2:	f003 0203 	and.w	r2, r3, #3
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	429a      	cmp	r2, r3
 8002ccc:	d10d      	bne.n	8002cea <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	681b      	ldr	r3, [r3, #0]
       ||
 8002cd2:	2b00      	cmp	r3, #0
 8002cd4:	d009      	beq.n	8002cea <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8002cd6:	4b6a      	ldr	r3, [pc, #424]	; (8002e80 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002cd8:	68db      	ldr	r3, [r3, #12]
 8002cda:	091b      	lsrs	r3, r3, #4
 8002cdc:	f003 0307 	and.w	r3, r3, #7
 8002ce0:	1c5a      	adds	r2, r3, #1
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	685b      	ldr	r3, [r3, #4]
       ||
 8002ce6:	429a      	cmp	r2, r3
 8002ce8:	d044      	beq.n	8002d74 <RCCEx_PLLSAI1_Config+0xd0>
#endif
      )
    {
      status = HAL_ERROR;
 8002cea:	2301      	movs	r3, #1
 8002cec:	73fb      	strb	r3, [r7, #15]
 8002cee:	e041      	b.n	8002d74 <RCCEx_PLLSAI1_Config+0xd0>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	2b02      	cmp	r3, #2
 8002cf6:	d00c      	beq.n	8002d12 <RCCEx_PLLSAI1_Config+0x6e>
 8002cf8:	2b03      	cmp	r3, #3
 8002cfa:	d013      	beq.n	8002d24 <RCCEx_PLLSAI1_Config+0x80>
 8002cfc:	2b01      	cmp	r3, #1
 8002cfe:	d120      	bne.n	8002d42 <RCCEx_PLLSAI1_Config+0x9e>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002d00:	4b5f      	ldr	r3, [pc, #380]	; (8002e80 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	f003 0302 	and.w	r3, r3, #2
 8002d08:	2b00      	cmp	r3, #0
 8002d0a:	d11d      	bne.n	8002d48 <RCCEx_PLLSAI1_Config+0xa4>
      {
        status = HAL_ERROR;
 8002d0c:	2301      	movs	r3, #1
 8002d0e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002d10:	e01a      	b.n	8002d48 <RCCEx_PLLSAI1_Config+0xa4>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002d12:	4b5b      	ldr	r3, [pc, #364]	; (8002e80 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002d1a:	2b00      	cmp	r3, #0
 8002d1c:	d116      	bne.n	8002d4c <RCCEx_PLLSAI1_Config+0xa8>
      {
        status = HAL_ERROR;
 8002d1e:	2301      	movs	r3, #1
 8002d20:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002d22:	e013      	b.n	8002d4c <RCCEx_PLLSAI1_Config+0xa8>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002d24:	4b56      	ldr	r3, [pc, #344]	; (8002e80 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d2c:	2b00      	cmp	r3, #0
 8002d2e:	d10f      	bne.n	8002d50 <RCCEx_PLLSAI1_Config+0xac>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002d30:	4b53      	ldr	r3, [pc, #332]	; (8002e80 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002d38:	2b00      	cmp	r3, #0
 8002d3a:	d109      	bne.n	8002d50 <RCCEx_PLLSAI1_Config+0xac>
        {
          status = HAL_ERROR;
 8002d3c:	2301      	movs	r3, #1
 8002d3e:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8002d40:	e006      	b.n	8002d50 <RCCEx_PLLSAI1_Config+0xac>
    default:
      status = HAL_ERROR;
 8002d42:	2301      	movs	r3, #1
 8002d44:	73fb      	strb	r3, [r7, #15]
      break;
 8002d46:	e004      	b.n	8002d52 <RCCEx_PLLSAI1_Config+0xae>
      break;
 8002d48:	bf00      	nop
 8002d4a:	e002      	b.n	8002d52 <RCCEx_PLLSAI1_Config+0xae>
      break;
 8002d4c:	bf00      	nop
 8002d4e:	e000      	b.n	8002d52 <RCCEx_PLLSAI1_Config+0xae>
      break;
 8002d50:	bf00      	nop
    }

    if(status == HAL_OK)
 8002d52:	7bfb      	ldrb	r3, [r7, #15]
 8002d54:	2b00      	cmp	r3, #0
 8002d56:	d10d      	bne.n	8002d74 <RCCEx_PLLSAI1_Config+0xd0>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8002d58:	4b49      	ldr	r3, [pc, #292]	; (8002e80 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002d5a:	68db      	ldr	r3, [r3, #12]
 8002d5c:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	6819      	ldr	r1, [r3, #0]
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	685b      	ldr	r3, [r3, #4]
 8002d68:	3b01      	subs	r3, #1
 8002d6a:	011b      	lsls	r3, r3, #4
 8002d6c:	430b      	orrs	r3, r1
 8002d6e:	4944      	ldr	r1, [pc, #272]	; (8002e80 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002d70:	4313      	orrs	r3, r2
 8002d72:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8002d74:	7bfb      	ldrb	r3, [r7, #15]
 8002d76:	2b00      	cmp	r3, #0
 8002d78:	d17d      	bne.n	8002e76 <RCCEx_PLLSAI1_Config+0x1d2>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8002d7a:	4b41      	ldr	r3, [pc, #260]	; (8002e80 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	4a40      	ldr	r2, [pc, #256]	; (8002e80 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002d80:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8002d84:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002d86:	f7fe fa95 	bl	80012b4 <HAL_GetTick>
 8002d8a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002d8c:	e009      	b.n	8002da2 <RCCEx_PLLSAI1_Config+0xfe>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002d8e:	f7fe fa91 	bl	80012b4 <HAL_GetTick>
 8002d92:	4602      	mov	r2, r0
 8002d94:	68bb      	ldr	r3, [r7, #8]
 8002d96:	1ad3      	subs	r3, r2, r3
 8002d98:	2b02      	cmp	r3, #2
 8002d9a:	d902      	bls.n	8002da2 <RCCEx_PLLSAI1_Config+0xfe>
      {
        status = HAL_TIMEOUT;
 8002d9c:	2303      	movs	r3, #3
 8002d9e:	73fb      	strb	r3, [r7, #15]
        break;
 8002da0:	e005      	b.n	8002dae <RCCEx_PLLSAI1_Config+0x10a>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002da2:	4b37      	ldr	r3, [pc, #220]	; (8002e80 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002daa:	2b00      	cmp	r3, #0
 8002dac:	d1ef      	bne.n	8002d8e <RCCEx_PLLSAI1_Config+0xea>
      }
    }

    if(status == HAL_OK)
 8002dae:	7bfb      	ldrb	r3, [r7, #15]
 8002db0:	2b00      	cmp	r3, #0
 8002db2:	d160      	bne.n	8002e76 <RCCEx_PLLSAI1_Config+0x1d2>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8002db4:	683b      	ldr	r3, [r7, #0]
 8002db6:	2b00      	cmp	r3, #0
 8002db8:	d111      	bne.n	8002dde <RCCEx_PLLSAI1_Config+0x13a>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002dba:	4b31      	ldr	r3, [pc, #196]	; (8002e80 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002dbc:	691b      	ldr	r3, [r3, #16]
 8002dbe:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8002dc2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002dc6:	687a      	ldr	r2, [r7, #4]
 8002dc8:	6892      	ldr	r2, [r2, #8]
 8002dca:	0211      	lsls	r1, r2, #8
 8002dcc:	687a      	ldr	r2, [r7, #4]
 8002dce:	68d2      	ldr	r2, [r2, #12]
 8002dd0:	0912      	lsrs	r2, r2, #4
 8002dd2:	0452      	lsls	r2, r2, #17
 8002dd4:	430a      	orrs	r2, r1
 8002dd6:	492a      	ldr	r1, [pc, #168]	; (8002e80 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002dd8:	4313      	orrs	r3, r2
 8002dda:	610b      	str	r3, [r1, #16]
 8002ddc:	e027      	b.n	8002e2e <RCCEx_PLLSAI1_Config+0x18a>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8002dde:	683b      	ldr	r3, [r7, #0]
 8002de0:	2b01      	cmp	r3, #1
 8002de2:	d112      	bne.n	8002e0a <RCCEx_PLLSAI1_Config+0x166>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002de4:	4b26      	ldr	r3, [pc, #152]	; (8002e80 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002de6:	691b      	ldr	r3, [r3, #16]
 8002de8:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8002dec:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002df0:	687a      	ldr	r2, [r7, #4]
 8002df2:	6892      	ldr	r2, [r2, #8]
 8002df4:	0211      	lsls	r1, r2, #8
 8002df6:	687a      	ldr	r2, [r7, #4]
 8002df8:	6912      	ldr	r2, [r2, #16]
 8002dfa:	0852      	lsrs	r2, r2, #1
 8002dfc:	3a01      	subs	r2, #1
 8002dfe:	0552      	lsls	r2, r2, #21
 8002e00:	430a      	orrs	r2, r1
 8002e02:	491f      	ldr	r1, [pc, #124]	; (8002e80 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002e04:	4313      	orrs	r3, r2
 8002e06:	610b      	str	r3, [r1, #16]
 8002e08:	e011      	b.n	8002e2e <RCCEx_PLLSAI1_Config+0x18a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002e0a:	4b1d      	ldr	r3, [pc, #116]	; (8002e80 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002e0c:	691b      	ldr	r3, [r3, #16]
 8002e0e:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8002e12:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002e16:	687a      	ldr	r2, [r7, #4]
 8002e18:	6892      	ldr	r2, [r2, #8]
 8002e1a:	0211      	lsls	r1, r2, #8
 8002e1c:	687a      	ldr	r2, [r7, #4]
 8002e1e:	6952      	ldr	r2, [r2, #20]
 8002e20:	0852      	lsrs	r2, r2, #1
 8002e22:	3a01      	subs	r2, #1
 8002e24:	0652      	lsls	r2, r2, #25
 8002e26:	430a      	orrs	r2, r1
 8002e28:	4915      	ldr	r1, [pc, #84]	; (8002e80 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002e2a:	4313      	orrs	r3, r2
 8002e2c:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8002e2e:	4b14      	ldr	r3, [pc, #80]	; (8002e80 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	4a13      	ldr	r2, [pc, #76]	; (8002e80 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002e34:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002e38:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002e3a:	f7fe fa3b 	bl	80012b4 <HAL_GetTick>
 8002e3e:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002e40:	e009      	b.n	8002e56 <RCCEx_PLLSAI1_Config+0x1b2>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002e42:	f7fe fa37 	bl	80012b4 <HAL_GetTick>
 8002e46:	4602      	mov	r2, r0
 8002e48:	68bb      	ldr	r3, [r7, #8]
 8002e4a:	1ad3      	subs	r3, r2, r3
 8002e4c:	2b02      	cmp	r3, #2
 8002e4e:	d902      	bls.n	8002e56 <RCCEx_PLLSAI1_Config+0x1b2>
        {
          status = HAL_TIMEOUT;
 8002e50:	2303      	movs	r3, #3
 8002e52:	73fb      	strb	r3, [r7, #15]
          break;
 8002e54:	e005      	b.n	8002e62 <RCCEx_PLLSAI1_Config+0x1be>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002e56:	4b0a      	ldr	r3, [pc, #40]	; (8002e80 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002e5e:	2b00      	cmp	r3, #0
 8002e60:	d0ef      	beq.n	8002e42 <RCCEx_PLLSAI1_Config+0x19e>
        }
      }

      if(status == HAL_OK)
 8002e62:	7bfb      	ldrb	r3, [r7, #15]
 8002e64:	2b00      	cmp	r3, #0
 8002e66:	d106      	bne.n	8002e76 <RCCEx_PLLSAI1_Config+0x1d2>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8002e68:	4b05      	ldr	r3, [pc, #20]	; (8002e80 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002e6a:	691a      	ldr	r2, [r3, #16]
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	699b      	ldr	r3, [r3, #24]
 8002e70:	4903      	ldr	r1, [pc, #12]	; (8002e80 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002e72:	4313      	orrs	r3, r2
 8002e74:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8002e76:	7bfb      	ldrb	r3, [r7, #15]
}
 8002e78:	4618      	mov	r0, r3
 8002e7a:	3710      	adds	r7, #16
 8002e7c:	46bd      	mov	sp, r7
 8002e7e:	bd80      	pop	{r7, pc}
 8002e80:	40021000 	.word	0x40021000

08002e84 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8002e84:	b580      	push	{r7, lr}
 8002e86:	b084      	sub	sp, #16
 8002e88:	af00      	add	r7, sp, #0
 8002e8a:	6078      	str	r0, [r7, #4]
 8002e8c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002e8e:	2300      	movs	r3, #0
 8002e90:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002e92:	4b68      	ldr	r3, [pc, #416]	; (8003034 <RCCEx_PLLSAI2_Config+0x1b0>)
 8002e94:	68db      	ldr	r3, [r3, #12]
 8002e96:	f003 0303 	and.w	r3, r3, #3
 8002e9a:	2b00      	cmp	r3, #0
 8002e9c:	d018      	beq.n	8002ed0 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8002e9e:	4b65      	ldr	r3, [pc, #404]	; (8003034 <RCCEx_PLLSAI2_Config+0x1b0>)
 8002ea0:	68db      	ldr	r3, [r3, #12]
 8002ea2:	f003 0203 	and.w	r2, r3, #3
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	429a      	cmp	r2, r3
 8002eac:	d10d      	bne.n	8002eca <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	681b      	ldr	r3, [r3, #0]
       ||
 8002eb2:	2b00      	cmp	r3, #0
 8002eb4:	d009      	beq.n	8002eca <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8002eb6:	4b5f      	ldr	r3, [pc, #380]	; (8003034 <RCCEx_PLLSAI2_Config+0x1b0>)
 8002eb8:	68db      	ldr	r3, [r3, #12]
 8002eba:	091b      	lsrs	r3, r3, #4
 8002ebc:	f003 0307 	and.w	r3, r3, #7
 8002ec0:	1c5a      	adds	r2, r3, #1
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	685b      	ldr	r3, [r3, #4]
       ||
 8002ec6:	429a      	cmp	r2, r3
 8002ec8:	d044      	beq.n	8002f54 <RCCEx_PLLSAI2_Config+0xd0>
#endif
      )
    {
      status = HAL_ERROR;
 8002eca:	2301      	movs	r3, #1
 8002ecc:	73fb      	strb	r3, [r7, #15]
 8002ece:	e041      	b.n	8002f54 <RCCEx_PLLSAI2_Config+0xd0>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	2b02      	cmp	r3, #2
 8002ed6:	d00c      	beq.n	8002ef2 <RCCEx_PLLSAI2_Config+0x6e>
 8002ed8:	2b03      	cmp	r3, #3
 8002eda:	d013      	beq.n	8002f04 <RCCEx_PLLSAI2_Config+0x80>
 8002edc:	2b01      	cmp	r3, #1
 8002ede:	d120      	bne.n	8002f22 <RCCEx_PLLSAI2_Config+0x9e>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002ee0:	4b54      	ldr	r3, [pc, #336]	; (8003034 <RCCEx_PLLSAI2_Config+0x1b0>)
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	f003 0302 	and.w	r3, r3, #2
 8002ee8:	2b00      	cmp	r3, #0
 8002eea:	d11d      	bne.n	8002f28 <RCCEx_PLLSAI2_Config+0xa4>
      {
        status = HAL_ERROR;
 8002eec:	2301      	movs	r3, #1
 8002eee:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002ef0:	e01a      	b.n	8002f28 <RCCEx_PLLSAI2_Config+0xa4>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002ef2:	4b50      	ldr	r3, [pc, #320]	; (8003034 <RCCEx_PLLSAI2_Config+0x1b0>)
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002efa:	2b00      	cmp	r3, #0
 8002efc:	d116      	bne.n	8002f2c <RCCEx_PLLSAI2_Config+0xa8>
      {
        status = HAL_ERROR;
 8002efe:	2301      	movs	r3, #1
 8002f00:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002f02:	e013      	b.n	8002f2c <RCCEx_PLLSAI2_Config+0xa8>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002f04:	4b4b      	ldr	r3, [pc, #300]	; (8003034 <RCCEx_PLLSAI2_Config+0x1b0>)
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f0c:	2b00      	cmp	r3, #0
 8002f0e:	d10f      	bne.n	8002f30 <RCCEx_PLLSAI2_Config+0xac>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002f10:	4b48      	ldr	r3, [pc, #288]	; (8003034 <RCCEx_PLLSAI2_Config+0x1b0>)
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002f18:	2b00      	cmp	r3, #0
 8002f1a:	d109      	bne.n	8002f30 <RCCEx_PLLSAI2_Config+0xac>
        {
          status = HAL_ERROR;
 8002f1c:	2301      	movs	r3, #1
 8002f1e:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8002f20:	e006      	b.n	8002f30 <RCCEx_PLLSAI2_Config+0xac>
    default:
      status = HAL_ERROR;
 8002f22:	2301      	movs	r3, #1
 8002f24:	73fb      	strb	r3, [r7, #15]
      break;
 8002f26:	e004      	b.n	8002f32 <RCCEx_PLLSAI2_Config+0xae>
      break;
 8002f28:	bf00      	nop
 8002f2a:	e002      	b.n	8002f32 <RCCEx_PLLSAI2_Config+0xae>
      break;
 8002f2c:	bf00      	nop
 8002f2e:	e000      	b.n	8002f32 <RCCEx_PLLSAI2_Config+0xae>
      break;
 8002f30:	bf00      	nop
    }

    if(status == HAL_OK)
 8002f32:	7bfb      	ldrb	r3, [r7, #15]
 8002f34:	2b00      	cmp	r3, #0
 8002f36:	d10d      	bne.n	8002f54 <RCCEx_PLLSAI2_Config+0xd0>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8002f38:	4b3e      	ldr	r3, [pc, #248]	; (8003034 <RCCEx_PLLSAI2_Config+0x1b0>)
 8002f3a:	68db      	ldr	r3, [r3, #12]
 8002f3c:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	6819      	ldr	r1, [r3, #0]
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	685b      	ldr	r3, [r3, #4]
 8002f48:	3b01      	subs	r3, #1
 8002f4a:	011b      	lsls	r3, r3, #4
 8002f4c:	430b      	orrs	r3, r1
 8002f4e:	4939      	ldr	r1, [pc, #228]	; (8003034 <RCCEx_PLLSAI2_Config+0x1b0>)
 8002f50:	4313      	orrs	r3, r2
 8002f52:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8002f54:	7bfb      	ldrb	r3, [r7, #15]
 8002f56:	2b00      	cmp	r3, #0
 8002f58:	d167      	bne.n	800302a <RCCEx_PLLSAI2_Config+0x1a6>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8002f5a:	4b36      	ldr	r3, [pc, #216]	; (8003034 <RCCEx_PLLSAI2_Config+0x1b0>)
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	4a35      	ldr	r2, [pc, #212]	; (8003034 <RCCEx_PLLSAI2_Config+0x1b0>)
 8002f60:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002f64:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002f66:	f7fe f9a5 	bl	80012b4 <HAL_GetTick>
 8002f6a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8002f6c:	e009      	b.n	8002f82 <RCCEx_PLLSAI2_Config+0xfe>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8002f6e:	f7fe f9a1 	bl	80012b4 <HAL_GetTick>
 8002f72:	4602      	mov	r2, r0
 8002f74:	68bb      	ldr	r3, [r7, #8]
 8002f76:	1ad3      	subs	r3, r2, r3
 8002f78:	2b02      	cmp	r3, #2
 8002f7a:	d902      	bls.n	8002f82 <RCCEx_PLLSAI2_Config+0xfe>
      {
        status = HAL_TIMEOUT;
 8002f7c:	2303      	movs	r3, #3
 8002f7e:	73fb      	strb	r3, [r7, #15]
        break;
 8002f80:	e005      	b.n	8002f8e <RCCEx_PLLSAI2_Config+0x10a>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8002f82:	4b2c      	ldr	r3, [pc, #176]	; (8003034 <RCCEx_PLLSAI2_Config+0x1b0>)
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002f8a:	2b00      	cmp	r3, #0
 8002f8c:	d1ef      	bne.n	8002f6e <RCCEx_PLLSAI2_Config+0xea>
      }
    }

    if(status == HAL_OK)
 8002f8e:	7bfb      	ldrb	r3, [r7, #15]
 8002f90:	2b00      	cmp	r3, #0
 8002f92:	d14a      	bne.n	800302a <RCCEx_PLLSAI2_Config+0x1a6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8002f94:	683b      	ldr	r3, [r7, #0]
 8002f96:	2b00      	cmp	r3, #0
 8002f98:	d111      	bne.n	8002fbe <RCCEx_PLLSAI2_Config+0x13a>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8002f9a:	4b26      	ldr	r3, [pc, #152]	; (8003034 <RCCEx_PLLSAI2_Config+0x1b0>)
 8002f9c:	695b      	ldr	r3, [r3, #20]
 8002f9e:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8002fa2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002fa6:	687a      	ldr	r2, [r7, #4]
 8002fa8:	6892      	ldr	r2, [r2, #8]
 8002faa:	0211      	lsls	r1, r2, #8
 8002fac:	687a      	ldr	r2, [r7, #4]
 8002fae:	68d2      	ldr	r2, [r2, #12]
 8002fb0:	0912      	lsrs	r2, r2, #4
 8002fb2:	0452      	lsls	r2, r2, #17
 8002fb4:	430a      	orrs	r2, r1
 8002fb6:	491f      	ldr	r1, [pc, #124]	; (8003034 <RCCEx_PLLSAI2_Config+0x1b0>)
 8002fb8:	4313      	orrs	r3, r2
 8002fba:	614b      	str	r3, [r1, #20]
 8002fbc:	e011      	b.n	8002fe2 <RCCEx_PLLSAI2_Config+0x15e>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8002fbe:	4b1d      	ldr	r3, [pc, #116]	; (8003034 <RCCEx_PLLSAI2_Config+0x1b0>)
 8002fc0:	695b      	ldr	r3, [r3, #20]
 8002fc2:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8002fc6:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002fca:	687a      	ldr	r2, [r7, #4]
 8002fcc:	6892      	ldr	r2, [r2, #8]
 8002fce:	0211      	lsls	r1, r2, #8
 8002fd0:	687a      	ldr	r2, [r7, #4]
 8002fd2:	6912      	ldr	r2, [r2, #16]
 8002fd4:	0852      	lsrs	r2, r2, #1
 8002fd6:	3a01      	subs	r2, #1
 8002fd8:	0652      	lsls	r2, r2, #25
 8002fda:	430a      	orrs	r2, r1
 8002fdc:	4915      	ldr	r1, [pc, #84]	; (8003034 <RCCEx_PLLSAI2_Config+0x1b0>)
 8002fde:	4313      	orrs	r3, r2
 8002fe0:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8002fe2:	4b14      	ldr	r3, [pc, #80]	; (8003034 <RCCEx_PLLSAI2_Config+0x1b0>)
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	4a13      	ldr	r2, [pc, #76]	; (8003034 <RCCEx_PLLSAI2_Config+0x1b0>)
 8002fe8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002fec:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002fee:	f7fe f961 	bl	80012b4 <HAL_GetTick>
 8002ff2:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8002ff4:	e009      	b.n	800300a <RCCEx_PLLSAI2_Config+0x186>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8002ff6:	f7fe f95d 	bl	80012b4 <HAL_GetTick>
 8002ffa:	4602      	mov	r2, r0
 8002ffc:	68bb      	ldr	r3, [r7, #8]
 8002ffe:	1ad3      	subs	r3, r2, r3
 8003000:	2b02      	cmp	r3, #2
 8003002:	d902      	bls.n	800300a <RCCEx_PLLSAI2_Config+0x186>
        {
          status = HAL_TIMEOUT;
 8003004:	2303      	movs	r3, #3
 8003006:	73fb      	strb	r3, [r7, #15]
          break;
 8003008:	e005      	b.n	8003016 <RCCEx_PLLSAI2_Config+0x192>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800300a:	4b0a      	ldr	r3, [pc, #40]	; (8003034 <RCCEx_PLLSAI2_Config+0x1b0>)
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003012:	2b00      	cmp	r3, #0
 8003014:	d0ef      	beq.n	8002ff6 <RCCEx_PLLSAI2_Config+0x172>
        }
      }

      if(status == HAL_OK)
 8003016:	7bfb      	ldrb	r3, [r7, #15]
 8003018:	2b00      	cmp	r3, #0
 800301a:	d106      	bne.n	800302a <RCCEx_PLLSAI2_Config+0x1a6>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 800301c:	4b05      	ldr	r3, [pc, #20]	; (8003034 <RCCEx_PLLSAI2_Config+0x1b0>)
 800301e:	695a      	ldr	r2, [r3, #20]
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	695b      	ldr	r3, [r3, #20]
 8003024:	4903      	ldr	r1, [pc, #12]	; (8003034 <RCCEx_PLLSAI2_Config+0x1b0>)
 8003026:	4313      	orrs	r3, r2
 8003028:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 800302a:	7bfb      	ldrb	r3, [r7, #15]
}
 800302c:	4618      	mov	r0, r3
 800302e:	3710      	adds	r7, #16
 8003030:	46bd      	mov	sp, r7
 8003032:	bd80      	pop	{r7, pc}
 8003034:	40021000 	.word	0x40021000

08003038 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003038:	b580      	push	{r7, lr}
 800303a:	b084      	sub	sp, #16
 800303c:	af00      	add	r7, sp, #0
 800303e:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	2b00      	cmp	r3, #0
 8003044:	d101      	bne.n	800304a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003046:	2301      	movs	r3, #1
 8003048:	e07c      	b.n	8003144 <HAL_SPI_Init+0x10c>
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	2200      	movs	r2, #0
 800304e:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8003056:	b2db      	uxtb	r3, r3
 8003058:	2b00      	cmp	r3, #0
 800305a:	d106      	bne.n	800306a <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	2200      	movs	r2, #0
 8003060:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003064:	6878      	ldr	r0, [r7, #4]
 8003066:	f7fd fe2d 	bl	8000cc4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	2202      	movs	r2, #2
 800306e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	681a      	ldr	r2, [r3, #0]
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003080:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	68db      	ldr	r3, [r3, #12]
 8003086:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800308a:	d902      	bls.n	8003092 <HAL_SPI_Init+0x5a>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800308c:	2300      	movs	r3, #0
 800308e:	60fb      	str	r3, [r7, #12]
 8003090:	e002      	b.n	8003098 <HAL_SPI_Init+0x60>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8003092:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003096:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	68db      	ldr	r3, [r3, #12]
 800309c:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 80030a0:	d007      	beq.n	80030b2 <HAL_SPI_Init+0x7a>
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	68db      	ldr	r3, [r3, #12]
 80030a6:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80030aa:	d002      	beq.n	80030b2 <HAL_SPI_Init+0x7a>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	2200      	movs	r2, #0
 80030b0:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Align the CRC Length on the data size */
  if (hspi->Init.CRCLength == SPI_CRC_LENGTH_DATASIZE)
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030b6:	2b00      	cmp	r3, #0
 80030b8:	d10b      	bne.n	80030d2 <HAL_SPI_Init+0x9a>
  {
    /* CRC Length aligned on the data size : value set by default */
    if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	68db      	ldr	r3, [r3, #12]
 80030be:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80030c2:	d903      	bls.n	80030cc <HAL_SPI_Init+0x94>
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_16BIT;
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	2202      	movs	r2, #2
 80030c8:	631a      	str	r2, [r3, #48]	; 0x30
 80030ca:	e002      	b.n	80030d2 <HAL_SPI_Init+0x9a>
    }
    else
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_8BIT;
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	2201      	movs	r2, #1
 80030d0:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction |
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	685a      	ldr	r2, [r3, #4]
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	689b      	ldr	r3, [r3, #8]
 80030da:	431a      	orrs	r2, r3
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	691b      	ldr	r3, [r3, #16]
 80030e0:	431a      	orrs	r2, r3
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	695b      	ldr	r3, [r3, #20]
 80030e6:	431a      	orrs	r2, r3
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	699b      	ldr	r3, [r3, #24]
 80030ec:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80030f0:	431a      	orrs	r2, r3
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	69db      	ldr	r3, [r3, #28]
 80030f6:	431a      	orrs	r2, r3
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	6a1b      	ldr	r3, [r3, #32]
 80030fc:	ea42 0103 	orr.w	r1, r2, r3
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	430a      	orrs	r2, r1
 800310a:	601a      	str	r2, [r3, #0]
    hspi->Instance->CR1 |= SPI_CR1_CRCL;
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode |
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	699b      	ldr	r3, [r3, #24]
 8003110:	0c1b      	lsrs	r3, r3, #16
 8003112:	f003 0204 	and.w	r2, r3, #4
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800311a:	431a      	orrs	r2, r3
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003120:	431a      	orrs	r2, r3
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	68db      	ldr	r3, [r3, #12]
 8003126:	ea42 0103 	orr.w	r1, r2, r3
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	68fa      	ldr	r2, [r7, #12]
 8003130:	430a      	orrs	r2, r1
 8003132:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	2200      	movs	r2, #0
 8003138:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	2201      	movs	r2, #1
 800313e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8003142:	2300      	movs	r3, #0
}
 8003144:	4618      	mov	r0, r3
 8003146:	3710      	adds	r7, #16
 8003148:	46bd      	mov	sp, r7
 800314a:	bd80      	pop	{r7, pc}

0800314c <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800314c:	b580      	push	{r7, lr}
 800314e:	b088      	sub	sp, #32
 8003150:	af00      	add	r7, sp, #0
 8003152:	60f8      	str	r0, [r7, #12]
 8003154:	60b9      	str	r1, [r7, #8]
 8003156:	603b      	str	r3, [r7, #0]
 8003158:	4613      	mov	r3, r2
 800315a:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800315c:	2300      	movs	r3, #0
 800315e:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003160:	68fb      	ldr	r3, [r7, #12]
 8003162:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8003166:	2b01      	cmp	r3, #1
 8003168:	d101      	bne.n	800316e <HAL_SPI_Transmit+0x22>
 800316a:	2302      	movs	r3, #2
 800316c:	e150      	b.n	8003410 <HAL_SPI_Transmit+0x2c4>
 800316e:	68fb      	ldr	r3, [r7, #12]
 8003170:	2201      	movs	r2, #1
 8003172:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003176:	f7fe f89d 	bl	80012b4 <HAL_GetTick>
 800317a:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 800317c:	88fb      	ldrh	r3, [r7, #6]
 800317e:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8003180:	68fb      	ldr	r3, [r7, #12]
 8003182:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8003186:	b2db      	uxtb	r3, r3
 8003188:	2b01      	cmp	r3, #1
 800318a:	d002      	beq.n	8003192 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 800318c:	2302      	movs	r3, #2
 800318e:	77fb      	strb	r3, [r7, #31]
    goto error;
 8003190:	e135      	b.n	80033fe <HAL_SPI_Transmit+0x2b2>
  }

  if ((pData == NULL) || (Size == 0U))
 8003192:	68bb      	ldr	r3, [r7, #8]
 8003194:	2b00      	cmp	r3, #0
 8003196:	d002      	beq.n	800319e <HAL_SPI_Transmit+0x52>
 8003198:	88fb      	ldrh	r3, [r7, #6]
 800319a:	2b00      	cmp	r3, #0
 800319c:	d102      	bne.n	80031a4 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 800319e:	2301      	movs	r3, #1
 80031a0:	77fb      	strb	r3, [r7, #31]
    goto error;
 80031a2:	e12c      	b.n	80033fe <HAL_SPI_Transmit+0x2b2>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80031a4:	68fb      	ldr	r3, [r7, #12]
 80031a6:	2203      	movs	r2, #3
 80031a8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80031ac:	68fb      	ldr	r3, [r7, #12]
 80031ae:	2200      	movs	r2, #0
 80031b0:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80031b2:	68fb      	ldr	r3, [r7, #12]
 80031b4:	68ba      	ldr	r2, [r7, #8]
 80031b6:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 80031b8:	68fb      	ldr	r3, [r7, #12]
 80031ba:	88fa      	ldrh	r2, [r7, #6]
 80031bc:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 80031be:	68fb      	ldr	r3, [r7, #12]
 80031c0:	88fa      	ldrh	r2, [r7, #6]
 80031c2:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80031c4:	68fb      	ldr	r3, [r7, #12]
 80031c6:	2200      	movs	r2, #0
 80031c8:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 80031ca:	68fb      	ldr	r3, [r7, #12]
 80031cc:	2200      	movs	r2, #0
 80031ce:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 80031d2:	68fb      	ldr	r3, [r7, #12]
 80031d4:	2200      	movs	r2, #0
 80031d6:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 80031da:	68fb      	ldr	r3, [r7, #12]
 80031dc:	2200      	movs	r2, #0
 80031de:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 80031e0:	68fb      	ldr	r3, [r7, #12]
 80031e2:	2200      	movs	r2, #0
 80031e4:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80031e6:	68fb      	ldr	r3, [r7, #12]
 80031e8:	689b      	ldr	r3, [r3, #8]
 80031ea:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80031ee:	d107      	bne.n	8003200 <HAL_SPI_Transmit+0xb4>
  {
    SPI_1LINE_TX(hspi);
 80031f0:	68fb      	ldr	r3, [r7, #12]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	681a      	ldr	r2, [r3, #0]
 80031f6:	68fb      	ldr	r3, [r7, #12]
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80031fe:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003200:	68fb      	ldr	r3, [r7, #12]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800320a:	2b40      	cmp	r3, #64	; 0x40
 800320c:	d007      	beq.n	800321e <HAL_SPI_Transmit+0xd2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800320e:	68fb      	ldr	r3, [r7, #12]
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	681a      	ldr	r2, [r3, #0]
 8003214:	68fb      	ldr	r3, [r7, #12]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800321c:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800321e:	68fb      	ldr	r3, [r7, #12]
 8003220:	68db      	ldr	r3, [r3, #12]
 8003222:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003226:	d94b      	bls.n	80032c0 <HAL_SPI_Transmit+0x174>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003228:	68fb      	ldr	r3, [r7, #12]
 800322a:	685b      	ldr	r3, [r3, #4]
 800322c:	2b00      	cmp	r3, #0
 800322e:	d002      	beq.n	8003236 <HAL_SPI_Transmit+0xea>
 8003230:	8afb      	ldrh	r3, [r7, #22]
 8003232:	2b01      	cmp	r3, #1
 8003234:	d13e      	bne.n	80032b4 <HAL_SPI_Transmit+0x168>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003236:	68fb      	ldr	r3, [r7, #12]
 8003238:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800323a:	881a      	ldrh	r2, [r3, #0]
 800323c:	68fb      	ldr	r3, [r7, #12]
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003242:	68fb      	ldr	r3, [r7, #12]
 8003244:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003246:	1c9a      	adds	r2, r3, #2
 8003248:	68fb      	ldr	r3, [r7, #12]
 800324a:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 800324c:	68fb      	ldr	r3, [r7, #12]
 800324e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003250:	b29b      	uxth	r3, r3
 8003252:	3b01      	subs	r3, #1
 8003254:	b29a      	uxth	r2, r3
 8003256:	68fb      	ldr	r3, [r7, #12]
 8003258:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800325a:	e02b      	b.n	80032b4 <HAL_SPI_Transmit+0x168>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800325c:	68fb      	ldr	r3, [r7, #12]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	689b      	ldr	r3, [r3, #8]
 8003262:	f003 0302 	and.w	r3, r3, #2
 8003266:	2b02      	cmp	r3, #2
 8003268:	d112      	bne.n	8003290 <HAL_SPI_Transmit+0x144>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800326a:	68fb      	ldr	r3, [r7, #12]
 800326c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800326e:	881a      	ldrh	r2, [r3, #0]
 8003270:	68fb      	ldr	r3, [r7, #12]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003276:	68fb      	ldr	r3, [r7, #12]
 8003278:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800327a:	1c9a      	adds	r2, r3, #2
 800327c:	68fb      	ldr	r3, [r7, #12]
 800327e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8003280:	68fb      	ldr	r3, [r7, #12]
 8003282:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003284:	b29b      	uxth	r3, r3
 8003286:	3b01      	subs	r3, #1
 8003288:	b29a      	uxth	r2, r3
 800328a:	68fb      	ldr	r3, [r7, #12]
 800328c:	87da      	strh	r2, [r3, #62]	; 0x3e
 800328e:	e011      	b.n	80032b4 <HAL_SPI_Transmit+0x168>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003290:	f7fe f810 	bl	80012b4 <HAL_GetTick>
 8003294:	4602      	mov	r2, r0
 8003296:	69bb      	ldr	r3, [r7, #24]
 8003298:	1ad3      	subs	r3, r2, r3
 800329a:	683a      	ldr	r2, [r7, #0]
 800329c:	429a      	cmp	r2, r3
 800329e:	d803      	bhi.n	80032a8 <HAL_SPI_Transmit+0x15c>
 80032a0:	683b      	ldr	r3, [r7, #0]
 80032a2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80032a6:	d102      	bne.n	80032ae <HAL_SPI_Transmit+0x162>
 80032a8:	683b      	ldr	r3, [r7, #0]
 80032aa:	2b00      	cmp	r3, #0
 80032ac:	d102      	bne.n	80032b4 <HAL_SPI_Transmit+0x168>
        {
          errorcode = HAL_TIMEOUT;
 80032ae:	2303      	movs	r3, #3
 80032b0:	77fb      	strb	r3, [r7, #31]
          goto error;
 80032b2:	e0a4      	b.n	80033fe <HAL_SPI_Transmit+0x2b2>
    while (hspi->TxXferCount > 0U)
 80032b4:	68fb      	ldr	r3, [r7, #12]
 80032b6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80032b8:	b29b      	uxth	r3, r3
 80032ba:	2b00      	cmp	r3, #0
 80032bc:	d1ce      	bne.n	800325c <HAL_SPI_Transmit+0x110>
 80032be:	e07c      	b.n	80033ba <HAL_SPI_Transmit+0x26e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80032c0:	68fb      	ldr	r3, [r7, #12]
 80032c2:	685b      	ldr	r3, [r3, #4]
 80032c4:	2b00      	cmp	r3, #0
 80032c6:	d002      	beq.n	80032ce <HAL_SPI_Transmit+0x182>
 80032c8:	8afb      	ldrh	r3, [r7, #22]
 80032ca:	2b01      	cmp	r3, #1
 80032cc:	d170      	bne.n	80033b0 <HAL_SPI_Transmit+0x264>
    {
      if (hspi->TxXferCount > 1U)
 80032ce:	68fb      	ldr	r3, [r7, #12]
 80032d0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80032d2:	b29b      	uxth	r3, r3
 80032d4:	2b01      	cmp	r3, #1
 80032d6:	d912      	bls.n	80032fe <HAL_SPI_Transmit+0x1b2>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80032d8:	68fb      	ldr	r3, [r7, #12]
 80032da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80032dc:	881a      	ldrh	r2, [r3, #0]
 80032de:	68fb      	ldr	r3, [r7, #12]
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80032e4:	68fb      	ldr	r3, [r7, #12]
 80032e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80032e8:	1c9a      	adds	r2, r3, #2
 80032ea:	68fb      	ldr	r3, [r7, #12]
 80032ec:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 80032ee:	68fb      	ldr	r3, [r7, #12]
 80032f0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80032f2:	b29b      	uxth	r3, r3
 80032f4:	3b02      	subs	r3, #2
 80032f6:	b29a      	uxth	r2, r3
 80032f8:	68fb      	ldr	r3, [r7, #12]
 80032fa:	87da      	strh	r2, [r3, #62]	; 0x3e
 80032fc:	e058      	b.n	80033b0 <HAL_SPI_Transmit+0x264>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80032fe:	68fb      	ldr	r3, [r7, #12]
 8003300:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003302:	68fb      	ldr	r3, [r7, #12]
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	330c      	adds	r3, #12
 8003308:	7812      	ldrb	r2, [r2, #0]
 800330a:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 800330c:	68fb      	ldr	r3, [r7, #12]
 800330e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003310:	1c5a      	adds	r2, r3, #1
 8003312:	68fb      	ldr	r3, [r7, #12]
 8003314:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8003316:	68fb      	ldr	r3, [r7, #12]
 8003318:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800331a:	b29b      	uxth	r3, r3
 800331c:	3b01      	subs	r3, #1
 800331e:	b29a      	uxth	r2, r3
 8003320:	68fb      	ldr	r3, [r7, #12]
 8003322:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8003324:	e044      	b.n	80033b0 <HAL_SPI_Transmit+0x264>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003326:	68fb      	ldr	r3, [r7, #12]
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	689b      	ldr	r3, [r3, #8]
 800332c:	f003 0302 	and.w	r3, r3, #2
 8003330:	2b02      	cmp	r3, #2
 8003332:	d12b      	bne.n	800338c <HAL_SPI_Transmit+0x240>
      {
        if (hspi->TxXferCount > 1U)
 8003334:	68fb      	ldr	r3, [r7, #12]
 8003336:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003338:	b29b      	uxth	r3, r3
 800333a:	2b01      	cmp	r3, #1
 800333c:	d912      	bls.n	8003364 <HAL_SPI_Transmit+0x218>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800333e:	68fb      	ldr	r3, [r7, #12]
 8003340:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003342:	881a      	ldrh	r2, [r3, #0]
 8003344:	68fb      	ldr	r3, [r7, #12]
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800334a:	68fb      	ldr	r3, [r7, #12]
 800334c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800334e:	1c9a      	adds	r2, r3, #2
 8003350:	68fb      	ldr	r3, [r7, #12]
 8003352:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8003354:	68fb      	ldr	r3, [r7, #12]
 8003356:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003358:	b29b      	uxth	r3, r3
 800335a:	3b02      	subs	r3, #2
 800335c:	b29a      	uxth	r2, r3
 800335e:	68fb      	ldr	r3, [r7, #12]
 8003360:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003362:	e025      	b.n	80033b0 <HAL_SPI_Transmit+0x264>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003364:	68fb      	ldr	r3, [r7, #12]
 8003366:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003368:	68fb      	ldr	r3, [r7, #12]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	330c      	adds	r3, #12
 800336e:	7812      	ldrb	r2, [r2, #0]
 8003370:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8003372:	68fb      	ldr	r3, [r7, #12]
 8003374:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003376:	1c5a      	adds	r2, r3, #1
 8003378:	68fb      	ldr	r3, [r7, #12]
 800337a:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 800337c:	68fb      	ldr	r3, [r7, #12]
 800337e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003380:	b29b      	uxth	r3, r3
 8003382:	3b01      	subs	r3, #1
 8003384:	b29a      	uxth	r2, r3
 8003386:	68fb      	ldr	r3, [r7, #12]
 8003388:	87da      	strh	r2, [r3, #62]	; 0x3e
 800338a:	e011      	b.n	80033b0 <HAL_SPI_Transmit+0x264>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800338c:	f7fd ff92 	bl	80012b4 <HAL_GetTick>
 8003390:	4602      	mov	r2, r0
 8003392:	69bb      	ldr	r3, [r7, #24]
 8003394:	1ad3      	subs	r3, r2, r3
 8003396:	683a      	ldr	r2, [r7, #0]
 8003398:	429a      	cmp	r2, r3
 800339a:	d803      	bhi.n	80033a4 <HAL_SPI_Transmit+0x258>
 800339c:	683b      	ldr	r3, [r7, #0]
 800339e:	f1b3 3fff 	cmp.w	r3, #4294967295
 80033a2:	d102      	bne.n	80033aa <HAL_SPI_Transmit+0x25e>
 80033a4:	683b      	ldr	r3, [r7, #0]
 80033a6:	2b00      	cmp	r3, #0
 80033a8:	d102      	bne.n	80033b0 <HAL_SPI_Transmit+0x264>
        {
          errorcode = HAL_TIMEOUT;
 80033aa:	2303      	movs	r3, #3
 80033ac:	77fb      	strb	r3, [r7, #31]
          goto error;
 80033ae:	e026      	b.n	80033fe <HAL_SPI_Transmit+0x2b2>
    while (hspi->TxXferCount > 0U)
 80033b0:	68fb      	ldr	r3, [r7, #12]
 80033b2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80033b4:	b29b      	uxth	r3, r3
 80033b6:	2b00      	cmp	r3, #0
 80033b8:	d1b5      	bne.n	8003326 <HAL_SPI_Transmit+0x1da>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80033ba:	69ba      	ldr	r2, [r7, #24]
 80033bc:	6839      	ldr	r1, [r7, #0]
 80033be:	68f8      	ldr	r0, [r7, #12]
 80033c0:	f000 f901 	bl	80035c6 <SPI_EndRxTxTransaction>
 80033c4:	4603      	mov	r3, r0
 80033c6:	2b00      	cmp	r3, #0
 80033c8:	d002      	beq.n	80033d0 <HAL_SPI_Transmit+0x284>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80033ca:	68fb      	ldr	r3, [r7, #12]
 80033cc:	2220      	movs	r2, #32
 80033ce:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80033d0:	68fb      	ldr	r3, [r7, #12]
 80033d2:	689b      	ldr	r3, [r3, #8]
 80033d4:	2b00      	cmp	r3, #0
 80033d6:	d10a      	bne.n	80033ee <HAL_SPI_Transmit+0x2a2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80033d8:	2300      	movs	r3, #0
 80033da:	613b      	str	r3, [r7, #16]
 80033dc:	68fb      	ldr	r3, [r7, #12]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	68db      	ldr	r3, [r3, #12]
 80033e2:	613b      	str	r3, [r7, #16]
 80033e4:	68fb      	ldr	r3, [r7, #12]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	689b      	ldr	r3, [r3, #8]
 80033ea:	613b      	str	r3, [r7, #16]
 80033ec:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80033ee:	68fb      	ldr	r3, [r7, #12]
 80033f0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80033f2:	2b00      	cmp	r3, #0
 80033f4:	d002      	beq.n	80033fc <HAL_SPI_Transmit+0x2b0>
  {
    errorcode = HAL_ERROR;
 80033f6:	2301      	movs	r3, #1
 80033f8:	77fb      	strb	r3, [r7, #31]
 80033fa:	e000      	b.n	80033fe <HAL_SPI_Transmit+0x2b2>
  }

error:
 80033fc:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80033fe:	68fb      	ldr	r3, [r7, #12]
 8003400:	2201      	movs	r2, #1
 8003402:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8003406:	68fb      	ldr	r3, [r7, #12]
 8003408:	2200      	movs	r2, #0
 800340a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 800340e:	7ffb      	ldrb	r3, [r7, #31]
}
 8003410:	4618      	mov	r0, r3
 8003412:	3720      	adds	r7, #32
 8003414:	46bd      	mov	sp, r7
 8003416:	bd80      	pop	{r7, pc}

08003418 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003418:	b580      	push	{r7, lr}
 800341a:	b084      	sub	sp, #16
 800341c:	af00      	add	r7, sp, #0
 800341e:	60f8      	str	r0, [r7, #12]
 8003420:	60b9      	str	r1, [r7, #8]
 8003422:	603b      	str	r3, [r7, #0]
 8003424:	4613      	mov	r3, r2
 8003426:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003428:	e04c      	b.n	80034c4 <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 800342a:	683b      	ldr	r3, [r7, #0]
 800342c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003430:	d048      	beq.n	80034c4 <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 8003432:	f7fd ff3f 	bl	80012b4 <HAL_GetTick>
 8003436:	4602      	mov	r2, r0
 8003438:	69bb      	ldr	r3, [r7, #24]
 800343a:	1ad3      	subs	r3, r2, r3
 800343c:	683a      	ldr	r2, [r7, #0]
 800343e:	429a      	cmp	r2, r3
 8003440:	d902      	bls.n	8003448 <SPI_WaitFlagStateUntilTimeout+0x30>
 8003442:	683b      	ldr	r3, [r7, #0]
 8003444:	2b00      	cmp	r3, #0
 8003446:	d13d      	bne.n	80034c4 <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003448:	68fb      	ldr	r3, [r7, #12]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	685a      	ldr	r2, [r3, #4]
 800344e:	68fb      	ldr	r3, [r7, #12]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8003456:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003458:	68fb      	ldr	r3, [r7, #12]
 800345a:	685b      	ldr	r3, [r3, #4]
 800345c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003460:	d111      	bne.n	8003486 <SPI_WaitFlagStateUntilTimeout+0x6e>
 8003462:	68fb      	ldr	r3, [r7, #12]
 8003464:	689b      	ldr	r3, [r3, #8]
 8003466:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800346a:	d004      	beq.n	8003476 <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800346c:	68fb      	ldr	r3, [r7, #12]
 800346e:	689b      	ldr	r3, [r3, #8]
 8003470:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003474:	d107      	bne.n	8003486 <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003476:	68fb      	ldr	r3, [r7, #12]
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	681a      	ldr	r2, [r3, #0]
 800347c:	68fb      	ldr	r3, [r7, #12]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003484:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003486:	68fb      	ldr	r3, [r7, #12]
 8003488:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800348a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800348e:	d10f      	bne.n	80034b0 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 8003490:	68fb      	ldr	r3, [r7, #12]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	681a      	ldr	r2, [r3, #0]
 8003496:	68fb      	ldr	r3, [r7, #12]
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800349e:	601a      	str	r2, [r3, #0]
 80034a0:	68fb      	ldr	r3, [r7, #12]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	681a      	ldr	r2, [r3, #0]
 80034a6:	68fb      	ldr	r3, [r7, #12]
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80034ae:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80034b0:	68fb      	ldr	r3, [r7, #12]
 80034b2:	2201      	movs	r2, #1
 80034b4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80034b8:	68fb      	ldr	r3, [r7, #12]
 80034ba:	2200      	movs	r2, #0
 80034bc:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 80034c0:	2303      	movs	r3, #3
 80034c2:	e00f      	b.n	80034e4 <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80034c4:	68fb      	ldr	r3, [r7, #12]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	689a      	ldr	r2, [r3, #8]
 80034ca:	68bb      	ldr	r3, [r7, #8]
 80034cc:	4013      	ands	r3, r2
 80034ce:	68ba      	ldr	r2, [r7, #8]
 80034d0:	429a      	cmp	r2, r3
 80034d2:	bf0c      	ite	eq
 80034d4:	2301      	moveq	r3, #1
 80034d6:	2300      	movne	r3, #0
 80034d8:	b2db      	uxtb	r3, r3
 80034da:	461a      	mov	r2, r3
 80034dc:	79fb      	ldrb	r3, [r7, #7]
 80034de:	429a      	cmp	r2, r3
 80034e0:	d1a3      	bne.n	800342a <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 80034e2:	2300      	movs	r3, #0
}
 80034e4:	4618      	mov	r0, r3
 80034e6:	3710      	adds	r7, #16
 80034e8:	46bd      	mov	sp, r7
 80034ea:	bd80      	pop	{r7, pc}

080034ec <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80034ec:	b580      	push	{r7, lr}
 80034ee:	b084      	sub	sp, #16
 80034f0:	af00      	add	r7, sp, #0
 80034f2:	60f8      	str	r0, [r7, #12]
 80034f4:	60b9      	str	r1, [r7, #8]
 80034f6:	607a      	str	r2, [r7, #4]
 80034f8:	603b      	str	r3, [r7, #0]
  while ((hspi->Instance->SR & Fifo) != State)
 80034fa:	e057      	b.n	80035ac <SPI_WaitFifoStateUntilTimeout+0xc0>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 80034fc:	68bb      	ldr	r3, [r7, #8]
 80034fe:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8003502:	d106      	bne.n	8003512 <SPI_WaitFifoStateUntilTimeout+0x26>
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	2b00      	cmp	r3, #0
 8003508:	d103      	bne.n	8003512 <SPI_WaitFifoStateUntilTimeout+0x26>
    {
      /* Read 8bit CRC to flush Data Register */
      READ_REG(*((__IO uint8_t *)&hspi->Instance->DR));
 800350a:	68fb      	ldr	r3, [r7, #12]
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	330c      	adds	r3, #12
 8003510:	781b      	ldrb	r3, [r3, #0]
    }

    if (Timeout != HAL_MAX_DELAY)
 8003512:	683b      	ldr	r3, [r7, #0]
 8003514:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003518:	d048      	beq.n	80035ac <SPI_WaitFifoStateUntilTimeout+0xc0>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 800351a:	f7fd fecb 	bl	80012b4 <HAL_GetTick>
 800351e:	4602      	mov	r2, r0
 8003520:	69bb      	ldr	r3, [r7, #24]
 8003522:	1ad3      	subs	r3, r2, r3
 8003524:	683a      	ldr	r2, [r7, #0]
 8003526:	429a      	cmp	r2, r3
 8003528:	d902      	bls.n	8003530 <SPI_WaitFifoStateUntilTimeout+0x44>
 800352a:	683b      	ldr	r3, [r7, #0]
 800352c:	2b00      	cmp	r3, #0
 800352e:	d13d      	bne.n	80035ac <SPI_WaitFifoStateUntilTimeout+0xc0>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003530:	68fb      	ldr	r3, [r7, #12]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	685a      	ldr	r2, [r3, #4]
 8003536:	68fb      	ldr	r3, [r7, #12]
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800353e:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003540:	68fb      	ldr	r3, [r7, #12]
 8003542:	685b      	ldr	r3, [r3, #4]
 8003544:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003548:	d111      	bne.n	800356e <SPI_WaitFifoStateUntilTimeout+0x82>
 800354a:	68fb      	ldr	r3, [r7, #12]
 800354c:	689b      	ldr	r3, [r3, #8]
 800354e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003552:	d004      	beq.n	800355e <SPI_WaitFifoStateUntilTimeout+0x72>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003554:	68fb      	ldr	r3, [r7, #12]
 8003556:	689b      	ldr	r3, [r3, #8]
 8003558:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800355c:	d107      	bne.n	800356e <SPI_WaitFifoStateUntilTimeout+0x82>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800355e:	68fb      	ldr	r3, [r7, #12]
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	681a      	ldr	r2, [r3, #0]
 8003564:	68fb      	ldr	r3, [r7, #12]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800356c:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800356e:	68fb      	ldr	r3, [r7, #12]
 8003570:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003572:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003576:	d10f      	bne.n	8003598 <SPI_WaitFifoStateUntilTimeout+0xac>
        {
          SPI_RESET_CRC(hspi);
 8003578:	68fb      	ldr	r3, [r7, #12]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	681a      	ldr	r2, [r3, #0]
 800357e:	68fb      	ldr	r3, [r7, #12]
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003586:	601a      	str	r2, [r3, #0]
 8003588:	68fb      	ldr	r3, [r7, #12]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	681a      	ldr	r2, [r3, #0]
 800358e:	68fb      	ldr	r3, [r7, #12]
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003596:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003598:	68fb      	ldr	r3, [r7, #12]
 800359a:	2201      	movs	r2, #1
 800359c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80035a0:	68fb      	ldr	r3, [r7, #12]
 80035a2:	2200      	movs	r2, #0
 80035a4:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 80035a8:	2303      	movs	r3, #3
 80035aa:	e008      	b.n	80035be <SPI_WaitFifoStateUntilTimeout+0xd2>
  while ((hspi->Instance->SR & Fifo) != State)
 80035ac:	68fb      	ldr	r3, [r7, #12]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	689a      	ldr	r2, [r3, #8]
 80035b2:	68bb      	ldr	r3, [r7, #8]
 80035b4:	4013      	ands	r3, r2
 80035b6:	687a      	ldr	r2, [r7, #4]
 80035b8:	429a      	cmp	r2, r3
 80035ba:	d19f      	bne.n	80034fc <SPI_WaitFifoStateUntilTimeout+0x10>
      }
    }
  }

  return HAL_OK;
 80035bc:	2300      	movs	r3, #0
}
 80035be:	4618      	mov	r0, r3
 80035c0:	3710      	adds	r7, #16
 80035c2:	46bd      	mov	sp, r7
 80035c4:	bd80      	pop	{r7, pc}

080035c6 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80035c6:	b580      	push	{r7, lr}
 80035c8:	b086      	sub	sp, #24
 80035ca:	af02      	add	r7, sp, #8
 80035cc:	60f8      	str	r0, [r7, #12]
 80035ce:	60b9      	str	r1, [r7, #8]
 80035d0:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	9300      	str	r3, [sp, #0]
 80035d6:	68bb      	ldr	r3, [r7, #8]
 80035d8:	2200      	movs	r2, #0
 80035da:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 80035de:	68f8      	ldr	r0, [r7, #12]
 80035e0:	f7ff ff84 	bl	80034ec <SPI_WaitFifoStateUntilTimeout>
 80035e4:	4603      	mov	r3, r0
 80035e6:	2b00      	cmp	r3, #0
 80035e8:	d007      	beq.n	80035fa <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80035ea:	68fb      	ldr	r3, [r7, #12]
 80035ec:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80035ee:	f043 0220 	orr.w	r2, r3, #32
 80035f2:	68fb      	ldr	r3, [r7, #12]
 80035f4:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80035f6:	2303      	movs	r3, #3
 80035f8:	e027      	b.n	800364a <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	9300      	str	r3, [sp, #0]
 80035fe:	68bb      	ldr	r3, [r7, #8]
 8003600:	2200      	movs	r2, #0
 8003602:	2180      	movs	r1, #128	; 0x80
 8003604:	68f8      	ldr	r0, [r7, #12]
 8003606:	f7ff ff07 	bl	8003418 <SPI_WaitFlagStateUntilTimeout>
 800360a:	4603      	mov	r3, r0
 800360c:	2b00      	cmp	r3, #0
 800360e:	d007      	beq.n	8003620 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003610:	68fb      	ldr	r3, [r7, #12]
 8003612:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003614:	f043 0220 	orr.w	r2, r3, #32
 8003618:	68fb      	ldr	r3, [r7, #12]
 800361a:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800361c:	2303      	movs	r3, #3
 800361e:	e014      	b.n	800364a <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	9300      	str	r3, [sp, #0]
 8003624:	68bb      	ldr	r3, [r7, #8]
 8003626:	2200      	movs	r2, #0
 8003628:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 800362c:	68f8      	ldr	r0, [r7, #12]
 800362e:	f7ff ff5d 	bl	80034ec <SPI_WaitFifoStateUntilTimeout>
 8003632:	4603      	mov	r3, r0
 8003634:	2b00      	cmp	r3, #0
 8003636:	d007      	beq.n	8003648 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003638:	68fb      	ldr	r3, [r7, #12]
 800363a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800363c:	f043 0220 	orr.w	r2, r3, #32
 8003640:	68fb      	ldr	r3, [r7, #12]
 8003642:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8003644:	2303      	movs	r3, #3
 8003646:	e000      	b.n	800364a <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8003648:	2300      	movs	r3, #0
}
 800364a:	4618      	mov	r0, r3
 800364c:	3710      	adds	r7, #16
 800364e:	46bd      	mov	sp, r7
 8003650:	bd80      	pop	{r7, pc}

08003652 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003652:	b580      	push	{r7, lr}
 8003654:	b082      	sub	sp, #8
 8003656:	af00      	add	r7, sp, #0
 8003658:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	2b00      	cmp	r3, #0
 800365e:	d101      	bne.n	8003664 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003660:	2301      	movs	r3, #1
 8003662:	e040      	b.n	80036e6 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003668:	2b00      	cmp	r3, #0
 800366a:	d106      	bne.n	800367a <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	2200      	movs	r2, #0
 8003670:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003674:	6878      	ldr	r0, [r7, #4]
 8003676:	f7fd fcc3 	bl	8001000 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	2224      	movs	r2, #36	; 0x24
 800367e:	675a      	str	r2, [r3, #116]	; 0x74

  __HAL_UART_DISABLE(huart);
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	681a      	ldr	r2, [r3, #0]
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	f022 0201 	bic.w	r2, r2, #1
 800368e:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003690:	6878      	ldr	r0, [r7, #4]
 8003692:	f000 f82d 	bl	80036f0 <UART_SetConfig>
 8003696:	4603      	mov	r3, r0
 8003698:	2b01      	cmp	r3, #1
 800369a:	d101      	bne.n	80036a0 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800369c:	2301      	movs	r3, #1
 800369e:	e022      	b.n	80036e6 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036a4:	2b00      	cmp	r3, #0
 80036a6:	d002      	beq.n	80036ae <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80036a8:	6878      	ldr	r0, [r7, #4]
 80036aa:	f000 fb69 	bl	8003d80 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	685a      	ldr	r2, [r3, #4]
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80036bc:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	689a      	ldr	r2, [r3, #8]
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80036cc:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	681a      	ldr	r2, [r3, #0]
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	f042 0201 	orr.w	r2, r2, #1
 80036dc:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80036de:	6878      	ldr	r0, [r7, #4]
 80036e0:	f000 fbf0 	bl	8003ec4 <UART_CheckIdleState>
 80036e4:	4603      	mov	r3, r0
}
 80036e6:	4618      	mov	r0, r3
 80036e8:	3708      	adds	r7, #8
 80036ea:	46bd      	mov	sp, r7
 80036ec:	bd80      	pop	{r7, pc}
	...

080036f0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80036f0:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 80036f4:	b088      	sub	sp, #32
 80036f6:	af00      	add	r7, sp, #0
 80036f8:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 80036fa:	2300      	movs	r3, #0
 80036fc:	617b      	str	r3, [r7, #20]
  HAL_StatusTypeDef ret               = HAL_OK;
 80036fe:	2300      	movs	r3, #0
 8003700:	74fb      	strb	r3, [r7, #19]
  uint32_t lpuart_ker_ck_pres         = 0x00000000U;
 8003702:	2300      	movs	r3, #0
 8003704:	60fb      	str	r3, [r7, #12]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	689a      	ldr	r2, [r3, #8]
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	691b      	ldr	r3, [r3, #16]
 800370e:	431a      	orrs	r2, r3
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	695b      	ldr	r3, [r3, #20]
 8003714:	431a      	orrs	r2, r3
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	69db      	ldr	r3, [r3, #28]
 800371a:	4313      	orrs	r3, r2
 800371c:	61fb      	str	r3, [r7, #28]
#if defined(USART_CR1_FIFOEN)
  tmpreg |= (uint32_t)huart->FifoMode;
#endif /* USART_CR1_FIFOEN */
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	681a      	ldr	r2, [r3, #0]
 8003724:	4bac      	ldr	r3, [pc, #688]	; (80039d8 <UART_SetConfig+0x2e8>)
 8003726:	4013      	ands	r3, r2
 8003728:	687a      	ldr	r2, [r7, #4]
 800372a:	6812      	ldr	r2, [r2, #0]
 800372c:	69f9      	ldr	r1, [r7, #28]
 800372e:	430b      	orrs	r3, r1
 8003730:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	685b      	ldr	r3, [r3, #4]
 8003738:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	68da      	ldr	r2, [r3, #12]
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	430a      	orrs	r2, r1
 8003746:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	699b      	ldr	r3, [r3, #24]
 800374c:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	4aa2      	ldr	r2, [pc, #648]	; (80039dc <UART_SetConfig+0x2ec>)
 8003754:	4293      	cmp	r3, r2
 8003756:	d004      	beq.n	8003762 <UART_SetConfig+0x72>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	6a1b      	ldr	r3, [r3, #32]
 800375c:	69fa      	ldr	r2, [r7, #28]
 800375e:	4313      	orrs	r3, r2
 8003760:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	689b      	ldr	r3, [r3, #8]
 8003768:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	69fa      	ldr	r2, [r7, #28]
 8003772:	430a      	orrs	r2, r1
 8003774:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	4a99      	ldr	r2, [pc, #612]	; (80039e0 <UART_SetConfig+0x2f0>)
 800377c:	4293      	cmp	r3, r2
 800377e:	d121      	bne.n	80037c4 <UART_SetConfig+0xd4>
 8003780:	4b98      	ldr	r3, [pc, #608]	; (80039e4 <UART_SetConfig+0x2f4>)
 8003782:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003786:	f003 0303 	and.w	r3, r3, #3
 800378a:	2b03      	cmp	r3, #3
 800378c:	d816      	bhi.n	80037bc <UART_SetConfig+0xcc>
 800378e:	a201      	add	r2, pc, #4	; (adr r2, 8003794 <UART_SetConfig+0xa4>)
 8003790:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003794:	080037a5 	.word	0x080037a5
 8003798:	080037b1 	.word	0x080037b1
 800379c:	080037ab 	.word	0x080037ab
 80037a0:	080037b7 	.word	0x080037b7
 80037a4:	2301      	movs	r3, #1
 80037a6:	76fb      	strb	r3, [r7, #27]
 80037a8:	e0e8      	b.n	800397c <UART_SetConfig+0x28c>
 80037aa:	2302      	movs	r3, #2
 80037ac:	76fb      	strb	r3, [r7, #27]
 80037ae:	e0e5      	b.n	800397c <UART_SetConfig+0x28c>
 80037b0:	2304      	movs	r3, #4
 80037b2:	76fb      	strb	r3, [r7, #27]
 80037b4:	e0e2      	b.n	800397c <UART_SetConfig+0x28c>
 80037b6:	2308      	movs	r3, #8
 80037b8:	76fb      	strb	r3, [r7, #27]
 80037ba:	e0df      	b.n	800397c <UART_SetConfig+0x28c>
 80037bc:	2310      	movs	r3, #16
 80037be:	76fb      	strb	r3, [r7, #27]
 80037c0:	bf00      	nop
 80037c2:	e0db      	b.n	800397c <UART_SetConfig+0x28c>
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	4a87      	ldr	r2, [pc, #540]	; (80039e8 <UART_SetConfig+0x2f8>)
 80037ca:	4293      	cmp	r3, r2
 80037cc:	d134      	bne.n	8003838 <UART_SetConfig+0x148>
 80037ce:	4b85      	ldr	r3, [pc, #532]	; (80039e4 <UART_SetConfig+0x2f4>)
 80037d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80037d4:	f003 030c 	and.w	r3, r3, #12
 80037d8:	2b0c      	cmp	r3, #12
 80037da:	d829      	bhi.n	8003830 <UART_SetConfig+0x140>
 80037dc:	a201      	add	r2, pc, #4	; (adr r2, 80037e4 <UART_SetConfig+0xf4>)
 80037de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80037e2:	bf00      	nop
 80037e4:	08003819 	.word	0x08003819
 80037e8:	08003831 	.word	0x08003831
 80037ec:	08003831 	.word	0x08003831
 80037f0:	08003831 	.word	0x08003831
 80037f4:	08003825 	.word	0x08003825
 80037f8:	08003831 	.word	0x08003831
 80037fc:	08003831 	.word	0x08003831
 8003800:	08003831 	.word	0x08003831
 8003804:	0800381f 	.word	0x0800381f
 8003808:	08003831 	.word	0x08003831
 800380c:	08003831 	.word	0x08003831
 8003810:	08003831 	.word	0x08003831
 8003814:	0800382b 	.word	0x0800382b
 8003818:	2300      	movs	r3, #0
 800381a:	76fb      	strb	r3, [r7, #27]
 800381c:	e0ae      	b.n	800397c <UART_SetConfig+0x28c>
 800381e:	2302      	movs	r3, #2
 8003820:	76fb      	strb	r3, [r7, #27]
 8003822:	e0ab      	b.n	800397c <UART_SetConfig+0x28c>
 8003824:	2304      	movs	r3, #4
 8003826:	76fb      	strb	r3, [r7, #27]
 8003828:	e0a8      	b.n	800397c <UART_SetConfig+0x28c>
 800382a:	2308      	movs	r3, #8
 800382c:	76fb      	strb	r3, [r7, #27]
 800382e:	e0a5      	b.n	800397c <UART_SetConfig+0x28c>
 8003830:	2310      	movs	r3, #16
 8003832:	76fb      	strb	r3, [r7, #27]
 8003834:	bf00      	nop
 8003836:	e0a1      	b.n	800397c <UART_SetConfig+0x28c>
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	4a6b      	ldr	r2, [pc, #428]	; (80039ec <UART_SetConfig+0x2fc>)
 800383e:	4293      	cmp	r3, r2
 8003840:	d120      	bne.n	8003884 <UART_SetConfig+0x194>
 8003842:	4b68      	ldr	r3, [pc, #416]	; (80039e4 <UART_SetConfig+0x2f4>)
 8003844:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003848:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800384c:	2b10      	cmp	r3, #16
 800384e:	d00f      	beq.n	8003870 <UART_SetConfig+0x180>
 8003850:	2b10      	cmp	r3, #16
 8003852:	d802      	bhi.n	800385a <UART_SetConfig+0x16a>
 8003854:	2b00      	cmp	r3, #0
 8003856:	d005      	beq.n	8003864 <UART_SetConfig+0x174>
 8003858:	e010      	b.n	800387c <UART_SetConfig+0x18c>
 800385a:	2b20      	cmp	r3, #32
 800385c:	d005      	beq.n	800386a <UART_SetConfig+0x17a>
 800385e:	2b30      	cmp	r3, #48	; 0x30
 8003860:	d009      	beq.n	8003876 <UART_SetConfig+0x186>
 8003862:	e00b      	b.n	800387c <UART_SetConfig+0x18c>
 8003864:	2300      	movs	r3, #0
 8003866:	76fb      	strb	r3, [r7, #27]
 8003868:	e088      	b.n	800397c <UART_SetConfig+0x28c>
 800386a:	2302      	movs	r3, #2
 800386c:	76fb      	strb	r3, [r7, #27]
 800386e:	e085      	b.n	800397c <UART_SetConfig+0x28c>
 8003870:	2304      	movs	r3, #4
 8003872:	76fb      	strb	r3, [r7, #27]
 8003874:	e082      	b.n	800397c <UART_SetConfig+0x28c>
 8003876:	2308      	movs	r3, #8
 8003878:	76fb      	strb	r3, [r7, #27]
 800387a:	e07f      	b.n	800397c <UART_SetConfig+0x28c>
 800387c:	2310      	movs	r3, #16
 800387e:	76fb      	strb	r3, [r7, #27]
 8003880:	bf00      	nop
 8003882:	e07b      	b.n	800397c <UART_SetConfig+0x28c>
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	4a59      	ldr	r2, [pc, #356]	; (80039f0 <UART_SetConfig+0x300>)
 800388a:	4293      	cmp	r3, r2
 800388c:	d120      	bne.n	80038d0 <UART_SetConfig+0x1e0>
 800388e:	4b55      	ldr	r3, [pc, #340]	; (80039e4 <UART_SetConfig+0x2f4>)
 8003890:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003894:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8003898:	2b40      	cmp	r3, #64	; 0x40
 800389a:	d00f      	beq.n	80038bc <UART_SetConfig+0x1cc>
 800389c:	2b40      	cmp	r3, #64	; 0x40
 800389e:	d802      	bhi.n	80038a6 <UART_SetConfig+0x1b6>
 80038a0:	2b00      	cmp	r3, #0
 80038a2:	d005      	beq.n	80038b0 <UART_SetConfig+0x1c0>
 80038a4:	e010      	b.n	80038c8 <UART_SetConfig+0x1d8>
 80038a6:	2b80      	cmp	r3, #128	; 0x80
 80038a8:	d005      	beq.n	80038b6 <UART_SetConfig+0x1c6>
 80038aa:	2bc0      	cmp	r3, #192	; 0xc0
 80038ac:	d009      	beq.n	80038c2 <UART_SetConfig+0x1d2>
 80038ae:	e00b      	b.n	80038c8 <UART_SetConfig+0x1d8>
 80038b0:	2300      	movs	r3, #0
 80038b2:	76fb      	strb	r3, [r7, #27]
 80038b4:	e062      	b.n	800397c <UART_SetConfig+0x28c>
 80038b6:	2302      	movs	r3, #2
 80038b8:	76fb      	strb	r3, [r7, #27]
 80038ba:	e05f      	b.n	800397c <UART_SetConfig+0x28c>
 80038bc:	2304      	movs	r3, #4
 80038be:	76fb      	strb	r3, [r7, #27]
 80038c0:	e05c      	b.n	800397c <UART_SetConfig+0x28c>
 80038c2:	2308      	movs	r3, #8
 80038c4:	76fb      	strb	r3, [r7, #27]
 80038c6:	e059      	b.n	800397c <UART_SetConfig+0x28c>
 80038c8:	2310      	movs	r3, #16
 80038ca:	76fb      	strb	r3, [r7, #27]
 80038cc:	bf00      	nop
 80038ce:	e055      	b.n	800397c <UART_SetConfig+0x28c>
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	4a47      	ldr	r2, [pc, #284]	; (80039f4 <UART_SetConfig+0x304>)
 80038d6:	4293      	cmp	r3, r2
 80038d8:	d124      	bne.n	8003924 <UART_SetConfig+0x234>
 80038da:	4b42      	ldr	r3, [pc, #264]	; (80039e4 <UART_SetConfig+0x2f4>)
 80038dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80038e0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80038e4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80038e8:	d012      	beq.n	8003910 <UART_SetConfig+0x220>
 80038ea:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80038ee:	d802      	bhi.n	80038f6 <UART_SetConfig+0x206>
 80038f0:	2b00      	cmp	r3, #0
 80038f2:	d007      	beq.n	8003904 <UART_SetConfig+0x214>
 80038f4:	e012      	b.n	800391c <UART_SetConfig+0x22c>
 80038f6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80038fa:	d006      	beq.n	800390a <UART_SetConfig+0x21a>
 80038fc:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003900:	d009      	beq.n	8003916 <UART_SetConfig+0x226>
 8003902:	e00b      	b.n	800391c <UART_SetConfig+0x22c>
 8003904:	2300      	movs	r3, #0
 8003906:	76fb      	strb	r3, [r7, #27]
 8003908:	e038      	b.n	800397c <UART_SetConfig+0x28c>
 800390a:	2302      	movs	r3, #2
 800390c:	76fb      	strb	r3, [r7, #27]
 800390e:	e035      	b.n	800397c <UART_SetConfig+0x28c>
 8003910:	2304      	movs	r3, #4
 8003912:	76fb      	strb	r3, [r7, #27]
 8003914:	e032      	b.n	800397c <UART_SetConfig+0x28c>
 8003916:	2308      	movs	r3, #8
 8003918:	76fb      	strb	r3, [r7, #27]
 800391a:	e02f      	b.n	800397c <UART_SetConfig+0x28c>
 800391c:	2310      	movs	r3, #16
 800391e:	76fb      	strb	r3, [r7, #27]
 8003920:	bf00      	nop
 8003922:	e02b      	b.n	800397c <UART_SetConfig+0x28c>
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	4a2c      	ldr	r2, [pc, #176]	; (80039dc <UART_SetConfig+0x2ec>)
 800392a:	4293      	cmp	r3, r2
 800392c:	d124      	bne.n	8003978 <UART_SetConfig+0x288>
 800392e:	4b2d      	ldr	r3, [pc, #180]	; (80039e4 <UART_SetConfig+0x2f4>)
 8003930:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003934:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8003938:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800393c:	d012      	beq.n	8003964 <UART_SetConfig+0x274>
 800393e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003942:	d802      	bhi.n	800394a <UART_SetConfig+0x25a>
 8003944:	2b00      	cmp	r3, #0
 8003946:	d007      	beq.n	8003958 <UART_SetConfig+0x268>
 8003948:	e012      	b.n	8003970 <UART_SetConfig+0x280>
 800394a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800394e:	d006      	beq.n	800395e <UART_SetConfig+0x26e>
 8003950:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003954:	d009      	beq.n	800396a <UART_SetConfig+0x27a>
 8003956:	e00b      	b.n	8003970 <UART_SetConfig+0x280>
 8003958:	2300      	movs	r3, #0
 800395a:	76fb      	strb	r3, [r7, #27]
 800395c:	e00e      	b.n	800397c <UART_SetConfig+0x28c>
 800395e:	2302      	movs	r3, #2
 8003960:	76fb      	strb	r3, [r7, #27]
 8003962:	e00b      	b.n	800397c <UART_SetConfig+0x28c>
 8003964:	2304      	movs	r3, #4
 8003966:	76fb      	strb	r3, [r7, #27]
 8003968:	e008      	b.n	800397c <UART_SetConfig+0x28c>
 800396a:	2308      	movs	r3, #8
 800396c:	76fb      	strb	r3, [r7, #27]
 800396e:	e005      	b.n	800397c <UART_SetConfig+0x28c>
 8003970:	2310      	movs	r3, #16
 8003972:	76fb      	strb	r3, [r7, #27]
 8003974:	bf00      	nop
 8003976:	e001      	b.n	800397c <UART_SetConfig+0x28c>
 8003978:	2310      	movs	r3, #16
 800397a:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	4a16      	ldr	r2, [pc, #88]	; (80039dc <UART_SetConfig+0x2ec>)
 8003982:	4293      	cmp	r3, r2
 8003984:	f040 80fa 	bne.w	8003b7c <UART_SetConfig+0x48c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8003988:	7efb      	ldrb	r3, [r7, #27]
 800398a:	2b08      	cmp	r3, #8
 800398c:	d836      	bhi.n	80039fc <UART_SetConfig+0x30c>
 800398e:	a201      	add	r2, pc, #4	; (adr r2, 8003994 <UART_SetConfig+0x2a4>)
 8003990:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003994:	080039b9 	.word	0x080039b9
 8003998:	080039fd 	.word	0x080039fd
 800399c:	080039c1 	.word	0x080039c1
 80039a0:	080039fd 	.word	0x080039fd
 80039a4:	080039c7 	.word	0x080039c7
 80039a8:	080039fd 	.word	0x080039fd
 80039ac:	080039fd 	.word	0x080039fd
 80039b0:	080039fd 	.word	0x080039fd
 80039b4:	080039cf 	.word	0x080039cf
    {
      case UART_CLOCKSOURCE_PCLK1:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = (HAL_RCC_GetPCLK1Freq() / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
#else
        lpuart_ker_ck_pres = HAL_RCC_GetPCLK1Freq();
 80039b8:	f7fe fe02 	bl	80025c0 <HAL_RCC_GetPCLK1Freq>
 80039bc:	60f8      	str	r0, [r7, #12]
#endif /* USART_PRESC_PRESCALER */
        break;
 80039be:	e020      	b.n	8003a02 <UART_SetConfig+0x312>
      case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = ((uint32_t)HSI_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
#else
        lpuart_ker_ck_pres = (uint32_t)HSI_VALUE;
 80039c0:	4b0d      	ldr	r3, [pc, #52]	; (80039f8 <UART_SetConfig+0x308>)
 80039c2:	60fb      	str	r3, [r7, #12]
#endif /* USART_PRESC_PRESCALER */
        break;
 80039c4:	e01d      	b.n	8003a02 <UART_SetConfig+0x312>
      case UART_CLOCKSOURCE_SYSCLK:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = (HAL_RCC_GetSysClockFreq() / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
#else
        lpuart_ker_ck_pres = HAL_RCC_GetSysClockFreq();
 80039c6:	f7fe fd65 	bl	8002494 <HAL_RCC_GetSysClockFreq>
 80039ca:	60f8      	str	r0, [r7, #12]
#endif /* USART_PRESC_PRESCALER */
        break;
 80039cc:	e019      	b.n	8003a02 <UART_SetConfig+0x312>
      case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = ((uint32_t)LSE_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
#else
        lpuart_ker_ck_pres = (uint32_t)LSE_VALUE;
 80039ce:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80039d2:	60fb      	str	r3, [r7, #12]
#endif /* USART_PRESC_PRESCALER */
        break;
 80039d4:	e015      	b.n	8003a02 <UART_SetConfig+0x312>
 80039d6:	bf00      	nop
 80039d8:	efff69f3 	.word	0xefff69f3
 80039dc:	40008000 	.word	0x40008000
 80039e0:	40013800 	.word	0x40013800
 80039e4:	40021000 	.word	0x40021000
 80039e8:	40004400 	.word	0x40004400
 80039ec:	40004800 	.word	0x40004800
 80039f0:	40004c00 	.word	0x40004c00
 80039f4:	40005000 	.word	0x40005000
 80039f8:	00f42400 	.word	0x00f42400
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 80039fc:	2301      	movs	r3, #1
 80039fe:	74fb      	strb	r3, [r7, #19]
        break;
 8003a00:	bf00      	nop
    }

    /* if proper clock source reported */
    if (lpuart_ker_ck_pres != 0U)
 8003a02:	68fb      	ldr	r3, [r7, #12]
 8003a04:	2b00      	cmp	r3, #0
 8003a06:	f000 81ac 	beq.w	8003d62 <UART_SetConfig+0x672>
    {
      /* ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	685a      	ldr	r2, [r3, #4]
 8003a0e:	4613      	mov	r3, r2
 8003a10:	005b      	lsls	r3, r3, #1
 8003a12:	4413      	add	r3, r2
 8003a14:	68fa      	ldr	r2, [r7, #12]
 8003a16:	429a      	cmp	r2, r3
 8003a18:	d305      	bcc.n	8003a26 <UART_SetConfig+0x336>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	685b      	ldr	r3, [r3, #4]
 8003a1e:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8003a20:	68fa      	ldr	r2, [r7, #12]
 8003a22:	429a      	cmp	r2, r3
 8003a24:	d902      	bls.n	8003a2c <UART_SetConfig+0x33c>
      {
        ret = HAL_ERROR;
 8003a26:	2301      	movs	r3, #1
 8003a28:	74fb      	strb	r3, [r7, #19]
 8003a2a:	e19a      	b.n	8003d62 <UART_SetConfig+0x672>
      }
      else
      {
        switch (clocksource)
 8003a2c:	7efb      	ldrb	r3, [r7, #27]
 8003a2e:	2b08      	cmp	r3, #8
 8003a30:	f200 8091 	bhi.w	8003b56 <UART_SetConfig+0x466>
 8003a34:	a201      	add	r2, pc, #4	; (adr r2, 8003a3c <UART_SetConfig+0x34c>)
 8003a36:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003a3a:	bf00      	nop
 8003a3c:	08003a61 	.word	0x08003a61
 8003a40:	08003b57 	.word	0x08003b57
 8003a44:	08003aad 	.word	0x08003aad
 8003a48:	08003b57 	.word	0x08003b57
 8003a4c:	08003ae1 	.word	0x08003ae1
 8003a50:	08003b57 	.word	0x08003b57
 8003a54:	08003b57 	.word	0x08003b57
 8003a58:	08003b57 	.word	0x08003b57
 8003a5c:	08003b2d 	.word	0x08003b2d
        {
          case UART_CLOCKSOURCE_PCLK1:
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8003a60:	f7fe fdae 	bl	80025c0 <HAL_RCC_GetPCLK1Freq>
 8003a64:	4603      	mov	r3, r0
 8003a66:	4619      	mov	r1, r3
 8003a68:	f04f 0200 	mov.w	r2, #0
 8003a6c:	f04f 0300 	mov.w	r3, #0
 8003a70:	f04f 0400 	mov.w	r4, #0
 8003a74:	0214      	lsls	r4, r2, #8
 8003a76:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 8003a7a:	020b      	lsls	r3, r1, #8
 8003a7c:	687a      	ldr	r2, [r7, #4]
 8003a7e:	6852      	ldr	r2, [r2, #4]
 8003a80:	0852      	lsrs	r2, r2, #1
 8003a82:	4611      	mov	r1, r2
 8003a84:	f04f 0200 	mov.w	r2, #0
 8003a88:	eb13 0b01 	adds.w	fp, r3, r1
 8003a8c:	eb44 0c02 	adc.w	ip, r4, r2
 8003a90:	4658      	mov	r0, fp
 8003a92:	4661      	mov	r1, ip
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	685b      	ldr	r3, [r3, #4]
 8003a98:	f04f 0400 	mov.w	r4, #0
 8003a9c:	461a      	mov	r2, r3
 8003a9e:	4623      	mov	r3, r4
 8003aa0:	f7fc fb9c 	bl	80001dc <__aeabi_uldivmod>
 8003aa4:	4603      	mov	r3, r0
 8003aa6:	460c      	mov	r4, r1
 8003aa8:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
            break;
 8003aaa:	e057      	b.n	8003b5c <UART_SetConfig+0x46c>
          case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate));
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	685b      	ldr	r3, [r3, #4]
 8003ab0:	085b      	lsrs	r3, r3, #1
 8003ab2:	f04f 0400 	mov.w	r4, #0
 8003ab6:	49b1      	ldr	r1, [pc, #708]	; (8003d7c <UART_SetConfig+0x68c>)
 8003ab8:	f04f 0200 	mov.w	r2, #0
 8003abc:	eb13 0b01 	adds.w	fp, r3, r1
 8003ac0:	eb44 0c02 	adc.w	ip, r4, r2
 8003ac4:	4658      	mov	r0, fp
 8003ac6:	4661      	mov	r1, ip
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	685b      	ldr	r3, [r3, #4]
 8003acc:	f04f 0400 	mov.w	r4, #0
 8003ad0:	461a      	mov	r2, r3
 8003ad2:	4623      	mov	r3, r4
 8003ad4:	f7fc fb82 	bl	80001dc <__aeabi_uldivmod>
 8003ad8:	4603      	mov	r3, r0
 8003ada:	460c      	mov	r4, r1
 8003adc:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
            break;
 8003ade:	e03d      	b.n	8003b5c <UART_SetConfig+0x46c>
          case UART_CLOCKSOURCE_SYSCLK:
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8003ae0:	f7fe fcd8 	bl	8002494 <HAL_RCC_GetSysClockFreq>
 8003ae4:	4603      	mov	r3, r0
 8003ae6:	4619      	mov	r1, r3
 8003ae8:	f04f 0200 	mov.w	r2, #0
 8003aec:	f04f 0300 	mov.w	r3, #0
 8003af0:	f04f 0400 	mov.w	r4, #0
 8003af4:	0214      	lsls	r4, r2, #8
 8003af6:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 8003afa:	020b      	lsls	r3, r1, #8
 8003afc:	687a      	ldr	r2, [r7, #4]
 8003afe:	6852      	ldr	r2, [r2, #4]
 8003b00:	0852      	lsrs	r2, r2, #1
 8003b02:	4611      	mov	r1, r2
 8003b04:	f04f 0200 	mov.w	r2, #0
 8003b08:	eb13 0b01 	adds.w	fp, r3, r1
 8003b0c:	eb44 0c02 	adc.w	ip, r4, r2
 8003b10:	4658      	mov	r0, fp
 8003b12:	4661      	mov	r1, ip
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	685b      	ldr	r3, [r3, #4]
 8003b18:	f04f 0400 	mov.w	r4, #0
 8003b1c:	461a      	mov	r2, r3
 8003b1e:	4623      	mov	r3, r4
 8003b20:	f7fc fb5c 	bl	80001dc <__aeabi_uldivmod>
 8003b24:	4603      	mov	r3, r0
 8003b26:	460c      	mov	r4, r1
 8003b28:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
            break;
 8003b2a:	e017      	b.n	8003b5c <UART_SetConfig+0x46c>
          case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate));
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	685b      	ldr	r3, [r3, #4]
 8003b30:	085b      	lsrs	r3, r3, #1
 8003b32:	f04f 0400 	mov.w	r4, #0
 8003b36:	f513 0000 	adds.w	r0, r3, #8388608	; 0x800000
 8003b3a:	f144 0100 	adc.w	r1, r4, #0
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	685b      	ldr	r3, [r3, #4]
 8003b42:	f04f 0400 	mov.w	r4, #0
 8003b46:	461a      	mov	r2, r3
 8003b48:	4623      	mov	r3, r4
 8003b4a:	f7fc fb47 	bl	80001dc <__aeabi_uldivmod>
 8003b4e:	4603      	mov	r3, r0
 8003b50:	460c      	mov	r4, r1
 8003b52:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
            break;
 8003b54:	e002      	b.n	8003b5c <UART_SetConfig+0x46c>
          case UART_CLOCKSOURCE_UNDEFINED:
          default:
            ret = HAL_ERROR;
 8003b56:	2301      	movs	r3, #1
 8003b58:	74fb      	strb	r3, [r7, #19]
            break;
 8003b5a:	bf00      	nop
        }

        /* It is forbidden to write values lower than 0x300 in the LPUART_BRR register */
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8003b5c:	697b      	ldr	r3, [r7, #20]
 8003b5e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003b62:	d308      	bcc.n	8003b76 <UART_SetConfig+0x486>
 8003b64:	697b      	ldr	r3, [r7, #20]
 8003b66:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003b6a:	d204      	bcs.n	8003b76 <UART_SetConfig+0x486>
        {
          huart->Instance->BRR = usartdiv;
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	697a      	ldr	r2, [r7, #20]
 8003b72:	60da      	str	r2, [r3, #12]
 8003b74:	e0f5      	b.n	8003d62 <UART_SetConfig+0x672>
        }
        else
        {
          ret = HAL_ERROR;
 8003b76:	2301      	movs	r3, #1
 8003b78:	74fb      	strb	r3, [r7, #19]
 8003b7a:	e0f2      	b.n	8003d62 <UART_SetConfig+0x672>
        }
      } /*   if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) || (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (lpuart_ker_ck_pres != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	69db      	ldr	r3, [r3, #28]
 8003b80:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003b84:	d17f      	bne.n	8003c86 <UART_SetConfig+0x596>
  {
    switch (clocksource)
 8003b86:	7efb      	ldrb	r3, [r7, #27]
 8003b88:	2b08      	cmp	r3, #8
 8003b8a:	d85c      	bhi.n	8003c46 <UART_SetConfig+0x556>
 8003b8c:	a201      	add	r2, pc, #4	; (adr r2, 8003b94 <UART_SetConfig+0x4a4>)
 8003b8e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003b92:	bf00      	nop
 8003b94:	08003bb9 	.word	0x08003bb9
 8003b98:	08003bd7 	.word	0x08003bd7
 8003b9c:	08003bf5 	.word	0x08003bf5
 8003ba0:	08003c47 	.word	0x08003c47
 8003ba4:	08003c11 	.word	0x08003c11
 8003ba8:	08003c47 	.word	0x08003c47
 8003bac:	08003c47 	.word	0x08003c47
 8003bb0:	08003c47 	.word	0x08003c47
 8003bb4:	08003c2f 	.word	0x08003c2f
    {
      case UART_CLOCKSOURCE_PCLK1:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8003bb8:	f7fe fd02 	bl	80025c0 <HAL_RCC_GetPCLK1Freq>
 8003bbc:	4603      	mov	r3, r0
 8003bbe:	005a      	lsls	r2, r3, #1
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	685b      	ldr	r3, [r3, #4]
 8003bc4:	085b      	lsrs	r3, r3, #1
 8003bc6:	441a      	add	r2, r3
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	685b      	ldr	r3, [r3, #4]
 8003bcc:	fbb2 f3f3 	udiv	r3, r2, r3
 8003bd0:	b29b      	uxth	r3, r3
 8003bd2:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 8003bd4:	e03a      	b.n	8003c4c <UART_SetConfig+0x55c>
      case UART_CLOCKSOURCE_PCLK2:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 8003bd6:	f7fe fd09 	bl	80025ec <HAL_RCC_GetPCLK2Freq>
 8003bda:	4603      	mov	r3, r0
 8003bdc:	005a      	lsls	r2, r3, #1
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	685b      	ldr	r3, [r3, #4]
 8003be2:	085b      	lsrs	r3, r3, #1
 8003be4:	441a      	add	r2, r3
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	685b      	ldr	r3, [r3, #4]
 8003bea:	fbb2 f3f3 	udiv	r3, r2, r3
 8003bee:	b29b      	uxth	r3, r3
 8003bf0:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 8003bf2:	e02b      	b.n	8003c4c <UART_SetConfig+0x55c>
      case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	685b      	ldr	r3, [r3, #4]
 8003bf8:	085b      	lsrs	r3, r3, #1
 8003bfa:	f103 73f4 	add.w	r3, r3, #31981568	; 0x1e80000
 8003bfe:	f503 4390 	add.w	r3, r3, #18432	; 0x4800
 8003c02:	687a      	ldr	r2, [r7, #4]
 8003c04:	6852      	ldr	r2, [r2, #4]
 8003c06:	fbb3 f3f2 	udiv	r3, r3, r2
 8003c0a:	b29b      	uxth	r3, r3
 8003c0c:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 8003c0e:	e01d      	b.n	8003c4c <UART_SetConfig+0x55c>
      case UART_CLOCKSOURCE_SYSCLK:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8003c10:	f7fe fc40 	bl	8002494 <HAL_RCC_GetSysClockFreq>
 8003c14:	4603      	mov	r3, r0
 8003c16:	005a      	lsls	r2, r3, #1
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	685b      	ldr	r3, [r3, #4]
 8003c1c:	085b      	lsrs	r3, r3, #1
 8003c1e:	441a      	add	r2, r3
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	685b      	ldr	r3, [r3, #4]
 8003c24:	fbb2 f3f3 	udiv	r3, r2, r3
 8003c28:	b29b      	uxth	r3, r3
 8003c2a:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 8003c2c:	e00e      	b.n	8003c4c <UART_SetConfig+0x55c>
      case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	685b      	ldr	r3, [r3, #4]
 8003c32:	085b      	lsrs	r3, r3, #1
 8003c34:	f503 3280 	add.w	r2, r3, #65536	; 0x10000
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	685b      	ldr	r3, [r3, #4]
 8003c3c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003c40:	b29b      	uxth	r3, r3
 8003c42:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 8003c44:	e002      	b.n	8003c4c <UART_SetConfig+0x55c>
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 8003c46:	2301      	movs	r3, #1
 8003c48:	74fb      	strb	r3, [r7, #19]
        break;
 8003c4a:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003c4c:	697b      	ldr	r3, [r7, #20]
 8003c4e:	2b0f      	cmp	r3, #15
 8003c50:	d916      	bls.n	8003c80 <UART_SetConfig+0x590>
 8003c52:	697b      	ldr	r3, [r7, #20]
 8003c54:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003c58:	d212      	bcs.n	8003c80 <UART_SetConfig+0x590>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003c5a:	697b      	ldr	r3, [r7, #20]
 8003c5c:	b29b      	uxth	r3, r3
 8003c5e:	f023 030f 	bic.w	r3, r3, #15
 8003c62:	817b      	strh	r3, [r7, #10]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003c64:	697b      	ldr	r3, [r7, #20]
 8003c66:	085b      	lsrs	r3, r3, #1
 8003c68:	b29b      	uxth	r3, r3
 8003c6a:	f003 0307 	and.w	r3, r3, #7
 8003c6e:	b29a      	uxth	r2, r3
 8003c70:	897b      	ldrh	r3, [r7, #10]
 8003c72:	4313      	orrs	r3, r2
 8003c74:	817b      	strh	r3, [r7, #10]
      huart->Instance->BRR = brrtemp;
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	897a      	ldrh	r2, [r7, #10]
 8003c7c:	60da      	str	r2, [r3, #12]
 8003c7e:	e070      	b.n	8003d62 <UART_SetConfig+0x672>
    }
    else
    {
      ret = HAL_ERROR;
 8003c80:	2301      	movs	r3, #1
 8003c82:	74fb      	strb	r3, [r7, #19]
 8003c84:	e06d      	b.n	8003d62 <UART_SetConfig+0x672>
    }
  }
  else
  {
    switch (clocksource)
 8003c86:	7efb      	ldrb	r3, [r7, #27]
 8003c88:	2b08      	cmp	r3, #8
 8003c8a:	d859      	bhi.n	8003d40 <UART_SetConfig+0x650>
 8003c8c:	a201      	add	r2, pc, #4	; (adr r2, 8003c94 <UART_SetConfig+0x5a4>)
 8003c8e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003c92:	bf00      	nop
 8003c94:	08003cb9 	.word	0x08003cb9
 8003c98:	08003cd5 	.word	0x08003cd5
 8003c9c:	08003cf1 	.word	0x08003cf1
 8003ca0:	08003d41 	.word	0x08003d41
 8003ca4:	08003d0d 	.word	0x08003d0d
 8003ca8:	08003d41 	.word	0x08003d41
 8003cac:	08003d41 	.word	0x08003d41
 8003cb0:	08003d41 	.word	0x08003d41
 8003cb4:	08003d29 	.word	0x08003d29
    {
      case UART_CLOCKSOURCE_PCLK1:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8003cb8:	f7fe fc82 	bl	80025c0 <HAL_RCC_GetPCLK1Freq>
 8003cbc:	4602      	mov	r2, r0
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	685b      	ldr	r3, [r3, #4]
 8003cc2:	085b      	lsrs	r3, r3, #1
 8003cc4:	441a      	add	r2, r3
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	685b      	ldr	r3, [r3, #4]
 8003cca:	fbb2 f3f3 	udiv	r3, r2, r3
 8003cce:	b29b      	uxth	r3, r3
 8003cd0:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 8003cd2:	e038      	b.n	8003d46 <UART_SetConfig+0x656>
      case UART_CLOCKSOURCE_PCLK2:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 8003cd4:	f7fe fc8a 	bl	80025ec <HAL_RCC_GetPCLK2Freq>
 8003cd8:	4602      	mov	r2, r0
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	685b      	ldr	r3, [r3, #4]
 8003cde:	085b      	lsrs	r3, r3, #1
 8003ce0:	441a      	add	r2, r3
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	685b      	ldr	r3, [r3, #4]
 8003ce6:	fbb2 f3f3 	udiv	r3, r2, r3
 8003cea:	b29b      	uxth	r3, r3
 8003cec:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 8003cee:	e02a      	b.n	8003d46 <UART_SetConfig+0x656>
      case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	685b      	ldr	r3, [r3, #4]
 8003cf4:	085b      	lsrs	r3, r3, #1
 8003cf6:	f503 0374 	add.w	r3, r3, #15990784	; 0xf40000
 8003cfa:	f503 5310 	add.w	r3, r3, #9216	; 0x2400
 8003cfe:	687a      	ldr	r2, [r7, #4]
 8003d00:	6852      	ldr	r2, [r2, #4]
 8003d02:	fbb3 f3f2 	udiv	r3, r3, r2
 8003d06:	b29b      	uxth	r3, r3
 8003d08:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 8003d0a:	e01c      	b.n	8003d46 <UART_SetConfig+0x656>
      case UART_CLOCKSOURCE_SYSCLK:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8003d0c:	f7fe fbc2 	bl	8002494 <HAL_RCC_GetSysClockFreq>
 8003d10:	4602      	mov	r2, r0
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	685b      	ldr	r3, [r3, #4]
 8003d16:	085b      	lsrs	r3, r3, #1
 8003d18:	441a      	add	r2, r3
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	685b      	ldr	r3, [r3, #4]
 8003d1e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003d22:	b29b      	uxth	r3, r3
 8003d24:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 8003d26:	e00e      	b.n	8003d46 <UART_SetConfig+0x656>
      case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	685b      	ldr	r3, [r3, #4]
 8003d2c:	085b      	lsrs	r3, r3, #1
 8003d2e:	f503 4200 	add.w	r2, r3, #32768	; 0x8000
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	685b      	ldr	r3, [r3, #4]
 8003d36:	fbb2 f3f3 	udiv	r3, r2, r3
 8003d3a:	b29b      	uxth	r3, r3
 8003d3c:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 8003d3e:	e002      	b.n	8003d46 <UART_SetConfig+0x656>
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 8003d40:	2301      	movs	r3, #1
 8003d42:	74fb      	strb	r3, [r7, #19]
        break;
 8003d44:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003d46:	697b      	ldr	r3, [r7, #20]
 8003d48:	2b0f      	cmp	r3, #15
 8003d4a:	d908      	bls.n	8003d5e <UART_SetConfig+0x66e>
 8003d4c:	697b      	ldr	r3, [r7, #20]
 8003d4e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003d52:	d204      	bcs.n	8003d5e <UART_SetConfig+0x66e>
    {
      huart->Instance->BRR = usartdiv;
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	697a      	ldr	r2, [r7, #20]
 8003d5a:	60da      	str	r2, [r3, #12]
 8003d5c:	e001      	b.n	8003d62 <UART_SetConfig+0x672>
    }
    else
    {
      ret = HAL_ERROR;
 8003d5e:	2301      	movs	r3, #1
 8003d60:	74fb      	strb	r3, [r7, #19]
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	2200      	movs	r2, #0
 8003d66:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	2200      	movs	r2, #0
 8003d6c:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 8003d6e:	7cfb      	ldrb	r3, [r7, #19]
}
 8003d70:	4618      	mov	r0, r3
 8003d72:	3720      	adds	r7, #32
 8003d74:	46bd      	mov	sp, r7
 8003d76:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}
 8003d7a:	bf00      	nop
 8003d7c:	f4240000 	.word	0xf4240000

08003d80 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003d80:	b480      	push	{r7}
 8003d82:	b083      	sub	sp, #12
 8003d84:	af00      	add	r7, sp, #0
 8003d86:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d8c:	f003 0301 	and.w	r3, r3, #1
 8003d90:	2b00      	cmp	r3, #0
 8003d92:	d00a      	beq.n	8003daa <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	685b      	ldr	r3, [r3, #4]
 8003d9a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	430a      	orrs	r2, r1
 8003da8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003dae:	f003 0302 	and.w	r3, r3, #2
 8003db2:	2b00      	cmp	r3, #0
 8003db4:	d00a      	beq.n	8003dcc <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	685b      	ldr	r3, [r3, #4]
 8003dbc:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	430a      	orrs	r2, r1
 8003dca:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003dd0:	f003 0304 	and.w	r3, r3, #4
 8003dd4:	2b00      	cmp	r3, #0
 8003dd6:	d00a      	beq.n	8003dee <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	685b      	ldr	r3, [r3, #4]
 8003dde:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	430a      	orrs	r2, r1
 8003dec:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003df2:	f003 0308 	and.w	r3, r3, #8
 8003df6:	2b00      	cmp	r3, #0
 8003df8:	d00a      	beq.n	8003e10 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	685b      	ldr	r3, [r3, #4]
 8003e00:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	430a      	orrs	r2, r1
 8003e0e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e14:	f003 0310 	and.w	r3, r3, #16
 8003e18:	2b00      	cmp	r3, #0
 8003e1a:	d00a      	beq.n	8003e32 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	689b      	ldr	r3, [r3, #8]
 8003e22:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	430a      	orrs	r2, r1
 8003e30:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e36:	f003 0320 	and.w	r3, r3, #32
 8003e3a:	2b00      	cmp	r3, #0
 8003e3c:	d00a      	beq.n	8003e54 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	689b      	ldr	r3, [r3, #8]
 8003e44:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	430a      	orrs	r2, r1
 8003e52:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e58:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003e5c:	2b00      	cmp	r3, #0
 8003e5e:	d01a      	beq.n	8003e96 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	685b      	ldr	r3, [r3, #4]
 8003e66:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	430a      	orrs	r2, r1
 8003e74:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e7a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003e7e:	d10a      	bne.n	8003e96 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	685b      	ldr	r3, [r3, #4]
 8003e86:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	430a      	orrs	r2, r1
 8003e94:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e9a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003e9e:	2b00      	cmp	r3, #0
 8003ea0:	d00a      	beq.n	8003eb8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	685b      	ldr	r3, [r3, #4]
 8003ea8:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	430a      	orrs	r2, r1
 8003eb6:	605a      	str	r2, [r3, #4]
  }
}
 8003eb8:	bf00      	nop
 8003eba:	370c      	adds	r7, #12
 8003ebc:	46bd      	mov	sp, r7
 8003ebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ec2:	4770      	bx	lr

08003ec4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003ec4:	b580      	push	{r7, lr}
 8003ec6:	b086      	sub	sp, #24
 8003ec8:	af02      	add	r7, sp, #8
 8003eca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	2200      	movs	r2, #0
 8003ed0:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 8003ed2:	f7fd f9ef 	bl	80012b4 <HAL_GetTick>
 8003ed6:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	f003 0308 	and.w	r3, r3, #8
 8003ee2:	2b08      	cmp	r3, #8
 8003ee4:	d10e      	bne.n	8003f04 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003ee6:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003eea:	9300      	str	r3, [sp, #0]
 8003eec:	68fb      	ldr	r3, [r7, #12]
 8003eee:	2200      	movs	r2, #0
 8003ef0:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8003ef4:	6878      	ldr	r0, [r7, #4]
 8003ef6:	f000 f82a 	bl	8003f4e <UART_WaitOnFlagUntilTimeout>
 8003efa:	4603      	mov	r3, r0
 8003efc:	2b00      	cmp	r3, #0
 8003efe:	d001      	beq.n	8003f04 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003f00:	2303      	movs	r3, #3
 8003f02:	e020      	b.n	8003f46 <UART_CheckIdleState+0x82>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	f003 0304 	and.w	r3, r3, #4
 8003f0e:	2b04      	cmp	r3, #4
 8003f10:	d10e      	bne.n	8003f30 <UART_CheckIdleState+0x6c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003f12:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003f16:	9300      	str	r3, [sp, #0]
 8003f18:	68fb      	ldr	r3, [r7, #12]
 8003f1a:	2200      	movs	r2, #0
 8003f1c:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8003f20:	6878      	ldr	r0, [r7, #4]
 8003f22:	f000 f814 	bl	8003f4e <UART_WaitOnFlagUntilTimeout>
 8003f26:	4603      	mov	r3, r0
 8003f28:	2b00      	cmp	r3, #0
 8003f2a:	d001      	beq.n	8003f30 <UART_CheckIdleState+0x6c>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003f2c:	2303      	movs	r3, #3
 8003f2e:	e00a      	b.n	8003f46 <UART_CheckIdleState+0x82>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	2220      	movs	r2, #32
 8003f34:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	2220      	movs	r2, #32
 8003f3a:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UNLOCK(huart);
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	2200      	movs	r2, #0
 8003f40:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 8003f44:	2300      	movs	r3, #0
}
 8003f46:	4618      	mov	r0, r3
 8003f48:	3710      	adds	r7, #16
 8003f4a:	46bd      	mov	sp, r7
 8003f4c:	bd80      	pop	{r7, pc}

08003f4e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003f4e:	b580      	push	{r7, lr}
 8003f50:	b084      	sub	sp, #16
 8003f52:	af00      	add	r7, sp, #0
 8003f54:	60f8      	str	r0, [r7, #12]
 8003f56:	60b9      	str	r1, [r7, #8]
 8003f58:	603b      	str	r3, [r7, #0]
 8003f5a:	4613      	mov	r3, r2
 8003f5c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003f5e:	e02a      	b.n	8003fb6 <UART_WaitOnFlagUntilTimeout+0x68>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003f60:	69bb      	ldr	r3, [r7, #24]
 8003f62:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003f66:	d026      	beq.n	8003fb6 <UART_WaitOnFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003f68:	f7fd f9a4 	bl	80012b4 <HAL_GetTick>
 8003f6c:	4602      	mov	r2, r0
 8003f6e:	683b      	ldr	r3, [r7, #0]
 8003f70:	1ad3      	subs	r3, r2, r3
 8003f72:	69ba      	ldr	r2, [r7, #24]
 8003f74:	429a      	cmp	r2, r3
 8003f76:	d302      	bcc.n	8003f7e <UART_WaitOnFlagUntilTimeout+0x30>
 8003f78:	69bb      	ldr	r3, [r7, #24]
 8003f7a:	2b00      	cmp	r3, #0
 8003f7c:	d11b      	bne.n	8003fb6 <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003f7e:	68fb      	ldr	r3, [r7, #12]
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	681a      	ldr	r2, [r3, #0]
 8003f84:	68fb      	ldr	r3, [r7, #12]
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8003f8c:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003f8e:	68fb      	ldr	r3, [r7, #12]
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	689a      	ldr	r2, [r3, #8]
 8003f94:	68fb      	ldr	r3, [r7, #12]
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	f022 0201 	bic.w	r2, r2, #1
 8003f9c:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8003f9e:	68fb      	ldr	r3, [r7, #12]
 8003fa0:	2220      	movs	r2, #32
 8003fa2:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 8003fa4:	68fb      	ldr	r3, [r7, #12]
 8003fa6:	2220      	movs	r2, #32
 8003fa8:	679a      	str	r2, [r3, #120]	; 0x78

        __HAL_UNLOCK(huart);
 8003faa:	68fb      	ldr	r3, [r7, #12]
 8003fac:	2200      	movs	r2, #0
 8003fae:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        return HAL_TIMEOUT;
 8003fb2:	2303      	movs	r3, #3
 8003fb4:	e00f      	b.n	8003fd6 <UART_WaitOnFlagUntilTimeout+0x88>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003fb6:	68fb      	ldr	r3, [r7, #12]
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	69da      	ldr	r2, [r3, #28]
 8003fbc:	68bb      	ldr	r3, [r7, #8]
 8003fbe:	4013      	ands	r3, r2
 8003fc0:	68ba      	ldr	r2, [r7, #8]
 8003fc2:	429a      	cmp	r2, r3
 8003fc4:	bf0c      	ite	eq
 8003fc6:	2301      	moveq	r3, #1
 8003fc8:	2300      	movne	r3, #0
 8003fca:	b2db      	uxtb	r3, r3
 8003fcc:	461a      	mov	r2, r3
 8003fce:	79fb      	ldrb	r3, [r7, #7]
 8003fd0:	429a      	cmp	r2, r3
 8003fd2:	d0c5      	beq.n	8003f60 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003fd4:	2300      	movs	r3, #0
}
 8003fd6:	4618      	mov	r0, r3
 8003fd8:	3710      	adds	r7, #16
 8003fda:	46bd      	mov	sp, r7
 8003fdc:	bd80      	pop	{r7, pc}
	...

08003fe0 <__libc_init_array>:
 8003fe0:	b570      	push	{r4, r5, r6, lr}
 8003fe2:	4e0d      	ldr	r6, [pc, #52]	; (8004018 <__libc_init_array+0x38>)
 8003fe4:	4c0d      	ldr	r4, [pc, #52]	; (800401c <__libc_init_array+0x3c>)
 8003fe6:	1ba4      	subs	r4, r4, r6
 8003fe8:	10a4      	asrs	r4, r4, #2
 8003fea:	2500      	movs	r5, #0
 8003fec:	42a5      	cmp	r5, r4
 8003fee:	d109      	bne.n	8004004 <__libc_init_array+0x24>
 8003ff0:	4e0b      	ldr	r6, [pc, #44]	; (8004020 <__libc_init_array+0x40>)
 8003ff2:	4c0c      	ldr	r4, [pc, #48]	; (8004024 <__libc_init_array+0x44>)
 8003ff4:	f000 f820 	bl	8004038 <_init>
 8003ff8:	1ba4      	subs	r4, r4, r6
 8003ffa:	10a4      	asrs	r4, r4, #2
 8003ffc:	2500      	movs	r5, #0
 8003ffe:	42a5      	cmp	r5, r4
 8004000:	d105      	bne.n	800400e <__libc_init_array+0x2e>
 8004002:	bd70      	pop	{r4, r5, r6, pc}
 8004004:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8004008:	4798      	blx	r3
 800400a:	3501      	adds	r5, #1
 800400c:	e7ee      	b.n	8003fec <__libc_init_array+0xc>
 800400e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8004012:	4798      	blx	r3
 8004014:	3501      	adds	r5, #1
 8004016:	e7f2      	b.n	8003ffe <__libc_init_array+0x1e>
 8004018:	080040b8 	.word	0x080040b8
 800401c:	080040b8 	.word	0x080040b8
 8004020:	080040b8 	.word	0x080040b8
 8004024:	080040bc 	.word	0x080040bc

08004028 <memset>:
 8004028:	4402      	add	r2, r0
 800402a:	4603      	mov	r3, r0
 800402c:	4293      	cmp	r3, r2
 800402e:	d100      	bne.n	8004032 <memset+0xa>
 8004030:	4770      	bx	lr
 8004032:	f803 1b01 	strb.w	r1, [r3], #1
 8004036:	e7f9      	b.n	800402c <memset+0x4>

08004038 <_init>:
 8004038:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800403a:	bf00      	nop
 800403c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800403e:	bc08      	pop	{r3}
 8004040:	469e      	mov	lr, r3
 8004042:	4770      	bx	lr

08004044 <_fini>:
 8004044:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004046:	bf00      	nop
 8004048:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800404a:	bc08      	pop	{r3}
 800404c:	469e      	mov	lr, r3
 800404e:	4770      	bx	lr
