
Project_1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000057a8  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000110  08005938  08005938  00015938  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005a48  08005a48  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  08005a48  08005a48  00015a48  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005a50  08005a50  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005a50  08005a50  00015a50  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005a54  08005a54  00015a54  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08005a58  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002a8  20000070  08005ac8  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000318  08005ac8  00020318  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   00015a71  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00002d36  00000000  00000000  00035b11  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000ff8  00000000  00000000  00038848  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000e70  00000000  00000000  00039840  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00028d9b  00000000  00000000  0003a6b0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000f9c5  00000000  00000000  0006344b  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000f3608  00000000  00000000  00072e10  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00166418  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000046e8  00000000  00000000  00166494  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000070 	.word	0x20000070
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08005920 	.word	0x08005920

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000074 	.word	0x20000074
 80001cc:	08005920 	.word	0x08005920

080001d0 <strcmp>:
 80001d0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001d4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001d8:	2a01      	cmp	r2, #1
 80001da:	bf28      	it	cs
 80001dc:	429a      	cmpcs	r2, r3
 80001de:	d0f7      	beq.n	80001d0 <strcmp>
 80001e0:	1ad0      	subs	r0, r2, r3
 80001e2:	4770      	bx	lr
	...

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295
 80002a4:	f000 b972 	b.w	800058c <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	9e08      	ldr	r6, [sp, #32]
 80002c6:	4604      	mov	r4, r0
 80002c8:	4688      	mov	r8, r1
 80002ca:	2b00      	cmp	r3, #0
 80002cc:	d14b      	bne.n	8000366 <__udivmoddi4+0xa6>
 80002ce:	428a      	cmp	r2, r1
 80002d0:	4615      	mov	r5, r2
 80002d2:	d967      	bls.n	80003a4 <__udivmoddi4+0xe4>
 80002d4:	fab2 f282 	clz	r2, r2
 80002d8:	b14a      	cbz	r2, 80002ee <__udivmoddi4+0x2e>
 80002da:	f1c2 0720 	rsb	r7, r2, #32
 80002de:	fa01 f302 	lsl.w	r3, r1, r2
 80002e2:	fa20 f707 	lsr.w	r7, r0, r7
 80002e6:	4095      	lsls	r5, r2
 80002e8:	ea47 0803 	orr.w	r8, r7, r3
 80002ec:	4094      	lsls	r4, r2
 80002ee:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80002f2:	0c23      	lsrs	r3, r4, #16
 80002f4:	fbb8 f7fe 	udiv	r7, r8, lr
 80002f8:	fa1f fc85 	uxth.w	ip, r5
 80002fc:	fb0e 8817 	mls	r8, lr, r7, r8
 8000300:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000304:	fb07 f10c 	mul.w	r1, r7, ip
 8000308:	4299      	cmp	r1, r3
 800030a:	d909      	bls.n	8000320 <__udivmoddi4+0x60>
 800030c:	18eb      	adds	r3, r5, r3
 800030e:	f107 30ff 	add.w	r0, r7, #4294967295
 8000312:	f080 811b 	bcs.w	800054c <__udivmoddi4+0x28c>
 8000316:	4299      	cmp	r1, r3
 8000318:	f240 8118 	bls.w	800054c <__udivmoddi4+0x28c>
 800031c:	3f02      	subs	r7, #2
 800031e:	442b      	add	r3, r5
 8000320:	1a5b      	subs	r3, r3, r1
 8000322:	b2a4      	uxth	r4, r4
 8000324:	fbb3 f0fe 	udiv	r0, r3, lr
 8000328:	fb0e 3310 	mls	r3, lr, r0, r3
 800032c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000330:	fb00 fc0c 	mul.w	ip, r0, ip
 8000334:	45a4      	cmp	ip, r4
 8000336:	d909      	bls.n	800034c <__udivmoddi4+0x8c>
 8000338:	192c      	adds	r4, r5, r4
 800033a:	f100 33ff 	add.w	r3, r0, #4294967295
 800033e:	f080 8107 	bcs.w	8000550 <__udivmoddi4+0x290>
 8000342:	45a4      	cmp	ip, r4
 8000344:	f240 8104 	bls.w	8000550 <__udivmoddi4+0x290>
 8000348:	3802      	subs	r0, #2
 800034a:	442c      	add	r4, r5
 800034c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000350:	eba4 040c 	sub.w	r4, r4, ip
 8000354:	2700      	movs	r7, #0
 8000356:	b11e      	cbz	r6, 8000360 <__udivmoddi4+0xa0>
 8000358:	40d4      	lsrs	r4, r2
 800035a:	2300      	movs	r3, #0
 800035c:	e9c6 4300 	strd	r4, r3, [r6]
 8000360:	4639      	mov	r1, r7
 8000362:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000366:	428b      	cmp	r3, r1
 8000368:	d909      	bls.n	800037e <__udivmoddi4+0xbe>
 800036a:	2e00      	cmp	r6, #0
 800036c:	f000 80eb 	beq.w	8000546 <__udivmoddi4+0x286>
 8000370:	2700      	movs	r7, #0
 8000372:	e9c6 0100 	strd	r0, r1, [r6]
 8000376:	4638      	mov	r0, r7
 8000378:	4639      	mov	r1, r7
 800037a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800037e:	fab3 f783 	clz	r7, r3
 8000382:	2f00      	cmp	r7, #0
 8000384:	d147      	bne.n	8000416 <__udivmoddi4+0x156>
 8000386:	428b      	cmp	r3, r1
 8000388:	d302      	bcc.n	8000390 <__udivmoddi4+0xd0>
 800038a:	4282      	cmp	r2, r0
 800038c:	f200 80fa 	bhi.w	8000584 <__udivmoddi4+0x2c4>
 8000390:	1a84      	subs	r4, r0, r2
 8000392:	eb61 0303 	sbc.w	r3, r1, r3
 8000396:	2001      	movs	r0, #1
 8000398:	4698      	mov	r8, r3
 800039a:	2e00      	cmp	r6, #0
 800039c:	d0e0      	beq.n	8000360 <__udivmoddi4+0xa0>
 800039e:	e9c6 4800 	strd	r4, r8, [r6]
 80003a2:	e7dd      	b.n	8000360 <__udivmoddi4+0xa0>
 80003a4:	b902      	cbnz	r2, 80003a8 <__udivmoddi4+0xe8>
 80003a6:	deff      	udf	#255	; 0xff
 80003a8:	fab2 f282 	clz	r2, r2
 80003ac:	2a00      	cmp	r2, #0
 80003ae:	f040 808f 	bne.w	80004d0 <__udivmoddi4+0x210>
 80003b2:	1b49      	subs	r1, r1, r5
 80003b4:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80003b8:	fa1f f885 	uxth.w	r8, r5
 80003bc:	2701      	movs	r7, #1
 80003be:	fbb1 fcfe 	udiv	ip, r1, lr
 80003c2:	0c23      	lsrs	r3, r4, #16
 80003c4:	fb0e 111c 	mls	r1, lr, ip, r1
 80003c8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003cc:	fb08 f10c 	mul.w	r1, r8, ip
 80003d0:	4299      	cmp	r1, r3
 80003d2:	d907      	bls.n	80003e4 <__udivmoddi4+0x124>
 80003d4:	18eb      	adds	r3, r5, r3
 80003d6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80003da:	d202      	bcs.n	80003e2 <__udivmoddi4+0x122>
 80003dc:	4299      	cmp	r1, r3
 80003de:	f200 80cd 	bhi.w	800057c <__udivmoddi4+0x2bc>
 80003e2:	4684      	mov	ip, r0
 80003e4:	1a59      	subs	r1, r3, r1
 80003e6:	b2a3      	uxth	r3, r4
 80003e8:	fbb1 f0fe 	udiv	r0, r1, lr
 80003ec:	fb0e 1410 	mls	r4, lr, r0, r1
 80003f0:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 80003f4:	fb08 f800 	mul.w	r8, r8, r0
 80003f8:	45a0      	cmp	r8, r4
 80003fa:	d907      	bls.n	800040c <__udivmoddi4+0x14c>
 80003fc:	192c      	adds	r4, r5, r4
 80003fe:	f100 33ff 	add.w	r3, r0, #4294967295
 8000402:	d202      	bcs.n	800040a <__udivmoddi4+0x14a>
 8000404:	45a0      	cmp	r8, r4
 8000406:	f200 80b6 	bhi.w	8000576 <__udivmoddi4+0x2b6>
 800040a:	4618      	mov	r0, r3
 800040c:	eba4 0408 	sub.w	r4, r4, r8
 8000410:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000414:	e79f      	b.n	8000356 <__udivmoddi4+0x96>
 8000416:	f1c7 0c20 	rsb	ip, r7, #32
 800041a:	40bb      	lsls	r3, r7
 800041c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000420:	ea4e 0e03 	orr.w	lr, lr, r3
 8000424:	fa01 f407 	lsl.w	r4, r1, r7
 8000428:	fa20 f50c 	lsr.w	r5, r0, ip
 800042c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000430:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000434:	4325      	orrs	r5, r4
 8000436:	fbb3 f9f8 	udiv	r9, r3, r8
 800043a:	0c2c      	lsrs	r4, r5, #16
 800043c:	fb08 3319 	mls	r3, r8, r9, r3
 8000440:	fa1f fa8e 	uxth.w	sl, lr
 8000444:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000448:	fb09 f40a 	mul.w	r4, r9, sl
 800044c:	429c      	cmp	r4, r3
 800044e:	fa02 f207 	lsl.w	r2, r2, r7
 8000452:	fa00 f107 	lsl.w	r1, r0, r7
 8000456:	d90b      	bls.n	8000470 <__udivmoddi4+0x1b0>
 8000458:	eb1e 0303 	adds.w	r3, lr, r3
 800045c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000460:	f080 8087 	bcs.w	8000572 <__udivmoddi4+0x2b2>
 8000464:	429c      	cmp	r4, r3
 8000466:	f240 8084 	bls.w	8000572 <__udivmoddi4+0x2b2>
 800046a:	f1a9 0902 	sub.w	r9, r9, #2
 800046e:	4473      	add	r3, lr
 8000470:	1b1b      	subs	r3, r3, r4
 8000472:	b2ad      	uxth	r5, r5
 8000474:	fbb3 f0f8 	udiv	r0, r3, r8
 8000478:	fb08 3310 	mls	r3, r8, r0, r3
 800047c:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000480:	fb00 fa0a 	mul.w	sl, r0, sl
 8000484:	45a2      	cmp	sl, r4
 8000486:	d908      	bls.n	800049a <__udivmoddi4+0x1da>
 8000488:	eb1e 0404 	adds.w	r4, lr, r4
 800048c:	f100 33ff 	add.w	r3, r0, #4294967295
 8000490:	d26b      	bcs.n	800056a <__udivmoddi4+0x2aa>
 8000492:	45a2      	cmp	sl, r4
 8000494:	d969      	bls.n	800056a <__udivmoddi4+0x2aa>
 8000496:	3802      	subs	r0, #2
 8000498:	4474      	add	r4, lr
 800049a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800049e:	fba0 8902 	umull	r8, r9, r0, r2
 80004a2:	eba4 040a 	sub.w	r4, r4, sl
 80004a6:	454c      	cmp	r4, r9
 80004a8:	46c2      	mov	sl, r8
 80004aa:	464b      	mov	r3, r9
 80004ac:	d354      	bcc.n	8000558 <__udivmoddi4+0x298>
 80004ae:	d051      	beq.n	8000554 <__udivmoddi4+0x294>
 80004b0:	2e00      	cmp	r6, #0
 80004b2:	d069      	beq.n	8000588 <__udivmoddi4+0x2c8>
 80004b4:	ebb1 050a 	subs.w	r5, r1, sl
 80004b8:	eb64 0403 	sbc.w	r4, r4, r3
 80004bc:	fa04 fc0c 	lsl.w	ip, r4, ip
 80004c0:	40fd      	lsrs	r5, r7
 80004c2:	40fc      	lsrs	r4, r7
 80004c4:	ea4c 0505 	orr.w	r5, ip, r5
 80004c8:	e9c6 5400 	strd	r5, r4, [r6]
 80004cc:	2700      	movs	r7, #0
 80004ce:	e747      	b.n	8000360 <__udivmoddi4+0xa0>
 80004d0:	f1c2 0320 	rsb	r3, r2, #32
 80004d4:	fa20 f703 	lsr.w	r7, r0, r3
 80004d8:	4095      	lsls	r5, r2
 80004da:	fa01 f002 	lsl.w	r0, r1, r2
 80004de:	fa21 f303 	lsr.w	r3, r1, r3
 80004e2:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80004e6:	4338      	orrs	r0, r7
 80004e8:	0c01      	lsrs	r1, r0, #16
 80004ea:	fbb3 f7fe 	udiv	r7, r3, lr
 80004ee:	fa1f f885 	uxth.w	r8, r5
 80004f2:	fb0e 3317 	mls	r3, lr, r7, r3
 80004f6:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004fa:	fb07 f308 	mul.w	r3, r7, r8
 80004fe:	428b      	cmp	r3, r1
 8000500:	fa04 f402 	lsl.w	r4, r4, r2
 8000504:	d907      	bls.n	8000516 <__udivmoddi4+0x256>
 8000506:	1869      	adds	r1, r5, r1
 8000508:	f107 3cff 	add.w	ip, r7, #4294967295
 800050c:	d22f      	bcs.n	800056e <__udivmoddi4+0x2ae>
 800050e:	428b      	cmp	r3, r1
 8000510:	d92d      	bls.n	800056e <__udivmoddi4+0x2ae>
 8000512:	3f02      	subs	r7, #2
 8000514:	4429      	add	r1, r5
 8000516:	1acb      	subs	r3, r1, r3
 8000518:	b281      	uxth	r1, r0
 800051a:	fbb3 f0fe 	udiv	r0, r3, lr
 800051e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000522:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000526:	fb00 f308 	mul.w	r3, r0, r8
 800052a:	428b      	cmp	r3, r1
 800052c:	d907      	bls.n	800053e <__udivmoddi4+0x27e>
 800052e:	1869      	adds	r1, r5, r1
 8000530:	f100 3cff 	add.w	ip, r0, #4294967295
 8000534:	d217      	bcs.n	8000566 <__udivmoddi4+0x2a6>
 8000536:	428b      	cmp	r3, r1
 8000538:	d915      	bls.n	8000566 <__udivmoddi4+0x2a6>
 800053a:	3802      	subs	r0, #2
 800053c:	4429      	add	r1, r5
 800053e:	1ac9      	subs	r1, r1, r3
 8000540:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000544:	e73b      	b.n	80003be <__udivmoddi4+0xfe>
 8000546:	4637      	mov	r7, r6
 8000548:	4630      	mov	r0, r6
 800054a:	e709      	b.n	8000360 <__udivmoddi4+0xa0>
 800054c:	4607      	mov	r7, r0
 800054e:	e6e7      	b.n	8000320 <__udivmoddi4+0x60>
 8000550:	4618      	mov	r0, r3
 8000552:	e6fb      	b.n	800034c <__udivmoddi4+0x8c>
 8000554:	4541      	cmp	r1, r8
 8000556:	d2ab      	bcs.n	80004b0 <__udivmoddi4+0x1f0>
 8000558:	ebb8 0a02 	subs.w	sl, r8, r2
 800055c:	eb69 020e 	sbc.w	r2, r9, lr
 8000560:	3801      	subs	r0, #1
 8000562:	4613      	mov	r3, r2
 8000564:	e7a4      	b.n	80004b0 <__udivmoddi4+0x1f0>
 8000566:	4660      	mov	r0, ip
 8000568:	e7e9      	b.n	800053e <__udivmoddi4+0x27e>
 800056a:	4618      	mov	r0, r3
 800056c:	e795      	b.n	800049a <__udivmoddi4+0x1da>
 800056e:	4667      	mov	r7, ip
 8000570:	e7d1      	b.n	8000516 <__udivmoddi4+0x256>
 8000572:	4681      	mov	r9, r0
 8000574:	e77c      	b.n	8000470 <__udivmoddi4+0x1b0>
 8000576:	3802      	subs	r0, #2
 8000578:	442c      	add	r4, r5
 800057a:	e747      	b.n	800040c <__udivmoddi4+0x14c>
 800057c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000580:	442b      	add	r3, r5
 8000582:	e72f      	b.n	80003e4 <__udivmoddi4+0x124>
 8000584:	4638      	mov	r0, r7
 8000586:	e708      	b.n	800039a <__udivmoddi4+0xda>
 8000588:	4637      	mov	r7, r6
 800058a:	e6e9      	b.n	8000360 <__udivmoddi4+0xa0>

0800058c <__aeabi_idiv0>:
 800058c:	4770      	bx	lr
 800058e:	bf00      	nop

08000590 <Set_cs>:
 *      Author: samfl
 */

#include <display.h>

void Set_cs(uint8_t signal) {
 8000590:	b580      	push	{r7, lr}
 8000592:	b082      	sub	sp, #8
 8000594:	af00      	add	r7, sp, #0
 8000596:	4603      	mov	r3, r0
 8000598:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(CS_SPI2_GPIO_Port, CS_SPI2_Pin, signal);
 800059a:	79fb      	ldrb	r3, [r7, #7]
 800059c:	461a      	mov	r2, r3
 800059e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80005a2:	4803      	ldr	r0, [pc, #12]	; (80005b0 <Set_cs+0x20>)
 80005a4:	f001 fa82 	bl	8001aac <HAL_GPIO_WritePin>
}
 80005a8:	bf00      	nop
 80005aa:	3708      	adds	r7, #8
 80005ac:	46bd      	mov	sp, r7
 80005ae:	bd80      	pop	{r7, pc}
 80005b0:	48000400 	.word	0x48000400

080005b4 <Write_data>:

void Write_data(uint8_t hexa) {
 80005b4:	b580      	push	{r7, lr}
 80005b6:	b084      	sub	sp, #16
 80005b8:	af00      	add	r7, sp, #0
 80005ba:	4603      	mov	r3, r0
 80005bc:	71fb      	strb	r3, [r7, #7]
    Spi_rdy();
 80005be:	f000 f88d 	bl	80006dc <Spi_rdy>
	uint8_t data[3];
	data[0] = 0x5f;
 80005c2:	235f      	movs	r3, #95	; 0x5f
 80005c4:	733b      	strb	r3, [r7, #12]
	data[1] = hexa & 0x0f;
 80005c6:	79fb      	ldrb	r3, [r7, #7]
 80005c8:	f003 030f 	and.w	r3, r3, #15
 80005cc:	b2db      	uxtb	r3, r3
 80005ce:	737b      	strb	r3, [r7, #13]
	data[2] = (hexa >> 4) & 0x0f;
 80005d0:	79fb      	ldrb	r3, [r7, #7]
 80005d2:	091b      	lsrs	r3, r3, #4
 80005d4:	b2db      	uxtb	r3, r3
 80005d6:	73bb      	strb	r3, [r7, #14]
	HAL_SPI_Transmit(&hspi2, data,3,10);
 80005d8:	f107 010c 	add.w	r1, r7, #12
 80005dc:	230a      	movs	r3, #10
 80005de:	2203      	movs	r2, #3
 80005e0:	4803      	ldr	r0, [pc, #12]	; (80005f0 <Write_data+0x3c>)
 80005e2:	f003 fb3d 	bl	8003c60 <HAL_SPI_Transmit>
	return;
 80005e6:	bf00      	nop
}
 80005e8:	3710      	adds	r7, #16
 80005ea:	46bd      	mov	sp, r7
 80005ec:	bd80      	pop	{r7, pc}
 80005ee:	bf00      	nop
 80005f0:	2000012c 	.word	0x2000012c

080005f4 <Write_string>:

void Write_string(char * string) {
 80005f4:	b580      	push	{r7, lr}
 80005f6:	b082      	sub	sp, #8
 80005f8:	af00      	add	r7, sp, #0
 80005fa:	6078      	str	r0, [r7, #4]
	do {
		Write_data(*string++);
 80005fc:	687b      	ldr	r3, [r7, #4]
 80005fe:	1c5a      	adds	r2, r3, #1
 8000600:	607a      	str	r2, [r7, #4]
 8000602:	781b      	ldrb	r3, [r3, #0]
 8000604:	4618      	mov	r0, r3
 8000606:	f7ff ffd5 	bl	80005b4 <Write_data>
	} while(*string);
 800060a:	687b      	ldr	r3, [r7, #4]
 800060c:	781b      	ldrb	r3, [r3, #0]
 800060e:	2b00      	cmp	r3, #0
 8000610:	d1f4      	bne.n	80005fc <Write_string+0x8>
	Set_cs(1);
 8000612:	2001      	movs	r0, #1
 8000614:	f7ff ffbc 	bl	8000590 <Set_cs>
}
 8000618:	bf00      	nop
 800061a:	3708      	adds	r7, #8
 800061c:	46bd      	mov	sp, r7
 800061e:	bd80      	pop	{r7, pc}

08000620 <Display_color>:
	Delay_spi();
	HAL_GPIO_WritePin(Display_reset_GPIO_Port, Display_reset_Pin, RESET);
	HAL_Delay(100);
}

void Display_color(char* color) {
 8000620:	b580      	push	{r7, lr}
 8000622:	b082      	sub	sp, #8
 8000624:	af00      	add	r7, sp, #0
 8000626:	6078      	str	r0, [r7, #4]
	if(!strcmp(color, "red")) HAL_GPIO_WritePin(Display_red_GPIO_Port, Display_red_Pin, SET);
 8000628:	4917      	ldr	r1, [pc, #92]	; (8000688 <Display_color+0x68>)
 800062a:	6878      	ldr	r0, [r7, #4]
 800062c:	f7ff fdd0 	bl	80001d0 <strcmp>
 8000630:	4603      	mov	r3, r0
 8000632:	2b00      	cmp	r3, #0
 8000634:	d105      	bne.n	8000642 <Display_color+0x22>
 8000636:	2201      	movs	r2, #1
 8000638:	2180      	movs	r1, #128	; 0x80
 800063a:	4814      	ldr	r0, [pc, #80]	; (800068c <Display_color+0x6c>)
 800063c:	f001 fa36 	bl	8001aac <HAL_GPIO_WritePin>
	else if(!strcmp(color, "green")) HAL_GPIO_WritePin(Display_green_GPIO_Port, Display_green_Pin, SET);
	else if(!strcmp(color, "white")) HAL_GPIO_WritePin(Display_white_GPIO_Port, Display_white_Pin, SET);
	else printf("No color was set");
}
 8000640:	e01e      	b.n	8000680 <Display_color+0x60>
	else if(!strcmp(color, "green")) HAL_GPIO_WritePin(Display_green_GPIO_Port, Display_green_Pin, SET);
 8000642:	4913      	ldr	r1, [pc, #76]	; (8000690 <Display_color+0x70>)
 8000644:	6878      	ldr	r0, [r7, #4]
 8000646:	f7ff fdc3 	bl	80001d0 <strcmp>
 800064a:	4603      	mov	r3, r0
 800064c:	2b00      	cmp	r3, #0
 800064e:	d106      	bne.n	800065e <Display_color+0x3e>
 8000650:	2201      	movs	r2, #1
 8000652:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000656:	480d      	ldr	r0, [pc, #52]	; (800068c <Display_color+0x6c>)
 8000658:	f001 fa28 	bl	8001aac <HAL_GPIO_WritePin>
}
 800065c:	e010      	b.n	8000680 <Display_color+0x60>
	else if(!strcmp(color, "white")) HAL_GPIO_WritePin(Display_white_GPIO_Port, Display_white_Pin, SET);
 800065e:	490d      	ldr	r1, [pc, #52]	; (8000694 <Display_color+0x74>)
 8000660:	6878      	ldr	r0, [r7, #4]
 8000662:	f7ff fdb5 	bl	80001d0 <strcmp>
 8000666:	4603      	mov	r3, r0
 8000668:	2b00      	cmp	r3, #0
 800066a:	d106      	bne.n	800067a <Display_color+0x5a>
 800066c:	2201      	movs	r2, #1
 800066e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000672:	4806      	ldr	r0, [pc, #24]	; (800068c <Display_color+0x6c>)
 8000674:	f001 fa1a 	bl	8001aac <HAL_GPIO_WritePin>
}
 8000678:	e002      	b.n	8000680 <Display_color+0x60>
	else printf("No color was set");
 800067a:	4807      	ldr	r0, [pc, #28]	; (8000698 <Display_color+0x78>)
 800067c:	f004 fa6c 	bl	8004b58 <iprintf>
}
 8000680:	bf00      	nop
 8000682:	3708      	adds	r7, #8
 8000684:	46bd      	mov	sp, r7
 8000686:	bd80      	pop	{r7, pc}
 8000688:	08005938 	.word	0x08005938
 800068c:	48000800 	.word	0x48000800
 8000690:	0800593c 	.word	0x0800593c
 8000694:	08005944 	.word	0x08005944
 8000698:	0800594c 	.word	0x0800594c

0800069c <Write_ins>:

void Write_ins(uint8_t hexa){
 800069c:	b580      	push	{r7, lr}
 800069e:	b084      	sub	sp, #16
 80006a0:	af00      	add	r7, sp, #0
 80006a2:	4603      	mov	r3, r0
 80006a4:	71fb      	strb	r3, [r7, #7]
	Spi_rdy();
 80006a6:	f000 f819 	bl	80006dc <Spi_rdy>
	uint8_t data[3];
	data[0] = 0x1f;
 80006aa:	231f      	movs	r3, #31
 80006ac:	733b      	strb	r3, [r7, #12]
	data[1] = hexa & 0x0f;
 80006ae:	79fb      	ldrb	r3, [r7, #7]
 80006b0:	f003 030f 	and.w	r3, r3, #15
 80006b4:	b2db      	uxtb	r3, r3
 80006b6:	737b      	strb	r3, [r7, #13]
	data[2] = (hexa >> 4) & 0x0f;
 80006b8:	79fb      	ldrb	r3, [r7, #7]
 80006ba:	091b      	lsrs	r3, r3, #4
 80006bc:	b2db      	uxtb	r3, r3
 80006be:	73bb      	strb	r3, [r7, #14]
	HAL_SPI_Transmit(&hspi2, data,3,10);
 80006c0:	f107 010c 	add.w	r1, r7, #12
 80006c4:	230a      	movs	r3, #10
 80006c6:	2203      	movs	r2, #3
 80006c8:	4803      	ldr	r0, [pc, #12]	; (80006d8 <Write_ins+0x3c>)
 80006ca:	f003 fac9 	bl	8003c60 <HAL_SPI_Transmit>
	return;
 80006ce:	bf00      	nop
}
 80006d0:	3710      	adds	r7, #16
 80006d2:	46bd      	mov	sp, r7
 80006d4:	bd80      	pop	{r7, pc}
 80006d6:	bf00      	nop
 80006d8:	2000012c 	.word	0x2000012c

080006dc <Spi_rdy>:

void Spi_rdy(void) {
 80006dc:	b580      	push	{r7, lr}
 80006de:	af00      	add	r7, sp, #0
    Set_cs(1);
 80006e0:	2001      	movs	r0, #1
 80006e2:	f7ff ff55 	bl	8000590 <Set_cs>
    HAL_Delay(10);
 80006e6:	200a      	movs	r0, #10
 80006e8:	f000 ff30 	bl	800154c <HAL_Delay>
    Set_cs(0);
 80006ec:	2000      	movs	r0, #0
 80006ee:	f7ff ff4f 	bl	8000590 <Set_cs>
}
 80006f2:	bf00      	nop
 80006f4:	bd80      	pop	{r7, pc}

080006f6 <Init_display>:

void Init_display(void)
{
 80006f6:	b580      	push	{r7, lr}
 80006f8:	af00      	add	r7, sp, #0
		// Delay
		Spi_rdy();
 80006fa:	f7ff ffef 	bl	80006dc <Spi_rdy>

	    // Reset Display
	    HAL_GPIO_WritePin(Display_reset_GPIO_Port, Display_reset_Pin, GPIO_PIN_SET);
 80006fe:	2201      	movs	r2, #1
 8000700:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000704:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000708:	f001 f9d0 	bl	8001aac <HAL_GPIO_WritePin>
	    HAL_Delay(10);
 800070c:	200a      	movs	r0, #10
 800070e:	f000 ff1d 	bl	800154c <HAL_Delay>

	    // Initialization Example
	    Write_ins(0x3a); // function set: RE=1; REV=0
 8000712:	203a      	movs	r0, #58	; 0x3a
 8000714:	f7ff ffc2 	bl	800069c <Write_ins>
	    Write_ins(0x09); // extended function set: 4-line initialization
 8000718:	2009      	movs	r0, #9
 800071a:	f7ff ffbf 	bl	800069c <Write_ins>
	    Write_ins(0x06); // entry mode set: Botton View
 800071e:	2006      	movs	r0, #6
 8000720:	f7ff ffbc 	bl	800069c <Write_ins>
	    Write_ins(0x1e); // bias setting: BS1 = 1
 8000724:	201e      	movs	r0, #30
 8000726:	f7ff ffb9 	bl	800069c <Write_ins>
	    Write_ins(0x39); // function set: RE=0, IS=1
 800072a:	2039      	movs	r0, #57	; 0x39
 800072c:	f7ff ffb6 	bl	800069c <Write_ins>
	    Write_ins(0x1b); // internal osc: BS0=1 -> Bias=1/6
 8000730:	201b      	movs	r0, #27
 8000732:	f7ff ffb3 	bl	800069c <Write_ins>
	    Write_ins(0x6e); // follower control: divider on and set value
 8000736:	206e      	movs	r0, #110	; 0x6e
 8000738:	f7ff ffb0 	bl	800069c <Write_ins>
	    Write_ins(0x56); // power control: booster on and set contrast
 800073c:	2056      	movs	r0, #86	; 0x56
 800073e:	f7ff ffad 	bl	800069c <Write_ins>
	    Write_ins(0x7a); // contrast set: DB3-DB0=C3-C0
 8000742:	207a      	movs	r0, #122	; 0x7a
 8000744:	f7ff ffaa 	bl	800069c <Write_ins>
	    Write_ins(0x38); // function set: RE=0, IS=0
 8000748:	2038      	movs	r0, #56	; 0x38
 800074a:	f7ff ffa7 	bl	800069c <Write_ins>

		// Change View
		Write_ins(0x3a); // function set: RE=1, IS=0
 800074e:	203a      	movs	r0, #58	; 0x3a
 8000750:	f7ff ffa4 	bl	800069c <Write_ins>
		Write_ins(0x06); // entry mode: bottom view
 8000754:	2006      	movs	r0, #6
 8000756:	f7ff ffa1 	bl	800069c <Write_ins>
		Write_ins(0x38); // function set: RE=0, IS=0
 800075a:	2038      	movs	r0, #56	; 0x38
 800075c:	f7ff ff9e 	bl	800069c <Write_ins>

		// Display On
	    Write_ins(0x0f); // display on, cursor on, blink on
 8000760:	200f      	movs	r0, #15
 8000762:	f7ff ff9b 	bl	800069c <Write_ins>

	    // Clear Display
	    Write_ins(0x01);
 8000766:	2001      	movs	r0, #1
 8000768:	f7ff ff98 	bl	800069c <Write_ins>
	    // String Sequence Line 4
	    // Write_ins(0xe0); //address
	    // Write_string("TIDAB");

	    // Stop Transmit
	    Set_cs(1);
 800076c:	2001      	movs	r0, #1
 800076e:	f7ff ff0f 	bl	8000590 <Set_cs>
}
 8000772:	bf00      	nop
 8000774:	bd80      	pop	{r7, pc}
	...

08000778 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000778:	b580      	push	{r7, lr}
 800077a:	b08a      	sub	sp, #40	; 0x28
 800077c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800077e:	f107 0314 	add.w	r3, r7, #20
 8000782:	2200      	movs	r2, #0
 8000784:	601a      	str	r2, [r3, #0]
 8000786:	605a      	str	r2, [r3, #4]
 8000788:	609a      	str	r2, [r3, #8]
 800078a:	60da      	str	r2, [r3, #12]
 800078c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800078e:	4b4c      	ldr	r3, [pc, #304]	; (80008c0 <MX_GPIO_Init+0x148>)
 8000790:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000792:	4a4b      	ldr	r2, [pc, #300]	; (80008c0 <MX_GPIO_Init+0x148>)
 8000794:	f043 0304 	orr.w	r3, r3, #4
 8000798:	64d3      	str	r3, [r2, #76]	; 0x4c
 800079a:	4b49      	ldr	r3, [pc, #292]	; (80008c0 <MX_GPIO_Init+0x148>)
 800079c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800079e:	f003 0304 	and.w	r3, r3, #4
 80007a2:	613b      	str	r3, [r7, #16]
 80007a4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80007a6:	4b46      	ldr	r3, [pc, #280]	; (80008c0 <MX_GPIO_Init+0x148>)
 80007a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007aa:	4a45      	ldr	r2, [pc, #276]	; (80008c0 <MX_GPIO_Init+0x148>)
 80007ac:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80007b0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80007b2:	4b43      	ldr	r3, [pc, #268]	; (80008c0 <MX_GPIO_Init+0x148>)
 80007b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007b6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80007ba:	60fb      	str	r3, [r7, #12]
 80007bc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80007be:	4b40      	ldr	r3, [pc, #256]	; (80008c0 <MX_GPIO_Init+0x148>)
 80007c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007c2:	4a3f      	ldr	r2, [pc, #252]	; (80008c0 <MX_GPIO_Init+0x148>)
 80007c4:	f043 0301 	orr.w	r3, r3, #1
 80007c8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80007ca:	4b3d      	ldr	r3, [pc, #244]	; (80008c0 <MX_GPIO_Init+0x148>)
 80007cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007ce:	f003 0301 	and.w	r3, r3, #1
 80007d2:	60bb      	str	r3, [r7, #8]
 80007d4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80007d6:	4b3a      	ldr	r3, [pc, #232]	; (80008c0 <MX_GPIO_Init+0x148>)
 80007d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007da:	4a39      	ldr	r2, [pc, #228]	; (80008c0 <MX_GPIO_Init+0x148>)
 80007dc:	f043 0302 	orr.w	r3, r3, #2
 80007e0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80007e2:	4b37      	ldr	r3, [pc, #220]	; (80008c0 <MX_GPIO_Init+0x148>)
 80007e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007e6:	f003 0302 	and.w	r3, r3, #2
 80007ea:	607b      	str	r3, [r7, #4]
 80007ec:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80007ee:	4b34      	ldr	r3, [pc, #208]	; (80008c0 <MX_GPIO_Init+0x148>)
 80007f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007f2:	4a33      	ldr	r2, [pc, #204]	; (80008c0 <MX_GPIO_Init+0x148>)
 80007f4:	f043 0308 	orr.w	r3, r3, #8
 80007f8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80007fa:	4b31      	ldr	r3, [pc, #196]	; (80008c0 <MX_GPIO_Init+0x148>)
 80007fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007fe:	f003 0308 	and.w	r3, r3, #8
 8000802:	603b      	str	r3, [r7, #0]
 8000804:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000806:	2200      	movs	r2, #0
 8000808:	2120      	movs	r1, #32
 800080a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800080e:	f001 f94d 	bl	8001aac <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Rtc_out_cal_GPIO_Port, Rtc_out_cal_Pin, GPIO_PIN_RESET);
 8000812:	2200      	movs	r2, #0
 8000814:	2104      	movs	r1, #4
 8000816:	482b      	ldr	r0, [pc, #172]	; (80008c4 <MX_GPIO_Init+0x14c>)
 8000818:	f001 f948 	bl	8001aac <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_SPI2_GPIO_Port, CS_SPI2_Pin, GPIO_PIN_SET);
 800081c:	2201      	movs	r2, #1
 800081e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000822:	4828      	ldr	r0, [pc, #160]	; (80008c4 <MX_GPIO_Init+0x14c>)
 8000824:	f001 f942 	bl	8001aac <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, Display_red_Pin|Display_green_Pin|Display_white_Pin, GPIO_PIN_RESET);
 8000828:	2200      	movs	r2, #0
 800082a:	f44f 6148 	mov.w	r1, #3200	; 0xc80
 800082e:	4826      	ldr	r0, [pc, #152]	; (80008c8 <MX_GPIO_Init+0x150>)
 8000830:	f001 f93c 	bl	8001aac <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Display_reset_GPIO_Port, Display_reset_Pin, GPIO_PIN_SET);
 8000834:	2201      	movs	r2, #1
 8000836:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800083a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800083e:	f001 f935 	bl	8001aac <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000842:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000846:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000848:	4b20      	ldr	r3, [pc, #128]	; (80008cc <MX_GPIO_Init+0x154>)
 800084a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800084c:	2300      	movs	r3, #0
 800084e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000850:	f107 0314 	add.w	r3, r7, #20
 8000854:	4619      	mov	r1, r3
 8000856:	481c      	ldr	r0, [pc, #112]	; (80008c8 <MX_GPIO_Init+0x150>)
 8000858:	f000 ff80 	bl	800175c <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = LD2_Pin|Display_reset_Pin;
 800085c:	f248 0320 	movw	r3, #32800	; 0x8020
 8000860:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000862:	2301      	movs	r3, #1
 8000864:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000866:	2300      	movs	r3, #0
 8000868:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800086a:	2300      	movs	r3, #0
 800086c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800086e:	f107 0314 	add.w	r3, r7, #20
 8000872:	4619      	mov	r1, r3
 8000874:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000878:	f000 ff70 	bl	800175c <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = Rtc_out_cal_Pin|CS_SPI2_Pin;
 800087c:	f241 0304 	movw	r3, #4100	; 0x1004
 8000880:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000882:	2301      	movs	r3, #1
 8000884:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000886:	2300      	movs	r3, #0
 8000888:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800088a:	2300      	movs	r3, #0
 800088c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800088e:	f107 0314 	add.w	r3, r7, #20
 8000892:	4619      	mov	r1, r3
 8000894:	480b      	ldr	r0, [pc, #44]	; (80008c4 <MX_GPIO_Init+0x14c>)
 8000896:	f000 ff61 	bl	800175c <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = Display_red_Pin|Display_green_Pin|Display_white_Pin;
 800089a:	f44f 6348 	mov.w	r3, #3200	; 0xc80
 800089e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008a0:	2301      	movs	r3, #1
 80008a2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008a4:	2300      	movs	r3, #0
 80008a6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008a8:	2300      	movs	r3, #0
 80008aa:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80008ac:	f107 0314 	add.w	r3, r7, #20
 80008b0:	4619      	mov	r1, r3
 80008b2:	4805      	ldr	r0, [pc, #20]	; (80008c8 <MX_GPIO_Init+0x150>)
 80008b4:	f000 ff52 	bl	800175c <HAL_GPIO_Init>

}
 80008b8:	bf00      	nop
 80008ba:	3728      	adds	r7, #40	; 0x28
 80008bc:	46bd      	mov	sp, r7
 80008be:	bd80      	pop	{r7, pc}
 80008c0:	40021000 	.word	0x40021000
 80008c4:	48000400 	.word	0x48000400
 80008c8:	48000800 	.word	0x48000800
 80008cc:	10210000 	.word	0x10210000

080008d0 <MX_I2C3_Init>:

I2C_HandleTypeDef hi2c3;

/* I2C3 init function */
void MX_I2C3_Init(void)
{
 80008d0:	b580      	push	{r7, lr}
 80008d2:	af00      	add	r7, sp, #0

  hi2c3.Instance = I2C3;
 80008d4:	4b1b      	ldr	r3, [pc, #108]	; (8000944 <MX_I2C3_Init+0x74>)
 80008d6:	4a1c      	ldr	r2, [pc, #112]	; (8000948 <MX_I2C3_Init+0x78>)
 80008d8:	601a      	str	r2, [r3, #0]
  hi2c3.Init.Timing = 0x10909CEC;
 80008da:	4b1a      	ldr	r3, [pc, #104]	; (8000944 <MX_I2C3_Init+0x74>)
 80008dc:	4a1b      	ldr	r2, [pc, #108]	; (800094c <MX_I2C3_Init+0x7c>)
 80008de:	605a      	str	r2, [r3, #4]
  hi2c3.Init.OwnAddress1 = 0;
 80008e0:	4b18      	ldr	r3, [pc, #96]	; (8000944 <MX_I2C3_Init+0x74>)
 80008e2:	2200      	movs	r2, #0
 80008e4:	609a      	str	r2, [r3, #8]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80008e6:	4b17      	ldr	r3, [pc, #92]	; (8000944 <MX_I2C3_Init+0x74>)
 80008e8:	2201      	movs	r2, #1
 80008ea:	60da      	str	r2, [r3, #12]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80008ec:	4b15      	ldr	r3, [pc, #84]	; (8000944 <MX_I2C3_Init+0x74>)
 80008ee:	2200      	movs	r2, #0
 80008f0:	611a      	str	r2, [r3, #16]
  hi2c3.Init.OwnAddress2 = 0;
 80008f2:	4b14      	ldr	r3, [pc, #80]	; (8000944 <MX_I2C3_Init+0x74>)
 80008f4:	2200      	movs	r2, #0
 80008f6:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80008f8:	4b12      	ldr	r3, [pc, #72]	; (8000944 <MX_I2C3_Init+0x74>)
 80008fa:	2200      	movs	r2, #0
 80008fc:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80008fe:	4b11      	ldr	r3, [pc, #68]	; (8000944 <MX_I2C3_Init+0x74>)
 8000900:	2200      	movs	r2, #0
 8000902:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000904:	4b0f      	ldr	r3, [pc, #60]	; (8000944 <MX_I2C3_Init+0x74>)
 8000906:	2200      	movs	r2, #0
 8000908:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 800090a:	480e      	ldr	r0, [pc, #56]	; (8000944 <MX_I2C3_Init+0x74>)
 800090c:	f001 f8e6 	bl	8001adc <HAL_I2C_Init>
 8000910:	4603      	mov	r3, r0
 8000912:	2b00      	cmp	r3, #0
 8000914:	d001      	beq.n	800091a <MX_I2C3_Init+0x4a>
  {
    Error_Handler();
 8000916:	f000 f8fb 	bl	8000b10 <Error_Handler>
  }
  /** Configure Analogue filter 
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800091a:	2100      	movs	r1, #0
 800091c:	4809      	ldr	r0, [pc, #36]	; (8000944 <MX_I2C3_Init+0x74>)
 800091e:	f001 f96c 	bl	8001bfa <HAL_I2CEx_ConfigAnalogFilter>
 8000922:	4603      	mov	r3, r0
 8000924:	2b00      	cmp	r3, #0
 8000926:	d001      	beq.n	800092c <MX_I2C3_Init+0x5c>
  {
    Error_Handler();
 8000928:	f000 f8f2 	bl	8000b10 <Error_Handler>
  }
  /** Configure Digital filter 
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 800092c:	2100      	movs	r1, #0
 800092e:	4805      	ldr	r0, [pc, #20]	; (8000944 <MX_I2C3_Init+0x74>)
 8000930:	f001 f9ae 	bl	8001c90 <HAL_I2CEx_ConfigDigitalFilter>
 8000934:	4603      	mov	r3, r0
 8000936:	2b00      	cmp	r3, #0
 8000938:	d001      	beq.n	800093e <MX_I2C3_Init+0x6e>
  {
    Error_Handler();
 800093a:	f000 f8e9 	bl	8000b10 <Error_Handler>
  }

}
 800093e:	bf00      	nop
 8000940:	bd80      	pop	{r7, pc}
 8000942:	bf00      	nop
 8000944:	20000098 	.word	0x20000098
 8000948:	40005c00 	.word	0x40005c00
 800094c:	10909cec 	.word	0x10909cec

08000950 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000950:	b580      	push	{r7, lr}
 8000952:	b08a      	sub	sp, #40	; 0x28
 8000954:	af00      	add	r7, sp, #0
 8000956:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000958:	f107 0314 	add.w	r3, r7, #20
 800095c:	2200      	movs	r2, #0
 800095e:	601a      	str	r2, [r3, #0]
 8000960:	605a      	str	r2, [r3, #4]
 8000962:	609a      	str	r2, [r3, #8]
 8000964:	60da      	str	r2, [r3, #12]
 8000966:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C3)
 8000968:	687b      	ldr	r3, [r7, #4]
 800096a:	681b      	ldr	r3, [r3, #0]
 800096c:	4a17      	ldr	r2, [pc, #92]	; (80009cc <HAL_I2C_MspInit+0x7c>)
 800096e:	4293      	cmp	r3, r2
 8000970:	d127      	bne.n	80009c2 <HAL_I2C_MspInit+0x72>
  {
  /* USER CODE BEGIN I2C3_MspInit 0 */

  /* USER CODE END I2C3_MspInit 0 */
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000972:	4b17      	ldr	r3, [pc, #92]	; (80009d0 <HAL_I2C_MspInit+0x80>)
 8000974:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000976:	4a16      	ldr	r2, [pc, #88]	; (80009d0 <HAL_I2C_MspInit+0x80>)
 8000978:	f043 0304 	orr.w	r3, r3, #4
 800097c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800097e:	4b14      	ldr	r3, [pc, #80]	; (80009d0 <HAL_I2C_MspInit+0x80>)
 8000980:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000982:	f003 0304 	and.w	r3, r3, #4
 8000986:	613b      	str	r3, [r7, #16]
 8000988:	693b      	ldr	r3, [r7, #16]
    /**I2C3 GPIO Configuration    
    PC0     ------> I2C3_SCL
    PC1     ------> I2C3_SDA 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800098a:	2303      	movs	r3, #3
 800098c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800098e:	2312      	movs	r3, #18
 8000990:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000992:	2301      	movs	r3, #1
 8000994:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000996:	2303      	movs	r3, #3
 8000998:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 800099a:	2304      	movs	r3, #4
 800099c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800099e:	f107 0314 	add.w	r3, r7, #20
 80009a2:	4619      	mov	r1, r3
 80009a4:	480b      	ldr	r0, [pc, #44]	; (80009d4 <HAL_I2C_MspInit+0x84>)
 80009a6:	f000 fed9 	bl	800175c <HAL_GPIO_Init>

    /* I2C3 clock enable */
    __HAL_RCC_I2C3_CLK_ENABLE();
 80009aa:	4b09      	ldr	r3, [pc, #36]	; (80009d0 <HAL_I2C_MspInit+0x80>)
 80009ac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80009ae:	4a08      	ldr	r2, [pc, #32]	; (80009d0 <HAL_I2C_MspInit+0x80>)
 80009b0:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80009b4:	6593      	str	r3, [r2, #88]	; 0x58
 80009b6:	4b06      	ldr	r3, [pc, #24]	; (80009d0 <HAL_I2C_MspInit+0x80>)
 80009b8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80009ba:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80009be:	60fb      	str	r3, [r7, #12]
 80009c0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }
}
 80009c2:	bf00      	nop
 80009c4:	3728      	adds	r7, #40	; 0x28
 80009c6:	46bd      	mov	sp, r7
 80009c8:	bd80      	pop	{r7, pc}
 80009ca:	bf00      	nop
 80009cc:	40005c00 	.word	0x40005c00
 80009d0:	40021000 	.word	0x40021000
 80009d4:	48000800 	.word	0x48000800

080009d8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80009d8:	b580      	push	{r7, lr}
 80009da:	af00      	add	r7, sp, #0
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80009dc:	f000 fd3e 	bl	800145c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80009e0:	f000 f812 	bl	8000a08 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80009e4:	f7ff fec8 	bl	8000778 <MX_GPIO_Init>
  MX_I2C3_Init();
 80009e8:	f7ff ff72 	bl	80008d0 <MX_I2C3_Init>
  MX_SPI2_Init();
 80009ec:	f000 f9ba 	bl	8000d64 <MX_SPI2_Init>
  MX_UART4_Init();
 80009f0:	f000 fbb6 	bl	8001160 <MX_UART4_Init>
  MX_UART5_Init();
 80009f4:	f000 fbe4 	bl	80011c0 <MX_UART5_Init>
  MX_USART2_UART_Init();
 80009f8:	f000 fc12 	bl	8001220 <MX_USART2_UART_Init>
  MX_RTC_Init();
 80009fc:	f000 f96e 	bl	8000cdc <MX_RTC_Init>
  /* USER CODE BEGIN 2 */
#ifdef RUN_TEST_PROGRAM
  Test_program();
 8000a00:	f000 fb72 	bl	80010e8 <Test_program>
#endif
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000a04:	e7fe      	b.n	8000a04 <main+0x2c>
	...

08000a08 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000a08:	b580      	push	{r7, lr}
 8000a0a:	b0b8      	sub	sp, #224	; 0xe0
 8000a0c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000a0e:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000a12:	2244      	movs	r2, #68	; 0x44
 8000a14:	2100      	movs	r1, #0
 8000a16:	4618      	mov	r0, r3
 8000a18:	f004 f896 	bl	8004b48 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000a1c:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8000a20:	2200      	movs	r2, #0
 8000a22:	601a      	str	r2, [r3, #0]
 8000a24:	605a      	str	r2, [r3, #4]
 8000a26:	609a      	str	r2, [r3, #8]
 8000a28:	60da      	str	r2, [r3, #12]
 8000a2a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000a2c:	463b      	mov	r3, r7
 8000a2e:	2288      	movs	r2, #136	; 0x88
 8000a30:	2100      	movs	r1, #0
 8000a32:	4618      	mov	r0, r3
 8000a34:	f004 f888 	bl	8004b48 <memset>

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 8000a38:	230a      	movs	r3, #10
 8000a3a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000a3e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000a42:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000a46:	2310      	movs	r3, #16
 8000a48:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8000a4c:	2301      	movs	r3, #1
 8000a4e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000a52:	2302      	movs	r3, #2
 8000a54:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000a58:	2302      	movs	r3, #2
 8000a5a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000a5e:	2301      	movs	r3, #1
 8000a60:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_OscInitStruct.PLL.PLLN = 10;
 8000a64:	230a      	movs	r3, #10
 8000a66:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000a6a:	2307      	movs	r3, #7
 8000a6c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000a70:	2302      	movs	r3, #2
 8000a72:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000a76:	2302      	movs	r3, #2
 8000a78:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000a7c:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000a80:	4618      	mov	r0, r3
 8000a82:	f001 f9b5 	bl	8001df0 <HAL_RCC_OscConfig>
 8000a86:	4603      	mov	r3, r0
 8000a88:	2b00      	cmp	r3, #0
 8000a8a:	d001      	beq.n	8000a90 <SystemClock_Config+0x88>
  {
    Error_Handler();
 8000a8c:	f000 f840 	bl	8000b10 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000a90:	230f      	movs	r3, #15
 8000a92:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000a96:	2303      	movs	r3, #3
 8000a98:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000a9c:	2300      	movs	r3, #0
 8000a9e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000aa2:	2300      	movs	r3, #0
 8000aa4:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000aa8:	2300      	movs	r3, #0
 8000aaa:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000aae:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8000ab2:	2104      	movs	r1, #4
 8000ab4:	4618      	mov	r0, r3
 8000ab6:	f001 fd4b 	bl	8002550 <HAL_RCC_ClockConfig>
 8000aba:	4603      	mov	r3, r0
 8000abc:	2b00      	cmp	r3, #0
 8000abe:	d001      	beq.n	8000ac4 <SystemClock_Config+0xbc>
  {
    Error_Handler();
 8000ac0:	f000 f826 	bl	8000b10 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC|RCC_PERIPHCLK_USART2
 8000ac4:	4b11      	ldr	r3, [pc, #68]	; (8000b0c <SystemClock_Config+0x104>)
 8000ac6:	603b      	str	r3, [r7, #0]
                              |RCC_PERIPHCLK_UART4|RCC_PERIPHCLK_UART5
                              |RCC_PERIPHCLK_I2C3;
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000ac8:	2300      	movs	r3, #0
 8000aca:	63fb      	str	r3, [r7, #60]	; 0x3c
  PeriphClkInit.Uart4ClockSelection = RCC_UART4CLKSOURCE_PCLK1;
 8000acc:	2300      	movs	r3, #0
 8000ace:	647b      	str	r3, [r7, #68]	; 0x44
  PeriphClkInit.Uart5ClockSelection = RCC_UART5CLKSOURCE_PCLK1;
 8000ad0:	2300      	movs	r3, #0
 8000ad2:	64bb      	str	r3, [r7, #72]	; 0x48
  PeriphClkInit.I2c3ClockSelection = RCC_I2C3CLKSOURCE_PCLK1;
 8000ad4:	2300      	movs	r3, #0
 8000ad6:	65bb      	str	r3, [r7, #88]	; 0x58
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8000ad8:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000adc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000ae0:	463b      	mov	r3, r7
 8000ae2:	4618      	mov	r0, r3
 8000ae4:	f001 ff38 	bl	8002958 <HAL_RCCEx_PeriphCLKConfig>
 8000ae8:	4603      	mov	r3, r0
 8000aea:	2b00      	cmp	r3, #0
 8000aec:	d001      	beq.n	8000af2 <SystemClock_Config+0xea>
  {
    Error_Handler();
 8000aee:	f000 f80f 	bl	8000b10 <Error_Handler>
  }
  /** Configure the main internal regulator output voltage 
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000af2:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000af6:	f001 f925 	bl	8001d44 <HAL_PWREx_ControlVoltageScaling>
 8000afa:	4603      	mov	r3, r0
 8000afc:	2b00      	cmp	r3, #0
 8000afe:	d001      	beq.n	8000b04 <SystemClock_Config+0xfc>
  {
    Error_Handler();
 8000b00:	f000 f806 	bl	8000b10 <Error_Handler>
  }
}
 8000b04:	bf00      	nop
 8000b06:	37e0      	adds	r7, #224	; 0xe0
 8000b08:	46bd      	mov	sp, r7
 8000b0a:	bd80      	pop	{r7, pc}
 8000b0c:	0002011a 	.word	0x0002011a

08000b10 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b10:	b480      	push	{r7}
 8000b12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000b14:	bf00      	nop
 8000b16:	46bd      	mov	sp, r7
 8000b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b1c:	4770      	bx	lr
	...

08000b20 <Set_time>:
/* USER CODE BEGIN 0 */
char time[10];
char date[10];


void Set_time(void) {
 8000b20:	b580      	push	{r7, lr}
 8000b22:	b086      	sub	sp, #24
 8000b24:	af00      	add	r7, sp, #0
	  RTC_TimeTypeDef sTime = {0};
 8000b26:	1d3b      	adds	r3, r7, #4
 8000b28:	2200      	movs	r2, #0
 8000b2a:	601a      	str	r2, [r3, #0]
 8000b2c:	605a      	str	r2, [r3, #4]
 8000b2e:	609a      	str	r2, [r3, #8]
 8000b30:	60da      	str	r2, [r3, #12]
 8000b32:	611a      	str	r2, [r3, #16]
	  RTC_DateTypeDef sDate = {0};
 8000b34:	2300      	movs	r3, #0
 8000b36:	603b      	str	r3, [r7, #0]
	  /** Initialize RTC and set the Time and Date
	  */
	  sTime.Hours = 10;
 8000b38:	230a      	movs	r3, #10
 8000b3a:	713b      	strb	r3, [r7, #4]
	  sTime.Minutes = 20;
 8000b3c:	2314      	movs	r3, #20
 8000b3e:	717b      	strb	r3, [r7, #5]
	  sTime.Seconds = 0;
 8000b40:	2300      	movs	r3, #0
 8000b42:	71bb      	strb	r3, [r7, #6]
	  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8000b44:	2300      	movs	r3, #0
 8000b46:	613b      	str	r3, [r7, #16]
	  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8000b48:	2300      	movs	r3, #0
 8000b4a:	617b      	str	r3, [r7, #20]
	  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN) != HAL_OK)
 8000b4c:	1d3b      	adds	r3, r7, #4
 8000b4e:	2200      	movs	r2, #0
 8000b50:	4619      	mov	r1, r3
 8000b52:	480f      	ldr	r0, [pc, #60]	; (8000b90 <Set_time+0x70>)
 8000b54:	f002 fc2e 	bl	80033b4 <HAL_RTC_SetTime>
 8000b58:	4603      	mov	r3, r0
 8000b5a:	2b00      	cmp	r3, #0
 8000b5c:	d001      	beq.n	8000b62 <Set_time+0x42>
	  {
	    Error_Handler();
 8000b5e:	f7ff ffd7 	bl	8000b10 <Error_Handler>
	  }
	  sDate.WeekDay = RTC_WEEKDAY_THURSDAY;
 8000b62:	2304      	movs	r3, #4
 8000b64:	703b      	strb	r3, [r7, #0]
	  sDate.Month = RTC_MONTH_DECEMBER;
 8000b66:	2312      	movs	r3, #18
 8000b68:	707b      	strb	r3, [r7, #1]
	  sDate.Date = 5;
 8000b6a:	2305      	movs	r3, #5
 8000b6c:	70bb      	strb	r3, [r7, #2]
	  sDate.Year = 0;
 8000b6e:	2300      	movs	r3, #0
 8000b70:	70fb      	strb	r3, [r7, #3]

	  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BIN) != HAL_OK)
 8000b72:	463b      	mov	r3, r7
 8000b74:	2200      	movs	r2, #0
 8000b76:	4619      	mov	r1, r3
 8000b78:	4805      	ldr	r0, [pc, #20]	; (8000b90 <Set_time+0x70>)
 8000b7a:	f002 fd14 	bl	80035a6 <HAL_RTC_SetDate>
 8000b7e:	4603      	mov	r3, r0
 8000b80:	2b00      	cmp	r3, #0
 8000b82:	d001      	beq.n	8000b88 <Set_time+0x68>
	  {
	    Error_Handler();
 8000b84:	f7ff ffc4 	bl	8000b10 <Error_Handler>
	  }
}
 8000b88:	bf00      	nop
 8000b8a:	3718      	adds	r7, #24
 8000b8c:	46bd      	mov	sp, r7
 8000b8e:	bd80      	pop	{r7, pc}
 8000b90:	200000f0 	.word	0x200000f0

08000b94 <Set_alarm>:

void Set_alarm(void) {
 8000b94:	b580      	push	{r7, lr}
 8000b96:	b08a      	sub	sp, #40	; 0x28
 8000b98:	af00      	add	r7, sp, #0
	  RTC_AlarmTypeDef sAlarm = {0};
 8000b9a:	463b      	mov	r3, r7
 8000b9c:	2228      	movs	r2, #40	; 0x28
 8000b9e:	2100      	movs	r1, #0
 8000ba0:	4618      	mov	r0, r3
 8000ba2:	f003 ffd1 	bl	8004b48 <memset>
	  /** Enable the Alarm A
	  */
	  sAlarm.AlarmTime.Hours = (10-48);
 8000ba6:	23da      	movs	r3, #218	; 0xda
 8000ba8:	703b      	strb	r3, [r7, #0]
	  sAlarm.AlarmTime.Minutes = (21-48);
 8000baa:	23e5      	movs	r3, #229	; 0xe5
 8000bac:	707b      	strb	r3, [r7, #1]
	  sAlarm.AlarmTime.Seconds = (0-48);
 8000bae:	23d0      	movs	r3, #208	; 0xd0
 8000bb0:	70bb      	strb	r3, [r7, #2]
	  sAlarm.AlarmTime.SubSeconds = 0;
 8000bb2:	2300      	movs	r3, #0
 8000bb4:	607b      	str	r3, [r7, #4]
	  sAlarm.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8000bb6:	2300      	movs	r3, #0
 8000bb8:	60fb      	str	r3, [r7, #12]
	  sAlarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8000bba:	2300      	movs	r3, #0
 8000bbc:	613b      	str	r3, [r7, #16]
	  sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
 8000bbe:	2300      	movs	r3, #0
 8000bc0:	617b      	str	r3, [r7, #20]
	  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL;
 8000bc2:	2300      	movs	r3, #0
 8000bc4:	61bb      	str	r3, [r7, #24]
	  sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 8000bc6:	2300      	movs	r3, #0
 8000bc8:	61fb      	str	r3, [r7, #28]
	  sAlarm.AlarmDateWeekDay = 12;
 8000bca:	230c      	movs	r3, #12
 8000bcc:	f887 3020 	strb.w	r3, [r7, #32]
	  sAlarm.Alarm = RTC_ALARM_A;
 8000bd0:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000bd4:	627b      	str	r3, [r7, #36]	; 0x24
	  if (HAL_RTC_SetAlarm(&hrtc, &sAlarm, RTC_FORMAT_BIN) != HAL_OK)
 8000bd6:	463b      	mov	r3, r7
 8000bd8:	2200      	movs	r2, #0
 8000bda:	4619      	mov	r1, r3
 8000bdc:	4805      	ldr	r0, [pc, #20]	; (8000bf4 <Set_alarm+0x60>)
 8000bde:	f002 fdb6 	bl	800374e <HAL_RTC_SetAlarm>
 8000be2:	4603      	mov	r3, r0
 8000be4:	2b00      	cmp	r3, #0
 8000be6:	d001      	beq.n	8000bec <Set_alarm+0x58>
	  {
	    Error_Handler();
 8000be8:	f7ff ff92 	bl	8000b10 <Error_Handler>
	  }
}
 8000bec:	bf00      	nop
 8000bee:	3728      	adds	r7, #40	; 0x28
 8000bf0:	46bd      	mov	sp, r7
 8000bf2:	bd80      	pop	{r7, pc}
 8000bf4:	200000f0 	.word	0x200000f0

08000bf8 <Get_time>:

char current_time[10];
char* Get_time(void) {
 8000bf8:	b580      	push	{r7, lr}
 8000bfa:	b088      	sub	sp, #32
 8000bfc:	af00      	add	r7, sp, #0

	RTC_DateTypeDef gDate;
	RTC_TimeTypeDef gTime;

	/* Get the RTC current Time */
	HAL_RTC_GetTime(&hrtc, &gTime, RTC_FORMAT_BIN);
 8000bfe:	1d3b      	adds	r3, r7, #4
 8000c00:	2200      	movs	r2, #0
 8000c02:	4619      	mov	r1, r3
 8000c04:	4832      	ldr	r0, [pc, #200]	; (8000cd0 <Get_time+0xd8>)
 8000c06:	f002 fc72 	bl	80034ee <HAL_RTC_GetTime>
	/* Get the RTC current Time */
	HAL_RTC_GetDate(&hrtc, &gDate, RTC_FORMAT_BIN);
 8000c0a:	f107 0318 	add.w	r3, r7, #24
 8000c0e:	2200      	movs	r2, #0
 8000c10:	4619      	mov	r1, r3
 8000c12:	482f      	ldr	r0, [pc, #188]	; (8000cd0 <Get_time+0xd8>)
 8000c14:	f002 fd4e 	bl	80036b4 <HAL_RTC_GetDate>

	hh = gTime.Hours;
 8000c18:	793b      	ldrb	r3, [r7, #4]
 8000c1a:	77fb      	strb	r3, [r7, #31]
	mm = gTime.Minutes;
 8000c1c:	797b      	ldrb	r3, [r7, #5]
 8000c1e:	77bb      	strb	r3, [r7, #30]
	ss = gTime.Seconds;
 8000c20:	79bb      	ldrb	r3, [r7, #6]
 8000c22:	777b      	strb	r3, [r7, #29]

	current_time[0] = (hh / 10) + 0x30;
 8000c24:	7ffb      	ldrb	r3, [r7, #31]
 8000c26:	4a2b      	ldr	r2, [pc, #172]	; (8000cd4 <Get_time+0xdc>)
 8000c28:	fba2 2303 	umull	r2, r3, r2, r3
 8000c2c:	08db      	lsrs	r3, r3, #3
 8000c2e:	b2db      	uxtb	r3, r3
 8000c30:	3330      	adds	r3, #48	; 0x30
 8000c32:	b2da      	uxtb	r2, r3
 8000c34:	4b28      	ldr	r3, [pc, #160]	; (8000cd8 <Get_time+0xe0>)
 8000c36:	701a      	strb	r2, [r3, #0]
	current_time[1] = (hh % 10) + 0x30;
 8000c38:	7ffa      	ldrb	r2, [r7, #31]
 8000c3a:	4b26      	ldr	r3, [pc, #152]	; (8000cd4 <Get_time+0xdc>)
 8000c3c:	fba3 1302 	umull	r1, r3, r3, r2
 8000c40:	08d9      	lsrs	r1, r3, #3
 8000c42:	460b      	mov	r3, r1
 8000c44:	009b      	lsls	r3, r3, #2
 8000c46:	440b      	add	r3, r1
 8000c48:	005b      	lsls	r3, r3, #1
 8000c4a:	1ad3      	subs	r3, r2, r3
 8000c4c:	b2db      	uxtb	r3, r3
 8000c4e:	3330      	adds	r3, #48	; 0x30
 8000c50:	b2da      	uxtb	r2, r3
 8000c52:	4b21      	ldr	r3, [pc, #132]	; (8000cd8 <Get_time+0xe0>)
 8000c54:	705a      	strb	r2, [r3, #1]

	// Ascii Semicolon ':'
	current_time[2] = 0x3a;
 8000c56:	4b20      	ldr	r3, [pc, #128]	; (8000cd8 <Get_time+0xe0>)
 8000c58:	223a      	movs	r2, #58	; 0x3a
 8000c5a:	709a      	strb	r2, [r3, #2]

	current_time[3] = (mm / 10) + 0x30;
 8000c5c:	7fbb      	ldrb	r3, [r7, #30]
 8000c5e:	4a1d      	ldr	r2, [pc, #116]	; (8000cd4 <Get_time+0xdc>)
 8000c60:	fba2 2303 	umull	r2, r3, r2, r3
 8000c64:	08db      	lsrs	r3, r3, #3
 8000c66:	b2db      	uxtb	r3, r3
 8000c68:	3330      	adds	r3, #48	; 0x30
 8000c6a:	b2da      	uxtb	r2, r3
 8000c6c:	4b1a      	ldr	r3, [pc, #104]	; (8000cd8 <Get_time+0xe0>)
 8000c6e:	70da      	strb	r2, [r3, #3]
	current_time[4] = (mm % 10) + 0x30;
 8000c70:	7fba      	ldrb	r2, [r7, #30]
 8000c72:	4b18      	ldr	r3, [pc, #96]	; (8000cd4 <Get_time+0xdc>)
 8000c74:	fba3 1302 	umull	r1, r3, r3, r2
 8000c78:	08d9      	lsrs	r1, r3, #3
 8000c7a:	460b      	mov	r3, r1
 8000c7c:	009b      	lsls	r3, r3, #2
 8000c7e:	440b      	add	r3, r1
 8000c80:	005b      	lsls	r3, r3, #1
 8000c82:	1ad3      	subs	r3, r2, r3
 8000c84:	b2db      	uxtb	r3, r3
 8000c86:	3330      	adds	r3, #48	; 0x30
 8000c88:	b2da      	uxtb	r2, r3
 8000c8a:	4b13      	ldr	r3, [pc, #76]	; (8000cd8 <Get_time+0xe0>)
 8000c8c:	711a      	strb	r2, [r3, #4]

	// Ascii Semicolon ':'
	current_time[5] = 0x3a;
 8000c8e:	4b12      	ldr	r3, [pc, #72]	; (8000cd8 <Get_time+0xe0>)
 8000c90:	223a      	movs	r2, #58	; 0x3a
 8000c92:	715a      	strb	r2, [r3, #5]

	current_time[6] = (ss / 10) + 0x30;
 8000c94:	7f7b      	ldrb	r3, [r7, #29]
 8000c96:	4a0f      	ldr	r2, [pc, #60]	; (8000cd4 <Get_time+0xdc>)
 8000c98:	fba2 2303 	umull	r2, r3, r2, r3
 8000c9c:	08db      	lsrs	r3, r3, #3
 8000c9e:	b2db      	uxtb	r3, r3
 8000ca0:	3330      	adds	r3, #48	; 0x30
 8000ca2:	b2da      	uxtb	r2, r3
 8000ca4:	4b0c      	ldr	r3, [pc, #48]	; (8000cd8 <Get_time+0xe0>)
 8000ca6:	719a      	strb	r2, [r3, #6]
	current_time[7] = (ss % 10) + 0x30;
 8000ca8:	7f7a      	ldrb	r2, [r7, #29]
 8000caa:	4b0a      	ldr	r3, [pc, #40]	; (8000cd4 <Get_time+0xdc>)
 8000cac:	fba3 1302 	umull	r1, r3, r3, r2
 8000cb0:	08d9      	lsrs	r1, r3, #3
 8000cb2:	460b      	mov	r3, r1
 8000cb4:	009b      	lsls	r3, r3, #2
 8000cb6:	440b      	add	r3, r1
 8000cb8:	005b      	lsls	r3, r3, #1
 8000cba:	1ad3      	subs	r3, r2, r3
 8000cbc:	b2db      	uxtb	r3, r3
 8000cbe:	3330      	adds	r3, #48	; 0x30
 8000cc0:	b2da      	uxtb	r2, r3
 8000cc2:	4b05      	ldr	r3, [pc, #20]	; (8000cd8 <Get_time+0xe0>)
 8000cc4:	71da      	strb	r2, [r3, #7]

	// Bad solution??
	// memcpy(time_done, current_time, 10);
	return current_time;
 8000cc6:	4b04      	ldr	r3, [pc, #16]	; (8000cd8 <Get_time+0xe0>)
}
 8000cc8:	4618      	mov	r0, r3
 8000cca:	3720      	adds	r7, #32
 8000ccc:	46bd      	mov	sp, r7
 8000cce:	bd80      	pop	{r7, pc}
 8000cd0:	200000f0 	.word	0x200000f0
 8000cd4:	cccccccd 	.word	0xcccccccd
 8000cd8:	200000e4 	.word	0x200000e4

08000cdc <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 8000cdc:	b580      	push	{r7, lr}
 8000cde:	af00      	add	r7, sp, #0
  /** Initialize RTC Only 
  */
  hrtc.Instance = RTC;
 8000ce0:	4b10      	ldr	r3, [pc, #64]	; (8000d24 <MX_RTC_Init+0x48>)
 8000ce2:	4a11      	ldr	r2, [pc, #68]	; (8000d28 <MX_RTC_Init+0x4c>)
 8000ce4:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8000ce6:	4b0f      	ldr	r3, [pc, #60]	; (8000d24 <MX_RTC_Init+0x48>)
 8000ce8:	2200      	movs	r2, #0
 8000cea:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8000cec:	4b0d      	ldr	r3, [pc, #52]	; (8000d24 <MX_RTC_Init+0x48>)
 8000cee:	227f      	movs	r2, #127	; 0x7f
 8000cf0:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8000cf2:	4b0c      	ldr	r3, [pc, #48]	; (8000d24 <MX_RTC_Init+0x48>)
 8000cf4:	22ff      	movs	r2, #255	; 0xff
 8000cf6:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8000cf8:	4b0a      	ldr	r3, [pc, #40]	; (8000d24 <MX_RTC_Init+0x48>)
 8000cfa:	2200      	movs	r2, #0
 8000cfc:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8000cfe:	4b09      	ldr	r3, [pc, #36]	; (8000d24 <MX_RTC_Init+0x48>)
 8000d00:	2200      	movs	r2, #0
 8000d02:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8000d04:	4b07      	ldr	r3, [pc, #28]	; (8000d24 <MX_RTC_Init+0x48>)
 8000d06:	2200      	movs	r2, #0
 8000d08:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8000d0a:	4b06      	ldr	r3, [pc, #24]	; (8000d24 <MX_RTC_Init+0x48>)
 8000d0c:	2200      	movs	r2, #0
 8000d0e:	61da      	str	r2, [r3, #28]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8000d10:	4804      	ldr	r0, [pc, #16]	; (8000d24 <MX_RTC_Init+0x48>)
 8000d12:	f002 fad1 	bl	80032b8 <HAL_RTC_Init>
 8000d16:	4603      	mov	r3, r0
 8000d18:	2b00      	cmp	r3, #0
 8000d1a:	d001      	beq.n	8000d20 <MX_RTC_Init+0x44>
  {
    Error_Handler();
 8000d1c:	f7ff fef8 	bl	8000b10 <Error_Handler>

  /* USER CODE BEGIN Check_RTC_BKUP */
    
  /* USER CODE END Check_RTC_BKUP */

}
 8000d20:	bf00      	nop
 8000d22:	bd80      	pop	{r7, pc}
 8000d24:	200000f0 	.word	0x200000f0
 8000d28:	40002800 	.word	0x40002800

08000d2c <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 8000d2c:	b480      	push	{r7}
 8000d2e:	b083      	sub	sp, #12
 8000d30:	af00      	add	r7, sp, #0
 8000d32:	6078      	str	r0, [r7, #4]

  if(rtcHandle->Instance==RTC)
 8000d34:	687b      	ldr	r3, [r7, #4]
 8000d36:	681b      	ldr	r3, [r3, #0]
 8000d38:	4a08      	ldr	r2, [pc, #32]	; (8000d5c <HAL_RTC_MspInit+0x30>)
 8000d3a:	4293      	cmp	r3, r2
 8000d3c:	d107      	bne.n	8000d4e <HAL_RTC_MspInit+0x22>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 8000d3e:	4b08      	ldr	r3, [pc, #32]	; (8000d60 <HAL_RTC_MspInit+0x34>)
 8000d40:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8000d44:	4a06      	ldr	r2, [pc, #24]	; (8000d60 <HAL_RTC_MspInit+0x34>)
 8000d46:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000d4a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 8000d4e:	bf00      	nop
 8000d50:	370c      	adds	r7, #12
 8000d52:	46bd      	mov	sp, r7
 8000d54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d58:	4770      	bx	lr
 8000d5a:	bf00      	nop
 8000d5c:	40002800 	.word	0x40002800
 8000d60:	40021000 	.word	0x40021000

08000d64 <MX_SPI2_Init>:

SPI_HandleTypeDef hspi2;

/* SPI2 init function */
void MX_SPI2_Init(void)
{
 8000d64:	b580      	push	{r7, lr}
 8000d66:	af00      	add	r7, sp, #0

  hspi2.Instance = SPI2;
 8000d68:	4b1b      	ldr	r3, [pc, #108]	; (8000dd8 <MX_SPI2_Init+0x74>)
 8000d6a:	4a1c      	ldr	r2, [pc, #112]	; (8000ddc <MX_SPI2_Init+0x78>)
 8000d6c:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8000d6e:	4b1a      	ldr	r3, [pc, #104]	; (8000dd8 <MX_SPI2_Init+0x74>)
 8000d70:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000d74:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8000d76:	4b18      	ldr	r3, [pc, #96]	; (8000dd8 <MX_SPI2_Init+0x74>)
 8000d78:	2200      	movs	r2, #0
 8000d7a:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8000d7c:	4b16      	ldr	r3, [pc, #88]	; (8000dd8 <MX_SPI2_Init+0x74>)
 8000d7e:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8000d82:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8000d84:	4b14      	ldr	r3, [pc, #80]	; (8000dd8 <MX_SPI2_Init+0x74>)
 8000d86:	2202      	movs	r2, #2
 8000d88:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_2EDGE;
 8000d8a:	4b13      	ldr	r3, [pc, #76]	; (8000dd8 <MX_SPI2_Init+0x74>)
 8000d8c:	2201      	movs	r2, #1
 8000d8e:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8000d90:	4b11      	ldr	r3, [pc, #68]	; (8000dd8 <MX_SPI2_Init+0x74>)
 8000d92:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000d96:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 8000d98:	4b0f      	ldr	r3, [pc, #60]	; (8000dd8 <MX_SPI2_Init+0x74>)
 8000d9a:	2238      	movs	r2, #56	; 0x38
 8000d9c:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_LSB;
 8000d9e:	4b0e      	ldr	r3, [pc, #56]	; (8000dd8 <MX_SPI2_Init+0x74>)
 8000da0:	2280      	movs	r2, #128	; 0x80
 8000da2:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8000da4:	4b0c      	ldr	r3, [pc, #48]	; (8000dd8 <MX_SPI2_Init+0x74>)
 8000da6:	2200      	movs	r2, #0
 8000da8:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000daa:	4b0b      	ldr	r3, [pc, #44]	; (8000dd8 <MX_SPI2_Init+0x74>)
 8000dac:	2200      	movs	r2, #0
 8000dae:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 7;
 8000db0:	4b09      	ldr	r3, [pc, #36]	; (8000dd8 <MX_SPI2_Init+0x74>)
 8000db2:	2207      	movs	r2, #7
 8000db4:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000db6:	4b08      	ldr	r3, [pc, #32]	; (8000dd8 <MX_SPI2_Init+0x74>)
 8000db8:	2200      	movs	r2, #0
 8000dba:	631a      	str	r2, [r3, #48]	; 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8000dbc:	4b06      	ldr	r3, [pc, #24]	; (8000dd8 <MX_SPI2_Init+0x74>)
 8000dbe:	2200      	movs	r2, #0
 8000dc0:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8000dc2:	4805      	ldr	r0, [pc, #20]	; (8000dd8 <MX_SPI2_Init+0x74>)
 8000dc4:	f002 fec2 	bl	8003b4c <HAL_SPI_Init>
 8000dc8:	4603      	mov	r3, r0
 8000dca:	2b00      	cmp	r3, #0
 8000dcc:	d001      	beq.n	8000dd2 <MX_SPI2_Init+0x6e>
  {
    Error_Handler();
 8000dce:	f7ff fe9f 	bl	8000b10 <Error_Handler>
  }

}
 8000dd2:	bf00      	nop
 8000dd4:	bd80      	pop	{r7, pc}
 8000dd6:	bf00      	nop
 8000dd8:	2000012c 	.word	0x2000012c
 8000ddc:	40003800 	.word	0x40003800

08000de0 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8000de0:	b580      	push	{r7, lr}
 8000de2:	b08a      	sub	sp, #40	; 0x28
 8000de4:	af00      	add	r7, sp, #0
 8000de6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000de8:	f107 0314 	add.w	r3, r7, #20
 8000dec:	2200      	movs	r2, #0
 8000dee:	601a      	str	r2, [r3, #0]
 8000df0:	605a      	str	r2, [r3, #4]
 8000df2:	609a      	str	r2, [r3, #8]
 8000df4:	60da      	str	r2, [r3, #12]
 8000df6:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI2)
 8000df8:	687b      	ldr	r3, [r7, #4]
 8000dfa:	681b      	ldr	r3, [r3, #0]
 8000dfc:	4a25      	ldr	r2, [pc, #148]	; (8000e94 <HAL_SPI_MspInit+0xb4>)
 8000dfe:	4293      	cmp	r3, r2
 8000e00:	d144      	bne.n	8000e8c <HAL_SPI_MspInit+0xac>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* SPI2 clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8000e02:	4b25      	ldr	r3, [pc, #148]	; (8000e98 <HAL_SPI_MspInit+0xb8>)
 8000e04:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000e06:	4a24      	ldr	r2, [pc, #144]	; (8000e98 <HAL_SPI_MspInit+0xb8>)
 8000e08:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000e0c:	6593      	str	r3, [r2, #88]	; 0x58
 8000e0e:	4b22      	ldr	r3, [pc, #136]	; (8000e98 <HAL_SPI_MspInit+0xb8>)
 8000e10:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000e12:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000e16:	613b      	str	r3, [r7, #16]
 8000e18:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000e1a:	4b1f      	ldr	r3, [pc, #124]	; (8000e98 <HAL_SPI_MspInit+0xb8>)
 8000e1c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e1e:	4a1e      	ldr	r2, [pc, #120]	; (8000e98 <HAL_SPI_MspInit+0xb8>)
 8000e20:	f043 0304 	orr.w	r3, r3, #4
 8000e24:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000e26:	4b1c      	ldr	r3, [pc, #112]	; (8000e98 <HAL_SPI_MspInit+0xb8>)
 8000e28:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e2a:	f003 0304 	and.w	r3, r3, #4
 8000e2e:	60fb      	str	r3, [r7, #12]
 8000e30:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e32:	4b19      	ldr	r3, [pc, #100]	; (8000e98 <HAL_SPI_MspInit+0xb8>)
 8000e34:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e36:	4a18      	ldr	r2, [pc, #96]	; (8000e98 <HAL_SPI_MspInit+0xb8>)
 8000e38:	f043 0302 	orr.w	r3, r3, #2
 8000e3c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000e3e:	4b16      	ldr	r3, [pc, #88]	; (8000e98 <HAL_SPI_MspInit+0xb8>)
 8000e40:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e42:	f003 0302 	and.w	r3, r3, #2
 8000e46:	60bb      	str	r3, [r7, #8]
 8000e48:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration    
    PC2     ------> SPI2_MISO
    PC3     ------> SPI2_MOSI
    PB10     ------> SPI2_SCK 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000e4a:	230c      	movs	r3, #12
 8000e4c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e4e:	2302      	movs	r3, #2
 8000e50:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e52:	2300      	movs	r3, #0
 8000e54:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e56:	2303      	movs	r3, #3
 8000e58:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000e5a:	2305      	movs	r3, #5
 8000e5c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000e5e:	f107 0314 	add.w	r3, r7, #20
 8000e62:	4619      	mov	r1, r3
 8000e64:	480d      	ldr	r0, [pc, #52]	; (8000e9c <HAL_SPI_MspInit+0xbc>)
 8000e66:	f000 fc79 	bl	800175c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000e6a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000e6e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e70:	2302      	movs	r3, #2
 8000e72:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e74:	2300      	movs	r3, #0
 8000e76:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e78:	2303      	movs	r3, #3
 8000e7a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000e7c:	2305      	movs	r3, #5
 8000e7e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e80:	f107 0314 	add.w	r3, r7, #20
 8000e84:	4619      	mov	r1, r3
 8000e86:	4806      	ldr	r0, [pc, #24]	; (8000ea0 <HAL_SPI_MspInit+0xc0>)
 8000e88:	f000 fc68 	bl	800175c <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 8000e8c:	bf00      	nop
 8000e8e:	3728      	adds	r7, #40	; 0x28
 8000e90:	46bd      	mov	sp, r7
 8000e92:	bd80      	pop	{r7, pc}
 8000e94:	40003800 	.word	0x40003800
 8000e98:	40021000 	.word	0x40021000
 8000e9c:	48000800 	.word	0x48000800
 8000ea0:	48000400 	.word	0x48000400

08000ea4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000ea4:	b480      	push	{r7}
 8000ea6:	b083      	sub	sp, #12
 8000ea8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000eaa:	4b0f      	ldr	r3, [pc, #60]	; (8000ee8 <HAL_MspInit+0x44>)
 8000eac:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000eae:	4a0e      	ldr	r2, [pc, #56]	; (8000ee8 <HAL_MspInit+0x44>)
 8000eb0:	f043 0301 	orr.w	r3, r3, #1
 8000eb4:	6613      	str	r3, [r2, #96]	; 0x60
 8000eb6:	4b0c      	ldr	r3, [pc, #48]	; (8000ee8 <HAL_MspInit+0x44>)
 8000eb8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000eba:	f003 0301 	and.w	r3, r3, #1
 8000ebe:	607b      	str	r3, [r7, #4]
 8000ec0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000ec2:	4b09      	ldr	r3, [pc, #36]	; (8000ee8 <HAL_MspInit+0x44>)
 8000ec4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000ec6:	4a08      	ldr	r2, [pc, #32]	; (8000ee8 <HAL_MspInit+0x44>)
 8000ec8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000ecc:	6593      	str	r3, [r2, #88]	; 0x58
 8000ece:	4b06      	ldr	r3, [pc, #24]	; (8000ee8 <HAL_MspInit+0x44>)
 8000ed0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000ed2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000ed6:	603b      	str	r3, [r7, #0]
 8000ed8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000eda:	bf00      	nop
 8000edc:	370c      	adds	r7, #12
 8000ede:	46bd      	mov	sp, r7
 8000ee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ee4:	4770      	bx	lr
 8000ee6:	bf00      	nop
 8000ee8:	40021000 	.word	0x40021000

08000eec <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000eec:	b480      	push	{r7}
 8000eee:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000ef0:	bf00      	nop
 8000ef2:	46bd      	mov	sp, r7
 8000ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ef8:	4770      	bx	lr

08000efa <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000efa:	b480      	push	{r7}
 8000efc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000efe:	e7fe      	b.n	8000efe <HardFault_Handler+0x4>

08000f00 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000f00:	b480      	push	{r7}
 8000f02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000f04:	e7fe      	b.n	8000f04 <MemManage_Handler+0x4>

08000f06 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000f06:	b480      	push	{r7}
 8000f08:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000f0a:	e7fe      	b.n	8000f0a <BusFault_Handler+0x4>

08000f0c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000f0c:	b480      	push	{r7}
 8000f0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000f10:	e7fe      	b.n	8000f10 <UsageFault_Handler+0x4>

08000f12 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000f12:	b480      	push	{r7}
 8000f14:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000f16:	bf00      	nop
 8000f18:	46bd      	mov	sp, r7
 8000f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f1e:	4770      	bx	lr

08000f20 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000f20:	b480      	push	{r7}
 8000f22:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000f24:	bf00      	nop
 8000f26:	46bd      	mov	sp, r7
 8000f28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f2c:	4770      	bx	lr

08000f2e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000f2e:	b480      	push	{r7}
 8000f30:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000f32:	bf00      	nop
 8000f34:	46bd      	mov	sp, r7
 8000f36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f3a:	4770      	bx	lr

08000f3c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000f3c:	b580      	push	{r7, lr}
 8000f3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000f40:	f000 fae6 	bl	8001510 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000f44:	bf00      	nop
 8000f46:	bd80      	pop	{r7, pc}

08000f48 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000f48:	b580      	push	{r7, lr}
 8000f4a:	b086      	sub	sp, #24
 8000f4c:	af00      	add	r7, sp, #0
 8000f4e:	60f8      	str	r0, [r7, #12]
 8000f50:	60b9      	str	r1, [r7, #8]
 8000f52:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000f54:	2300      	movs	r3, #0
 8000f56:	617b      	str	r3, [r7, #20]
 8000f58:	e00a      	b.n	8000f70 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000f5a:	f3af 8000 	nop.w
 8000f5e:	4601      	mov	r1, r0
 8000f60:	68bb      	ldr	r3, [r7, #8]
 8000f62:	1c5a      	adds	r2, r3, #1
 8000f64:	60ba      	str	r2, [r7, #8]
 8000f66:	b2ca      	uxtb	r2, r1
 8000f68:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000f6a:	697b      	ldr	r3, [r7, #20]
 8000f6c:	3301      	adds	r3, #1
 8000f6e:	617b      	str	r3, [r7, #20]
 8000f70:	697a      	ldr	r2, [r7, #20]
 8000f72:	687b      	ldr	r3, [r7, #4]
 8000f74:	429a      	cmp	r2, r3
 8000f76:	dbf0      	blt.n	8000f5a <_read+0x12>
	}

return len;
 8000f78:	687b      	ldr	r3, [r7, #4]
}
 8000f7a:	4618      	mov	r0, r3
 8000f7c:	3718      	adds	r7, #24
 8000f7e:	46bd      	mov	sp, r7
 8000f80:	bd80      	pop	{r7, pc}

08000f82 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000f82:	b580      	push	{r7, lr}
 8000f84:	b086      	sub	sp, #24
 8000f86:	af00      	add	r7, sp, #0
 8000f88:	60f8      	str	r0, [r7, #12]
 8000f8a:	60b9      	str	r1, [r7, #8]
 8000f8c:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000f8e:	2300      	movs	r3, #0
 8000f90:	617b      	str	r3, [r7, #20]
 8000f92:	e009      	b.n	8000fa8 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8000f94:	68bb      	ldr	r3, [r7, #8]
 8000f96:	1c5a      	adds	r2, r3, #1
 8000f98:	60ba      	str	r2, [r7, #8]
 8000f9a:	781b      	ldrb	r3, [r3, #0]
 8000f9c:	4618      	mov	r0, r3
 8000f9e:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000fa2:	697b      	ldr	r3, [r7, #20]
 8000fa4:	3301      	adds	r3, #1
 8000fa6:	617b      	str	r3, [r7, #20]
 8000fa8:	697a      	ldr	r2, [r7, #20]
 8000faa:	687b      	ldr	r3, [r7, #4]
 8000fac:	429a      	cmp	r2, r3
 8000fae:	dbf1      	blt.n	8000f94 <_write+0x12>
	}
	return len;
 8000fb0:	687b      	ldr	r3, [r7, #4]
}
 8000fb2:	4618      	mov	r0, r3
 8000fb4:	3718      	adds	r7, #24
 8000fb6:	46bd      	mov	sp, r7
 8000fb8:	bd80      	pop	{r7, pc}

08000fba <_close>:

int _close(int file)
{
 8000fba:	b480      	push	{r7}
 8000fbc:	b083      	sub	sp, #12
 8000fbe:	af00      	add	r7, sp, #0
 8000fc0:	6078      	str	r0, [r7, #4]
	return -1;
 8000fc2:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000fc6:	4618      	mov	r0, r3
 8000fc8:	370c      	adds	r7, #12
 8000fca:	46bd      	mov	sp, r7
 8000fcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fd0:	4770      	bx	lr

08000fd2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000fd2:	b480      	push	{r7}
 8000fd4:	b083      	sub	sp, #12
 8000fd6:	af00      	add	r7, sp, #0
 8000fd8:	6078      	str	r0, [r7, #4]
 8000fda:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000fdc:	683b      	ldr	r3, [r7, #0]
 8000fde:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000fe2:	605a      	str	r2, [r3, #4]
	return 0;
 8000fe4:	2300      	movs	r3, #0
}
 8000fe6:	4618      	mov	r0, r3
 8000fe8:	370c      	adds	r7, #12
 8000fea:	46bd      	mov	sp, r7
 8000fec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ff0:	4770      	bx	lr

08000ff2 <_isatty>:

int _isatty(int file)
{
 8000ff2:	b480      	push	{r7}
 8000ff4:	b083      	sub	sp, #12
 8000ff6:	af00      	add	r7, sp, #0
 8000ff8:	6078      	str	r0, [r7, #4]
	return 1;
 8000ffa:	2301      	movs	r3, #1
}
 8000ffc:	4618      	mov	r0, r3
 8000ffe:	370c      	adds	r7, #12
 8001000:	46bd      	mov	sp, r7
 8001002:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001006:	4770      	bx	lr

08001008 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001008:	b480      	push	{r7}
 800100a:	b085      	sub	sp, #20
 800100c:	af00      	add	r7, sp, #0
 800100e:	60f8      	str	r0, [r7, #12]
 8001010:	60b9      	str	r1, [r7, #8]
 8001012:	607a      	str	r2, [r7, #4]
	return 0;
 8001014:	2300      	movs	r3, #0
}
 8001016:	4618      	mov	r0, r3
 8001018:	3714      	adds	r7, #20
 800101a:	46bd      	mov	sp, r7
 800101c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001020:	4770      	bx	lr
	...

08001024 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8001024:	b580      	push	{r7, lr}
 8001026:	b084      	sub	sp, #16
 8001028:	af00      	add	r7, sp, #0
 800102a:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 800102c:	4b11      	ldr	r3, [pc, #68]	; (8001074 <_sbrk+0x50>)
 800102e:	681b      	ldr	r3, [r3, #0]
 8001030:	2b00      	cmp	r3, #0
 8001032:	d102      	bne.n	800103a <_sbrk+0x16>
		heap_end = &end;
 8001034:	4b0f      	ldr	r3, [pc, #60]	; (8001074 <_sbrk+0x50>)
 8001036:	4a10      	ldr	r2, [pc, #64]	; (8001078 <_sbrk+0x54>)
 8001038:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 800103a:	4b0e      	ldr	r3, [pc, #56]	; (8001074 <_sbrk+0x50>)
 800103c:	681b      	ldr	r3, [r3, #0]
 800103e:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8001040:	4b0c      	ldr	r3, [pc, #48]	; (8001074 <_sbrk+0x50>)
 8001042:	681a      	ldr	r2, [r3, #0]
 8001044:	687b      	ldr	r3, [r7, #4]
 8001046:	4413      	add	r3, r2
 8001048:	466a      	mov	r2, sp
 800104a:	4293      	cmp	r3, r2
 800104c:	d907      	bls.n	800105e <_sbrk+0x3a>
	{
		errno = ENOMEM;
 800104e:	f003 fd51 	bl	8004af4 <__errno>
 8001052:	4602      	mov	r2, r0
 8001054:	230c      	movs	r3, #12
 8001056:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8001058:	f04f 33ff 	mov.w	r3, #4294967295
 800105c:	e006      	b.n	800106c <_sbrk+0x48>
	}

	heap_end += incr;
 800105e:	4b05      	ldr	r3, [pc, #20]	; (8001074 <_sbrk+0x50>)
 8001060:	681a      	ldr	r2, [r3, #0]
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	4413      	add	r3, r2
 8001066:	4a03      	ldr	r2, [pc, #12]	; (8001074 <_sbrk+0x50>)
 8001068:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 800106a:	68fb      	ldr	r3, [r7, #12]
}
 800106c:	4618      	mov	r0, r3
 800106e:	3710      	adds	r7, #16
 8001070:	46bd      	mov	sp, r7
 8001072:	bd80      	pop	{r7, pc}
 8001074:	2000008c 	.word	0x2000008c
 8001078:	20000318 	.word	0x20000318

0800107c <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 800107c:	b480      	push	{r7}
 800107e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001080:	4b17      	ldr	r3, [pc, #92]	; (80010e0 <SystemInit+0x64>)
 8001082:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001086:	4a16      	ldr	r2, [pc, #88]	; (80010e0 <SystemInit+0x64>)
 8001088:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800108c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8001090:	4b14      	ldr	r3, [pc, #80]	; (80010e4 <SystemInit+0x68>)
 8001092:	681b      	ldr	r3, [r3, #0]
 8001094:	4a13      	ldr	r2, [pc, #76]	; (80010e4 <SystemInit+0x68>)
 8001096:	f043 0301 	orr.w	r3, r3, #1
 800109a:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 800109c:	4b11      	ldr	r3, [pc, #68]	; (80010e4 <SystemInit+0x68>)
 800109e:	2200      	movs	r2, #0
 80010a0:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 80010a2:	4b10      	ldr	r3, [pc, #64]	; (80010e4 <SystemInit+0x68>)
 80010a4:	681b      	ldr	r3, [r3, #0]
 80010a6:	4a0f      	ldr	r2, [pc, #60]	; (80010e4 <SystemInit+0x68>)
 80010a8:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 80010ac:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 80010b0:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 80010b2:	4b0c      	ldr	r3, [pc, #48]	; (80010e4 <SystemInit+0x68>)
 80010b4:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80010b8:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80010ba:	4b0a      	ldr	r3, [pc, #40]	; (80010e4 <SystemInit+0x68>)
 80010bc:	681b      	ldr	r3, [r3, #0]
 80010be:	4a09      	ldr	r2, [pc, #36]	; (80010e4 <SystemInit+0x68>)
 80010c0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80010c4:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 80010c6:	4b07      	ldr	r3, [pc, #28]	; (80010e4 <SystemInit+0x68>)
 80010c8:	2200      	movs	r2, #0
 80010ca:	619a      	str	r2, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80010cc:	4b04      	ldr	r3, [pc, #16]	; (80010e0 <SystemInit+0x64>)
 80010ce:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80010d2:	609a      	str	r2, [r3, #8]
#endif
}
 80010d4:	bf00      	nop
 80010d6:	46bd      	mov	sp, r7
 80010d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010dc:	4770      	bx	lr
 80010de:	bf00      	nop
 80010e0:	e000ed00 	.word	0xe000ed00
 80010e4:	40021000 	.word	0x40021000

080010e8 <Test_program>:
 *  Created on: Nov 25, 2019
 *      Author: samfl
 */
#include <test.h>

void Test_program(void) {
 80010e8:	b580      	push	{r7, lr}
 80010ea:	af00      	add	r7, sp, #0
	// OK
	Test_display_background("green");
 80010ec:	4804      	ldr	r0, [pc, #16]	; (8001100 <Test_program+0x18>)
 80010ee:	f000 f817 	bl	8001120 <Test_display_background>
	// OK
	Test_display();
 80010f2:	f000 f807 	bl	8001104 <Test_display>

	Test_rtc();
 80010f6:	f000 f81e 	bl	8001136 <Test_rtc>
	return;
 80010fa:	bf00      	nop
}
 80010fc:	bd80      	pop	{r7, pc}
 80010fe:	bf00      	nop
 8001100:	08005960 	.word	0x08005960

08001104 <Test_display>:

void Test_display(void) {
 8001104:	b580      	push	{r7, lr}
 8001106:	af00      	add	r7, sp, #0
	Init_display();
 8001108:	f7ff faf5 	bl	80006f6 <Init_display>
//	Write_data(0x61);
	HAL_GPIO_WritePin(Display_white_GPIO_Port, Display_white_Pin, SET);
 800110c:	2201      	movs	r2, #1
 800110e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001112:	4802      	ldr	r0, [pc, #8]	; (800111c <Test_display+0x18>)
 8001114:	f000 fcca 	bl	8001aac <HAL_GPIO_WritePin>
}
 8001118:	bf00      	nop
 800111a:	bd80      	pop	{r7, pc}
 800111c:	48000800 	.word	0x48000800

08001120 <Test_display_background>:

void Test_display_background(char color[]) {
 8001120:	b580      	push	{r7, lr}
 8001122:	b082      	sub	sp, #8
 8001124:	af00      	add	r7, sp, #0
 8001126:	6078      	str	r0, [r7, #4]
	Display_color(color);
 8001128:	6878      	ldr	r0, [r7, #4]
 800112a:	f7ff fa79 	bl	8000620 <Display_color>
}
 800112e:	bf00      	nop
 8001130:	3708      	adds	r7, #8
 8001132:	46bd      	mov	sp, r7
 8001134:	bd80      	pop	{r7, pc}

08001136 <Test_rtc>:

void Test_rtc(void) {
 8001136:	b580      	push	{r7, lr}
 8001138:	af00      	add	r7, sp, #0
	Set_time();
 800113a:	f7ff fcf1 	bl	8000b20 <Set_time>
	Set_alarm();
 800113e:	f7ff fd29 	bl	8000b94 <Set_alarm>

	for(;;) {
		Write_ins(0x01);
 8001142:	2001      	movs	r0, #1
 8001144:	f7ff faaa 	bl	800069c <Write_ins>
		Write_string(Get_time());
 8001148:	f7ff fd56 	bl	8000bf8 <Get_time>
 800114c:	4603      	mov	r3, r0
 800114e:	4618      	mov	r0, r3
 8001150:	f7ff fa50 	bl	80005f4 <Write_string>
		HAL_Delay(1000);
 8001154:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001158:	f000 f9f8 	bl	800154c <HAL_Delay>
	for(;;) {
 800115c:	e7f1      	b.n	8001142 <Test_rtc+0xc>
	...

08001160 <MX_UART4_Init>:
UART_HandleTypeDef huart5;
UART_HandleTypeDef huart2;

/* UART4 init function */
void MX_UART4_Init(void)
{
 8001160:	b580      	push	{r7, lr}
 8001162:	af00      	add	r7, sp, #0

  huart4.Instance = UART4;
 8001164:	4b14      	ldr	r3, [pc, #80]	; (80011b8 <MX_UART4_Init+0x58>)
 8001166:	4a15      	ldr	r2, [pc, #84]	; (80011bc <MX_UART4_Init+0x5c>)
 8001168:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 800116a:	4b13      	ldr	r3, [pc, #76]	; (80011b8 <MX_UART4_Init+0x58>)
 800116c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001170:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8001172:	4b11      	ldr	r3, [pc, #68]	; (80011b8 <MX_UART4_Init+0x58>)
 8001174:	2200      	movs	r2, #0
 8001176:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8001178:	4b0f      	ldr	r3, [pc, #60]	; (80011b8 <MX_UART4_Init+0x58>)
 800117a:	2200      	movs	r2, #0
 800117c:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 800117e:	4b0e      	ldr	r3, [pc, #56]	; (80011b8 <MX_UART4_Init+0x58>)
 8001180:	2200      	movs	r2, #0
 8001182:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8001184:	4b0c      	ldr	r3, [pc, #48]	; (80011b8 <MX_UART4_Init+0x58>)
 8001186:	220c      	movs	r2, #12
 8001188:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800118a:	4b0b      	ldr	r3, [pc, #44]	; (80011b8 <MX_UART4_Init+0x58>)
 800118c:	2200      	movs	r2, #0
 800118e:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8001190:	4b09      	ldr	r3, [pc, #36]	; (80011b8 <MX_UART4_Init+0x58>)
 8001192:	2200      	movs	r2, #0
 8001194:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001196:	4b08      	ldr	r3, [pc, #32]	; (80011b8 <MX_UART4_Init+0x58>)
 8001198:	2200      	movs	r2, #0
 800119a:	621a      	str	r2, [r3, #32]
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800119c:	4b06      	ldr	r3, [pc, #24]	; (80011b8 <MX_UART4_Init+0x58>)
 800119e:	2200      	movs	r2, #0
 80011a0:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart4) != HAL_OK)
 80011a2:	4805      	ldr	r0, [pc, #20]	; (80011b8 <MX_UART4_Init+0x58>)
 80011a4:	f002 ffdf 	bl	8004166 <HAL_UART_Init>
 80011a8:	4603      	mov	r3, r0
 80011aa:	2b00      	cmp	r3, #0
 80011ac:	d001      	beq.n	80011b2 <MX_UART4_Init+0x52>
  {
    Error_Handler();
 80011ae:	f7ff fcaf 	bl	8000b10 <Error_Handler>
  }

}
 80011b2:	bf00      	nop
 80011b4:	bd80      	pop	{r7, pc}
 80011b6:	bf00      	nop
 80011b8:	20000210 	.word	0x20000210
 80011bc:	40004c00 	.word	0x40004c00

080011c0 <MX_UART5_Init>:
/* UART5 init function */
void MX_UART5_Init(void)
{
 80011c0:	b580      	push	{r7, lr}
 80011c2:	af00      	add	r7, sp, #0

  huart5.Instance = UART5;
 80011c4:	4b14      	ldr	r3, [pc, #80]	; (8001218 <MX_UART5_Init+0x58>)
 80011c6:	4a15      	ldr	r2, [pc, #84]	; (800121c <MX_UART5_Init+0x5c>)
 80011c8:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 115200;
 80011ca:	4b13      	ldr	r3, [pc, #76]	; (8001218 <MX_UART5_Init+0x58>)
 80011cc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80011d0:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 80011d2:	4b11      	ldr	r3, [pc, #68]	; (8001218 <MX_UART5_Init+0x58>)
 80011d4:	2200      	movs	r2, #0
 80011d6:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 80011d8:	4b0f      	ldr	r3, [pc, #60]	; (8001218 <MX_UART5_Init+0x58>)
 80011da:	2200      	movs	r2, #0
 80011dc:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 80011de:	4b0e      	ldr	r3, [pc, #56]	; (8001218 <MX_UART5_Init+0x58>)
 80011e0:	2200      	movs	r2, #0
 80011e2:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 80011e4:	4b0c      	ldr	r3, [pc, #48]	; (8001218 <MX_UART5_Init+0x58>)
 80011e6:	220c      	movs	r2, #12
 80011e8:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80011ea:	4b0b      	ldr	r3, [pc, #44]	; (8001218 <MX_UART5_Init+0x58>)
 80011ec:	2200      	movs	r2, #0
 80011ee:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 80011f0:	4b09      	ldr	r3, [pc, #36]	; (8001218 <MX_UART5_Init+0x58>)
 80011f2:	2200      	movs	r2, #0
 80011f4:	61da      	str	r2, [r3, #28]
  huart5.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80011f6:	4b08      	ldr	r3, [pc, #32]	; (8001218 <MX_UART5_Init+0x58>)
 80011f8:	2200      	movs	r2, #0
 80011fa:	621a      	str	r2, [r3, #32]
  huart5.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80011fc:	4b06      	ldr	r3, [pc, #24]	; (8001218 <MX_UART5_Init+0x58>)
 80011fe:	2200      	movs	r2, #0
 8001200:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart5) != HAL_OK)
 8001202:	4805      	ldr	r0, [pc, #20]	; (8001218 <MX_UART5_Init+0x58>)
 8001204:	f002 ffaf 	bl	8004166 <HAL_UART_Init>
 8001208:	4603      	mov	r3, r0
 800120a:	2b00      	cmp	r3, #0
 800120c:	d001      	beq.n	8001212 <MX_UART5_Init+0x52>
  {
    Error_Handler();
 800120e:	f7ff fc7f 	bl	8000b10 <Error_Handler>
  }

}
 8001212:	bf00      	nop
 8001214:	bd80      	pop	{r7, pc}
 8001216:	bf00      	nop
 8001218:	20000190 	.word	0x20000190
 800121c:	40005000 	.word	0x40005000

08001220 <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8001220:	b580      	push	{r7, lr}
 8001222:	af00      	add	r7, sp, #0

  huart2.Instance = USART2;
 8001224:	4b14      	ldr	r3, [pc, #80]	; (8001278 <MX_USART2_UART_Init+0x58>)
 8001226:	4a15      	ldr	r2, [pc, #84]	; (800127c <MX_USART2_UART_Init+0x5c>)
 8001228:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800122a:	4b13      	ldr	r3, [pc, #76]	; (8001278 <MX_USART2_UART_Init+0x58>)
 800122c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001230:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001232:	4b11      	ldr	r3, [pc, #68]	; (8001278 <MX_USART2_UART_Init+0x58>)
 8001234:	2200      	movs	r2, #0
 8001236:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001238:	4b0f      	ldr	r3, [pc, #60]	; (8001278 <MX_USART2_UART_Init+0x58>)
 800123a:	2200      	movs	r2, #0
 800123c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800123e:	4b0e      	ldr	r3, [pc, #56]	; (8001278 <MX_USART2_UART_Init+0x58>)
 8001240:	2200      	movs	r2, #0
 8001242:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001244:	4b0c      	ldr	r3, [pc, #48]	; (8001278 <MX_USART2_UART_Init+0x58>)
 8001246:	220c      	movs	r2, #12
 8001248:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800124a:	4b0b      	ldr	r3, [pc, #44]	; (8001278 <MX_USART2_UART_Init+0x58>)
 800124c:	2200      	movs	r2, #0
 800124e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001250:	4b09      	ldr	r3, [pc, #36]	; (8001278 <MX_USART2_UART_Init+0x58>)
 8001252:	2200      	movs	r2, #0
 8001254:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001256:	4b08      	ldr	r3, [pc, #32]	; (8001278 <MX_USART2_UART_Init+0x58>)
 8001258:	2200      	movs	r2, #0
 800125a:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800125c:	4b06      	ldr	r3, [pc, #24]	; (8001278 <MX_USART2_UART_Init+0x58>)
 800125e:	2200      	movs	r2, #0
 8001260:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001262:	4805      	ldr	r0, [pc, #20]	; (8001278 <MX_USART2_UART_Init+0x58>)
 8001264:	f002 ff7f 	bl	8004166 <HAL_UART_Init>
 8001268:	4603      	mov	r3, r0
 800126a:	2b00      	cmp	r3, #0
 800126c:	d001      	beq.n	8001272 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 800126e:	f7ff fc4f 	bl	8000b10 <Error_Handler>
  }

}
 8001272:	bf00      	nop
 8001274:	bd80      	pop	{r7, pc}
 8001276:	bf00      	nop
 8001278:	20000290 	.word	0x20000290
 800127c:	40004400 	.word	0x40004400

08001280 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001280:	b580      	push	{r7, lr}
 8001282:	b08e      	sub	sp, #56	; 0x38
 8001284:	af00      	add	r7, sp, #0
 8001286:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001288:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800128c:	2200      	movs	r2, #0
 800128e:	601a      	str	r2, [r3, #0]
 8001290:	605a      	str	r2, [r3, #4]
 8001292:	609a      	str	r2, [r3, #8]
 8001294:	60da      	str	r2, [r3, #12]
 8001296:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==UART4)
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	681b      	ldr	r3, [r3, #0]
 800129c:	4a54      	ldr	r2, [pc, #336]	; (80013f0 <HAL_UART_MspInit+0x170>)
 800129e:	4293      	cmp	r3, r2
 80012a0:	d129      	bne.n	80012f6 <HAL_UART_MspInit+0x76>
  {
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
    /* UART4 clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 80012a2:	4b54      	ldr	r3, [pc, #336]	; (80013f4 <HAL_UART_MspInit+0x174>)
 80012a4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80012a6:	4a53      	ldr	r2, [pc, #332]	; (80013f4 <HAL_UART_MspInit+0x174>)
 80012a8:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80012ac:	6593      	str	r3, [r2, #88]	; 0x58
 80012ae:	4b51      	ldr	r3, [pc, #324]	; (80013f4 <HAL_UART_MspInit+0x174>)
 80012b0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80012b2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80012b6:	623b      	str	r3, [r7, #32]
 80012b8:	6a3b      	ldr	r3, [r7, #32]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80012ba:	4b4e      	ldr	r3, [pc, #312]	; (80013f4 <HAL_UART_MspInit+0x174>)
 80012bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80012be:	4a4d      	ldr	r2, [pc, #308]	; (80013f4 <HAL_UART_MspInit+0x174>)
 80012c0:	f043 0301 	orr.w	r3, r3, #1
 80012c4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80012c6:	4b4b      	ldr	r3, [pc, #300]	; (80013f4 <HAL_UART_MspInit+0x174>)
 80012c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80012ca:	f003 0301 	and.w	r3, r3, #1
 80012ce:	61fb      	str	r3, [r7, #28]
 80012d0:	69fb      	ldr	r3, [r7, #28]
    /**UART4 GPIO Configuration    
    PA0     ------> UART4_TX
    PA1     ------> UART4_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80012d2:	2303      	movs	r3, #3
 80012d4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012d6:	2302      	movs	r3, #2
 80012d8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012da:	2300      	movs	r3, #0
 80012dc:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80012de:	2303      	movs	r3, #3
 80012e0:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 80012e2:	2308      	movs	r3, #8
 80012e4:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012e6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80012ea:	4619      	mov	r1, r3
 80012ec:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80012f0:	f000 fa34 	bl	800175c <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 80012f4:	e078      	b.n	80013e8 <HAL_UART_MspInit+0x168>
  else if(uartHandle->Instance==UART5)
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	681b      	ldr	r3, [r3, #0]
 80012fa:	4a3f      	ldr	r2, [pc, #252]	; (80013f8 <HAL_UART_MspInit+0x178>)
 80012fc:	4293      	cmp	r3, r2
 80012fe:	d145      	bne.n	800138c <HAL_UART_MspInit+0x10c>
    __HAL_RCC_UART5_CLK_ENABLE();
 8001300:	4b3c      	ldr	r3, [pc, #240]	; (80013f4 <HAL_UART_MspInit+0x174>)
 8001302:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001304:	4a3b      	ldr	r2, [pc, #236]	; (80013f4 <HAL_UART_MspInit+0x174>)
 8001306:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800130a:	6593      	str	r3, [r2, #88]	; 0x58
 800130c:	4b39      	ldr	r3, [pc, #228]	; (80013f4 <HAL_UART_MspInit+0x174>)
 800130e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001310:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001314:	61bb      	str	r3, [r7, #24]
 8001316:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001318:	4b36      	ldr	r3, [pc, #216]	; (80013f4 <HAL_UART_MspInit+0x174>)
 800131a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800131c:	4a35      	ldr	r2, [pc, #212]	; (80013f4 <HAL_UART_MspInit+0x174>)
 800131e:	f043 0304 	orr.w	r3, r3, #4
 8001322:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001324:	4b33      	ldr	r3, [pc, #204]	; (80013f4 <HAL_UART_MspInit+0x174>)
 8001326:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001328:	f003 0304 	and.w	r3, r3, #4
 800132c:	617b      	str	r3, [r7, #20]
 800132e:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001330:	4b30      	ldr	r3, [pc, #192]	; (80013f4 <HAL_UART_MspInit+0x174>)
 8001332:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001334:	4a2f      	ldr	r2, [pc, #188]	; (80013f4 <HAL_UART_MspInit+0x174>)
 8001336:	f043 0308 	orr.w	r3, r3, #8
 800133a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800133c:	4b2d      	ldr	r3, [pc, #180]	; (80013f4 <HAL_UART_MspInit+0x174>)
 800133e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001340:	f003 0308 	and.w	r3, r3, #8
 8001344:	613b      	str	r3, [r7, #16]
 8001346:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8001348:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800134c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800134e:	2302      	movs	r3, #2
 8001350:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001352:	2300      	movs	r3, #0
 8001354:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001356:	2303      	movs	r3, #3
 8001358:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 800135a:	2308      	movs	r3, #8
 800135c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800135e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001362:	4619      	mov	r1, r3
 8001364:	4825      	ldr	r0, [pc, #148]	; (80013fc <HAL_UART_MspInit+0x17c>)
 8001366:	f000 f9f9 	bl	800175c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 800136a:	2304      	movs	r3, #4
 800136c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800136e:	2302      	movs	r3, #2
 8001370:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001372:	2300      	movs	r3, #0
 8001374:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001376:	2303      	movs	r3, #3
 8001378:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 800137a:	2308      	movs	r3, #8
 800137c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800137e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001382:	4619      	mov	r1, r3
 8001384:	481e      	ldr	r0, [pc, #120]	; (8001400 <HAL_UART_MspInit+0x180>)
 8001386:	f000 f9e9 	bl	800175c <HAL_GPIO_Init>
}
 800138a:	e02d      	b.n	80013e8 <HAL_UART_MspInit+0x168>
  else if(uartHandle->Instance==USART2)
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	681b      	ldr	r3, [r3, #0]
 8001390:	4a1c      	ldr	r2, [pc, #112]	; (8001404 <HAL_UART_MspInit+0x184>)
 8001392:	4293      	cmp	r3, r2
 8001394:	d128      	bne.n	80013e8 <HAL_UART_MspInit+0x168>
    __HAL_RCC_USART2_CLK_ENABLE();
 8001396:	4b17      	ldr	r3, [pc, #92]	; (80013f4 <HAL_UART_MspInit+0x174>)
 8001398:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800139a:	4a16      	ldr	r2, [pc, #88]	; (80013f4 <HAL_UART_MspInit+0x174>)
 800139c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80013a0:	6593      	str	r3, [r2, #88]	; 0x58
 80013a2:	4b14      	ldr	r3, [pc, #80]	; (80013f4 <HAL_UART_MspInit+0x174>)
 80013a4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80013a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80013aa:	60fb      	str	r3, [r7, #12]
 80013ac:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80013ae:	4b11      	ldr	r3, [pc, #68]	; (80013f4 <HAL_UART_MspInit+0x174>)
 80013b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80013b2:	4a10      	ldr	r2, [pc, #64]	; (80013f4 <HAL_UART_MspInit+0x174>)
 80013b4:	f043 0301 	orr.w	r3, r3, #1
 80013b8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80013ba:	4b0e      	ldr	r3, [pc, #56]	; (80013f4 <HAL_UART_MspInit+0x174>)
 80013bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80013be:	f003 0301 	and.w	r3, r3, #1
 80013c2:	60bb      	str	r3, [r7, #8]
 80013c4:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80013c6:	230c      	movs	r3, #12
 80013c8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013ca:	2302      	movs	r3, #2
 80013cc:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013ce:	2300      	movs	r3, #0
 80013d0:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80013d2:	2303      	movs	r3, #3
 80013d4:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80013d6:	2307      	movs	r3, #7
 80013d8:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013da:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80013de:	4619      	mov	r1, r3
 80013e0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80013e4:	f000 f9ba 	bl	800175c <HAL_GPIO_Init>
}
 80013e8:	bf00      	nop
 80013ea:	3738      	adds	r7, #56	; 0x38
 80013ec:	46bd      	mov	sp, r7
 80013ee:	bd80      	pop	{r7, pc}
 80013f0:	40004c00 	.word	0x40004c00
 80013f4:	40021000 	.word	0x40021000
 80013f8:	40005000 	.word	0x40005000
 80013fc:	48000800 	.word	0x48000800
 8001400:	48000c00 	.word	0x48000c00
 8001404:	40004400 	.word	0x40004400

08001408 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001408:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001440 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 800140c:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 800140e:	e003      	b.n	8001418 <LoopCopyDataInit>

08001410 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8001410:	4b0c      	ldr	r3, [pc, #48]	; (8001444 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8001412:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8001414:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8001416:	3104      	adds	r1, #4

08001418 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8001418:	480b      	ldr	r0, [pc, #44]	; (8001448 <LoopForever+0xa>)
	ldr	r3, =_edata
 800141a:	4b0c      	ldr	r3, [pc, #48]	; (800144c <LoopForever+0xe>)
	adds	r2, r0, r1
 800141c:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 800141e:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8001420:	d3f6      	bcc.n	8001410 <CopyDataInit>
	ldr	r2, =_sbss
 8001422:	4a0b      	ldr	r2, [pc, #44]	; (8001450 <LoopForever+0x12>)
	b	LoopFillZerobss
 8001424:	e002      	b.n	800142c <LoopFillZerobss>

08001426 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8001426:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8001428:	f842 3b04 	str.w	r3, [r2], #4

0800142c <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 800142c:	4b09      	ldr	r3, [pc, #36]	; (8001454 <LoopForever+0x16>)
	cmp	r2, r3
 800142e:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8001430:	d3f9      	bcc.n	8001426 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001432:	f7ff fe23 	bl	800107c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001436:	f003 fb63 	bl	8004b00 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800143a:	f7ff facd 	bl	80009d8 <main>

0800143e <LoopForever>:

LoopForever:
    b LoopForever
 800143e:	e7fe      	b.n	800143e <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001440:	20018000 	.word	0x20018000
	ldr	r3, =_sidata
 8001444:	08005a58 	.word	0x08005a58
	ldr	r0, =_sdata
 8001448:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 800144c:	20000070 	.word	0x20000070
	ldr	r2, =_sbss
 8001450:	20000070 	.word	0x20000070
	ldr	r3, = _ebss
 8001454:	20000318 	.word	0x20000318

08001458 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001458:	e7fe      	b.n	8001458 <ADC1_2_IRQHandler>
	...

0800145c <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800145c:	b580      	push	{r7, lr}
 800145e:	b082      	sub	sp, #8
 8001460:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001462:	2300      	movs	r3, #0
 8001464:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001466:	4b0c      	ldr	r3, [pc, #48]	; (8001498 <HAL_Init+0x3c>)
 8001468:	681b      	ldr	r3, [r3, #0]
 800146a:	4a0b      	ldr	r2, [pc, #44]	; (8001498 <HAL_Init+0x3c>)
 800146c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001470:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001472:	2003      	movs	r0, #3
 8001474:	f000 f93e 	bl	80016f4 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001478:	2000      	movs	r0, #0
 800147a:	f000 f80f 	bl	800149c <HAL_InitTick>
 800147e:	4603      	mov	r3, r0
 8001480:	2b00      	cmp	r3, #0
 8001482:	d002      	beq.n	800148a <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8001484:	2301      	movs	r3, #1
 8001486:	71fb      	strb	r3, [r7, #7]
 8001488:	e001      	b.n	800148e <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800148a:	f7ff fd0b 	bl	8000ea4 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800148e:	79fb      	ldrb	r3, [r7, #7]
}
 8001490:	4618      	mov	r0, r3
 8001492:	3708      	adds	r7, #8
 8001494:	46bd      	mov	sp, r7
 8001496:	bd80      	pop	{r7, pc}
 8001498:	40022000 	.word	0x40022000

0800149c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800149c:	b580      	push	{r7, lr}
 800149e:	b084      	sub	sp, #16
 80014a0:	af00      	add	r7, sp, #0
 80014a2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80014a4:	2300      	movs	r3, #0
 80014a6:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 80014a8:	4b16      	ldr	r3, [pc, #88]	; (8001504 <HAL_InitTick+0x68>)
 80014aa:	681b      	ldr	r3, [r3, #0]
 80014ac:	2b00      	cmp	r3, #0
 80014ae:	d022      	beq.n	80014f6 <HAL_InitTick+0x5a>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 80014b0:	4b15      	ldr	r3, [pc, #84]	; (8001508 <HAL_InitTick+0x6c>)
 80014b2:	681a      	ldr	r2, [r3, #0]
 80014b4:	4b13      	ldr	r3, [pc, #76]	; (8001504 <HAL_InitTick+0x68>)
 80014b6:	681b      	ldr	r3, [r3, #0]
 80014b8:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80014bc:	fbb1 f3f3 	udiv	r3, r1, r3
 80014c0:	fbb2 f3f3 	udiv	r3, r2, r3
 80014c4:	4618      	mov	r0, r3
 80014c6:	f000 f93c 	bl	8001742 <HAL_SYSTICK_Config>
 80014ca:	4603      	mov	r3, r0
 80014cc:	2b00      	cmp	r3, #0
 80014ce:	d10f      	bne.n	80014f0 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	2b0f      	cmp	r3, #15
 80014d4:	d809      	bhi.n	80014ea <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80014d6:	2200      	movs	r2, #0
 80014d8:	6879      	ldr	r1, [r7, #4]
 80014da:	f04f 30ff 	mov.w	r0, #4294967295
 80014de:	f000 f914 	bl	800170a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80014e2:	4a0a      	ldr	r2, [pc, #40]	; (800150c <HAL_InitTick+0x70>)
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	6013      	str	r3, [r2, #0]
 80014e8:	e007      	b.n	80014fa <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 80014ea:	2301      	movs	r3, #1
 80014ec:	73fb      	strb	r3, [r7, #15]
 80014ee:	e004      	b.n	80014fa <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 80014f0:	2301      	movs	r3, #1
 80014f2:	73fb      	strb	r3, [r7, #15]
 80014f4:	e001      	b.n	80014fa <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 80014f6:	2301      	movs	r3, #1
 80014f8:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80014fa:	7bfb      	ldrb	r3, [r7, #15]
}
 80014fc:	4618      	mov	r0, r3
 80014fe:	3710      	adds	r7, #16
 8001500:	46bd      	mov	sp, r7
 8001502:	bd80      	pop	{r7, pc}
 8001504:	20000008 	.word	0x20000008
 8001508:	20000000 	.word	0x20000000
 800150c:	20000004 	.word	0x20000004

08001510 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001510:	b480      	push	{r7}
 8001512:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001514:	4b05      	ldr	r3, [pc, #20]	; (800152c <HAL_IncTick+0x1c>)
 8001516:	681a      	ldr	r2, [r3, #0]
 8001518:	4b05      	ldr	r3, [pc, #20]	; (8001530 <HAL_IncTick+0x20>)
 800151a:	681b      	ldr	r3, [r3, #0]
 800151c:	4413      	add	r3, r2
 800151e:	4a03      	ldr	r2, [pc, #12]	; (800152c <HAL_IncTick+0x1c>)
 8001520:	6013      	str	r3, [r2, #0]
}
 8001522:	bf00      	nop
 8001524:	46bd      	mov	sp, r7
 8001526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800152a:	4770      	bx	lr
 800152c:	20000310 	.word	0x20000310
 8001530:	20000008 	.word	0x20000008

08001534 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001534:	b480      	push	{r7}
 8001536:	af00      	add	r7, sp, #0
  return uwTick;
 8001538:	4b03      	ldr	r3, [pc, #12]	; (8001548 <HAL_GetTick+0x14>)
 800153a:	681b      	ldr	r3, [r3, #0]
}
 800153c:	4618      	mov	r0, r3
 800153e:	46bd      	mov	sp, r7
 8001540:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001544:	4770      	bx	lr
 8001546:	bf00      	nop
 8001548:	20000310 	.word	0x20000310

0800154c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800154c:	b580      	push	{r7, lr}
 800154e:	b084      	sub	sp, #16
 8001550:	af00      	add	r7, sp, #0
 8001552:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001554:	f7ff ffee 	bl	8001534 <HAL_GetTick>
 8001558:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 800155e:	68fb      	ldr	r3, [r7, #12]
 8001560:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001564:	d004      	beq.n	8001570 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8001566:	4b09      	ldr	r3, [pc, #36]	; (800158c <HAL_Delay+0x40>)
 8001568:	681b      	ldr	r3, [r3, #0]
 800156a:	68fa      	ldr	r2, [r7, #12]
 800156c:	4413      	add	r3, r2
 800156e:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001570:	bf00      	nop
 8001572:	f7ff ffdf 	bl	8001534 <HAL_GetTick>
 8001576:	4602      	mov	r2, r0
 8001578:	68bb      	ldr	r3, [r7, #8]
 800157a:	1ad3      	subs	r3, r2, r3
 800157c:	68fa      	ldr	r2, [r7, #12]
 800157e:	429a      	cmp	r2, r3
 8001580:	d8f7      	bhi.n	8001572 <HAL_Delay+0x26>
  {
  }
}
 8001582:	bf00      	nop
 8001584:	3710      	adds	r7, #16
 8001586:	46bd      	mov	sp, r7
 8001588:	bd80      	pop	{r7, pc}
 800158a:	bf00      	nop
 800158c:	20000008 	.word	0x20000008

08001590 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001590:	b480      	push	{r7}
 8001592:	b085      	sub	sp, #20
 8001594:	af00      	add	r7, sp, #0
 8001596:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	f003 0307 	and.w	r3, r3, #7
 800159e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80015a0:	4b0c      	ldr	r3, [pc, #48]	; (80015d4 <__NVIC_SetPriorityGrouping+0x44>)
 80015a2:	68db      	ldr	r3, [r3, #12]
 80015a4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80015a6:	68ba      	ldr	r2, [r7, #8]
 80015a8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80015ac:	4013      	ands	r3, r2
 80015ae:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80015b0:	68fb      	ldr	r3, [r7, #12]
 80015b2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80015b4:	68bb      	ldr	r3, [r7, #8]
 80015b6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80015b8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80015bc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80015c0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80015c2:	4a04      	ldr	r2, [pc, #16]	; (80015d4 <__NVIC_SetPriorityGrouping+0x44>)
 80015c4:	68bb      	ldr	r3, [r7, #8]
 80015c6:	60d3      	str	r3, [r2, #12]
}
 80015c8:	bf00      	nop
 80015ca:	3714      	adds	r7, #20
 80015cc:	46bd      	mov	sp, r7
 80015ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015d2:	4770      	bx	lr
 80015d4:	e000ed00 	.word	0xe000ed00

080015d8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80015d8:	b480      	push	{r7}
 80015da:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80015dc:	4b04      	ldr	r3, [pc, #16]	; (80015f0 <__NVIC_GetPriorityGrouping+0x18>)
 80015de:	68db      	ldr	r3, [r3, #12]
 80015e0:	0a1b      	lsrs	r3, r3, #8
 80015e2:	f003 0307 	and.w	r3, r3, #7
}
 80015e6:	4618      	mov	r0, r3
 80015e8:	46bd      	mov	sp, r7
 80015ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ee:	4770      	bx	lr
 80015f0:	e000ed00 	.word	0xe000ed00

080015f4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80015f4:	b480      	push	{r7}
 80015f6:	b083      	sub	sp, #12
 80015f8:	af00      	add	r7, sp, #0
 80015fa:	4603      	mov	r3, r0
 80015fc:	6039      	str	r1, [r7, #0]
 80015fe:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001600:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001604:	2b00      	cmp	r3, #0
 8001606:	db0a      	blt.n	800161e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001608:	683b      	ldr	r3, [r7, #0]
 800160a:	b2da      	uxtb	r2, r3
 800160c:	490c      	ldr	r1, [pc, #48]	; (8001640 <__NVIC_SetPriority+0x4c>)
 800160e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001612:	0112      	lsls	r2, r2, #4
 8001614:	b2d2      	uxtb	r2, r2
 8001616:	440b      	add	r3, r1
 8001618:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800161c:	e00a      	b.n	8001634 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800161e:	683b      	ldr	r3, [r7, #0]
 8001620:	b2da      	uxtb	r2, r3
 8001622:	4908      	ldr	r1, [pc, #32]	; (8001644 <__NVIC_SetPriority+0x50>)
 8001624:	79fb      	ldrb	r3, [r7, #7]
 8001626:	f003 030f 	and.w	r3, r3, #15
 800162a:	3b04      	subs	r3, #4
 800162c:	0112      	lsls	r2, r2, #4
 800162e:	b2d2      	uxtb	r2, r2
 8001630:	440b      	add	r3, r1
 8001632:	761a      	strb	r2, [r3, #24]
}
 8001634:	bf00      	nop
 8001636:	370c      	adds	r7, #12
 8001638:	46bd      	mov	sp, r7
 800163a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800163e:	4770      	bx	lr
 8001640:	e000e100 	.word	0xe000e100
 8001644:	e000ed00 	.word	0xe000ed00

08001648 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001648:	b480      	push	{r7}
 800164a:	b089      	sub	sp, #36	; 0x24
 800164c:	af00      	add	r7, sp, #0
 800164e:	60f8      	str	r0, [r7, #12]
 8001650:	60b9      	str	r1, [r7, #8]
 8001652:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001654:	68fb      	ldr	r3, [r7, #12]
 8001656:	f003 0307 	and.w	r3, r3, #7
 800165a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800165c:	69fb      	ldr	r3, [r7, #28]
 800165e:	f1c3 0307 	rsb	r3, r3, #7
 8001662:	2b04      	cmp	r3, #4
 8001664:	bf28      	it	cs
 8001666:	2304      	movcs	r3, #4
 8001668:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800166a:	69fb      	ldr	r3, [r7, #28]
 800166c:	3304      	adds	r3, #4
 800166e:	2b06      	cmp	r3, #6
 8001670:	d902      	bls.n	8001678 <NVIC_EncodePriority+0x30>
 8001672:	69fb      	ldr	r3, [r7, #28]
 8001674:	3b03      	subs	r3, #3
 8001676:	e000      	b.n	800167a <NVIC_EncodePriority+0x32>
 8001678:	2300      	movs	r3, #0
 800167a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800167c:	f04f 32ff 	mov.w	r2, #4294967295
 8001680:	69bb      	ldr	r3, [r7, #24]
 8001682:	fa02 f303 	lsl.w	r3, r2, r3
 8001686:	43da      	mvns	r2, r3
 8001688:	68bb      	ldr	r3, [r7, #8]
 800168a:	401a      	ands	r2, r3
 800168c:	697b      	ldr	r3, [r7, #20]
 800168e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001690:	f04f 31ff 	mov.w	r1, #4294967295
 8001694:	697b      	ldr	r3, [r7, #20]
 8001696:	fa01 f303 	lsl.w	r3, r1, r3
 800169a:	43d9      	mvns	r1, r3
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80016a0:	4313      	orrs	r3, r2
         );
}
 80016a2:	4618      	mov	r0, r3
 80016a4:	3724      	adds	r7, #36	; 0x24
 80016a6:	46bd      	mov	sp, r7
 80016a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ac:	4770      	bx	lr
	...

080016b0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80016b0:	b580      	push	{r7, lr}
 80016b2:	b082      	sub	sp, #8
 80016b4:	af00      	add	r7, sp, #0
 80016b6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	3b01      	subs	r3, #1
 80016bc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80016c0:	d301      	bcc.n	80016c6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80016c2:	2301      	movs	r3, #1
 80016c4:	e00f      	b.n	80016e6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80016c6:	4a0a      	ldr	r2, [pc, #40]	; (80016f0 <SysTick_Config+0x40>)
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	3b01      	subs	r3, #1
 80016cc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80016ce:	210f      	movs	r1, #15
 80016d0:	f04f 30ff 	mov.w	r0, #4294967295
 80016d4:	f7ff ff8e 	bl	80015f4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80016d8:	4b05      	ldr	r3, [pc, #20]	; (80016f0 <SysTick_Config+0x40>)
 80016da:	2200      	movs	r2, #0
 80016dc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80016de:	4b04      	ldr	r3, [pc, #16]	; (80016f0 <SysTick_Config+0x40>)
 80016e0:	2207      	movs	r2, #7
 80016e2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80016e4:	2300      	movs	r3, #0
}
 80016e6:	4618      	mov	r0, r3
 80016e8:	3708      	adds	r7, #8
 80016ea:	46bd      	mov	sp, r7
 80016ec:	bd80      	pop	{r7, pc}
 80016ee:	bf00      	nop
 80016f0:	e000e010 	.word	0xe000e010

080016f4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80016f4:	b580      	push	{r7, lr}
 80016f6:	b082      	sub	sp, #8
 80016f8:	af00      	add	r7, sp, #0
 80016fa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80016fc:	6878      	ldr	r0, [r7, #4]
 80016fe:	f7ff ff47 	bl	8001590 <__NVIC_SetPriorityGrouping>
}
 8001702:	bf00      	nop
 8001704:	3708      	adds	r7, #8
 8001706:	46bd      	mov	sp, r7
 8001708:	bd80      	pop	{r7, pc}

0800170a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800170a:	b580      	push	{r7, lr}
 800170c:	b086      	sub	sp, #24
 800170e:	af00      	add	r7, sp, #0
 8001710:	4603      	mov	r3, r0
 8001712:	60b9      	str	r1, [r7, #8]
 8001714:	607a      	str	r2, [r7, #4]
 8001716:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001718:	2300      	movs	r3, #0
 800171a:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800171c:	f7ff ff5c 	bl	80015d8 <__NVIC_GetPriorityGrouping>
 8001720:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001722:	687a      	ldr	r2, [r7, #4]
 8001724:	68b9      	ldr	r1, [r7, #8]
 8001726:	6978      	ldr	r0, [r7, #20]
 8001728:	f7ff ff8e 	bl	8001648 <NVIC_EncodePriority>
 800172c:	4602      	mov	r2, r0
 800172e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001732:	4611      	mov	r1, r2
 8001734:	4618      	mov	r0, r3
 8001736:	f7ff ff5d 	bl	80015f4 <__NVIC_SetPriority>
}
 800173a:	bf00      	nop
 800173c:	3718      	adds	r7, #24
 800173e:	46bd      	mov	sp, r7
 8001740:	bd80      	pop	{r7, pc}

08001742 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001742:	b580      	push	{r7, lr}
 8001744:	b082      	sub	sp, #8
 8001746:	af00      	add	r7, sp, #0
 8001748:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800174a:	6878      	ldr	r0, [r7, #4]
 800174c:	f7ff ffb0 	bl	80016b0 <SysTick_Config>
 8001750:	4603      	mov	r3, r0
}
 8001752:	4618      	mov	r0, r3
 8001754:	3708      	adds	r7, #8
 8001756:	46bd      	mov	sp, r7
 8001758:	bd80      	pop	{r7, pc}
	...

0800175c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800175c:	b480      	push	{r7}
 800175e:	b087      	sub	sp, #28
 8001760:	af00      	add	r7, sp, #0
 8001762:	6078      	str	r0, [r7, #4]
 8001764:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001766:	2300      	movs	r3, #0
 8001768:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800176a:	e17f      	b.n	8001a6c <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800176c:	683b      	ldr	r3, [r7, #0]
 800176e:	681a      	ldr	r2, [r3, #0]
 8001770:	2101      	movs	r1, #1
 8001772:	697b      	ldr	r3, [r7, #20]
 8001774:	fa01 f303 	lsl.w	r3, r1, r3
 8001778:	4013      	ands	r3, r2
 800177a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800177c:	68fb      	ldr	r3, [r7, #12]
 800177e:	2b00      	cmp	r3, #0
 8001780:	f000 8171 	beq.w	8001a66 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001784:	683b      	ldr	r3, [r7, #0]
 8001786:	685b      	ldr	r3, [r3, #4]
 8001788:	2b02      	cmp	r3, #2
 800178a:	d003      	beq.n	8001794 <HAL_GPIO_Init+0x38>
 800178c:	683b      	ldr	r3, [r7, #0]
 800178e:	685b      	ldr	r3, [r3, #4]
 8001790:	2b12      	cmp	r3, #18
 8001792:	d123      	bne.n	80017dc <HAL_GPIO_Init+0x80>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001794:	697b      	ldr	r3, [r7, #20]
 8001796:	08da      	lsrs	r2, r3, #3
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	3208      	adds	r2, #8
 800179c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80017a0:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80017a2:	697b      	ldr	r3, [r7, #20]
 80017a4:	f003 0307 	and.w	r3, r3, #7
 80017a8:	009b      	lsls	r3, r3, #2
 80017aa:	220f      	movs	r2, #15
 80017ac:	fa02 f303 	lsl.w	r3, r2, r3
 80017b0:	43db      	mvns	r3, r3
 80017b2:	693a      	ldr	r2, [r7, #16]
 80017b4:	4013      	ands	r3, r2
 80017b6:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80017b8:	683b      	ldr	r3, [r7, #0]
 80017ba:	691a      	ldr	r2, [r3, #16]
 80017bc:	697b      	ldr	r3, [r7, #20]
 80017be:	f003 0307 	and.w	r3, r3, #7
 80017c2:	009b      	lsls	r3, r3, #2
 80017c4:	fa02 f303 	lsl.w	r3, r2, r3
 80017c8:	693a      	ldr	r2, [r7, #16]
 80017ca:	4313      	orrs	r3, r2
 80017cc:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80017ce:	697b      	ldr	r3, [r7, #20]
 80017d0:	08da      	lsrs	r2, r3, #3
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	3208      	adds	r2, #8
 80017d6:	6939      	ldr	r1, [r7, #16]
 80017d8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80017e2:	697b      	ldr	r3, [r7, #20]
 80017e4:	005b      	lsls	r3, r3, #1
 80017e6:	2203      	movs	r2, #3
 80017e8:	fa02 f303 	lsl.w	r3, r2, r3
 80017ec:	43db      	mvns	r3, r3
 80017ee:	693a      	ldr	r2, [r7, #16]
 80017f0:	4013      	ands	r3, r2
 80017f2:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80017f4:	683b      	ldr	r3, [r7, #0]
 80017f6:	685b      	ldr	r3, [r3, #4]
 80017f8:	f003 0203 	and.w	r2, r3, #3
 80017fc:	697b      	ldr	r3, [r7, #20]
 80017fe:	005b      	lsls	r3, r3, #1
 8001800:	fa02 f303 	lsl.w	r3, r2, r3
 8001804:	693a      	ldr	r2, [r7, #16]
 8001806:	4313      	orrs	r3, r2
 8001808:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	693a      	ldr	r2, [r7, #16]
 800180e:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001810:	683b      	ldr	r3, [r7, #0]
 8001812:	685b      	ldr	r3, [r3, #4]
 8001814:	2b01      	cmp	r3, #1
 8001816:	d00b      	beq.n	8001830 <HAL_GPIO_Init+0xd4>
 8001818:	683b      	ldr	r3, [r7, #0]
 800181a:	685b      	ldr	r3, [r3, #4]
 800181c:	2b02      	cmp	r3, #2
 800181e:	d007      	beq.n	8001830 <HAL_GPIO_Init+0xd4>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001820:	683b      	ldr	r3, [r7, #0]
 8001822:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001824:	2b11      	cmp	r3, #17
 8001826:	d003      	beq.n	8001830 <HAL_GPIO_Init+0xd4>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001828:	683b      	ldr	r3, [r7, #0]
 800182a:	685b      	ldr	r3, [r3, #4]
 800182c:	2b12      	cmp	r3, #18
 800182e:	d130      	bne.n	8001892 <HAL_GPIO_Init+0x136>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	689b      	ldr	r3, [r3, #8]
 8001834:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001836:	697b      	ldr	r3, [r7, #20]
 8001838:	005b      	lsls	r3, r3, #1
 800183a:	2203      	movs	r2, #3
 800183c:	fa02 f303 	lsl.w	r3, r2, r3
 8001840:	43db      	mvns	r3, r3
 8001842:	693a      	ldr	r2, [r7, #16]
 8001844:	4013      	ands	r3, r2
 8001846:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001848:	683b      	ldr	r3, [r7, #0]
 800184a:	68da      	ldr	r2, [r3, #12]
 800184c:	697b      	ldr	r3, [r7, #20]
 800184e:	005b      	lsls	r3, r3, #1
 8001850:	fa02 f303 	lsl.w	r3, r2, r3
 8001854:	693a      	ldr	r2, [r7, #16]
 8001856:	4313      	orrs	r3, r2
 8001858:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	693a      	ldr	r2, [r7, #16]
 800185e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	685b      	ldr	r3, [r3, #4]
 8001864:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001866:	2201      	movs	r2, #1
 8001868:	697b      	ldr	r3, [r7, #20]
 800186a:	fa02 f303 	lsl.w	r3, r2, r3
 800186e:	43db      	mvns	r3, r3
 8001870:	693a      	ldr	r2, [r7, #16]
 8001872:	4013      	ands	r3, r2
 8001874:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8001876:	683b      	ldr	r3, [r7, #0]
 8001878:	685b      	ldr	r3, [r3, #4]
 800187a:	091b      	lsrs	r3, r3, #4
 800187c:	f003 0201 	and.w	r2, r3, #1
 8001880:	697b      	ldr	r3, [r7, #20]
 8001882:	fa02 f303 	lsl.w	r3, r2, r3
 8001886:	693a      	ldr	r2, [r7, #16]
 8001888:	4313      	orrs	r3, r2
 800188a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	693a      	ldr	r2, [r7, #16]
 8001890:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8001892:	683b      	ldr	r3, [r7, #0]
 8001894:	685b      	ldr	r3, [r3, #4]
 8001896:	f003 0303 	and.w	r3, r3, #3
 800189a:	2b03      	cmp	r3, #3
 800189c:	d118      	bne.n	80018d0 <HAL_GPIO_Init+0x174>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80018a2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 80018a4:	2201      	movs	r2, #1
 80018a6:	697b      	ldr	r3, [r7, #20]
 80018a8:	fa02 f303 	lsl.w	r3, r2, r3
 80018ac:	43db      	mvns	r3, r3
 80018ae:	693a      	ldr	r2, [r7, #16]
 80018b0:	4013      	ands	r3, r2
 80018b2:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & ANALOG_MODE) >> 3) << position);
 80018b4:	683b      	ldr	r3, [r7, #0]
 80018b6:	685b      	ldr	r3, [r3, #4]
 80018b8:	08db      	lsrs	r3, r3, #3
 80018ba:	f003 0201 	and.w	r2, r3, #1
 80018be:	697b      	ldr	r3, [r7, #20]
 80018c0:	fa02 f303 	lsl.w	r3, r2, r3
 80018c4:	693a      	ldr	r2, [r7, #16]
 80018c6:	4313      	orrs	r3, r2
 80018c8:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	693a      	ldr	r2, [r7, #16]
 80018ce:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	68db      	ldr	r3, [r3, #12]
 80018d4:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 80018d6:	697b      	ldr	r3, [r7, #20]
 80018d8:	005b      	lsls	r3, r3, #1
 80018da:	2203      	movs	r2, #3
 80018dc:	fa02 f303 	lsl.w	r3, r2, r3
 80018e0:	43db      	mvns	r3, r3
 80018e2:	693a      	ldr	r2, [r7, #16]
 80018e4:	4013      	ands	r3, r2
 80018e6:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 80018e8:	683b      	ldr	r3, [r7, #0]
 80018ea:	689a      	ldr	r2, [r3, #8]
 80018ec:	697b      	ldr	r3, [r7, #20]
 80018ee:	005b      	lsls	r3, r3, #1
 80018f0:	fa02 f303 	lsl.w	r3, r2, r3
 80018f4:	693a      	ldr	r2, [r7, #16]
 80018f6:	4313      	orrs	r3, r2
 80018f8:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	693a      	ldr	r2, [r7, #16]
 80018fe:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001900:	683b      	ldr	r3, [r7, #0]
 8001902:	685b      	ldr	r3, [r3, #4]
 8001904:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001908:	2b00      	cmp	r3, #0
 800190a:	f000 80ac 	beq.w	8001a66 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800190e:	4b5e      	ldr	r3, [pc, #376]	; (8001a88 <HAL_GPIO_Init+0x32c>)
 8001910:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001912:	4a5d      	ldr	r2, [pc, #372]	; (8001a88 <HAL_GPIO_Init+0x32c>)
 8001914:	f043 0301 	orr.w	r3, r3, #1
 8001918:	6613      	str	r3, [r2, #96]	; 0x60
 800191a:	4b5b      	ldr	r3, [pc, #364]	; (8001a88 <HAL_GPIO_Init+0x32c>)
 800191c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800191e:	f003 0301 	and.w	r3, r3, #1
 8001922:	60bb      	str	r3, [r7, #8]
 8001924:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001926:	4a59      	ldr	r2, [pc, #356]	; (8001a8c <HAL_GPIO_Init+0x330>)
 8001928:	697b      	ldr	r3, [r7, #20]
 800192a:	089b      	lsrs	r3, r3, #2
 800192c:	3302      	adds	r3, #2
 800192e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001932:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001934:	697b      	ldr	r3, [r7, #20]
 8001936:	f003 0303 	and.w	r3, r3, #3
 800193a:	009b      	lsls	r3, r3, #2
 800193c:	220f      	movs	r2, #15
 800193e:	fa02 f303 	lsl.w	r3, r2, r3
 8001942:	43db      	mvns	r3, r3
 8001944:	693a      	ldr	r2, [r7, #16]
 8001946:	4013      	ands	r3, r2
 8001948:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001950:	d025      	beq.n	800199e <HAL_GPIO_Init+0x242>
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	4a4e      	ldr	r2, [pc, #312]	; (8001a90 <HAL_GPIO_Init+0x334>)
 8001956:	4293      	cmp	r3, r2
 8001958:	d01f      	beq.n	800199a <HAL_GPIO_Init+0x23e>
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	4a4d      	ldr	r2, [pc, #308]	; (8001a94 <HAL_GPIO_Init+0x338>)
 800195e:	4293      	cmp	r3, r2
 8001960:	d019      	beq.n	8001996 <HAL_GPIO_Init+0x23a>
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	4a4c      	ldr	r2, [pc, #304]	; (8001a98 <HAL_GPIO_Init+0x33c>)
 8001966:	4293      	cmp	r3, r2
 8001968:	d013      	beq.n	8001992 <HAL_GPIO_Init+0x236>
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	4a4b      	ldr	r2, [pc, #300]	; (8001a9c <HAL_GPIO_Init+0x340>)
 800196e:	4293      	cmp	r3, r2
 8001970:	d00d      	beq.n	800198e <HAL_GPIO_Init+0x232>
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	4a4a      	ldr	r2, [pc, #296]	; (8001aa0 <HAL_GPIO_Init+0x344>)
 8001976:	4293      	cmp	r3, r2
 8001978:	d007      	beq.n	800198a <HAL_GPIO_Init+0x22e>
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	4a49      	ldr	r2, [pc, #292]	; (8001aa4 <HAL_GPIO_Init+0x348>)
 800197e:	4293      	cmp	r3, r2
 8001980:	d101      	bne.n	8001986 <HAL_GPIO_Init+0x22a>
 8001982:	2306      	movs	r3, #6
 8001984:	e00c      	b.n	80019a0 <HAL_GPIO_Init+0x244>
 8001986:	2307      	movs	r3, #7
 8001988:	e00a      	b.n	80019a0 <HAL_GPIO_Init+0x244>
 800198a:	2305      	movs	r3, #5
 800198c:	e008      	b.n	80019a0 <HAL_GPIO_Init+0x244>
 800198e:	2304      	movs	r3, #4
 8001990:	e006      	b.n	80019a0 <HAL_GPIO_Init+0x244>
 8001992:	2303      	movs	r3, #3
 8001994:	e004      	b.n	80019a0 <HAL_GPIO_Init+0x244>
 8001996:	2302      	movs	r3, #2
 8001998:	e002      	b.n	80019a0 <HAL_GPIO_Init+0x244>
 800199a:	2301      	movs	r3, #1
 800199c:	e000      	b.n	80019a0 <HAL_GPIO_Init+0x244>
 800199e:	2300      	movs	r3, #0
 80019a0:	697a      	ldr	r2, [r7, #20]
 80019a2:	f002 0203 	and.w	r2, r2, #3
 80019a6:	0092      	lsls	r2, r2, #2
 80019a8:	4093      	lsls	r3, r2
 80019aa:	693a      	ldr	r2, [r7, #16]
 80019ac:	4313      	orrs	r3, r2
 80019ae:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80019b0:	4936      	ldr	r1, [pc, #216]	; (8001a8c <HAL_GPIO_Init+0x330>)
 80019b2:	697b      	ldr	r3, [r7, #20]
 80019b4:	089b      	lsrs	r3, r3, #2
 80019b6:	3302      	adds	r3, #2
 80019b8:	693a      	ldr	r2, [r7, #16]
 80019ba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 80019be:	4b3a      	ldr	r3, [pc, #232]	; (8001aa8 <HAL_GPIO_Init+0x34c>)
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80019c4:	68fb      	ldr	r3, [r7, #12]
 80019c6:	43db      	mvns	r3, r3
 80019c8:	693a      	ldr	r2, [r7, #16]
 80019ca:	4013      	ands	r3, r2
 80019cc:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80019ce:	683b      	ldr	r3, [r7, #0]
 80019d0:	685b      	ldr	r3, [r3, #4]
 80019d2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80019d6:	2b00      	cmp	r3, #0
 80019d8:	d003      	beq.n	80019e2 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 80019da:	693a      	ldr	r2, [r7, #16]
 80019dc:	68fb      	ldr	r3, [r7, #12]
 80019de:	4313      	orrs	r3, r2
 80019e0:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80019e2:	4a31      	ldr	r2, [pc, #196]	; (8001aa8 <HAL_GPIO_Init+0x34c>)
 80019e4:	693b      	ldr	r3, [r7, #16]
 80019e6:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 80019e8:	4b2f      	ldr	r3, [pc, #188]	; (8001aa8 <HAL_GPIO_Init+0x34c>)
 80019ea:	685b      	ldr	r3, [r3, #4]
 80019ec:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80019ee:	68fb      	ldr	r3, [r7, #12]
 80019f0:	43db      	mvns	r3, r3
 80019f2:	693a      	ldr	r2, [r7, #16]
 80019f4:	4013      	ands	r3, r2
 80019f6:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80019f8:	683b      	ldr	r3, [r7, #0]
 80019fa:	685b      	ldr	r3, [r3, #4]
 80019fc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a00:	2b00      	cmp	r3, #0
 8001a02:	d003      	beq.n	8001a0c <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8001a04:	693a      	ldr	r2, [r7, #16]
 8001a06:	68fb      	ldr	r3, [r7, #12]
 8001a08:	4313      	orrs	r3, r2
 8001a0a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001a0c:	4a26      	ldr	r2, [pc, #152]	; (8001aa8 <HAL_GPIO_Init+0x34c>)
 8001a0e:	693b      	ldr	r3, [r7, #16]
 8001a10:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001a12:	4b25      	ldr	r3, [pc, #148]	; (8001aa8 <HAL_GPIO_Init+0x34c>)
 8001a14:	689b      	ldr	r3, [r3, #8]
 8001a16:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001a18:	68fb      	ldr	r3, [r7, #12]
 8001a1a:	43db      	mvns	r3, r3
 8001a1c:	693a      	ldr	r2, [r7, #16]
 8001a1e:	4013      	ands	r3, r2
 8001a20:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001a22:	683b      	ldr	r3, [r7, #0]
 8001a24:	685b      	ldr	r3, [r3, #4]
 8001a26:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001a2a:	2b00      	cmp	r3, #0
 8001a2c:	d003      	beq.n	8001a36 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8001a2e:	693a      	ldr	r2, [r7, #16]
 8001a30:	68fb      	ldr	r3, [r7, #12]
 8001a32:	4313      	orrs	r3, r2
 8001a34:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001a36:	4a1c      	ldr	r2, [pc, #112]	; (8001aa8 <HAL_GPIO_Init+0x34c>)
 8001a38:	693b      	ldr	r3, [r7, #16]
 8001a3a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001a3c:	4b1a      	ldr	r3, [pc, #104]	; (8001aa8 <HAL_GPIO_Init+0x34c>)
 8001a3e:	68db      	ldr	r3, [r3, #12]
 8001a40:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001a42:	68fb      	ldr	r3, [r7, #12]
 8001a44:	43db      	mvns	r3, r3
 8001a46:	693a      	ldr	r2, [r7, #16]
 8001a48:	4013      	ands	r3, r2
 8001a4a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001a4c:	683b      	ldr	r3, [r7, #0]
 8001a4e:	685b      	ldr	r3, [r3, #4]
 8001a50:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001a54:	2b00      	cmp	r3, #0
 8001a56:	d003      	beq.n	8001a60 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8001a58:	693a      	ldr	r2, [r7, #16]
 8001a5a:	68fb      	ldr	r3, [r7, #12]
 8001a5c:	4313      	orrs	r3, r2
 8001a5e:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001a60:	4a11      	ldr	r2, [pc, #68]	; (8001aa8 <HAL_GPIO_Init+0x34c>)
 8001a62:	693b      	ldr	r3, [r7, #16]
 8001a64:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8001a66:	697b      	ldr	r3, [r7, #20]
 8001a68:	3301      	adds	r3, #1
 8001a6a:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001a6c:	683b      	ldr	r3, [r7, #0]
 8001a6e:	681a      	ldr	r2, [r3, #0]
 8001a70:	697b      	ldr	r3, [r7, #20]
 8001a72:	fa22 f303 	lsr.w	r3, r2, r3
 8001a76:	2b00      	cmp	r3, #0
 8001a78:	f47f ae78 	bne.w	800176c <HAL_GPIO_Init+0x10>
  }
}
 8001a7c:	bf00      	nop
 8001a7e:	371c      	adds	r7, #28
 8001a80:	46bd      	mov	sp, r7
 8001a82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a86:	4770      	bx	lr
 8001a88:	40021000 	.word	0x40021000
 8001a8c:	40010000 	.word	0x40010000
 8001a90:	48000400 	.word	0x48000400
 8001a94:	48000800 	.word	0x48000800
 8001a98:	48000c00 	.word	0x48000c00
 8001a9c:	48001000 	.word	0x48001000
 8001aa0:	48001400 	.word	0x48001400
 8001aa4:	48001800 	.word	0x48001800
 8001aa8:	40010400 	.word	0x40010400

08001aac <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001aac:	b480      	push	{r7}
 8001aae:	b083      	sub	sp, #12
 8001ab0:	af00      	add	r7, sp, #0
 8001ab2:	6078      	str	r0, [r7, #4]
 8001ab4:	460b      	mov	r3, r1
 8001ab6:	807b      	strh	r3, [r7, #2]
 8001ab8:	4613      	mov	r3, r2
 8001aba:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001abc:	787b      	ldrb	r3, [r7, #1]
 8001abe:	2b00      	cmp	r3, #0
 8001ac0:	d003      	beq.n	8001aca <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001ac2:	887a      	ldrh	r2, [r7, #2]
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001ac8:	e002      	b.n	8001ad0 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001aca:	887a      	ldrh	r2, [r7, #2]
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001ad0:	bf00      	nop
 8001ad2:	370c      	adds	r7, #12
 8001ad4:	46bd      	mov	sp, r7
 8001ad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ada:	4770      	bx	lr

08001adc <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001adc:	b580      	push	{r7, lr}
 8001ade:	b082      	sub	sp, #8
 8001ae0:	af00      	add	r7, sp, #0
 8001ae2:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	2b00      	cmp	r3, #0
 8001ae8:	d101      	bne.n	8001aee <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001aea:	2301      	movs	r3, #1
 8001aec:	e081      	b.n	8001bf2 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001af4:	b2db      	uxtb	r3, r3
 8001af6:	2b00      	cmp	r3, #0
 8001af8:	d106      	bne.n	8001b08 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	2200      	movs	r2, #0
 8001afe:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8001b02:	6878      	ldr	r0, [r7, #4]
 8001b04:	f7fe ff24 	bl	8000950 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	2224      	movs	r2, #36	; 0x24
 8001b0c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	681a      	ldr	r2, [r3, #0]
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	f022 0201 	bic.w	r2, r2, #1
 8001b1e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	685a      	ldr	r2, [r3, #4]
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001b2c:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	689a      	ldr	r2, [r3, #8]
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001b3c:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	68db      	ldr	r3, [r3, #12]
 8001b42:	2b01      	cmp	r3, #1
 8001b44:	d107      	bne.n	8001b56 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	689a      	ldr	r2, [r3, #8]
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001b52:	609a      	str	r2, [r3, #8]
 8001b54:	e006      	b.n	8001b64 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	689a      	ldr	r2, [r3, #8]
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8001b62:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	68db      	ldr	r3, [r3, #12]
 8001b68:	2b02      	cmp	r3, #2
 8001b6a:	d104      	bne.n	8001b76 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001b74:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	685b      	ldr	r3, [r3, #4]
 8001b7c:	687a      	ldr	r2, [r7, #4]
 8001b7e:	6812      	ldr	r2, [r2, #0]
 8001b80:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001b84:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001b88:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	68da      	ldr	r2, [r3, #12]
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001b98:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	691a      	ldr	r2, [r3, #16]
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	695b      	ldr	r3, [r3, #20]
 8001ba2:	ea42 0103 	orr.w	r1, r2, r3
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	699b      	ldr	r3, [r3, #24]
 8001baa:	021a      	lsls	r2, r3, #8
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	430a      	orrs	r2, r1
 8001bb2:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	69d9      	ldr	r1, [r3, #28]
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	6a1a      	ldr	r2, [r3, #32]
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	430a      	orrs	r2, r1
 8001bc2:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	681a      	ldr	r2, [r3, #0]
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	f042 0201 	orr.w	r2, r2, #1
 8001bd2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	2200      	movs	r2, #0
 8001bd8:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	2220      	movs	r2, #32
 8001bde:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	2200      	movs	r2, #0
 8001be6:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	2200      	movs	r2, #0
 8001bec:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8001bf0:	2300      	movs	r3, #0
}
 8001bf2:	4618      	mov	r0, r3
 8001bf4:	3708      	adds	r7, #8
 8001bf6:	46bd      	mov	sp, r7
 8001bf8:	bd80      	pop	{r7, pc}

08001bfa <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8001bfa:	b480      	push	{r7}
 8001bfc:	b083      	sub	sp, #12
 8001bfe:	af00      	add	r7, sp, #0
 8001c00:	6078      	str	r0, [r7, #4]
 8001c02:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001c0a:	b2db      	uxtb	r3, r3
 8001c0c:	2b20      	cmp	r3, #32
 8001c0e:	d138      	bne.n	8001c82 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001c16:	2b01      	cmp	r3, #1
 8001c18:	d101      	bne.n	8001c1e <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8001c1a:	2302      	movs	r3, #2
 8001c1c:	e032      	b.n	8001c84 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	2201      	movs	r2, #1
 8001c22:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	2224      	movs	r2, #36	; 0x24
 8001c2a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	681a      	ldr	r2, [r3, #0]
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	f022 0201 	bic.w	r2, r2, #1
 8001c3c:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	681a      	ldr	r2, [r3, #0]
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8001c4c:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	6819      	ldr	r1, [r3, #0]
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	683a      	ldr	r2, [r7, #0]
 8001c5a:	430a      	orrs	r2, r1
 8001c5c:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	681a      	ldr	r2, [r3, #0]
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	f042 0201 	orr.w	r2, r2, #1
 8001c6c:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	2220      	movs	r2, #32
 8001c72:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	2200      	movs	r2, #0
 8001c7a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8001c7e:	2300      	movs	r3, #0
 8001c80:	e000      	b.n	8001c84 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8001c82:	2302      	movs	r3, #2
  }
}
 8001c84:	4618      	mov	r0, r3
 8001c86:	370c      	adds	r7, #12
 8001c88:	46bd      	mov	sp, r7
 8001c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c8e:	4770      	bx	lr

08001c90 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8001c90:	b480      	push	{r7}
 8001c92:	b085      	sub	sp, #20
 8001c94:	af00      	add	r7, sp, #0
 8001c96:	6078      	str	r0, [r7, #4]
 8001c98:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001ca0:	b2db      	uxtb	r3, r3
 8001ca2:	2b20      	cmp	r3, #32
 8001ca4:	d139      	bne.n	8001d1a <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001cac:	2b01      	cmp	r3, #1
 8001cae:	d101      	bne.n	8001cb4 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8001cb0:	2302      	movs	r3, #2
 8001cb2:	e033      	b.n	8001d1c <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	2201      	movs	r2, #1
 8001cb8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	2224      	movs	r2, #36	; 0x24
 8001cc0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	681a      	ldr	r2, [r3, #0]
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	f022 0201 	bic.w	r2, r2, #1
 8001cd2:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8001cdc:	68fb      	ldr	r3, [r7, #12]
 8001cde:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8001ce2:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8001ce4:	683b      	ldr	r3, [r7, #0]
 8001ce6:	021b      	lsls	r3, r3, #8
 8001ce8:	68fa      	ldr	r2, [r7, #12]
 8001cea:	4313      	orrs	r3, r2
 8001cec:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	68fa      	ldr	r2, [r7, #12]
 8001cf4:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	681a      	ldr	r2, [r3, #0]
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	f042 0201 	orr.w	r2, r2, #1
 8001d04:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	2220      	movs	r2, #32
 8001d0a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	2200      	movs	r2, #0
 8001d12:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8001d16:	2300      	movs	r3, #0
 8001d18:	e000      	b.n	8001d1c <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8001d1a:	2302      	movs	r3, #2
  }
}
 8001d1c:	4618      	mov	r0, r3
 8001d1e:	3714      	adds	r7, #20
 8001d20:	46bd      	mov	sp, r7
 8001d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d26:	4770      	bx	lr

08001d28 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_RANGE1 or PWR_REGULATOR_VOLTAGE_RANGE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8001d28:	b480      	push	{r7}
 8001d2a:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8001d2c:	4b04      	ldr	r3, [pc, #16]	; (8001d40 <HAL_PWREx_GetVoltageRange+0x18>)
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8001d34:	4618      	mov	r0, r3
 8001d36:	46bd      	mov	sp, r7
 8001d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d3c:	4770      	bx	lr
 8001d3e:	bf00      	nop
 8001d40:	40007000 	.word	0x40007000

08001d44 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001d44:	b480      	push	{r7}
 8001d46:	b085      	sub	sp, #20
 8001d48:	af00      	add	r7, sp, #0
 8001d4a:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001d52:	d130      	bne.n	8001db6 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8001d54:	4b23      	ldr	r3, [pc, #140]	; (8001de4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001d5c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001d60:	d038      	beq.n	8001dd4 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001d62:	4b20      	ldr	r3, [pc, #128]	; (8001de4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001d6a:	4a1e      	ldr	r2, [pc, #120]	; (8001de4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001d6c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001d70:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001d72:	4b1d      	ldr	r3, [pc, #116]	; (8001de8 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	2232      	movs	r2, #50	; 0x32
 8001d78:	fb02 f303 	mul.w	r3, r2, r3
 8001d7c:	4a1b      	ldr	r2, [pc, #108]	; (8001dec <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8001d7e:	fba2 2303 	umull	r2, r3, r2, r3
 8001d82:	0c9b      	lsrs	r3, r3, #18
 8001d84:	3301      	adds	r3, #1
 8001d86:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001d88:	e002      	b.n	8001d90 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8001d8a:	68fb      	ldr	r3, [r7, #12]
 8001d8c:	3b01      	subs	r3, #1
 8001d8e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001d90:	4b14      	ldr	r3, [pc, #80]	; (8001de4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001d92:	695b      	ldr	r3, [r3, #20]
 8001d94:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001d98:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001d9c:	d102      	bne.n	8001da4 <HAL_PWREx_ControlVoltageScaling+0x60>
 8001d9e:	68fb      	ldr	r3, [r7, #12]
 8001da0:	2b00      	cmp	r3, #0
 8001da2:	d1f2      	bne.n	8001d8a <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001da4:	4b0f      	ldr	r3, [pc, #60]	; (8001de4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001da6:	695b      	ldr	r3, [r3, #20]
 8001da8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001dac:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001db0:	d110      	bne.n	8001dd4 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8001db2:	2303      	movs	r3, #3
 8001db4:	e00f      	b.n	8001dd6 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8001db6:	4b0b      	ldr	r3, [pc, #44]	; (8001de4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001dbe:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001dc2:	d007      	beq.n	8001dd4 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001dc4:	4b07      	ldr	r3, [pc, #28]	; (8001de4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001dcc:	4a05      	ldr	r2, [pc, #20]	; (8001de4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001dce:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001dd2:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8001dd4:	2300      	movs	r3, #0
}
 8001dd6:	4618      	mov	r0, r3
 8001dd8:	3714      	adds	r7, #20
 8001dda:	46bd      	mov	sp, r7
 8001ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001de0:	4770      	bx	lr
 8001de2:	bf00      	nop
 8001de4:	40007000 	.word	0x40007000
 8001de8:	20000000 	.word	0x20000000
 8001dec:	431bde83 	.word	0x431bde83

08001df0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001df0:	b580      	push	{r7, lr}
 8001df2:	b088      	sub	sp, #32
 8001df4:	af00      	add	r7, sp, #0
 8001df6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	2b00      	cmp	r3, #0
 8001dfc:	d101      	bne.n	8001e02 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001dfe:	2301      	movs	r3, #1
 8001e00:	e39d      	b.n	800253e <HAL_RCC_OscConfig+0x74e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001e02:	4ba4      	ldr	r3, [pc, #656]	; (8002094 <HAL_RCC_OscConfig+0x2a4>)
 8001e04:	689b      	ldr	r3, [r3, #8]
 8001e06:	f003 030c 	and.w	r3, r3, #12
 8001e0a:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001e0c:	4ba1      	ldr	r3, [pc, #644]	; (8002094 <HAL_RCC_OscConfig+0x2a4>)
 8001e0e:	68db      	ldr	r3, [r3, #12]
 8001e10:	f003 0303 	and.w	r3, r3, #3
 8001e14:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	f003 0310 	and.w	r3, r3, #16
 8001e1e:	2b00      	cmp	r3, #0
 8001e20:	f000 80e1 	beq.w	8001fe6 <HAL_RCC_OscConfig+0x1f6>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001e24:	69bb      	ldr	r3, [r7, #24]
 8001e26:	2b00      	cmp	r3, #0
 8001e28:	d007      	beq.n	8001e3a <HAL_RCC_OscConfig+0x4a>
 8001e2a:	69bb      	ldr	r3, [r7, #24]
 8001e2c:	2b0c      	cmp	r3, #12
 8001e2e:	f040 8088 	bne.w	8001f42 <HAL_RCC_OscConfig+0x152>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8001e32:	697b      	ldr	r3, [r7, #20]
 8001e34:	2b01      	cmp	r3, #1
 8001e36:	f040 8084 	bne.w	8001f42 <HAL_RCC_OscConfig+0x152>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001e3a:	4b96      	ldr	r3, [pc, #600]	; (8002094 <HAL_RCC_OscConfig+0x2a4>)
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	f003 0302 	and.w	r3, r3, #2
 8001e42:	2b00      	cmp	r3, #0
 8001e44:	d005      	beq.n	8001e52 <HAL_RCC_OscConfig+0x62>
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	699b      	ldr	r3, [r3, #24]
 8001e4a:	2b00      	cmp	r3, #0
 8001e4c:	d101      	bne.n	8001e52 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8001e4e:	2301      	movs	r3, #1
 8001e50:	e375      	b.n	800253e <HAL_RCC_OscConfig+0x74e>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	6a1a      	ldr	r2, [r3, #32]
 8001e56:	4b8f      	ldr	r3, [pc, #572]	; (8002094 <HAL_RCC_OscConfig+0x2a4>)
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	f003 0308 	and.w	r3, r3, #8
 8001e5e:	2b00      	cmp	r3, #0
 8001e60:	d004      	beq.n	8001e6c <HAL_RCC_OscConfig+0x7c>
 8001e62:	4b8c      	ldr	r3, [pc, #560]	; (8002094 <HAL_RCC_OscConfig+0x2a4>)
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001e6a:	e005      	b.n	8001e78 <HAL_RCC_OscConfig+0x88>
 8001e6c:	4b89      	ldr	r3, [pc, #548]	; (8002094 <HAL_RCC_OscConfig+0x2a4>)
 8001e6e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001e72:	091b      	lsrs	r3, r3, #4
 8001e74:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001e78:	4293      	cmp	r3, r2
 8001e7a:	d223      	bcs.n	8001ec4 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	6a1b      	ldr	r3, [r3, #32]
 8001e80:	4618      	mov	r0, r3
 8001e82:	f000 fd09 	bl	8002898 <RCC_SetFlashLatencyFromMSIRange>
 8001e86:	4603      	mov	r3, r0
 8001e88:	2b00      	cmp	r3, #0
 8001e8a:	d001      	beq.n	8001e90 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8001e8c:	2301      	movs	r3, #1
 8001e8e:	e356      	b.n	800253e <HAL_RCC_OscConfig+0x74e>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001e90:	4b80      	ldr	r3, [pc, #512]	; (8002094 <HAL_RCC_OscConfig+0x2a4>)
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	4a7f      	ldr	r2, [pc, #508]	; (8002094 <HAL_RCC_OscConfig+0x2a4>)
 8001e96:	f043 0308 	orr.w	r3, r3, #8
 8001e9a:	6013      	str	r3, [r2, #0]
 8001e9c:	4b7d      	ldr	r3, [pc, #500]	; (8002094 <HAL_RCC_OscConfig+0x2a4>)
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	6a1b      	ldr	r3, [r3, #32]
 8001ea8:	497a      	ldr	r1, [pc, #488]	; (8002094 <HAL_RCC_OscConfig+0x2a4>)
 8001eaa:	4313      	orrs	r3, r2
 8001eac:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001eae:	4b79      	ldr	r3, [pc, #484]	; (8002094 <HAL_RCC_OscConfig+0x2a4>)
 8001eb0:	685b      	ldr	r3, [r3, #4]
 8001eb2:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	69db      	ldr	r3, [r3, #28]
 8001eba:	021b      	lsls	r3, r3, #8
 8001ebc:	4975      	ldr	r1, [pc, #468]	; (8002094 <HAL_RCC_OscConfig+0x2a4>)
 8001ebe:	4313      	orrs	r3, r2
 8001ec0:	604b      	str	r3, [r1, #4]
 8001ec2:	e022      	b.n	8001f0a <HAL_RCC_OscConfig+0x11a>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001ec4:	4b73      	ldr	r3, [pc, #460]	; (8002094 <HAL_RCC_OscConfig+0x2a4>)
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	4a72      	ldr	r2, [pc, #456]	; (8002094 <HAL_RCC_OscConfig+0x2a4>)
 8001eca:	f043 0308 	orr.w	r3, r3, #8
 8001ece:	6013      	str	r3, [r2, #0]
 8001ed0:	4b70      	ldr	r3, [pc, #448]	; (8002094 <HAL_RCC_OscConfig+0x2a4>)
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	6a1b      	ldr	r3, [r3, #32]
 8001edc:	496d      	ldr	r1, [pc, #436]	; (8002094 <HAL_RCC_OscConfig+0x2a4>)
 8001ede:	4313      	orrs	r3, r2
 8001ee0:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001ee2:	4b6c      	ldr	r3, [pc, #432]	; (8002094 <HAL_RCC_OscConfig+0x2a4>)
 8001ee4:	685b      	ldr	r3, [r3, #4]
 8001ee6:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	69db      	ldr	r3, [r3, #28]
 8001eee:	021b      	lsls	r3, r3, #8
 8001ef0:	4968      	ldr	r1, [pc, #416]	; (8002094 <HAL_RCC_OscConfig+0x2a4>)
 8001ef2:	4313      	orrs	r3, r2
 8001ef4:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	6a1b      	ldr	r3, [r3, #32]
 8001efa:	4618      	mov	r0, r3
 8001efc:	f000 fccc 	bl	8002898 <RCC_SetFlashLatencyFromMSIRange>
 8001f00:	4603      	mov	r3, r0
 8001f02:	2b00      	cmp	r3, #0
 8001f04:	d001      	beq.n	8001f0a <HAL_RCC_OscConfig+0x11a>
          {
            return HAL_ERROR;
 8001f06:	2301      	movs	r3, #1
 8001f08:	e319      	b.n	800253e <HAL_RCC_OscConfig+0x74e>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001f0a:	f000 fc03 	bl	8002714 <HAL_RCC_GetSysClockFreq>
 8001f0e:	4601      	mov	r1, r0
 8001f10:	4b60      	ldr	r3, [pc, #384]	; (8002094 <HAL_RCC_OscConfig+0x2a4>)
 8001f12:	689b      	ldr	r3, [r3, #8]
 8001f14:	091b      	lsrs	r3, r3, #4
 8001f16:	f003 030f 	and.w	r3, r3, #15
 8001f1a:	4a5f      	ldr	r2, [pc, #380]	; (8002098 <HAL_RCC_OscConfig+0x2a8>)
 8001f1c:	5cd3      	ldrb	r3, [r2, r3]
 8001f1e:	f003 031f 	and.w	r3, r3, #31
 8001f22:	fa21 f303 	lsr.w	r3, r1, r3
 8001f26:	4a5d      	ldr	r2, [pc, #372]	; (800209c <HAL_RCC_OscConfig+0x2ac>)
 8001f28:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8001f2a:	4b5d      	ldr	r3, [pc, #372]	; (80020a0 <HAL_RCC_OscConfig+0x2b0>)
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	4618      	mov	r0, r3
 8001f30:	f7ff fab4 	bl	800149c <HAL_InitTick>
 8001f34:	4603      	mov	r3, r0
 8001f36:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8001f38:	7bfb      	ldrb	r3, [r7, #15]
 8001f3a:	2b00      	cmp	r3, #0
 8001f3c:	d052      	beq.n	8001fe4 <HAL_RCC_OscConfig+0x1f4>
        {
          return status;
 8001f3e:	7bfb      	ldrb	r3, [r7, #15]
 8001f40:	e2fd      	b.n	800253e <HAL_RCC_OscConfig+0x74e>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	699b      	ldr	r3, [r3, #24]
 8001f46:	2b00      	cmp	r3, #0
 8001f48:	d032      	beq.n	8001fb0 <HAL_RCC_OscConfig+0x1c0>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001f4a:	4b52      	ldr	r3, [pc, #328]	; (8002094 <HAL_RCC_OscConfig+0x2a4>)
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	4a51      	ldr	r2, [pc, #324]	; (8002094 <HAL_RCC_OscConfig+0x2a4>)
 8001f50:	f043 0301 	orr.w	r3, r3, #1
 8001f54:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001f56:	f7ff faed 	bl	8001534 <HAL_GetTick>
 8001f5a:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001f5c:	e008      	b.n	8001f70 <HAL_RCC_OscConfig+0x180>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001f5e:	f7ff fae9 	bl	8001534 <HAL_GetTick>
 8001f62:	4602      	mov	r2, r0
 8001f64:	693b      	ldr	r3, [r7, #16]
 8001f66:	1ad3      	subs	r3, r2, r3
 8001f68:	2b02      	cmp	r3, #2
 8001f6a:	d901      	bls.n	8001f70 <HAL_RCC_OscConfig+0x180>
          {
            return HAL_TIMEOUT;
 8001f6c:	2303      	movs	r3, #3
 8001f6e:	e2e6      	b.n	800253e <HAL_RCC_OscConfig+0x74e>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001f70:	4b48      	ldr	r3, [pc, #288]	; (8002094 <HAL_RCC_OscConfig+0x2a4>)
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	f003 0302 	and.w	r3, r3, #2
 8001f78:	2b00      	cmp	r3, #0
 8001f7a:	d0f0      	beq.n	8001f5e <HAL_RCC_OscConfig+0x16e>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001f7c:	4b45      	ldr	r3, [pc, #276]	; (8002094 <HAL_RCC_OscConfig+0x2a4>)
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	4a44      	ldr	r2, [pc, #272]	; (8002094 <HAL_RCC_OscConfig+0x2a4>)
 8001f82:	f043 0308 	orr.w	r3, r3, #8
 8001f86:	6013      	str	r3, [r2, #0]
 8001f88:	4b42      	ldr	r3, [pc, #264]	; (8002094 <HAL_RCC_OscConfig+0x2a4>)
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	6a1b      	ldr	r3, [r3, #32]
 8001f94:	493f      	ldr	r1, [pc, #252]	; (8002094 <HAL_RCC_OscConfig+0x2a4>)
 8001f96:	4313      	orrs	r3, r2
 8001f98:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001f9a:	4b3e      	ldr	r3, [pc, #248]	; (8002094 <HAL_RCC_OscConfig+0x2a4>)
 8001f9c:	685b      	ldr	r3, [r3, #4]
 8001f9e:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	69db      	ldr	r3, [r3, #28]
 8001fa6:	021b      	lsls	r3, r3, #8
 8001fa8:	493a      	ldr	r1, [pc, #232]	; (8002094 <HAL_RCC_OscConfig+0x2a4>)
 8001faa:	4313      	orrs	r3, r2
 8001fac:	604b      	str	r3, [r1, #4]
 8001fae:	e01a      	b.n	8001fe6 <HAL_RCC_OscConfig+0x1f6>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001fb0:	4b38      	ldr	r3, [pc, #224]	; (8002094 <HAL_RCC_OscConfig+0x2a4>)
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	4a37      	ldr	r2, [pc, #220]	; (8002094 <HAL_RCC_OscConfig+0x2a4>)
 8001fb6:	f023 0301 	bic.w	r3, r3, #1
 8001fba:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001fbc:	f7ff faba 	bl	8001534 <HAL_GetTick>
 8001fc0:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001fc2:	e008      	b.n	8001fd6 <HAL_RCC_OscConfig+0x1e6>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001fc4:	f7ff fab6 	bl	8001534 <HAL_GetTick>
 8001fc8:	4602      	mov	r2, r0
 8001fca:	693b      	ldr	r3, [r7, #16]
 8001fcc:	1ad3      	subs	r3, r2, r3
 8001fce:	2b02      	cmp	r3, #2
 8001fd0:	d901      	bls.n	8001fd6 <HAL_RCC_OscConfig+0x1e6>
          {
            return HAL_TIMEOUT;
 8001fd2:	2303      	movs	r3, #3
 8001fd4:	e2b3      	b.n	800253e <HAL_RCC_OscConfig+0x74e>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001fd6:	4b2f      	ldr	r3, [pc, #188]	; (8002094 <HAL_RCC_OscConfig+0x2a4>)
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	f003 0302 	and.w	r3, r3, #2
 8001fde:	2b00      	cmp	r3, #0
 8001fe0:	d1f0      	bne.n	8001fc4 <HAL_RCC_OscConfig+0x1d4>
 8001fe2:	e000      	b.n	8001fe6 <HAL_RCC_OscConfig+0x1f6>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001fe4:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	f003 0301 	and.w	r3, r3, #1
 8001fee:	2b00      	cmp	r3, #0
 8001ff0:	d074      	beq.n	80020dc <HAL_RCC_OscConfig+0x2ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8001ff2:	69bb      	ldr	r3, [r7, #24]
 8001ff4:	2b08      	cmp	r3, #8
 8001ff6:	d005      	beq.n	8002004 <HAL_RCC_OscConfig+0x214>
 8001ff8:	69bb      	ldr	r3, [r7, #24]
 8001ffa:	2b0c      	cmp	r3, #12
 8001ffc:	d10e      	bne.n	800201c <HAL_RCC_OscConfig+0x22c>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001ffe:	697b      	ldr	r3, [r7, #20]
 8002000:	2b03      	cmp	r3, #3
 8002002:	d10b      	bne.n	800201c <HAL_RCC_OscConfig+0x22c>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002004:	4b23      	ldr	r3, [pc, #140]	; (8002094 <HAL_RCC_OscConfig+0x2a4>)
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800200c:	2b00      	cmp	r3, #0
 800200e:	d064      	beq.n	80020da <HAL_RCC_OscConfig+0x2ea>
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	685b      	ldr	r3, [r3, #4]
 8002014:	2b00      	cmp	r3, #0
 8002016:	d160      	bne.n	80020da <HAL_RCC_OscConfig+0x2ea>
      {
        return HAL_ERROR;
 8002018:	2301      	movs	r3, #1
 800201a:	e290      	b.n	800253e <HAL_RCC_OscConfig+0x74e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	685b      	ldr	r3, [r3, #4]
 8002020:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002024:	d106      	bne.n	8002034 <HAL_RCC_OscConfig+0x244>
 8002026:	4b1b      	ldr	r3, [pc, #108]	; (8002094 <HAL_RCC_OscConfig+0x2a4>)
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	4a1a      	ldr	r2, [pc, #104]	; (8002094 <HAL_RCC_OscConfig+0x2a4>)
 800202c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002030:	6013      	str	r3, [r2, #0]
 8002032:	e01d      	b.n	8002070 <HAL_RCC_OscConfig+0x280>
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	685b      	ldr	r3, [r3, #4]
 8002038:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800203c:	d10c      	bne.n	8002058 <HAL_RCC_OscConfig+0x268>
 800203e:	4b15      	ldr	r3, [pc, #84]	; (8002094 <HAL_RCC_OscConfig+0x2a4>)
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	4a14      	ldr	r2, [pc, #80]	; (8002094 <HAL_RCC_OscConfig+0x2a4>)
 8002044:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002048:	6013      	str	r3, [r2, #0]
 800204a:	4b12      	ldr	r3, [pc, #72]	; (8002094 <HAL_RCC_OscConfig+0x2a4>)
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	4a11      	ldr	r2, [pc, #68]	; (8002094 <HAL_RCC_OscConfig+0x2a4>)
 8002050:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002054:	6013      	str	r3, [r2, #0]
 8002056:	e00b      	b.n	8002070 <HAL_RCC_OscConfig+0x280>
 8002058:	4b0e      	ldr	r3, [pc, #56]	; (8002094 <HAL_RCC_OscConfig+0x2a4>)
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	4a0d      	ldr	r2, [pc, #52]	; (8002094 <HAL_RCC_OscConfig+0x2a4>)
 800205e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002062:	6013      	str	r3, [r2, #0]
 8002064:	4b0b      	ldr	r3, [pc, #44]	; (8002094 <HAL_RCC_OscConfig+0x2a4>)
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	4a0a      	ldr	r2, [pc, #40]	; (8002094 <HAL_RCC_OscConfig+0x2a4>)
 800206a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800206e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	685b      	ldr	r3, [r3, #4]
 8002074:	2b00      	cmp	r3, #0
 8002076:	d01c      	beq.n	80020b2 <HAL_RCC_OscConfig+0x2c2>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002078:	f7ff fa5c 	bl	8001534 <HAL_GetTick>
 800207c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800207e:	e011      	b.n	80020a4 <HAL_RCC_OscConfig+0x2b4>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002080:	f7ff fa58 	bl	8001534 <HAL_GetTick>
 8002084:	4602      	mov	r2, r0
 8002086:	693b      	ldr	r3, [r7, #16]
 8002088:	1ad3      	subs	r3, r2, r3
 800208a:	2b64      	cmp	r3, #100	; 0x64
 800208c:	d90a      	bls.n	80020a4 <HAL_RCC_OscConfig+0x2b4>
          {
            return HAL_TIMEOUT;
 800208e:	2303      	movs	r3, #3
 8002090:	e255      	b.n	800253e <HAL_RCC_OscConfig+0x74e>
 8002092:	bf00      	nop
 8002094:	40021000 	.word	0x40021000
 8002098:	08005968 	.word	0x08005968
 800209c:	20000000 	.word	0x20000000
 80020a0:	20000004 	.word	0x20000004
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80020a4:	4bae      	ldr	r3, [pc, #696]	; (8002360 <HAL_RCC_OscConfig+0x570>)
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80020ac:	2b00      	cmp	r3, #0
 80020ae:	d0e7      	beq.n	8002080 <HAL_RCC_OscConfig+0x290>
 80020b0:	e014      	b.n	80020dc <HAL_RCC_OscConfig+0x2ec>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80020b2:	f7ff fa3f 	bl	8001534 <HAL_GetTick>
 80020b6:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80020b8:	e008      	b.n	80020cc <HAL_RCC_OscConfig+0x2dc>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80020ba:	f7ff fa3b 	bl	8001534 <HAL_GetTick>
 80020be:	4602      	mov	r2, r0
 80020c0:	693b      	ldr	r3, [r7, #16]
 80020c2:	1ad3      	subs	r3, r2, r3
 80020c4:	2b64      	cmp	r3, #100	; 0x64
 80020c6:	d901      	bls.n	80020cc <HAL_RCC_OscConfig+0x2dc>
          {
            return HAL_TIMEOUT;
 80020c8:	2303      	movs	r3, #3
 80020ca:	e238      	b.n	800253e <HAL_RCC_OscConfig+0x74e>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80020cc:	4ba4      	ldr	r3, [pc, #656]	; (8002360 <HAL_RCC_OscConfig+0x570>)
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80020d4:	2b00      	cmp	r3, #0
 80020d6:	d1f0      	bne.n	80020ba <HAL_RCC_OscConfig+0x2ca>
 80020d8:	e000      	b.n	80020dc <HAL_RCC_OscConfig+0x2ec>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80020da:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	f003 0302 	and.w	r3, r3, #2
 80020e4:	2b00      	cmp	r3, #0
 80020e6:	d060      	beq.n	80021aa <HAL_RCC_OscConfig+0x3ba>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80020e8:	69bb      	ldr	r3, [r7, #24]
 80020ea:	2b04      	cmp	r3, #4
 80020ec:	d005      	beq.n	80020fa <HAL_RCC_OscConfig+0x30a>
 80020ee:	69bb      	ldr	r3, [r7, #24]
 80020f0:	2b0c      	cmp	r3, #12
 80020f2:	d119      	bne.n	8002128 <HAL_RCC_OscConfig+0x338>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80020f4:	697b      	ldr	r3, [r7, #20]
 80020f6:	2b02      	cmp	r3, #2
 80020f8:	d116      	bne.n	8002128 <HAL_RCC_OscConfig+0x338>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80020fa:	4b99      	ldr	r3, [pc, #612]	; (8002360 <HAL_RCC_OscConfig+0x570>)
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002102:	2b00      	cmp	r3, #0
 8002104:	d005      	beq.n	8002112 <HAL_RCC_OscConfig+0x322>
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	68db      	ldr	r3, [r3, #12]
 800210a:	2b00      	cmp	r3, #0
 800210c:	d101      	bne.n	8002112 <HAL_RCC_OscConfig+0x322>
      {
        return HAL_ERROR;
 800210e:	2301      	movs	r3, #1
 8002110:	e215      	b.n	800253e <HAL_RCC_OscConfig+0x74e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002112:	4b93      	ldr	r3, [pc, #588]	; (8002360 <HAL_RCC_OscConfig+0x570>)
 8002114:	685b      	ldr	r3, [r3, #4]
 8002116:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	691b      	ldr	r3, [r3, #16]
 800211e:	061b      	lsls	r3, r3, #24
 8002120:	498f      	ldr	r1, [pc, #572]	; (8002360 <HAL_RCC_OscConfig+0x570>)
 8002122:	4313      	orrs	r3, r2
 8002124:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002126:	e040      	b.n	80021aa <HAL_RCC_OscConfig+0x3ba>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	68db      	ldr	r3, [r3, #12]
 800212c:	2b00      	cmp	r3, #0
 800212e:	d023      	beq.n	8002178 <HAL_RCC_OscConfig+0x388>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002130:	4b8b      	ldr	r3, [pc, #556]	; (8002360 <HAL_RCC_OscConfig+0x570>)
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	4a8a      	ldr	r2, [pc, #552]	; (8002360 <HAL_RCC_OscConfig+0x570>)
 8002136:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800213a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800213c:	f7ff f9fa 	bl	8001534 <HAL_GetTick>
 8002140:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002142:	e008      	b.n	8002156 <HAL_RCC_OscConfig+0x366>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002144:	f7ff f9f6 	bl	8001534 <HAL_GetTick>
 8002148:	4602      	mov	r2, r0
 800214a:	693b      	ldr	r3, [r7, #16]
 800214c:	1ad3      	subs	r3, r2, r3
 800214e:	2b02      	cmp	r3, #2
 8002150:	d901      	bls.n	8002156 <HAL_RCC_OscConfig+0x366>
          {
            return HAL_TIMEOUT;
 8002152:	2303      	movs	r3, #3
 8002154:	e1f3      	b.n	800253e <HAL_RCC_OscConfig+0x74e>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002156:	4b82      	ldr	r3, [pc, #520]	; (8002360 <HAL_RCC_OscConfig+0x570>)
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800215e:	2b00      	cmp	r3, #0
 8002160:	d0f0      	beq.n	8002144 <HAL_RCC_OscConfig+0x354>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002162:	4b7f      	ldr	r3, [pc, #508]	; (8002360 <HAL_RCC_OscConfig+0x570>)
 8002164:	685b      	ldr	r3, [r3, #4]
 8002166:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	691b      	ldr	r3, [r3, #16]
 800216e:	061b      	lsls	r3, r3, #24
 8002170:	497b      	ldr	r1, [pc, #492]	; (8002360 <HAL_RCC_OscConfig+0x570>)
 8002172:	4313      	orrs	r3, r2
 8002174:	604b      	str	r3, [r1, #4]
 8002176:	e018      	b.n	80021aa <HAL_RCC_OscConfig+0x3ba>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002178:	4b79      	ldr	r3, [pc, #484]	; (8002360 <HAL_RCC_OscConfig+0x570>)
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	4a78      	ldr	r2, [pc, #480]	; (8002360 <HAL_RCC_OscConfig+0x570>)
 800217e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002182:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002184:	f7ff f9d6 	bl	8001534 <HAL_GetTick>
 8002188:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800218a:	e008      	b.n	800219e <HAL_RCC_OscConfig+0x3ae>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800218c:	f7ff f9d2 	bl	8001534 <HAL_GetTick>
 8002190:	4602      	mov	r2, r0
 8002192:	693b      	ldr	r3, [r7, #16]
 8002194:	1ad3      	subs	r3, r2, r3
 8002196:	2b02      	cmp	r3, #2
 8002198:	d901      	bls.n	800219e <HAL_RCC_OscConfig+0x3ae>
          {
            return HAL_TIMEOUT;
 800219a:	2303      	movs	r3, #3
 800219c:	e1cf      	b.n	800253e <HAL_RCC_OscConfig+0x74e>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800219e:	4b70      	ldr	r3, [pc, #448]	; (8002360 <HAL_RCC_OscConfig+0x570>)
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80021a6:	2b00      	cmp	r3, #0
 80021a8:	d1f0      	bne.n	800218c <HAL_RCC_OscConfig+0x39c>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	f003 0308 	and.w	r3, r3, #8
 80021b2:	2b00      	cmp	r3, #0
 80021b4:	d03c      	beq.n	8002230 <HAL_RCC_OscConfig+0x440>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	695b      	ldr	r3, [r3, #20]
 80021ba:	2b00      	cmp	r3, #0
 80021bc:	d01c      	beq.n	80021f8 <HAL_RCC_OscConfig+0x408>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80021be:	4b68      	ldr	r3, [pc, #416]	; (8002360 <HAL_RCC_OscConfig+0x570>)
 80021c0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80021c4:	4a66      	ldr	r2, [pc, #408]	; (8002360 <HAL_RCC_OscConfig+0x570>)
 80021c6:	f043 0301 	orr.w	r3, r3, #1
 80021ca:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80021ce:	f7ff f9b1 	bl	8001534 <HAL_GetTick>
 80021d2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80021d4:	e008      	b.n	80021e8 <HAL_RCC_OscConfig+0x3f8>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80021d6:	f7ff f9ad 	bl	8001534 <HAL_GetTick>
 80021da:	4602      	mov	r2, r0
 80021dc:	693b      	ldr	r3, [r7, #16]
 80021de:	1ad3      	subs	r3, r2, r3
 80021e0:	2b02      	cmp	r3, #2
 80021e2:	d901      	bls.n	80021e8 <HAL_RCC_OscConfig+0x3f8>
        {
          return HAL_TIMEOUT;
 80021e4:	2303      	movs	r3, #3
 80021e6:	e1aa      	b.n	800253e <HAL_RCC_OscConfig+0x74e>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80021e8:	4b5d      	ldr	r3, [pc, #372]	; (8002360 <HAL_RCC_OscConfig+0x570>)
 80021ea:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80021ee:	f003 0302 	and.w	r3, r3, #2
 80021f2:	2b00      	cmp	r3, #0
 80021f4:	d0ef      	beq.n	80021d6 <HAL_RCC_OscConfig+0x3e6>
 80021f6:	e01b      	b.n	8002230 <HAL_RCC_OscConfig+0x440>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80021f8:	4b59      	ldr	r3, [pc, #356]	; (8002360 <HAL_RCC_OscConfig+0x570>)
 80021fa:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80021fe:	4a58      	ldr	r2, [pc, #352]	; (8002360 <HAL_RCC_OscConfig+0x570>)
 8002200:	f023 0301 	bic.w	r3, r3, #1
 8002204:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002208:	f7ff f994 	bl	8001534 <HAL_GetTick>
 800220c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800220e:	e008      	b.n	8002222 <HAL_RCC_OscConfig+0x432>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002210:	f7ff f990 	bl	8001534 <HAL_GetTick>
 8002214:	4602      	mov	r2, r0
 8002216:	693b      	ldr	r3, [r7, #16]
 8002218:	1ad3      	subs	r3, r2, r3
 800221a:	2b02      	cmp	r3, #2
 800221c:	d901      	bls.n	8002222 <HAL_RCC_OscConfig+0x432>
        {
          return HAL_TIMEOUT;
 800221e:	2303      	movs	r3, #3
 8002220:	e18d      	b.n	800253e <HAL_RCC_OscConfig+0x74e>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002222:	4b4f      	ldr	r3, [pc, #316]	; (8002360 <HAL_RCC_OscConfig+0x570>)
 8002224:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002228:	f003 0302 	and.w	r3, r3, #2
 800222c:	2b00      	cmp	r3, #0
 800222e:	d1ef      	bne.n	8002210 <HAL_RCC_OscConfig+0x420>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	f003 0304 	and.w	r3, r3, #4
 8002238:	2b00      	cmp	r3, #0
 800223a:	f000 80a5 	beq.w	8002388 <HAL_RCC_OscConfig+0x598>
  {
    FlagStatus       pwrclkchanged = RESET;
 800223e:	2300      	movs	r3, #0
 8002240:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8002242:	4b47      	ldr	r3, [pc, #284]	; (8002360 <HAL_RCC_OscConfig+0x570>)
 8002244:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002246:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800224a:	2b00      	cmp	r3, #0
 800224c:	d10d      	bne.n	800226a <HAL_RCC_OscConfig+0x47a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800224e:	4b44      	ldr	r3, [pc, #272]	; (8002360 <HAL_RCC_OscConfig+0x570>)
 8002250:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002252:	4a43      	ldr	r2, [pc, #268]	; (8002360 <HAL_RCC_OscConfig+0x570>)
 8002254:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002258:	6593      	str	r3, [r2, #88]	; 0x58
 800225a:	4b41      	ldr	r3, [pc, #260]	; (8002360 <HAL_RCC_OscConfig+0x570>)
 800225c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800225e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002262:	60bb      	str	r3, [r7, #8]
 8002264:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002266:	2301      	movs	r3, #1
 8002268:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800226a:	4b3e      	ldr	r3, [pc, #248]	; (8002364 <HAL_RCC_OscConfig+0x574>)
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002272:	2b00      	cmp	r3, #0
 8002274:	d118      	bne.n	80022a8 <HAL_RCC_OscConfig+0x4b8>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002276:	4b3b      	ldr	r3, [pc, #236]	; (8002364 <HAL_RCC_OscConfig+0x574>)
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	4a3a      	ldr	r2, [pc, #232]	; (8002364 <HAL_RCC_OscConfig+0x574>)
 800227c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002280:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002282:	f7ff f957 	bl	8001534 <HAL_GetTick>
 8002286:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002288:	e008      	b.n	800229c <HAL_RCC_OscConfig+0x4ac>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800228a:	f7ff f953 	bl	8001534 <HAL_GetTick>
 800228e:	4602      	mov	r2, r0
 8002290:	693b      	ldr	r3, [r7, #16]
 8002292:	1ad3      	subs	r3, r2, r3
 8002294:	2b02      	cmp	r3, #2
 8002296:	d901      	bls.n	800229c <HAL_RCC_OscConfig+0x4ac>
        {
          return HAL_TIMEOUT;
 8002298:	2303      	movs	r3, #3
 800229a:	e150      	b.n	800253e <HAL_RCC_OscConfig+0x74e>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800229c:	4b31      	ldr	r3, [pc, #196]	; (8002364 <HAL_RCC_OscConfig+0x574>)
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80022a4:	2b00      	cmp	r3, #0
 80022a6:	d0f0      	beq.n	800228a <HAL_RCC_OscConfig+0x49a>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	689b      	ldr	r3, [r3, #8]
 80022ac:	2b01      	cmp	r3, #1
 80022ae:	d108      	bne.n	80022c2 <HAL_RCC_OscConfig+0x4d2>
 80022b0:	4b2b      	ldr	r3, [pc, #172]	; (8002360 <HAL_RCC_OscConfig+0x570>)
 80022b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80022b6:	4a2a      	ldr	r2, [pc, #168]	; (8002360 <HAL_RCC_OscConfig+0x570>)
 80022b8:	f043 0301 	orr.w	r3, r3, #1
 80022bc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80022c0:	e024      	b.n	800230c <HAL_RCC_OscConfig+0x51c>
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	689b      	ldr	r3, [r3, #8]
 80022c6:	2b05      	cmp	r3, #5
 80022c8:	d110      	bne.n	80022ec <HAL_RCC_OscConfig+0x4fc>
 80022ca:	4b25      	ldr	r3, [pc, #148]	; (8002360 <HAL_RCC_OscConfig+0x570>)
 80022cc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80022d0:	4a23      	ldr	r2, [pc, #140]	; (8002360 <HAL_RCC_OscConfig+0x570>)
 80022d2:	f043 0304 	orr.w	r3, r3, #4
 80022d6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80022da:	4b21      	ldr	r3, [pc, #132]	; (8002360 <HAL_RCC_OscConfig+0x570>)
 80022dc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80022e0:	4a1f      	ldr	r2, [pc, #124]	; (8002360 <HAL_RCC_OscConfig+0x570>)
 80022e2:	f043 0301 	orr.w	r3, r3, #1
 80022e6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80022ea:	e00f      	b.n	800230c <HAL_RCC_OscConfig+0x51c>
 80022ec:	4b1c      	ldr	r3, [pc, #112]	; (8002360 <HAL_RCC_OscConfig+0x570>)
 80022ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80022f2:	4a1b      	ldr	r2, [pc, #108]	; (8002360 <HAL_RCC_OscConfig+0x570>)
 80022f4:	f023 0301 	bic.w	r3, r3, #1
 80022f8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80022fc:	4b18      	ldr	r3, [pc, #96]	; (8002360 <HAL_RCC_OscConfig+0x570>)
 80022fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002302:	4a17      	ldr	r2, [pc, #92]	; (8002360 <HAL_RCC_OscConfig+0x570>)
 8002304:	f023 0304 	bic.w	r3, r3, #4
 8002308:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	689b      	ldr	r3, [r3, #8]
 8002310:	2b00      	cmp	r3, #0
 8002312:	d016      	beq.n	8002342 <HAL_RCC_OscConfig+0x552>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002314:	f7ff f90e 	bl	8001534 <HAL_GetTick>
 8002318:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800231a:	e00a      	b.n	8002332 <HAL_RCC_OscConfig+0x542>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800231c:	f7ff f90a 	bl	8001534 <HAL_GetTick>
 8002320:	4602      	mov	r2, r0
 8002322:	693b      	ldr	r3, [r7, #16]
 8002324:	1ad3      	subs	r3, r2, r3
 8002326:	f241 3288 	movw	r2, #5000	; 0x1388
 800232a:	4293      	cmp	r3, r2
 800232c:	d901      	bls.n	8002332 <HAL_RCC_OscConfig+0x542>
        {
          return HAL_TIMEOUT;
 800232e:	2303      	movs	r3, #3
 8002330:	e105      	b.n	800253e <HAL_RCC_OscConfig+0x74e>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002332:	4b0b      	ldr	r3, [pc, #44]	; (8002360 <HAL_RCC_OscConfig+0x570>)
 8002334:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002338:	f003 0302 	and.w	r3, r3, #2
 800233c:	2b00      	cmp	r3, #0
 800233e:	d0ed      	beq.n	800231c <HAL_RCC_OscConfig+0x52c>
 8002340:	e019      	b.n	8002376 <HAL_RCC_OscConfig+0x586>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002342:	f7ff f8f7 	bl	8001534 <HAL_GetTick>
 8002346:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002348:	e00e      	b.n	8002368 <HAL_RCC_OscConfig+0x578>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800234a:	f7ff f8f3 	bl	8001534 <HAL_GetTick>
 800234e:	4602      	mov	r2, r0
 8002350:	693b      	ldr	r3, [r7, #16]
 8002352:	1ad3      	subs	r3, r2, r3
 8002354:	f241 3288 	movw	r2, #5000	; 0x1388
 8002358:	4293      	cmp	r3, r2
 800235a:	d905      	bls.n	8002368 <HAL_RCC_OscConfig+0x578>
        {
          return HAL_TIMEOUT;
 800235c:	2303      	movs	r3, #3
 800235e:	e0ee      	b.n	800253e <HAL_RCC_OscConfig+0x74e>
 8002360:	40021000 	.word	0x40021000
 8002364:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002368:	4b77      	ldr	r3, [pc, #476]	; (8002548 <HAL_RCC_OscConfig+0x758>)
 800236a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800236e:	f003 0302 	and.w	r3, r3, #2
 8002372:	2b00      	cmp	r3, #0
 8002374:	d1e9      	bne.n	800234a <HAL_RCC_OscConfig+0x55a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002376:	7ffb      	ldrb	r3, [r7, #31]
 8002378:	2b01      	cmp	r3, #1
 800237a:	d105      	bne.n	8002388 <HAL_RCC_OscConfig+0x598>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800237c:	4b72      	ldr	r3, [pc, #456]	; (8002548 <HAL_RCC_OscConfig+0x758>)
 800237e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002380:	4a71      	ldr	r2, [pc, #452]	; (8002548 <HAL_RCC_OscConfig+0x758>)
 8002382:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002386:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800238c:	2b00      	cmp	r3, #0
 800238e:	f000 80d5 	beq.w	800253c <HAL_RCC_OscConfig+0x74c>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002392:	69bb      	ldr	r3, [r7, #24]
 8002394:	2b0c      	cmp	r3, #12
 8002396:	f000 808e 	beq.w	80024b6 <HAL_RCC_OscConfig+0x6c6>
    {
      if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800239e:	2b02      	cmp	r3, #2
 80023a0:	d15b      	bne.n	800245a <HAL_RCC_OscConfig+0x66a>
#endif /* RCC_PLLP_SUPPORT */
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80023a2:	4b69      	ldr	r3, [pc, #420]	; (8002548 <HAL_RCC_OscConfig+0x758>)
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	4a68      	ldr	r2, [pc, #416]	; (8002548 <HAL_RCC_OscConfig+0x758>)
 80023a8:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80023ac:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80023ae:	f7ff f8c1 	bl	8001534 <HAL_GetTick>
 80023b2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80023b4:	e008      	b.n	80023c8 <HAL_RCC_OscConfig+0x5d8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80023b6:	f7ff f8bd 	bl	8001534 <HAL_GetTick>
 80023ba:	4602      	mov	r2, r0
 80023bc:	693b      	ldr	r3, [r7, #16]
 80023be:	1ad3      	subs	r3, r2, r3
 80023c0:	2b02      	cmp	r3, #2
 80023c2:	d901      	bls.n	80023c8 <HAL_RCC_OscConfig+0x5d8>
          {
            return HAL_TIMEOUT;
 80023c4:	2303      	movs	r3, #3
 80023c6:	e0ba      	b.n	800253e <HAL_RCC_OscConfig+0x74e>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80023c8:	4b5f      	ldr	r3, [pc, #380]	; (8002548 <HAL_RCC_OscConfig+0x758>)
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80023d0:	2b00      	cmp	r3, #0
 80023d2:	d1f0      	bne.n	80023b6 <HAL_RCC_OscConfig+0x5c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80023d4:	4b5c      	ldr	r3, [pc, #368]	; (8002548 <HAL_RCC_OscConfig+0x758>)
 80023d6:	68da      	ldr	r2, [r3, #12]
 80023d8:	4b5c      	ldr	r3, [pc, #368]	; (800254c <HAL_RCC_OscConfig+0x75c>)
 80023da:	4013      	ands	r3, r2
 80023dc:	687a      	ldr	r2, [r7, #4]
 80023de:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 80023e0:	687a      	ldr	r2, [r7, #4]
 80023e2:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80023e4:	3a01      	subs	r2, #1
 80023e6:	0112      	lsls	r2, r2, #4
 80023e8:	4311      	orrs	r1, r2
 80023ea:	687a      	ldr	r2, [r7, #4]
 80023ec:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80023ee:	0212      	lsls	r2, r2, #8
 80023f0:	4311      	orrs	r1, r2
 80023f2:	687a      	ldr	r2, [r7, #4]
 80023f4:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80023f6:	0852      	lsrs	r2, r2, #1
 80023f8:	3a01      	subs	r2, #1
 80023fa:	0552      	lsls	r2, r2, #21
 80023fc:	4311      	orrs	r1, r2
 80023fe:	687a      	ldr	r2, [r7, #4]
 8002400:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8002402:	0852      	lsrs	r2, r2, #1
 8002404:	3a01      	subs	r2, #1
 8002406:	0652      	lsls	r2, r2, #25
 8002408:	4311      	orrs	r1, r2
 800240a:	687a      	ldr	r2, [r7, #4]
 800240c:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800240e:	0912      	lsrs	r2, r2, #4
 8002410:	0452      	lsls	r2, r2, #17
 8002412:	430a      	orrs	r2, r1
 8002414:	494c      	ldr	r1, [pc, #304]	; (8002548 <HAL_RCC_OscConfig+0x758>)
 8002416:	4313      	orrs	r3, r2
 8002418:	60cb      	str	r3, [r1, #12]
#endif
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800241a:	4b4b      	ldr	r3, [pc, #300]	; (8002548 <HAL_RCC_OscConfig+0x758>)
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	4a4a      	ldr	r2, [pc, #296]	; (8002548 <HAL_RCC_OscConfig+0x758>)
 8002420:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002424:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002426:	4b48      	ldr	r3, [pc, #288]	; (8002548 <HAL_RCC_OscConfig+0x758>)
 8002428:	68db      	ldr	r3, [r3, #12]
 800242a:	4a47      	ldr	r2, [pc, #284]	; (8002548 <HAL_RCC_OscConfig+0x758>)
 800242c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002430:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002432:	f7ff f87f 	bl	8001534 <HAL_GetTick>
 8002436:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002438:	e008      	b.n	800244c <HAL_RCC_OscConfig+0x65c>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800243a:	f7ff f87b 	bl	8001534 <HAL_GetTick>
 800243e:	4602      	mov	r2, r0
 8002440:	693b      	ldr	r3, [r7, #16]
 8002442:	1ad3      	subs	r3, r2, r3
 8002444:	2b02      	cmp	r3, #2
 8002446:	d901      	bls.n	800244c <HAL_RCC_OscConfig+0x65c>
          {
            return HAL_TIMEOUT;
 8002448:	2303      	movs	r3, #3
 800244a:	e078      	b.n	800253e <HAL_RCC_OscConfig+0x74e>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800244c:	4b3e      	ldr	r3, [pc, #248]	; (8002548 <HAL_RCC_OscConfig+0x758>)
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002454:	2b00      	cmp	r3, #0
 8002456:	d0f0      	beq.n	800243a <HAL_RCC_OscConfig+0x64a>
 8002458:	e070      	b.n	800253c <HAL_RCC_OscConfig+0x74c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800245a:	4b3b      	ldr	r3, [pc, #236]	; (8002548 <HAL_RCC_OscConfig+0x758>)
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	4a3a      	ldr	r2, [pc, #232]	; (8002548 <HAL_RCC_OscConfig+0x758>)
 8002460:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002464:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 8002466:	4b38      	ldr	r3, [pc, #224]	; (8002548 <HAL_RCC_OscConfig+0x758>)
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 800246e:	2b00      	cmp	r3, #0
 8002470:	d105      	bne.n	800247e <HAL_RCC_OscConfig+0x68e>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8002472:	4b35      	ldr	r3, [pc, #212]	; (8002548 <HAL_RCC_OscConfig+0x758>)
 8002474:	68db      	ldr	r3, [r3, #12]
 8002476:	4a34      	ldr	r2, [pc, #208]	; (8002548 <HAL_RCC_OscConfig+0x758>)
 8002478:	f023 0303 	bic.w	r3, r3, #3
 800247c:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 800247e:	4b32      	ldr	r3, [pc, #200]	; (8002548 <HAL_RCC_OscConfig+0x758>)
 8002480:	68db      	ldr	r3, [r3, #12]
 8002482:	4a31      	ldr	r2, [pc, #196]	; (8002548 <HAL_RCC_OscConfig+0x758>)
 8002484:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8002488:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800248c:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800248e:	f7ff f851 	bl	8001534 <HAL_GetTick>
 8002492:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002494:	e008      	b.n	80024a8 <HAL_RCC_OscConfig+0x6b8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002496:	f7ff f84d 	bl	8001534 <HAL_GetTick>
 800249a:	4602      	mov	r2, r0
 800249c:	693b      	ldr	r3, [r7, #16]
 800249e:	1ad3      	subs	r3, r2, r3
 80024a0:	2b02      	cmp	r3, #2
 80024a2:	d901      	bls.n	80024a8 <HAL_RCC_OscConfig+0x6b8>
          {
            return HAL_TIMEOUT;
 80024a4:	2303      	movs	r3, #3
 80024a6:	e04a      	b.n	800253e <HAL_RCC_OscConfig+0x74e>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80024a8:	4b27      	ldr	r3, [pc, #156]	; (8002548 <HAL_RCC_OscConfig+0x758>)
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80024b0:	2b00      	cmp	r3, #0
 80024b2:	d1f0      	bne.n	8002496 <HAL_RCC_OscConfig+0x6a6>
 80024b4:	e042      	b.n	800253c <HAL_RCC_OscConfig+0x74c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80024ba:	2b01      	cmp	r3, #1
 80024bc:	d101      	bne.n	80024c2 <HAL_RCC_OscConfig+0x6d2>
      {
        return HAL_ERROR;
 80024be:	2301      	movs	r3, #1
 80024c0:	e03d      	b.n	800253e <HAL_RCC_OscConfig+0x74e>
      }
      else
      {
        pll_config = RCC->PLLCFGR;
 80024c2:	4b21      	ldr	r3, [pc, #132]	; (8002548 <HAL_RCC_OscConfig+0x758>)
 80024c4:	68db      	ldr	r3, [r3, #12]
 80024c6:	617b      	str	r3, [r7, #20]
        /* Do not return HAL_ERROR if request repeats the current configuration */
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80024c8:	697b      	ldr	r3, [r7, #20]
 80024ca:	f003 0203 	and.w	r2, r3, #3
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80024d2:	429a      	cmp	r2, r3
 80024d4:	d130      	bne.n	8002538 <HAL_RCC_OscConfig+0x748>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80024d6:	697b      	ldr	r3, [r7, #20]
 80024d8:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024e0:	3b01      	subs	r3, #1
 80024e2:	011b      	lsls	r3, r3, #4
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80024e4:	429a      	cmp	r2, r3
 80024e6:	d127      	bne.n	8002538 <HAL_RCC_OscConfig+0x748>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80024e8:	697b      	ldr	r3, [r7, #20]
 80024ea:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80024f2:	021b      	lsls	r3, r3, #8
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80024f4:	429a      	cmp	r2, r3
 80024f6:	d11f      	bne.n	8002538 <HAL_RCC_OscConfig+0x748>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80024f8:	697b      	ldr	r3, [r7, #20]
 80024fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80024fe:	687a      	ldr	r2, [r7, #4]
 8002500:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002502:	2a07      	cmp	r2, #7
 8002504:	bf14      	ite	ne
 8002506:	2201      	movne	r2, #1
 8002508:	2200      	moveq	r2, #0
 800250a:	b2d2      	uxtb	r2, r2
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800250c:	4293      	cmp	r3, r2
 800250e:	d113      	bne.n	8002538 <HAL_RCC_OscConfig+0x748>
#endif
#endif
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002510:	697b      	ldr	r3, [r7, #20]
 8002512:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800251a:	085b      	lsrs	r3, r3, #1
 800251c:	3b01      	subs	r3, #1
 800251e:	055b      	lsls	r3, r3, #21
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8002520:	429a      	cmp	r2, r3
 8002522:	d109      	bne.n	8002538 <HAL_RCC_OscConfig+0x748>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8002524:	697b      	ldr	r3, [r7, #20]
 8002526:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800252e:	085b      	lsrs	r3, r3, #1
 8002530:	3b01      	subs	r3, #1
 8002532:	065b      	lsls	r3, r3, #25
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002534:	429a      	cmp	r2, r3
 8002536:	d001      	beq.n	800253c <HAL_RCC_OscConfig+0x74c>
        {
          return HAL_ERROR;
 8002538:	2301      	movs	r3, #1
 800253a:	e000      	b.n	800253e <HAL_RCC_OscConfig+0x74e>
        }
      }
    }
  }
  return HAL_OK;
 800253c:	2300      	movs	r3, #0
}
 800253e:	4618      	mov	r0, r3
 8002540:	3720      	adds	r7, #32
 8002542:	46bd      	mov	sp, r7
 8002544:	bd80      	pop	{r7, pc}
 8002546:	bf00      	nop
 8002548:	40021000 	.word	0x40021000
 800254c:	f99d808c 	.word	0xf99d808c

08002550 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002550:	b580      	push	{r7, lr}
 8002552:	b084      	sub	sp, #16
 8002554:	af00      	add	r7, sp, #0
 8002556:	6078      	str	r0, [r7, #4]
 8002558:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	2b00      	cmp	r3, #0
 800255e:	d101      	bne.n	8002564 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002560:	2301      	movs	r3, #1
 8002562:	e0c8      	b.n	80026f6 <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002564:	4b66      	ldr	r3, [pc, #408]	; (8002700 <HAL_RCC_ClockConfig+0x1b0>)
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	f003 0307 	and.w	r3, r3, #7
 800256c:	683a      	ldr	r2, [r7, #0]
 800256e:	429a      	cmp	r2, r3
 8002570:	d910      	bls.n	8002594 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002572:	4b63      	ldr	r3, [pc, #396]	; (8002700 <HAL_RCC_ClockConfig+0x1b0>)
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	f023 0207 	bic.w	r2, r3, #7
 800257a:	4961      	ldr	r1, [pc, #388]	; (8002700 <HAL_RCC_ClockConfig+0x1b0>)
 800257c:	683b      	ldr	r3, [r7, #0]
 800257e:	4313      	orrs	r3, r2
 8002580:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002582:	4b5f      	ldr	r3, [pc, #380]	; (8002700 <HAL_RCC_ClockConfig+0x1b0>)
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	f003 0307 	and.w	r3, r3, #7
 800258a:	683a      	ldr	r2, [r7, #0]
 800258c:	429a      	cmp	r2, r3
 800258e:	d001      	beq.n	8002594 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002590:	2301      	movs	r3, #1
 8002592:	e0b0      	b.n	80026f6 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	f003 0301 	and.w	r3, r3, #1
 800259c:	2b00      	cmp	r3, #0
 800259e:	d04c      	beq.n	800263a <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	685b      	ldr	r3, [r3, #4]
 80025a4:	2b03      	cmp	r3, #3
 80025a6:	d107      	bne.n	80025b8 <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80025a8:	4b56      	ldr	r3, [pc, #344]	; (8002704 <HAL_RCC_ClockConfig+0x1b4>)
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80025b0:	2b00      	cmp	r3, #0
 80025b2:	d121      	bne.n	80025f8 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 80025b4:	2301      	movs	r3, #1
 80025b6:	e09e      	b.n	80026f6 <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	685b      	ldr	r3, [r3, #4]
 80025bc:	2b02      	cmp	r3, #2
 80025be:	d107      	bne.n	80025d0 <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80025c0:	4b50      	ldr	r3, [pc, #320]	; (8002704 <HAL_RCC_ClockConfig+0x1b4>)
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80025c8:	2b00      	cmp	r3, #0
 80025ca:	d115      	bne.n	80025f8 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 80025cc:	2301      	movs	r3, #1
 80025ce:	e092      	b.n	80026f6 <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	685b      	ldr	r3, [r3, #4]
 80025d4:	2b00      	cmp	r3, #0
 80025d6:	d107      	bne.n	80025e8 <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80025d8:	4b4a      	ldr	r3, [pc, #296]	; (8002704 <HAL_RCC_ClockConfig+0x1b4>)
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	f003 0302 	and.w	r3, r3, #2
 80025e0:	2b00      	cmp	r3, #0
 80025e2:	d109      	bne.n	80025f8 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 80025e4:	2301      	movs	r3, #1
 80025e6:	e086      	b.n	80026f6 <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80025e8:	4b46      	ldr	r3, [pc, #280]	; (8002704 <HAL_RCC_ClockConfig+0x1b4>)
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80025f0:	2b00      	cmp	r3, #0
 80025f2:	d101      	bne.n	80025f8 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 80025f4:	2301      	movs	r3, #1
 80025f6:	e07e      	b.n	80026f6 <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80025f8:	4b42      	ldr	r3, [pc, #264]	; (8002704 <HAL_RCC_ClockConfig+0x1b4>)
 80025fa:	689b      	ldr	r3, [r3, #8]
 80025fc:	f023 0203 	bic.w	r2, r3, #3
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	685b      	ldr	r3, [r3, #4]
 8002604:	493f      	ldr	r1, [pc, #252]	; (8002704 <HAL_RCC_ClockConfig+0x1b4>)
 8002606:	4313      	orrs	r3, r2
 8002608:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800260a:	f7fe ff93 	bl	8001534 <HAL_GetTick>
 800260e:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002610:	e00a      	b.n	8002628 <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002612:	f7fe ff8f 	bl	8001534 <HAL_GetTick>
 8002616:	4602      	mov	r2, r0
 8002618:	68fb      	ldr	r3, [r7, #12]
 800261a:	1ad3      	subs	r3, r2, r3
 800261c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002620:	4293      	cmp	r3, r2
 8002622:	d901      	bls.n	8002628 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 8002624:	2303      	movs	r3, #3
 8002626:	e066      	b.n	80026f6 <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002628:	4b36      	ldr	r3, [pc, #216]	; (8002704 <HAL_RCC_ClockConfig+0x1b4>)
 800262a:	689b      	ldr	r3, [r3, #8]
 800262c:	f003 020c 	and.w	r2, r3, #12
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	685b      	ldr	r3, [r3, #4]
 8002634:	009b      	lsls	r3, r3, #2
 8002636:	429a      	cmp	r2, r3
 8002638:	d1eb      	bne.n	8002612 <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	f003 0302 	and.w	r3, r3, #2
 8002642:	2b00      	cmp	r3, #0
 8002644:	d008      	beq.n	8002658 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002646:	4b2f      	ldr	r3, [pc, #188]	; (8002704 <HAL_RCC_ClockConfig+0x1b4>)
 8002648:	689b      	ldr	r3, [r3, #8]
 800264a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	689b      	ldr	r3, [r3, #8]
 8002652:	492c      	ldr	r1, [pc, #176]	; (8002704 <HAL_RCC_ClockConfig+0x1b4>)
 8002654:	4313      	orrs	r3, r2
 8002656:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002658:	4b29      	ldr	r3, [pc, #164]	; (8002700 <HAL_RCC_ClockConfig+0x1b0>)
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	f003 0307 	and.w	r3, r3, #7
 8002660:	683a      	ldr	r2, [r7, #0]
 8002662:	429a      	cmp	r2, r3
 8002664:	d210      	bcs.n	8002688 <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002666:	4b26      	ldr	r3, [pc, #152]	; (8002700 <HAL_RCC_ClockConfig+0x1b0>)
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	f023 0207 	bic.w	r2, r3, #7
 800266e:	4924      	ldr	r1, [pc, #144]	; (8002700 <HAL_RCC_ClockConfig+0x1b0>)
 8002670:	683b      	ldr	r3, [r7, #0]
 8002672:	4313      	orrs	r3, r2
 8002674:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002676:	4b22      	ldr	r3, [pc, #136]	; (8002700 <HAL_RCC_ClockConfig+0x1b0>)
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	f003 0307 	and.w	r3, r3, #7
 800267e:	683a      	ldr	r2, [r7, #0]
 8002680:	429a      	cmp	r2, r3
 8002682:	d001      	beq.n	8002688 <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 8002684:	2301      	movs	r3, #1
 8002686:	e036      	b.n	80026f6 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	f003 0304 	and.w	r3, r3, #4
 8002690:	2b00      	cmp	r3, #0
 8002692:	d008      	beq.n	80026a6 <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002694:	4b1b      	ldr	r3, [pc, #108]	; (8002704 <HAL_RCC_ClockConfig+0x1b4>)
 8002696:	689b      	ldr	r3, [r3, #8]
 8002698:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	68db      	ldr	r3, [r3, #12]
 80026a0:	4918      	ldr	r1, [pc, #96]	; (8002704 <HAL_RCC_ClockConfig+0x1b4>)
 80026a2:	4313      	orrs	r3, r2
 80026a4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	f003 0308 	and.w	r3, r3, #8
 80026ae:	2b00      	cmp	r3, #0
 80026b0:	d009      	beq.n	80026c6 <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80026b2:	4b14      	ldr	r3, [pc, #80]	; (8002704 <HAL_RCC_ClockConfig+0x1b4>)
 80026b4:	689b      	ldr	r3, [r3, #8]
 80026b6:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	691b      	ldr	r3, [r3, #16]
 80026be:	00db      	lsls	r3, r3, #3
 80026c0:	4910      	ldr	r1, [pc, #64]	; (8002704 <HAL_RCC_ClockConfig+0x1b4>)
 80026c2:	4313      	orrs	r3, r2
 80026c4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80026c6:	f000 f825 	bl	8002714 <HAL_RCC_GetSysClockFreq>
 80026ca:	4601      	mov	r1, r0
 80026cc:	4b0d      	ldr	r3, [pc, #52]	; (8002704 <HAL_RCC_ClockConfig+0x1b4>)
 80026ce:	689b      	ldr	r3, [r3, #8]
 80026d0:	091b      	lsrs	r3, r3, #4
 80026d2:	f003 030f 	and.w	r3, r3, #15
 80026d6:	4a0c      	ldr	r2, [pc, #48]	; (8002708 <HAL_RCC_ClockConfig+0x1b8>)
 80026d8:	5cd3      	ldrb	r3, [r2, r3]
 80026da:	f003 031f 	and.w	r3, r3, #31
 80026de:	fa21 f303 	lsr.w	r3, r1, r3
 80026e2:	4a0a      	ldr	r2, [pc, #40]	; (800270c <HAL_RCC_ClockConfig+0x1bc>)
 80026e4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80026e6:	4b0a      	ldr	r3, [pc, #40]	; (8002710 <HAL_RCC_ClockConfig+0x1c0>)
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	4618      	mov	r0, r3
 80026ec:	f7fe fed6 	bl	800149c <HAL_InitTick>
 80026f0:	4603      	mov	r3, r0
 80026f2:	72fb      	strb	r3, [r7, #11]

  return status;
 80026f4:	7afb      	ldrb	r3, [r7, #11]
}
 80026f6:	4618      	mov	r0, r3
 80026f8:	3710      	adds	r7, #16
 80026fa:	46bd      	mov	sp, r7
 80026fc:	bd80      	pop	{r7, pc}
 80026fe:	bf00      	nop
 8002700:	40022000 	.word	0x40022000
 8002704:	40021000 	.word	0x40021000
 8002708:	08005968 	.word	0x08005968
 800270c:	20000000 	.word	0x20000000
 8002710:	20000004 	.word	0x20000004

08002714 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002714:	b480      	push	{r7}
 8002716:	b089      	sub	sp, #36	; 0x24
 8002718:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800271a:	2300      	movs	r3, #0
 800271c:	61fb      	str	r3, [r7, #28]
 800271e:	2300      	movs	r3, #0
 8002720:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002722:	4b3d      	ldr	r3, [pc, #244]	; (8002818 <HAL_RCC_GetSysClockFreq+0x104>)
 8002724:	689b      	ldr	r3, [r3, #8]
 8002726:	f003 030c 	and.w	r3, r3, #12
 800272a:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 800272c:	4b3a      	ldr	r3, [pc, #232]	; (8002818 <HAL_RCC_GetSysClockFreq+0x104>)
 800272e:	68db      	ldr	r3, [r3, #12]
 8002730:	f003 0303 	and.w	r3, r3, #3
 8002734:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002736:	693b      	ldr	r3, [r7, #16]
 8002738:	2b00      	cmp	r3, #0
 800273a:	d005      	beq.n	8002748 <HAL_RCC_GetSysClockFreq+0x34>
 800273c:	693b      	ldr	r3, [r7, #16]
 800273e:	2b0c      	cmp	r3, #12
 8002740:	d121      	bne.n	8002786 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8002742:	68fb      	ldr	r3, [r7, #12]
 8002744:	2b01      	cmp	r3, #1
 8002746:	d11e      	bne.n	8002786 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8002748:	4b33      	ldr	r3, [pc, #204]	; (8002818 <HAL_RCC_GetSysClockFreq+0x104>)
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	f003 0308 	and.w	r3, r3, #8
 8002750:	2b00      	cmp	r3, #0
 8002752:	d107      	bne.n	8002764 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8002754:	4b30      	ldr	r3, [pc, #192]	; (8002818 <HAL_RCC_GetSysClockFreq+0x104>)
 8002756:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800275a:	0a1b      	lsrs	r3, r3, #8
 800275c:	f003 030f 	and.w	r3, r3, #15
 8002760:	61fb      	str	r3, [r7, #28]
 8002762:	e005      	b.n	8002770 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8002764:	4b2c      	ldr	r3, [pc, #176]	; (8002818 <HAL_RCC_GetSysClockFreq+0x104>)
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	091b      	lsrs	r3, r3, #4
 800276a:	f003 030f 	and.w	r3, r3, #15
 800276e:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8002770:	4a2a      	ldr	r2, [pc, #168]	; (800281c <HAL_RCC_GetSysClockFreq+0x108>)
 8002772:	69fb      	ldr	r3, [r7, #28]
 8002774:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002778:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800277a:	693b      	ldr	r3, [r7, #16]
 800277c:	2b00      	cmp	r3, #0
 800277e:	d10d      	bne.n	800279c <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8002780:	69fb      	ldr	r3, [r7, #28]
 8002782:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002784:	e00a      	b.n	800279c <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8002786:	693b      	ldr	r3, [r7, #16]
 8002788:	2b04      	cmp	r3, #4
 800278a:	d102      	bne.n	8002792 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800278c:	4b24      	ldr	r3, [pc, #144]	; (8002820 <HAL_RCC_GetSysClockFreq+0x10c>)
 800278e:	61bb      	str	r3, [r7, #24]
 8002790:	e004      	b.n	800279c <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8002792:	693b      	ldr	r3, [r7, #16]
 8002794:	2b08      	cmp	r3, #8
 8002796:	d101      	bne.n	800279c <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002798:	4b22      	ldr	r3, [pc, #136]	; (8002824 <HAL_RCC_GetSysClockFreq+0x110>)
 800279a:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 800279c:	693b      	ldr	r3, [r7, #16]
 800279e:	2b0c      	cmp	r3, #12
 80027a0:	d133      	bne.n	800280a <HAL_RCC_GetSysClockFreq+0xf6>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80027a2:	4b1d      	ldr	r3, [pc, #116]	; (8002818 <HAL_RCC_GetSysClockFreq+0x104>)
 80027a4:	68db      	ldr	r3, [r3, #12]
 80027a6:	f003 0303 	and.w	r3, r3, #3
 80027aa:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80027ac:	68bb      	ldr	r3, [r7, #8]
 80027ae:	2b02      	cmp	r3, #2
 80027b0:	d002      	beq.n	80027b8 <HAL_RCC_GetSysClockFreq+0xa4>
 80027b2:	2b03      	cmp	r3, #3
 80027b4:	d003      	beq.n	80027be <HAL_RCC_GetSysClockFreq+0xaa>
 80027b6:	e005      	b.n	80027c4 <HAL_RCC_GetSysClockFreq+0xb0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80027b8:	4b19      	ldr	r3, [pc, #100]	; (8002820 <HAL_RCC_GetSysClockFreq+0x10c>)
 80027ba:	617b      	str	r3, [r7, #20]
      break;
 80027bc:	e005      	b.n	80027ca <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80027be:	4b19      	ldr	r3, [pc, #100]	; (8002824 <HAL_RCC_GetSysClockFreq+0x110>)
 80027c0:	617b      	str	r3, [r7, #20]
      break;
 80027c2:	e002      	b.n	80027ca <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80027c4:	69fb      	ldr	r3, [r7, #28]
 80027c6:	617b      	str	r3, [r7, #20]
      break;
 80027c8:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80027ca:	4b13      	ldr	r3, [pc, #76]	; (8002818 <HAL_RCC_GetSysClockFreq+0x104>)
 80027cc:	68db      	ldr	r3, [r3, #12]
 80027ce:	091b      	lsrs	r3, r3, #4
 80027d0:	f003 0307 	and.w	r3, r3, #7
 80027d4:	3301      	adds	r3, #1
 80027d6:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80027d8:	4b0f      	ldr	r3, [pc, #60]	; (8002818 <HAL_RCC_GetSysClockFreq+0x104>)
 80027da:	68db      	ldr	r3, [r3, #12]
 80027dc:	0a1b      	lsrs	r3, r3, #8
 80027de:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80027e2:	697a      	ldr	r2, [r7, #20]
 80027e4:	fb02 f203 	mul.w	r2, r2, r3
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	fbb2 f3f3 	udiv	r3, r2, r3
 80027ee:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80027f0:	4b09      	ldr	r3, [pc, #36]	; (8002818 <HAL_RCC_GetSysClockFreq+0x104>)
 80027f2:	68db      	ldr	r3, [r3, #12]
 80027f4:	0e5b      	lsrs	r3, r3, #25
 80027f6:	f003 0303 	and.w	r3, r3, #3
 80027fa:	3301      	adds	r3, #1
 80027fc:	005b      	lsls	r3, r3, #1
 80027fe:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8002800:	697a      	ldr	r2, [r7, #20]
 8002802:	683b      	ldr	r3, [r7, #0]
 8002804:	fbb2 f3f3 	udiv	r3, r2, r3
 8002808:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 800280a:	69bb      	ldr	r3, [r7, #24]
}
 800280c:	4618      	mov	r0, r3
 800280e:	3724      	adds	r7, #36	; 0x24
 8002810:	46bd      	mov	sp, r7
 8002812:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002816:	4770      	bx	lr
 8002818:	40021000 	.word	0x40021000
 800281c:	08005980 	.word	0x08005980
 8002820:	00f42400 	.word	0x00f42400
 8002824:	007a1200 	.word	0x007a1200

08002828 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002828:	b480      	push	{r7}
 800282a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800282c:	4b03      	ldr	r3, [pc, #12]	; (800283c <HAL_RCC_GetHCLKFreq+0x14>)
 800282e:	681b      	ldr	r3, [r3, #0]
}
 8002830:	4618      	mov	r0, r3
 8002832:	46bd      	mov	sp, r7
 8002834:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002838:	4770      	bx	lr
 800283a:	bf00      	nop
 800283c:	20000000 	.word	0x20000000

08002840 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002840:	b580      	push	{r7, lr}
 8002842:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8002844:	f7ff fff0 	bl	8002828 <HAL_RCC_GetHCLKFreq>
 8002848:	4601      	mov	r1, r0
 800284a:	4b06      	ldr	r3, [pc, #24]	; (8002864 <HAL_RCC_GetPCLK1Freq+0x24>)
 800284c:	689b      	ldr	r3, [r3, #8]
 800284e:	0a1b      	lsrs	r3, r3, #8
 8002850:	f003 0307 	and.w	r3, r3, #7
 8002854:	4a04      	ldr	r2, [pc, #16]	; (8002868 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002856:	5cd3      	ldrb	r3, [r2, r3]
 8002858:	f003 031f 	and.w	r3, r3, #31
 800285c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002860:	4618      	mov	r0, r3
 8002862:	bd80      	pop	{r7, pc}
 8002864:	40021000 	.word	0x40021000
 8002868:	08005978 	.word	0x08005978

0800286c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800286c:	b580      	push	{r7, lr}
 800286e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8002870:	f7ff ffda 	bl	8002828 <HAL_RCC_GetHCLKFreq>
 8002874:	4601      	mov	r1, r0
 8002876:	4b06      	ldr	r3, [pc, #24]	; (8002890 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002878:	689b      	ldr	r3, [r3, #8]
 800287a:	0adb      	lsrs	r3, r3, #11
 800287c:	f003 0307 	and.w	r3, r3, #7
 8002880:	4a04      	ldr	r2, [pc, #16]	; (8002894 <HAL_RCC_GetPCLK2Freq+0x28>)
 8002882:	5cd3      	ldrb	r3, [r2, r3]
 8002884:	f003 031f 	and.w	r3, r3, #31
 8002888:	fa21 f303 	lsr.w	r3, r1, r3
}
 800288c:	4618      	mov	r0, r3
 800288e:	bd80      	pop	{r7, pc}
 8002890:	40021000 	.word	0x40021000
 8002894:	08005978 	.word	0x08005978

08002898 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8002898:	b580      	push	{r7, lr}
 800289a:	b086      	sub	sp, #24
 800289c:	af00      	add	r7, sp, #0
 800289e:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80028a0:	2300      	movs	r3, #0
 80028a2:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80028a4:	4b2a      	ldr	r3, [pc, #168]	; (8002950 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80028a6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80028a8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80028ac:	2b00      	cmp	r3, #0
 80028ae:	d003      	beq.n	80028b8 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80028b0:	f7ff fa3a 	bl	8001d28 <HAL_PWREx_GetVoltageRange>
 80028b4:	6178      	str	r0, [r7, #20]
 80028b6:	e014      	b.n	80028e2 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80028b8:	4b25      	ldr	r3, [pc, #148]	; (8002950 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80028ba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80028bc:	4a24      	ldr	r2, [pc, #144]	; (8002950 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80028be:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80028c2:	6593      	str	r3, [r2, #88]	; 0x58
 80028c4:	4b22      	ldr	r3, [pc, #136]	; (8002950 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80028c6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80028c8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80028cc:	60fb      	str	r3, [r7, #12]
 80028ce:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80028d0:	f7ff fa2a 	bl	8001d28 <HAL_PWREx_GetVoltageRange>
 80028d4:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80028d6:	4b1e      	ldr	r3, [pc, #120]	; (8002950 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80028d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80028da:	4a1d      	ldr	r2, [pc, #116]	; (8002950 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80028dc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80028e0:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80028e2:	697b      	ldr	r3, [r7, #20]
 80028e4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80028e8:	d10b      	bne.n	8002902 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	2b80      	cmp	r3, #128	; 0x80
 80028ee:	d919      	bls.n	8002924 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	2ba0      	cmp	r3, #160	; 0xa0
 80028f4:	d902      	bls.n	80028fc <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80028f6:	2302      	movs	r3, #2
 80028f8:	613b      	str	r3, [r7, #16]
 80028fa:	e013      	b.n	8002924 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80028fc:	2301      	movs	r3, #1
 80028fe:	613b      	str	r3, [r7, #16]
 8002900:	e010      	b.n	8002924 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	2b80      	cmp	r3, #128	; 0x80
 8002906:	d902      	bls.n	800290e <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8002908:	2303      	movs	r3, #3
 800290a:	613b      	str	r3, [r7, #16]
 800290c:	e00a      	b.n	8002924 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	2b80      	cmp	r3, #128	; 0x80
 8002912:	d102      	bne.n	800291a <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002914:	2302      	movs	r3, #2
 8002916:	613b      	str	r3, [r7, #16]
 8002918:	e004      	b.n	8002924 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	2b70      	cmp	r3, #112	; 0x70
 800291e:	d101      	bne.n	8002924 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002920:	2301      	movs	r3, #1
 8002922:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8002924:	4b0b      	ldr	r3, [pc, #44]	; (8002954 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	f023 0207 	bic.w	r2, r3, #7
 800292c:	4909      	ldr	r1, [pc, #36]	; (8002954 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800292e:	693b      	ldr	r3, [r7, #16]
 8002930:	4313      	orrs	r3, r2
 8002932:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8002934:	4b07      	ldr	r3, [pc, #28]	; (8002954 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	f003 0307 	and.w	r3, r3, #7
 800293c:	693a      	ldr	r2, [r7, #16]
 800293e:	429a      	cmp	r2, r3
 8002940:	d001      	beq.n	8002946 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8002942:	2301      	movs	r3, #1
 8002944:	e000      	b.n	8002948 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8002946:	2300      	movs	r3, #0
}
 8002948:	4618      	mov	r0, r3
 800294a:	3718      	adds	r7, #24
 800294c:	46bd      	mov	sp, r7
 800294e:	bd80      	pop	{r7, pc}
 8002950:	40021000 	.word	0x40021000
 8002954:	40022000 	.word	0x40022000

08002958 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002958:	b580      	push	{r7, lr}
 800295a:	b086      	sub	sp, #24
 800295c:	af00      	add	r7, sp, #0
 800295e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002960:	2300      	movs	r3, #0
 8002962:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002964:	2300      	movs	r3, #0
 8002966:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002970:	2b00      	cmp	r3, #0
 8002972:	d03f      	beq.n	80029f4 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002978:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800297c:	d01c      	beq.n	80029b8 <HAL_RCCEx_PeriphCLKConfig+0x60>
 800297e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002982:	d802      	bhi.n	800298a <HAL_RCCEx_PeriphCLKConfig+0x32>
 8002984:	2b00      	cmp	r3, #0
 8002986:	d00e      	beq.n	80029a6 <HAL_RCCEx_PeriphCLKConfig+0x4e>
 8002988:	e01f      	b.n	80029ca <HAL_RCCEx_PeriphCLKConfig+0x72>
 800298a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800298e:	d003      	beq.n	8002998 <HAL_RCCEx_PeriphCLKConfig+0x40>
 8002990:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8002994:	d01c      	beq.n	80029d0 <HAL_RCCEx_PeriphCLKConfig+0x78>
 8002996:	e018      	b.n	80029ca <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002998:	4b85      	ldr	r3, [pc, #532]	; (8002bb0 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800299a:	68db      	ldr	r3, [r3, #12]
 800299c:	4a84      	ldr	r2, [pc, #528]	; (8002bb0 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800299e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80029a2:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 80029a4:	e015      	b.n	80029d2 <HAL_RCCEx_PeriphCLKConfig+0x7a>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	3304      	adds	r3, #4
 80029aa:	2100      	movs	r1, #0
 80029ac:	4618      	mov	r0, r3
 80029ae:	f000 fab9 	bl	8002f24 <RCCEx_PLLSAI1_Config>
 80029b2:	4603      	mov	r3, r0
 80029b4:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80029b6:	e00c      	b.n	80029d2 <HAL_RCCEx_PeriphCLKConfig+0x7a>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	3320      	adds	r3, #32
 80029bc:	2100      	movs	r1, #0
 80029be:	4618      	mov	r0, r3
 80029c0:	f000 fba0 	bl	8003104 <RCCEx_PLLSAI2_Config>
 80029c4:	4603      	mov	r3, r0
 80029c6:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80029c8:	e003      	b.n	80029d2 <HAL_RCCEx_PeriphCLKConfig+0x7a>
#endif /* STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80029ca:	2301      	movs	r3, #1
 80029cc:	74fb      	strb	r3, [r7, #19]
      break;
 80029ce:	e000      	b.n	80029d2 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      break;
 80029d0:	bf00      	nop
    }

    if(ret == HAL_OK)
 80029d2:	7cfb      	ldrb	r3, [r7, #19]
 80029d4:	2b00      	cmp	r3, #0
 80029d6:	d10b      	bne.n	80029f0 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80029d8:	4b75      	ldr	r3, [pc, #468]	; (8002bb0 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80029da:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80029de:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80029e6:	4972      	ldr	r1, [pc, #456]	; (8002bb0 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80029e8:	4313      	orrs	r3, r2
 80029ea:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80029ee:	e001      	b.n	80029f4 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80029f0:	7cfb      	ldrb	r3, [r7, #19]
 80029f2:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80029fc:	2b00      	cmp	r3, #0
 80029fe:	d03f      	beq.n	8002a80 <HAL_RCCEx_PeriphCLKConfig+0x128>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002a04:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002a08:	d01c      	beq.n	8002a44 <HAL_RCCEx_PeriphCLKConfig+0xec>
 8002a0a:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002a0e:	d802      	bhi.n	8002a16 <HAL_RCCEx_PeriphCLKConfig+0xbe>
 8002a10:	2b00      	cmp	r3, #0
 8002a12:	d00e      	beq.n	8002a32 <HAL_RCCEx_PeriphCLKConfig+0xda>
 8002a14:	e01f      	b.n	8002a56 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8002a16:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002a1a:	d003      	beq.n	8002a24 <HAL_RCCEx_PeriphCLKConfig+0xcc>
 8002a1c:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8002a20:	d01c      	beq.n	8002a5c <HAL_RCCEx_PeriphCLKConfig+0x104>
 8002a22:	e018      	b.n	8002a56 <HAL_RCCEx_PeriphCLKConfig+0xfe>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002a24:	4b62      	ldr	r3, [pc, #392]	; (8002bb0 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002a26:	68db      	ldr	r3, [r3, #12]
 8002a28:	4a61      	ldr	r2, [pc, #388]	; (8002bb0 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002a2a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002a2e:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002a30:	e015      	b.n	8002a5e <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	3304      	adds	r3, #4
 8002a36:	2100      	movs	r1, #0
 8002a38:	4618      	mov	r0, r3
 8002a3a:	f000 fa73 	bl	8002f24 <RCCEx_PLLSAI1_Config>
 8002a3e:	4603      	mov	r3, r0
 8002a40:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002a42:	e00c      	b.n	8002a5e <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	3320      	adds	r3, #32
 8002a48:	2100      	movs	r1, #0
 8002a4a:	4618      	mov	r0, r3
 8002a4c:	f000 fb5a 	bl	8003104 <RCCEx_PLLSAI2_Config>
 8002a50:	4603      	mov	r3, r0
 8002a52:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002a54:	e003      	b.n	8002a5e <HAL_RCCEx_PeriphCLKConfig+0x106>
#endif /* STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002a56:	2301      	movs	r3, #1
 8002a58:	74fb      	strb	r3, [r7, #19]
      break;
 8002a5a:	e000      	b.n	8002a5e <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 8002a5c:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002a5e:	7cfb      	ldrb	r3, [r7, #19]
 8002a60:	2b00      	cmp	r3, #0
 8002a62:	d10b      	bne.n	8002a7c <HAL_RCCEx_PeriphCLKConfig+0x124>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8002a64:	4b52      	ldr	r3, [pc, #328]	; (8002bb0 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002a66:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a6a:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002a72:	494f      	ldr	r1, [pc, #316]	; (8002bb0 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002a74:	4313      	orrs	r3, r2
 8002a76:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8002a7a:	e001      	b.n	8002a80 <HAL_RCCEx_PeriphCLKConfig+0x128>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002a7c:	7cfb      	ldrb	r3, [r7, #19]
 8002a7e:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a88:	2b00      	cmp	r3, #0
 8002a8a:	f000 80a0 	beq.w	8002bce <HAL_RCCEx_PeriphCLKConfig+0x276>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002a8e:	2300      	movs	r3, #0
 8002a90:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002a92:	4b47      	ldr	r3, [pc, #284]	; (8002bb0 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002a94:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a96:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a9a:	2b00      	cmp	r3, #0
 8002a9c:	d101      	bne.n	8002aa2 <HAL_RCCEx_PeriphCLKConfig+0x14a>
 8002a9e:	2301      	movs	r3, #1
 8002aa0:	e000      	b.n	8002aa4 <HAL_RCCEx_PeriphCLKConfig+0x14c>
 8002aa2:	2300      	movs	r3, #0
 8002aa4:	2b00      	cmp	r3, #0
 8002aa6:	d00d      	beq.n	8002ac4 <HAL_RCCEx_PeriphCLKConfig+0x16c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002aa8:	4b41      	ldr	r3, [pc, #260]	; (8002bb0 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002aaa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002aac:	4a40      	ldr	r2, [pc, #256]	; (8002bb0 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002aae:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002ab2:	6593      	str	r3, [r2, #88]	; 0x58
 8002ab4:	4b3e      	ldr	r3, [pc, #248]	; (8002bb0 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002ab6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ab8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002abc:	60bb      	str	r3, [r7, #8]
 8002abe:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002ac0:	2301      	movs	r3, #1
 8002ac2:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002ac4:	4b3b      	ldr	r3, [pc, #236]	; (8002bb4 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	4a3a      	ldr	r2, [pc, #232]	; (8002bb4 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8002aca:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002ace:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002ad0:	f7fe fd30 	bl	8001534 <HAL_GetTick>
 8002ad4:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002ad6:	e009      	b.n	8002aec <HAL_RCCEx_PeriphCLKConfig+0x194>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002ad8:	f7fe fd2c 	bl	8001534 <HAL_GetTick>
 8002adc:	4602      	mov	r2, r0
 8002ade:	68fb      	ldr	r3, [r7, #12]
 8002ae0:	1ad3      	subs	r3, r2, r3
 8002ae2:	2b02      	cmp	r3, #2
 8002ae4:	d902      	bls.n	8002aec <HAL_RCCEx_PeriphCLKConfig+0x194>
      {
        ret = HAL_TIMEOUT;
 8002ae6:	2303      	movs	r3, #3
 8002ae8:	74fb      	strb	r3, [r7, #19]
        break;
 8002aea:	e005      	b.n	8002af8 <HAL_RCCEx_PeriphCLKConfig+0x1a0>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002aec:	4b31      	ldr	r3, [pc, #196]	; (8002bb4 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002af4:	2b00      	cmp	r3, #0
 8002af6:	d0ef      	beq.n	8002ad8 <HAL_RCCEx_PeriphCLKConfig+0x180>
      }
    }

    if(ret == HAL_OK)
 8002af8:	7cfb      	ldrb	r3, [r7, #19]
 8002afa:	2b00      	cmp	r3, #0
 8002afc:	d15c      	bne.n	8002bb8 <HAL_RCCEx_PeriphCLKConfig+0x260>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002afe:	4b2c      	ldr	r3, [pc, #176]	; (8002bb0 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002b00:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002b04:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002b08:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002b0a:	697b      	ldr	r3, [r7, #20]
 8002b0c:	2b00      	cmp	r3, #0
 8002b0e:	d01f      	beq.n	8002b50 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002b16:	697a      	ldr	r2, [r7, #20]
 8002b18:	429a      	cmp	r2, r3
 8002b1a:	d019      	beq.n	8002b50 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002b1c:	4b24      	ldr	r3, [pc, #144]	; (8002bb0 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002b1e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002b22:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002b26:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002b28:	4b21      	ldr	r3, [pc, #132]	; (8002bb0 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002b2a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002b2e:	4a20      	ldr	r2, [pc, #128]	; (8002bb0 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002b30:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002b34:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002b38:	4b1d      	ldr	r3, [pc, #116]	; (8002bb0 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002b3a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002b3e:	4a1c      	ldr	r2, [pc, #112]	; (8002bb0 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002b40:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002b44:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002b48:	4a19      	ldr	r2, [pc, #100]	; (8002bb0 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002b4a:	697b      	ldr	r3, [r7, #20]
 8002b4c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002b50:	697b      	ldr	r3, [r7, #20]
 8002b52:	f003 0301 	and.w	r3, r3, #1
 8002b56:	2b00      	cmp	r3, #0
 8002b58:	d016      	beq.n	8002b88 <HAL_RCCEx_PeriphCLKConfig+0x230>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b5a:	f7fe fceb 	bl	8001534 <HAL_GetTick>
 8002b5e:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002b60:	e00b      	b.n	8002b7a <HAL_RCCEx_PeriphCLKConfig+0x222>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002b62:	f7fe fce7 	bl	8001534 <HAL_GetTick>
 8002b66:	4602      	mov	r2, r0
 8002b68:	68fb      	ldr	r3, [r7, #12]
 8002b6a:	1ad3      	subs	r3, r2, r3
 8002b6c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002b70:	4293      	cmp	r3, r2
 8002b72:	d902      	bls.n	8002b7a <HAL_RCCEx_PeriphCLKConfig+0x222>
          {
            ret = HAL_TIMEOUT;
 8002b74:	2303      	movs	r3, #3
 8002b76:	74fb      	strb	r3, [r7, #19]
            break;
 8002b78:	e006      	b.n	8002b88 <HAL_RCCEx_PeriphCLKConfig+0x230>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002b7a:	4b0d      	ldr	r3, [pc, #52]	; (8002bb0 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002b7c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002b80:	f003 0302 	and.w	r3, r3, #2
 8002b84:	2b00      	cmp	r3, #0
 8002b86:	d0ec      	beq.n	8002b62 <HAL_RCCEx_PeriphCLKConfig+0x20a>
          }
        }
      }

      if(ret == HAL_OK)
 8002b88:	7cfb      	ldrb	r3, [r7, #19]
 8002b8a:	2b00      	cmp	r3, #0
 8002b8c:	d10c      	bne.n	8002ba8 <HAL_RCCEx_PeriphCLKConfig+0x250>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002b8e:	4b08      	ldr	r3, [pc, #32]	; (8002bb0 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002b90:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002b94:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002b9e:	4904      	ldr	r1, [pc, #16]	; (8002bb0 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002ba0:	4313      	orrs	r3, r2
 8002ba2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8002ba6:	e009      	b.n	8002bbc <HAL_RCCEx_PeriphCLKConfig+0x264>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002ba8:	7cfb      	ldrb	r3, [r7, #19]
 8002baa:	74bb      	strb	r3, [r7, #18]
 8002bac:	e006      	b.n	8002bbc <HAL_RCCEx_PeriphCLKConfig+0x264>
 8002bae:	bf00      	nop
 8002bb0:	40021000 	.word	0x40021000
 8002bb4:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002bb8:	7cfb      	ldrb	r3, [r7, #19]
 8002bba:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002bbc:	7c7b      	ldrb	r3, [r7, #17]
 8002bbe:	2b01      	cmp	r3, #1
 8002bc0:	d105      	bne.n	8002bce <HAL_RCCEx_PeriphCLKConfig+0x276>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002bc2:	4b9e      	ldr	r3, [pc, #632]	; (8002e3c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002bc4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002bc6:	4a9d      	ldr	r2, [pc, #628]	; (8002e3c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002bc8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002bcc:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	f003 0301 	and.w	r3, r3, #1
 8002bd6:	2b00      	cmp	r3, #0
 8002bd8:	d00a      	beq.n	8002bf0 <HAL_RCCEx_PeriphCLKConfig+0x298>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002bda:	4b98      	ldr	r3, [pc, #608]	; (8002e3c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002bdc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002be0:	f023 0203 	bic.w	r2, r3, #3
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002be8:	4994      	ldr	r1, [pc, #592]	; (8002e3c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002bea:	4313      	orrs	r3, r2
 8002bec:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	f003 0302 	and.w	r3, r3, #2
 8002bf8:	2b00      	cmp	r3, #0
 8002bfa:	d00a      	beq.n	8002c12 <HAL_RCCEx_PeriphCLKConfig+0x2ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002bfc:	4b8f      	ldr	r3, [pc, #572]	; (8002e3c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002bfe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002c02:	f023 020c 	bic.w	r2, r3, #12
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002c0a:	498c      	ldr	r1, [pc, #560]	; (8002e3c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002c0c:	4313      	orrs	r3, r2
 8002c0e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	f003 0304 	and.w	r3, r3, #4
 8002c1a:	2b00      	cmp	r3, #0
 8002c1c:	d00a      	beq.n	8002c34 <HAL_RCCEx_PeriphCLKConfig+0x2dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002c1e:	4b87      	ldr	r3, [pc, #540]	; (8002e3c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002c20:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002c24:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c2c:	4983      	ldr	r1, [pc, #524]	; (8002e3c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002c2e:	4313      	orrs	r3, r2
 8002c30:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	f003 0308 	and.w	r3, r3, #8
 8002c3c:	2b00      	cmp	r3, #0
 8002c3e:	d00a      	beq.n	8002c56 <HAL_RCCEx_PeriphCLKConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002c40:	4b7e      	ldr	r3, [pc, #504]	; (8002e3c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002c42:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002c46:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c4e:	497b      	ldr	r1, [pc, #492]	; (8002e3c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002c50:	4313      	orrs	r3, r2
 8002c52:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	f003 0310 	and.w	r3, r3, #16
 8002c5e:	2b00      	cmp	r3, #0
 8002c60:	d00a      	beq.n	8002c78 <HAL_RCCEx_PeriphCLKConfig+0x320>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002c62:	4b76      	ldr	r3, [pc, #472]	; (8002e3c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002c64:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002c68:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002c70:	4972      	ldr	r1, [pc, #456]	; (8002e3c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002c72:	4313      	orrs	r3, r2
 8002c74:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	f003 0320 	and.w	r3, r3, #32
 8002c80:	2b00      	cmp	r3, #0
 8002c82:	d00a      	beq.n	8002c9a <HAL_RCCEx_PeriphCLKConfig+0x342>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002c84:	4b6d      	ldr	r3, [pc, #436]	; (8002e3c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002c86:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002c8a:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002c92:	496a      	ldr	r1, [pc, #424]	; (8002e3c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002c94:	4313      	orrs	r3, r2
 8002c96:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002ca2:	2b00      	cmp	r3, #0
 8002ca4:	d00a      	beq.n	8002cbc <HAL_RCCEx_PeriphCLKConfig+0x364>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002ca6:	4b65      	ldr	r3, [pc, #404]	; (8002e3c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002ca8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002cac:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002cb4:	4961      	ldr	r1, [pc, #388]	; (8002e3c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002cb6:	4313      	orrs	r3, r2
 8002cb8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002cc4:	2b00      	cmp	r3, #0
 8002cc6:	d00a      	beq.n	8002cde <HAL_RCCEx_PeriphCLKConfig+0x386>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002cc8:	4b5c      	ldr	r3, [pc, #368]	; (8002e3c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002cca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002cce:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002cd6:	4959      	ldr	r1, [pc, #356]	; (8002e3c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002cd8:	4313      	orrs	r3, r2
 8002cda:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002ce6:	2b00      	cmp	r3, #0
 8002ce8:	d00a      	beq.n	8002d00 <HAL_RCCEx_PeriphCLKConfig+0x3a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002cea:	4b54      	ldr	r3, [pc, #336]	; (8002e3c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002cec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002cf0:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002cf8:	4950      	ldr	r1, [pc, #320]	; (8002e3c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002cfa:	4313      	orrs	r3, r2
 8002cfc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002d08:	2b00      	cmp	r3, #0
 8002d0a:	d00a      	beq.n	8002d22 <HAL_RCCEx_PeriphCLKConfig+0x3ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002d0c:	4b4b      	ldr	r3, [pc, #300]	; (8002e3c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002d0e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002d12:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d1a:	4948      	ldr	r1, [pc, #288]	; (8002e3c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002d1c:	4313      	orrs	r3, r2
 8002d1e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d2a:	2b00      	cmp	r3, #0
 8002d2c:	d00a      	beq.n	8002d44 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002d2e:	4b43      	ldr	r3, [pc, #268]	; (8002e3c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002d30:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002d34:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d3c:	493f      	ldr	r1, [pc, #252]	; (8002e3c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002d3e:	4313      	orrs	r3, r2
 8002d40:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002d4c:	2b00      	cmp	r3, #0
 8002d4e:	d028      	beq.n	8002da2 <HAL_RCCEx_PeriphCLKConfig+0x44a>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002d50:	4b3a      	ldr	r3, [pc, #232]	; (8002e3c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002d52:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002d56:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002d5e:	4937      	ldr	r1, [pc, #220]	; (8002e3c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002d60:	4313      	orrs	r3, r2
 8002d62:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002d6a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002d6e:	d106      	bne.n	8002d7e <HAL_RCCEx_PeriphCLKConfig+0x426>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002d70:	4b32      	ldr	r3, [pc, #200]	; (8002e3c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002d72:	68db      	ldr	r3, [r3, #12]
 8002d74:	4a31      	ldr	r2, [pc, #196]	; (8002e3c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002d76:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002d7a:	60d3      	str	r3, [r2, #12]
 8002d7c:	e011      	b.n	8002da2 <HAL_RCCEx_PeriphCLKConfig+0x44a>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002d82:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002d86:	d10c      	bne.n	8002da2 <HAL_RCCEx_PeriphCLKConfig+0x44a>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	3304      	adds	r3, #4
 8002d8c:	2101      	movs	r1, #1
 8002d8e:	4618      	mov	r0, r3
 8002d90:	f000 f8c8 	bl	8002f24 <RCCEx_PLLSAI1_Config>
 8002d94:	4603      	mov	r3, r0
 8002d96:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8002d98:	7cfb      	ldrb	r3, [r7, #19]
 8002d9a:	2b00      	cmp	r3, #0
 8002d9c:	d001      	beq.n	8002da2 <HAL_RCCEx_PeriphCLKConfig+0x44a>
        {
          /* set overall return value */
          status = ret;
 8002d9e:	7cfb      	ldrb	r3, [r7, #19]
 8002da0:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002daa:	2b00      	cmp	r3, #0
 8002dac:	d028      	beq.n	8002e00 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8002dae:	4b23      	ldr	r3, [pc, #140]	; (8002e3c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002db0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002db4:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002dbc:	491f      	ldr	r1, [pc, #124]	; (8002e3c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002dbe:	4313      	orrs	r3, r2
 8002dc0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002dc8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002dcc:	d106      	bne.n	8002ddc <HAL_RCCEx_PeriphCLKConfig+0x484>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002dce:	4b1b      	ldr	r3, [pc, #108]	; (8002e3c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002dd0:	68db      	ldr	r3, [r3, #12]
 8002dd2:	4a1a      	ldr	r2, [pc, #104]	; (8002e3c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002dd4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002dd8:	60d3      	str	r3, [r2, #12]
 8002dda:	e011      	b.n	8002e00 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002de0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002de4:	d10c      	bne.n	8002e00 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	3304      	adds	r3, #4
 8002dea:	2101      	movs	r1, #1
 8002dec:	4618      	mov	r0, r3
 8002dee:	f000 f899 	bl	8002f24 <RCCEx_PLLSAI1_Config>
 8002df2:	4603      	mov	r3, r0
 8002df4:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002df6:	7cfb      	ldrb	r3, [r7, #19]
 8002df8:	2b00      	cmp	r3, #0
 8002dfa:	d001      	beq.n	8002e00 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* set overall return value */
        status = ret;
 8002dfc:	7cfb      	ldrb	r3, [r7, #19]
 8002dfe:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002e08:	2b00      	cmp	r3, #0
 8002e0a:	d02b      	beq.n	8002e64 <HAL_RCCEx_PeriphCLKConfig+0x50c>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002e0c:	4b0b      	ldr	r3, [pc, #44]	; (8002e3c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002e0e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002e12:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002e1a:	4908      	ldr	r1, [pc, #32]	; (8002e3c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002e1c:	4313      	orrs	r3, r2
 8002e1e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002e26:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002e2a:	d109      	bne.n	8002e40 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002e2c:	4b03      	ldr	r3, [pc, #12]	; (8002e3c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002e2e:	68db      	ldr	r3, [r3, #12]
 8002e30:	4a02      	ldr	r2, [pc, #8]	; (8002e3c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002e32:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002e36:	60d3      	str	r3, [r2, #12]
 8002e38:	e014      	b.n	8002e64 <HAL_RCCEx_PeriphCLKConfig+0x50c>
 8002e3a:	bf00      	nop
 8002e3c:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002e44:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002e48:	d10c      	bne.n	8002e64 <HAL_RCCEx_PeriphCLKConfig+0x50c>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	3304      	adds	r3, #4
 8002e4e:	2101      	movs	r1, #1
 8002e50:	4618      	mov	r0, r3
 8002e52:	f000 f867 	bl	8002f24 <RCCEx_PLLSAI1_Config>
 8002e56:	4603      	mov	r3, r0
 8002e58:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002e5a:	7cfb      	ldrb	r3, [r7, #19]
 8002e5c:	2b00      	cmp	r3, #0
 8002e5e:	d001      	beq.n	8002e64 <HAL_RCCEx_PeriphCLKConfig+0x50c>
      {
        /* set overall return value */
        status = ret;
 8002e60:	7cfb      	ldrb	r3, [r7, #19]
 8002e62:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002e6c:	2b00      	cmp	r3, #0
 8002e6e:	d02f      	beq.n	8002ed0 <HAL_RCCEx_PeriphCLKConfig+0x578>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002e70:	4b2b      	ldr	r3, [pc, #172]	; (8002f20 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002e72:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002e76:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002e7e:	4928      	ldr	r1, [pc, #160]	; (8002f20 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002e80:	4313      	orrs	r3, r2
 8002e82:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002e8a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002e8e:	d10d      	bne.n	8002eac <HAL_RCCEx_PeriphCLKConfig+0x554>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	3304      	adds	r3, #4
 8002e94:	2102      	movs	r1, #2
 8002e96:	4618      	mov	r0, r3
 8002e98:	f000 f844 	bl	8002f24 <RCCEx_PLLSAI1_Config>
 8002e9c:	4603      	mov	r3, r0
 8002e9e:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002ea0:	7cfb      	ldrb	r3, [r7, #19]
 8002ea2:	2b00      	cmp	r3, #0
 8002ea4:	d014      	beq.n	8002ed0 <HAL_RCCEx_PeriphCLKConfig+0x578>
      {
        /* set overall return value */
        status = ret;
 8002ea6:	7cfb      	ldrb	r3, [r7, #19]
 8002ea8:	74bb      	strb	r3, [r7, #18]
 8002eaa:	e011      	b.n	8002ed0 <HAL_RCCEx_PeriphCLKConfig+0x578>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002eb0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002eb4:	d10c      	bne.n	8002ed0 <HAL_RCCEx_PeriphCLKConfig+0x578>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	3320      	adds	r3, #32
 8002eba:	2102      	movs	r1, #2
 8002ebc:	4618      	mov	r0, r3
 8002ebe:	f000 f921 	bl	8003104 <RCCEx_PLLSAI2_Config>
 8002ec2:	4603      	mov	r3, r0
 8002ec4:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002ec6:	7cfb      	ldrb	r3, [r7, #19]
 8002ec8:	2b00      	cmp	r3, #0
 8002eca:	d001      	beq.n	8002ed0 <HAL_RCCEx_PeriphCLKConfig+0x578>
      {
        /* set overall return value */
        status = ret;
 8002ecc:	7cfb      	ldrb	r3, [r7, #19]
 8002ece:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002ed8:	2b00      	cmp	r3, #0
 8002eda:	d00a      	beq.n	8002ef2 <HAL_RCCEx_PeriphCLKConfig+0x59a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8002edc:	4b10      	ldr	r3, [pc, #64]	; (8002f20 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002ede:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002ee2:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002eea:	490d      	ldr	r1, [pc, #52]	; (8002f20 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002eec:	4313      	orrs	r3, r2
 8002eee:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002efa:	2b00      	cmp	r3, #0
 8002efc:	d00b      	beq.n	8002f16 <HAL_RCCEx_PeriphCLKConfig+0x5be>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8002efe:	4b08      	ldr	r3, [pc, #32]	; (8002f20 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002f00:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002f04:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002f0e:	4904      	ldr	r1, [pc, #16]	; (8002f20 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002f10:	4313      	orrs	r3, r2
 8002f12:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8002f16:	7cbb      	ldrb	r3, [r7, #18]
}
 8002f18:	4618      	mov	r0, r3
 8002f1a:	3718      	adds	r7, #24
 8002f1c:	46bd      	mov	sp, r7
 8002f1e:	bd80      	pop	{r7, pc}
 8002f20:	40021000 	.word	0x40021000

08002f24 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8002f24:	b580      	push	{r7, lr}
 8002f26:	b084      	sub	sp, #16
 8002f28:	af00      	add	r7, sp, #0
 8002f2a:	6078      	str	r0, [r7, #4]
 8002f2c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002f2e:	2300      	movs	r3, #0
 8002f30:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002f32:	4b73      	ldr	r3, [pc, #460]	; (8003100 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002f34:	68db      	ldr	r3, [r3, #12]
 8002f36:	f003 0303 	and.w	r3, r3, #3
 8002f3a:	2b00      	cmp	r3, #0
 8002f3c:	d018      	beq.n	8002f70 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8002f3e:	4b70      	ldr	r3, [pc, #448]	; (8003100 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002f40:	68db      	ldr	r3, [r3, #12]
 8002f42:	f003 0203 	and.w	r2, r3, #3
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	429a      	cmp	r2, r3
 8002f4c:	d10d      	bne.n	8002f6a <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	681b      	ldr	r3, [r3, #0]
       ||
 8002f52:	2b00      	cmp	r3, #0
 8002f54:	d009      	beq.n	8002f6a <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8002f56:	4b6a      	ldr	r3, [pc, #424]	; (8003100 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002f58:	68db      	ldr	r3, [r3, #12]
 8002f5a:	091b      	lsrs	r3, r3, #4
 8002f5c:	f003 0307 	and.w	r3, r3, #7
 8002f60:	1c5a      	adds	r2, r3, #1
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	685b      	ldr	r3, [r3, #4]
       ||
 8002f66:	429a      	cmp	r2, r3
 8002f68:	d044      	beq.n	8002ff4 <RCCEx_PLLSAI1_Config+0xd0>
#endif
      )
    {
      status = HAL_ERROR;
 8002f6a:	2301      	movs	r3, #1
 8002f6c:	73fb      	strb	r3, [r7, #15]
 8002f6e:	e041      	b.n	8002ff4 <RCCEx_PLLSAI1_Config+0xd0>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	2b02      	cmp	r3, #2
 8002f76:	d00c      	beq.n	8002f92 <RCCEx_PLLSAI1_Config+0x6e>
 8002f78:	2b03      	cmp	r3, #3
 8002f7a:	d013      	beq.n	8002fa4 <RCCEx_PLLSAI1_Config+0x80>
 8002f7c:	2b01      	cmp	r3, #1
 8002f7e:	d120      	bne.n	8002fc2 <RCCEx_PLLSAI1_Config+0x9e>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002f80:	4b5f      	ldr	r3, [pc, #380]	; (8003100 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	f003 0302 	and.w	r3, r3, #2
 8002f88:	2b00      	cmp	r3, #0
 8002f8a:	d11d      	bne.n	8002fc8 <RCCEx_PLLSAI1_Config+0xa4>
      {
        status = HAL_ERROR;
 8002f8c:	2301      	movs	r3, #1
 8002f8e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002f90:	e01a      	b.n	8002fc8 <RCCEx_PLLSAI1_Config+0xa4>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002f92:	4b5b      	ldr	r3, [pc, #364]	; (8003100 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002f9a:	2b00      	cmp	r3, #0
 8002f9c:	d116      	bne.n	8002fcc <RCCEx_PLLSAI1_Config+0xa8>
      {
        status = HAL_ERROR;
 8002f9e:	2301      	movs	r3, #1
 8002fa0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002fa2:	e013      	b.n	8002fcc <RCCEx_PLLSAI1_Config+0xa8>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002fa4:	4b56      	ldr	r3, [pc, #344]	; (8003100 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002fac:	2b00      	cmp	r3, #0
 8002fae:	d10f      	bne.n	8002fd0 <RCCEx_PLLSAI1_Config+0xac>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002fb0:	4b53      	ldr	r3, [pc, #332]	; (8003100 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002fb8:	2b00      	cmp	r3, #0
 8002fba:	d109      	bne.n	8002fd0 <RCCEx_PLLSAI1_Config+0xac>
        {
          status = HAL_ERROR;
 8002fbc:	2301      	movs	r3, #1
 8002fbe:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8002fc0:	e006      	b.n	8002fd0 <RCCEx_PLLSAI1_Config+0xac>
    default:
      status = HAL_ERROR;
 8002fc2:	2301      	movs	r3, #1
 8002fc4:	73fb      	strb	r3, [r7, #15]
      break;
 8002fc6:	e004      	b.n	8002fd2 <RCCEx_PLLSAI1_Config+0xae>
      break;
 8002fc8:	bf00      	nop
 8002fca:	e002      	b.n	8002fd2 <RCCEx_PLLSAI1_Config+0xae>
      break;
 8002fcc:	bf00      	nop
 8002fce:	e000      	b.n	8002fd2 <RCCEx_PLLSAI1_Config+0xae>
      break;
 8002fd0:	bf00      	nop
    }

    if(status == HAL_OK)
 8002fd2:	7bfb      	ldrb	r3, [r7, #15]
 8002fd4:	2b00      	cmp	r3, #0
 8002fd6:	d10d      	bne.n	8002ff4 <RCCEx_PLLSAI1_Config+0xd0>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8002fd8:	4b49      	ldr	r3, [pc, #292]	; (8003100 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002fda:	68db      	ldr	r3, [r3, #12]
 8002fdc:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	6819      	ldr	r1, [r3, #0]
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	685b      	ldr	r3, [r3, #4]
 8002fe8:	3b01      	subs	r3, #1
 8002fea:	011b      	lsls	r3, r3, #4
 8002fec:	430b      	orrs	r3, r1
 8002fee:	4944      	ldr	r1, [pc, #272]	; (8003100 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002ff0:	4313      	orrs	r3, r2
 8002ff2:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8002ff4:	7bfb      	ldrb	r3, [r7, #15]
 8002ff6:	2b00      	cmp	r3, #0
 8002ff8:	d17d      	bne.n	80030f6 <RCCEx_PLLSAI1_Config+0x1d2>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8002ffa:	4b41      	ldr	r3, [pc, #260]	; (8003100 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	4a40      	ldr	r2, [pc, #256]	; (8003100 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003000:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8003004:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003006:	f7fe fa95 	bl	8001534 <HAL_GetTick>
 800300a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800300c:	e009      	b.n	8003022 <RCCEx_PLLSAI1_Config+0xfe>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800300e:	f7fe fa91 	bl	8001534 <HAL_GetTick>
 8003012:	4602      	mov	r2, r0
 8003014:	68bb      	ldr	r3, [r7, #8]
 8003016:	1ad3      	subs	r3, r2, r3
 8003018:	2b02      	cmp	r3, #2
 800301a:	d902      	bls.n	8003022 <RCCEx_PLLSAI1_Config+0xfe>
      {
        status = HAL_TIMEOUT;
 800301c:	2303      	movs	r3, #3
 800301e:	73fb      	strb	r3, [r7, #15]
        break;
 8003020:	e005      	b.n	800302e <RCCEx_PLLSAI1_Config+0x10a>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003022:	4b37      	ldr	r3, [pc, #220]	; (8003100 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800302a:	2b00      	cmp	r3, #0
 800302c:	d1ef      	bne.n	800300e <RCCEx_PLLSAI1_Config+0xea>
      }
    }

    if(status == HAL_OK)
 800302e:	7bfb      	ldrb	r3, [r7, #15]
 8003030:	2b00      	cmp	r3, #0
 8003032:	d160      	bne.n	80030f6 <RCCEx_PLLSAI1_Config+0x1d2>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8003034:	683b      	ldr	r3, [r7, #0]
 8003036:	2b00      	cmp	r3, #0
 8003038:	d111      	bne.n	800305e <RCCEx_PLLSAI1_Config+0x13a>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800303a:	4b31      	ldr	r3, [pc, #196]	; (8003100 <RCCEx_PLLSAI1_Config+0x1dc>)
 800303c:	691b      	ldr	r3, [r3, #16]
 800303e:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8003042:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003046:	687a      	ldr	r2, [r7, #4]
 8003048:	6892      	ldr	r2, [r2, #8]
 800304a:	0211      	lsls	r1, r2, #8
 800304c:	687a      	ldr	r2, [r7, #4]
 800304e:	68d2      	ldr	r2, [r2, #12]
 8003050:	0912      	lsrs	r2, r2, #4
 8003052:	0452      	lsls	r2, r2, #17
 8003054:	430a      	orrs	r2, r1
 8003056:	492a      	ldr	r1, [pc, #168]	; (8003100 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003058:	4313      	orrs	r3, r2
 800305a:	610b      	str	r3, [r1, #16]
 800305c:	e027      	b.n	80030ae <RCCEx_PLLSAI1_Config+0x18a>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 800305e:	683b      	ldr	r3, [r7, #0]
 8003060:	2b01      	cmp	r3, #1
 8003062:	d112      	bne.n	800308a <RCCEx_PLLSAI1_Config+0x166>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003064:	4b26      	ldr	r3, [pc, #152]	; (8003100 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003066:	691b      	ldr	r3, [r3, #16]
 8003068:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 800306c:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003070:	687a      	ldr	r2, [r7, #4]
 8003072:	6892      	ldr	r2, [r2, #8]
 8003074:	0211      	lsls	r1, r2, #8
 8003076:	687a      	ldr	r2, [r7, #4]
 8003078:	6912      	ldr	r2, [r2, #16]
 800307a:	0852      	lsrs	r2, r2, #1
 800307c:	3a01      	subs	r2, #1
 800307e:	0552      	lsls	r2, r2, #21
 8003080:	430a      	orrs	r2, r1
 8003082:	491f      	ldr	r1, [pc, #124]	; (8003100 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003084:	4313      	orrs	r3, r2
 8003086:	610b      	str	r3, [r1, #16]
 8003088:	e011      	b.n	80030ae <RCCEx_PLLSAI1_Config+0x18a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800308a:	4b1d      	ldr	r3, [pc, #116]	; (8003100 <RCCEx_PLLSAI1_Config+0x1dc>)
 800308c:	691b      	ldr	r3, [r3, #16]
 800308e:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8003092:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003096:	687a      	ldr	r2, [r7, #4]
 8003098:	6892      	ldr	r2, [r2, #8]
 800309a:	0211      	lsls	r1, r2, #8
 800309c:	687a      	ldr	r2, [r7, #4]
 800309e:	6952      	ldr	r2, [r2, #20]
 80030a0:	0852      	lsrs	r2, r2, #1
 80030a2:	3a01      	subs	r2, #1
 80030a4:	0652      	lsls	r2, r2, #25
 80030a6:	430a      	orrs	r2, r1
 80030a8:	4915      	ldr	r1, [pc, #84]	; (8003100 <RCCEx_PLLSAI1_Config+0x1dc>)
 80030aa:	4313      	orrs	r3, r2
 80030ac:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80030ae:	4b14      	ldr	r3, [pc, #80]	; (8003100 <RCCEx_PLLSAI1_Config+0x1dc>)
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	4a13      	ldr	r2, [pc, #76]	; (8003100 <RCCEx_PLLSAI1_Config+0x1dc>)
 80030b4:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80030b8:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80030ba:	f7fe fa3b 	bl	8001534 <HAL_GetTick>
 80030be:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80030c0:	e009      	b.n	80030d6 <RCCEx_PLLSAI1_Config+0x1b2>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80030c2:	f7fe fa37 	bl	8001534 <HAL_GetTick>
 80030c6:	4602      	mov	r2, r0
 80030c8:	68bb      	ldr	r3, [r7, #8]
 80030ca:	1ad3      	subs	r3, r2, r3
 80030cc:	2b02      	cmp	r3, #2
 80030ce:	d902      	bls.n	80030d6 <RCCEx_PLLSAI1_Config+0x1b2>
        {
          status = HAL_TIMEOUT;
 80030d0:	2303      	movs	r3, #3
 80030d2:	73fb      	strb	r3, [r7, #15]
          break;
 80030d4:	e005      	b.n	80030e2 <RCCEx_PLLSAI1_Config+0x1be>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80030d6:	4b0a      	ldr	r3, [pc, #40]	; (8003100 <RCCEx_PLLSAI1_Config+0x1dc>)
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80030de:	2b00      	cmp	r3, #0
 80030e0:	d0ef      	beq.n	80030c2 <RCCEx_PLLSAI1_Config+0x19e>
        }
      }

      if(status == HAL_OK)
 80030e2:	7bfb      	ldrb	r3, [r7, #15]
 80030e4:	2b00      	cmp	r3, #0
 80030e6:	d106      	bne.n	80030f6 <RCCEx_PLLSAI1_Config+0x1d2>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80030e8:	4b05      	ldr	r3, [pc, #20]	; (8003100 <RCCEx_PLLSAI1_Config+0x1dc>)
 80030ea:	691a      	ldr	r2, [r3, #16]
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	699b      	ldr	r3, [r3, #24]
 80030f0:	4903      	ldr	r1, [pc, #12]	; (8003100 <RCCEx_PLLSAI1_Config+0x1dc>)
 80030f2:	4313      	orrs	r3, r2
 80030f4:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 80030f6:	7bfb      	ldrb	r3, [r7, #15]
}
 80030f8:	4618      	mov	r0, r3
 80030fa:	3710      	adds	r7, #16
 80030fc:	46bd      	mov	sp, r7
 80030fe:	bd80      	pop	{r7, pc}
 8003100:	40021000 	.word	0x40021000

08003104 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8003104:	b580      	push	{r7, lr}
 8003106:	b084      	sub	sp, #16
 8003108:	af00      	add	r7, sp, #0
 800310a:	6078      	str	r0, [r7, #4]
 800310c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800310e:	2300      	movs	r3, #0
 8003110:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8003112:	4b68      	ldr	r3, [pc, #416]	; (80032b4 <RCCEx_PLLSAI2_Config+0x1b0>)
 8003114:	68db      	ldr	r3, [r3, #12]
 8003116:	f003 0303 	and.w	r3, r3, #3
 800311a:	2b00      	cmp	r3, #0
 800311c:	d018      	beq.n	8003150 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 800311e:	4b65      	ldr	r3, [pc, #404]	; (80032b4 <RCCEx_PLLSAI2_Config+0x1b0>)
 8003120:	68db      	ldr	r3, [r3, #12]
 8003122:	f003 0203 	and.w	r2, r3, #3
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	429a      	cmp	r2, r3
 800312c:	d10d      	bne.n	800314a <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	681b      	ldr	r3, [r3, #0]
       ||
 8003132:	2b00      	cmp	r3, #0
 8003134:	d009      	beq.n	800314a <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8003136:	4b5f      	ldr	r3, [pc, #380]	; (80032b4 <RCCEx_PLLSAI2_Config+0x1b0>)
 8003138:	68db      	ldr	r3, [r3, #12]
 800313a:	091b      	lsrs	r3, r3, #4
 800313c:	f003 0307 	and.w	r3, r3, #7
 8003140:	1c5a      	adds	r2, r3, #1
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	685b      	ldr	r3, [r3, #4]
       ||
 8003146:	429a      	cmp	r2, r3
 8003148:	d044      	beq.n	80031d4 <RCCEx_PLLSAI2_Config+0xd0>
#endif
      )
    {
      status = HAL_ERROR;
 800314a:	2301      	movs	r3, #1
 800314c:	73fb      	strb	r3, [r7, #15]
 800314e:	e041      	b.n	80031d4 <RCCEx_PLLSAI2_Config+0xd0>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	2b02      	cmp	r3, #2
 8003156:	d00c      	beq.n	8003172 <RCCEx_PLLSAI2_Config+0x6e>
 8003158:	2b03      	cmp	r3, #3
 800315a:	d013      	beq.n	8003184 <RCCEx_PLLSAI2_Config+0x80>
 800315c:	2b01      	cmp	r3, #1
 800315e:	d120      	bne.n	80031a2 <RCCEx_PLLSAI2_Config+0x9e>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003160:	4b54      	ldr	r3, [pc, #336]	; (80032b4 <RCCEx_PLLSAI2_Config+0x1b0>)
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	f003 0302 	and.w	r3, r3, #2
 8003168:	2b00      	cmp	r3, #0
 800316a:	d11d      	bne.n	80031a8 <RCCEx_PLLSAI2_Config+0xa4>
      {
        status = HAL_ERROR;
 800316c:	2301      	movs	r3, #1
 800316e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003170:	e01a      	b.n	80031a8 <RCCEx_PLLSAI2_Config+0xa4>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003172:	4b50      	ldr	r3, [pc, #320]	; (80032b4 <RCCEx_PLLSAI2_Config+0x1b0>)
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800317a:	2b00      	cmp	r3, #0
 800317c:	d116      	bne.n	80031ac <RCCEx_PLLSAI2_Config+0xa8>
      {
        status = HAL_ERROR;
 800317e:	2301      	movs	r3, #1
 8003180:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003182:	e013      	b.n	80031ac <RCCEx_PLLSAI2_Config+0xa8>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003184:	4b4b      	ldr	r3, [pc, #300]	; (80032b4 <RCCEx_PLLSAI2_Config+0x1b0>)
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800318c:	2b00      	cmp	r3, #0
 800318e:	d10f      	bne.n	80031b0 <RCCEx_PLLSAI2_Config+0xac>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003190:	4b48      	ldr	r3, [pc, #288]	; (80032b4 <RCCEx_PLLSAI2_Config+0x1b0>)
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003198:	2b00      	cmp	r3, #0
 800319a:	d109      	bne.n	80031b0 <RCCEx_PLLSAI2_Config+0xac>
        {
          status = HAL_ERROR;
 800319c:	2301      	movs	r3, #1
 800319e:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80031a0:	e006      	b.n	80031b0 <RCCEx_PLLSAI2_Config+0xac>
    default:
      status = HAL_ERROR;
 80031a2:	2301      	movs	r3, #1
 80031a4:	73fb      	strb	r3, [r7, #15]
      break;
 80031a6:	e004      	b.n	80031b2 <RCCEx_PLLSAI2_Config+0xae>
      break;
 80031a8:	bf00      	nop
 80031aa:	e002      	b.n	80031b2 <RCCEx_PLLSAI2_Config+0xae>
      break;
 80031ac:	bf00      	nop
 80031ae:	e000      	b.n	80031b2 <RCCEx_PLLSAI2_Config+0xae>
      break;
 80031b0:	bf00      	nop
    }

    if(status == HAL_OK)
 80031b2:	7bfb      	ldrb	r3, [r7, #15]
 80031b4:	2b00      	cmp	r3, #0
 80031b6:	d10d      	bne.n	80031d4 <RCCEx_PLLSAI2_Config+0xd0>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80031b8:	4b3e      	ldr	r3, [pc, #248]	; (80032b4 <RCCEx_PLLSAI2_Config+0x1b0>)
 80031ba:	68db      	ldr	r3, [r3, #12]
 80031bc:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	6819      	ldr	r1, [r3, #0]
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	685b      	ldr	r3, [r3, #4]
 80031c8:	3b01      	subs	r3, #1
 80031ca:	011b      	lsls	r3, r3, #4
 80031cc:	430b      	orrs	r3, r1
 80031ce:	4939      	ldr	r1, [pc, #228]	; (80032b4 <RCCEx_PLLSAI2_Config+0x1b0>)
 80031d0:	4313      	orrs	r3, r2
 80031d2:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80031d4:	7bfb      	ldrb	r3, [r7, #15]
 80031d6:	2b00      	cmp	r3, #0
 80031d8:	d167      	bne.n	80032aa <RCCEx_PLLSAI2_Config+0x1a6>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 80031da:	4b36      	ldr	r3, [pc, #216]	; (80032b4 <RCCEx_PLLSAI2_Config+0x1b0>)
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	4a35      	ldr	r2, [pc, #212]	; (80032b4 <RCCEx_PLLSAI2_Config+0x1b0>)
 80031e0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80031e4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80031e6:	f7fe f9a5 	bl	8001534 <HAL_GetTick>
 80031ea:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80031ec:	e009      	b.n	8003202 <RCCEx_PLLSAI2_Config+0xfe>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80031ee:	f7fe f9a1 	bl	8001534 <HAL_GetTick>
 80031f2:	4602      	mov	r2, r0
 80031f4:	68bb      	ldr	r3, [r7, #8]
 80031f6:	1ad3      	subs	r3, r2, r3
 80031f8:	2b02      	cmp	r3, #2
 80031fa:	d902      	bls.n	8003202 <RCCEx_PLLSAI2_Config+0xfe>
      {
        status = HAL_TIMEOUT;
 80031fc:	2303      	movs	r3, #3
 80031fe:	73fb      	strb	r3, [r7, #15]
        break;
 8003200:	e005      	b.n	800320e <RCCEx_PLLSAI2_Config+0x10a>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003202:	4b2c      	ldr	r3, [pc, #176]	; (80032b4 <RCCEx_PLLSAI2_Config+0x1b0>)
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800320a:	2b00      	cmp	r3, #0
 800320c:	d1ef      	bne.n	80031ee <RCCEx_PLLSAI2_Config+0xea>
      }
    }

    if(status == HAL_OK)
 800320e:	7bfb      	ldrb	r3, [r7, #15]
 8003210:	2b00      	cmp	r3, #0
 8003212:	d14a      	bne.n	80032aa <RCCEx_PLLSAI2_Config+0x1a6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8003214:	683b      	ldr	r3, [r7, #0]
 8003216:	2b00      	cmp	r3, #0
 8003218:	d111      	bne.n	800323e <RCCEx_PLLSAI2_Config+0x13a>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800321a:	4b26      	ldr	r3, [pc, #152]	; (80032b4 <RCCEx_PLLSAI2_Config+0x1b0>)
 800321c:	695b      	ldr	r3, [r3, #20]
 800321e:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8003222:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003226:	687a      	ldr	r2, [r7, #4]
 8003228:	6892      	ldr	r2, [r2, #8]
 800322a:	0211      	lsls	r1, r2, #8
 800322c:	687a      	ldr	r2, [r7, #4]
 800322e:	68d2      	ldr	r2, [r2, #12]
 8003230:	0912      	lsrs	r2, r2, #4
 8003232:	0452      	lsls	r2, r2, #17
 8003234:	430a      	orrs	r2, r1
 8003236:	491f      	ldr	r1, [pc, #124]	; (80032b4 <RCCEx_PLLSAI2_Config+0x1b0>)
 8003238:	4313      	orrs	r3, r2
 800323a:	614b      	str	r3, [r1, #20]
 800323c:	e011      	b.n	8003262 <RCCEx_PLLSAI2_Config+0x15e>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800323e:	4b1d      	ldr	r3, [pc, #116]	; (80032b4 <RCCEx_PLLSAI2_Config+0x1b0>)
 8003240:	695b      	ldr	r3, [r3, #20]
 8003242:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8003246:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800324a:	687a      	ldr	r2, [r7, #4]
 800324c:	6892      	ldr	r2, [r2, #8]
 800324e:	0211      	lsls	r1, r2, #8
 8003250:	687a      	ldr	r2, [r7, #4]
 8003252:	6912      	ldr	r2, [r2, #16]
 8003254:	0852      	lsrs	r2, r2, #1
 8003256:	3a01      	subs	r2, #1
 8003258:	0652      	lsls	r2, r2, #25
 800325a:	430a      	orrs	r2, r1
 800325c:	4915      	ldr	r1, [pc, #84]	; (80032b4 <RCCEx_PLLSAI2_Config+0x1b0>)
 800325e:	4313      	orrs	r3, r2
 8003260:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8003262:	4b14      	ldr	r3, [pc, #80]	; (80032b4 <RCCEx_PLLSAI2_Config+0x1b0>)
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	4a13      	ldr	r2, [pc, #76]	; (80032b4 <RCCEx_PLLSAI2_Config+0x1b0>)
 8003268:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800326c:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800326e:	f7fe f961 	bl	8001534 <HAL_GetTick>
 8003272:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8003274:	e009      	b.n	800328a <RCCEx_PLLSAI2_Config+0x186>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003276:	f7fe f95d 	bl	8001534 <HAL_GetTick>
 800327a:	4602      	mov	r2, r0
 800327c:	68bb      	ldr	r3, [r7, #8]
 800327e:	1ad3      	subs	r3, r2, r3
 8003280:	2b02      	cmp	r3, #2
 8003282:	d902      	bls.n	800328a <RCCEx_PLLSAI2_Config+0x186>
        {
          status = HAL_TIMEOUT;
 8003284:	2303      	movs	r3, #3
 8003286:	73fb      	strb	r3, [r7, #15]
          break;
 8003288:	e005      	b.n	8003296 <RCCEx_PLLSAI2_Config+0x192>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800328a:	4b0a      	ldr	r3, [pc, #40]	; (80032b4 <RCCEx_PLLSAI2_Config+0x1b0>)
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003292:	2b00      	cmp	r3, #0
 8003294:	d0ef      	beq.n	8003276 <RCCEx_PLLSAI2_Config+0x172>
        }
      }

      if(status == HAL_OK)
 8003296:	7bfb      	ldrb	r3, [r7, #15]
 8003298:	2b00      	cmp	r3, #0
 800329a:	d106      	bne.n	80032aa <RCCEx_PLLSAI2_Config+0x1a6>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 800329c:	4b05      	ldr	r3, [pc, #20]	; (80032b4 <RCCEx_PLLSAI2_Config+0x1b0>)
 800329e:	695a      	ldr	r2, [r3, #20]
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	695b      	ldr	r3, [r3, #20]
 80032a4:	4903      	ldr	r1, [pc, #12]	; (80032b4 <RCCEx_PLLSAI2_Config+0x1b0>)
 80032a6:	4313      	orrs	r3, r2
 80032a8:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 80032aa:	7bfb      	ldrb	r3, [r7, #15]
}
 80032ac:	4618      	mov	r0, r3
 80032ae:	3710      	adds	r7, #16
 80032b0:	46bd      	mov	sp, r7
 80032b2:	bd80      	pop	{r7, pc}
 80032b4:	40021000 	.word	0x40021000

080032b8 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 80032b8:	b580      	push	{r7, lr}
 80032ba:	b084      	sub	sp, #16
 80032bc:	af00      	add	r7, sp, #0
 80032be:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 80032c0:	2301      	movs	r3, #1
 80032c2:	73fb      	strb	r3, [r7, #15]

  /* Check the RTC peripheral state */
  if (hrtc != NULL)
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	2b00      	cmp	r3, #0
 80032c8:	d06f      	beq.n	80033aa <HAL_RTC_Init+0xf2>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else /* #if (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */
    if (hrtc->State == HAL_RTC_STATE_RESET)
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80032d0:	b2db      	uxtb	r3, r3
 80032d2:	2b00      	cmp	r3, #0
 80032d4:	d106      	bne.n	80032e4 <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	2200      	movs	r2, #0
 80032da:	f883 2020 	strb.w	r2, [r3, #32]

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 80032de:	6878      	ldr	r0, [r7, #4]
 80032e0:	f7fd fd24 	bl	8000d2c <HAL_RTC_MspInit>
#if defined(STM32L412xx) || defined(STM32L422xx)
    /* Process TAMP ip offset from RTC one */
    hrtc->TampOffset = (TAMP_BASE - RTC_BASE);
#endif
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	2202      	movs	r2, #2
 80032e8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	22ca      	movs	r2, #202	; 0xca
 80032f2:	625a      	str	r2, [r3, #36]	; 0x24
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	2253      	movs	r2, #83	; 0x53
 80032fa:	625a      	str	r2, [r3, #36]	; 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 80032fc:	6878      	ldr	r0, [r7, #4]
 80032fe:	f000 fb79 	bl	80039f4 <RTC_EnterInitMode>
 8003302:	4603      	mov	r3, r0
 8003304:	73fb      	strb	r3, [r7, #15]

    if (status == HAL_OK)
 8003306:	7bfb      	ldrb	r3, [r7, #15]
 8003308:	2b00      	cmp	r3, #0
 800330a:	d14e      	bne.n	80033aa <HAL_RTC_Init+0xf2>
#if defined(STM32L412xx) || defined(STM32L422xx)
      /* Clear RTC_CR FMT, OSEL, POL and TAMPOE Bits */
      hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE);
#else
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL);
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	689b      	ldr	r3, [r3, #8]
 8003312:	687a      	ldr	r2, [r7, #4]
 8003314:	6812      	ldr	r2, [r2, #0]
 8003316:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800331a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800331e:	6093      	str	r3, [r2, #8]
#endif
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	6899      	ldr	r1, [r3, #8]
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	685a      	ldr	r2, [r3, #4]
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	691b      	ldr	r3, [r3, #16]
 800332e:	431a      	orrs	r2, r3
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	699b      	ldr	r3, [r3, #24]
 8003334:	431a      	orrs	r2, r3
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	430a      	orrs	r2, r1
 800333c:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (hrtc->Init.SynchPrediv);
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	687a      	ldr	r2, [r7, #4]
 8003344:	68d2      	ldr	r2, [r2, #12]
 8003346:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	6919      	ldr	r1, [r3, #16]
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	689b      	ldr	r3, [r3, #8]
 8003352:	041a      	lsls	r2, r3, #16
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	430a      	orrs	r2, r1
 800335a:	611a      	str	r2, [r3, #16]

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 800335c:	6878      	ldr	r0, [r7, #4]
 800335e:	f000 fb7d 	bl	8003a5c <RTC_ExitInitMode>
 8003362:	4603      	mov	r3, r0
 8003364:	73fb      	strb	r3, [r7, #15]

      if (status == HAL_OK)
 8003366:	7bfb      	ldrb	r3, [r7, #15]
 8003368:	2b00      	cmp	r3, #0
 800336a:	d11e      	bne.n	80033aa <HAL_RTC_Init+0xf2>
      {
#if defined(STM32L412xx) || defined(STM32L422xx)
        hrtc->Instance->CR &= ~(RTC_CR_TAMPALRM_PU | RTC_CR_TAMPALRM_TYPE | RTC_CR_OUT2EN);
        hrtc->Instance->CR |= (hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
#else
        hrtc->Instance->OR &= ~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	f022 0203 	bic.w	r2, r2, #3
 800337a:	64da      	str	r2, [r3, #76]	; 0x4c
        hrtc->Instance->OR |= (hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	69da      	ldr	r2, [r3, #28]
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	695b      	ldr	r3, [r3, #20]
 800338a:	431a      	orrs	r2, r3
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	430a      	orrs	r2, r1
 8003392:	64da      	str	r2, [r3, #76]	; 0x4c
#endif

        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	22ff      	movs	r2, #255	; 0xff
 800339a:	625a      	str	r2, [r3, #36]	; 0x24

        if (status == HAL_OK)
 800339c:	7bfb      	ldrb	r3, [r7, #15]
 800339e:	2b00      	cmp	r3, #0
 80033a0:	d103      	bne.n	80033aa <HAL_RTC_Init+0xf2>
        {
          hrtc->State = HAL_RTC_STATE_READY;
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	2201      	movs	r2, #1
 80033a6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
        }
      }
    }
  }

  return status;
 80033aa:	7bfb      	ldrb	r3, [r7, #15]
}
 80033ac:	4618      	mov	r0, r3
 80033ae:	3710      	adds	r7, #16
 80033b0:	46bd      	mov	sp, r7
 80033b2:	bd80      	pop	{r7, pc}

080033b4 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 80033b4:	b590      	push	{r4, r7, lr}
 80033b6:	b087      	sub	sp, #28
 80033b8:	af00      	add	r7, sp, #0
 80033ba:	60f8      	str	r0, [r7, #12]
 80033bc:	60b9      	str	r1, [r7, #8]
 80033be:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80033c0:	68fb      	ldr	r3, [r7, #12]
 80033c2:	f893 3020 	ldrb.w	r3, [r3, #32]
 80033c6:	2b01      	cmp	r3, #1
 80033c8:	d101      	bne.n	80033ce <HAL_RTC_SetTime+0x1a>
 80033ca:	2302      	movs	r3, #2
 80033cc:	e08b      	b.n	80034e6 <HAL_RTC_SetTime+0x132>
 80033ce:	68fb      	ldr	r3, [r7, #12]
 80033d0:	2201      	movs	r2, #1
 80033d2:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80033d6:	68fb      	ldr	r3, [r7, #12]
 80033d8:	2202      	movs	r2, #2
 80033da:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80033de:	68fb      	ldr	r3, [r7, #12]
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	22ca      	movs	r2, #202	; 0xca
 80033e4:	625a      	str	r2, [r3, #36]	; 0x24
 80033e6:	68fb      	ldr	r3, [r7, #12]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	2253      	movs	r2, #83	; 0x53
 80033ec:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 80033ee:	68f8      	ldr	r0, [r7, #12]
 80033f0:	f000 fb00 	bl	80039f4 <RTC_EnterInitMode>
 80033f4:	4603      	mov	r3, r0
 80033f6:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 80033f8:	7cfb      	ldrb	r3, [r7, #19]
 80033fa:	2b00      	cmp	r3, #0
 80033fc:	d163      	bne.n	80034c6 <HAL_RTC_SetTime+0x112>
  {
    if (Format == RTC_FORMAT_BIN)
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	2b00      	cmp	r3, #0
 8003402:	d126      	bne.n	8003452 <HAL_RTC_SetTime+0x9e>
    {
      if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8003404:	68fb      	ldr	r3, [r7, #12]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	689b      	ldr	r3, [r3, #8]
 800340a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800340e:	2b00      	cmp	r3, #0
 8003410:	d102      	bne.n	8003418 <HAL_RTC_SetTime+0x64>
        assert_param(IS_RTC_HOUR12(sTime->Hours));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 8003412:	68bb      	ldr	r3, [r7, #8]
 8003414:	2200      	movs	r2, #0
 8003416:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(sTime->Hours));
      }
      assert_param(IS_RTC_MINUTES(sTime->Minutes));
      assert_param(IS_RTC_SECONDS(sTime->Seconds));

      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 8003418:	68bb      	ldr	r3, [r7, #8]
 800341a:	781b      	ldrb	r3, [r3, #0]
 800341c:	4618      	mov	r0, r3
 800341e:	f000 fb5b 	bl	8003ad8 <RTC_ByteToBcd2>
 8003422:	4603      	mov	r3, r0
 8003424:	041c      	lsls	r4, r3, #16
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8003426:	68bb      	ldr	r3, [r7, #8]
 8003428:	785b      	ldrb	r3, [r3, #1]
 800342a:	4618      	mov	r0, r3
 800342c:	f000 fb54 	bl	8003ad8 <RTC_ByteToBcd2>
 8003430:	4603      	mov	r3, r0
 8003432:	021b      	lsls	r3, r3, #8
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 8003434:	431c      	orrs	r4, r3
                          ((uint32_t)RTC_ByteToBcd2(sTime->Seconds) << RTC_TR_SU_Pos) | \
 8003436:	68bb      	ldr	r3, [r7, #8]
 8003438:	789b      	ldrb	r3, [r3, #2]
 800343a:	4618      	mov	r0, r3
 800343c:	f000 fb4c 	bl	8003ad8 <RTC_ByteToBcd2>
 8003440:	4603      	mov	r3, r0
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8003442:	ea44 0203 	orr.w	r2, r4, r3
                          (((uint32_t)sTime->TimeFormat) << RTC_TR_PM_Pos));
 8003446:	68bb      	ldr	r3, [r7, #8]
 8003448:	78db      	ldrb	r3, [r3, #3]
 800344a:	059b      	lsls	r3, r3, #22
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 800344c:	4313      	orrs	r3, r2
 800344e:	617b      	str	r3, [r7, #20]
 8003450:	e018      	b.n	8003484 <HAL_RTC_SetTime+0xd0>
    }
    else
    {
      if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8003452:	68fb      	ldr	r3, [r7, #12]
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	689b      	ldr	r3, [r3, #8]
 8003458:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800345c:	2b00      	cmp	r3, #0
 800345e:	d102      	bne.n	8003466 <HAL_RTC_SetTime+0xb2>
        assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 8003460:	68bb      	ldr	r3, [r7, #8]
 8003462:	2200      	movs	r2, #0
 8003464:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
      }
      assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
      assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 8003466:	68bb      	ldr	r3, [r7, #8]
 8003468:	781b      	ldrb	r3, [r3, #0]
 800346a:	041a      	lsls	r2, r3, #16
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800346c:	68bb      	ldr	r3, [r7, #8]
 800346e:	785b      	ldrb	r3, [r3, #1]
 8003470:	021b      	lsls	r3, r3, #8
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 8003472:	4313      	orrs	r3, r2
                ((uint32_t)(sTime->Seconds) << RTC_TR_SU_Pos) | \
 8003474:	68ba      	ldr	r2, [r7, #8]
 8003476:	7892      	ldrb	r2, [r2, #2]
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8003478:	431a      	orrs	r2, r3
                ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 800347a:	68bb      	ldr	r3, [r7, #8]
 800347c:	78db      	ldrb	r3, [r3, #3]
 800347e:	059b      	lsls	r3, r3, #22
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 8003480:	4313      	orrs	r3, r2
 8003482:	617b      	str	r3, [r7, #20]
    }

    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8003484:	68fb      	ldr	r3, [r7, #12]
 8003486:	681a      	ldr	r2, [r3, #0]
 8003488:	697b      	ldr	r3, [r7, #20]
 800348a:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 800348e:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8003492:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured */
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BKP);
 8003494:	68fb      	ldr	r3, [r7, #12]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	689a      	ldr	r2, [r3, #8]
 800349a:	68fb      	ldr	r3, [r7, #12]
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80034a2:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 80034a4:	68fb      	ldr	r3, [r7, #12]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	6899      	ldr	r1, [r3, #8]
 80034aa:	68bb      	ldr	r3, [r7, #8]
 80034ac:	68da      	ldr	r2, [r3, #12]
 80034ae:	68bb      	ldr	r3, [r7, #8]
 80034b0:	691b      	ldr	r3, [r3, #16]
 80034b2:	431a      	orrs	r2, r3
 80034b4:	68fb      	ldr	r3, [r7, #12]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	430a      	orrs	r2, r1
 80034ba:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 80034bc:	68f8      	ldr	r0, [r7, #12]
 80034be:	f000 facd 	bl	8003a5c <RTC_ExitInitMode>
 80034c2:	4603      	mov	r3, r0
 80034c4:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80034c6:	68fb      	ldr	r3, [r7, #12]
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	22ff      	movs	r2, #255	; 0xff
 80034cc:	625a      	str	r2, [r3, #36]	; 0x24

  if (status == HAL_OK)
 80034ce:	7cfb      	ldrb	r3, [r7, #19]
 80034d0:	2b00      	cmp	r3, #0
 80034d2:	d103      	bne.n	80034dc <HAL_RTC_SetTime+0x128>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 80034d4:	68fb      	ldr	r3, [r7, #12]
 80034d6:	2201      	movs	r2, #1
 80034d8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80034dc:	68fb      	ldr	r3, [r7, #12]
 80034de:	2200      	movs	r2, #0
 80034e0:	f883 2020 	strb.w	r2, [r3, #32]

  return status;
 80034e4:	7cfb      	ldrb	r3, [r7, #19]
}
 80034e6:	4618      	mov	r0, r3
 80034e8:	371c      	adds	r7, #28
 80034ea:	46bd      	mov	sp, r7
 80034ec:	bd90      	pop	{r4, r7, pc}

080034ee <HAL_RTC_GetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 80034ee:	b580      	push	{r7, lr}
 80034f0:	b086      	sub	sp, #24
 80034f2:	af00      	add	r7, sp, #0
 80034f4:	60f8      	str	r0, [r7, #12]
 80034f6:	60b9      	str	r1, [r7, #8]
 80034f8:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds structure field from the corresponding register*/
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 80034fa:	68fb      	ldr	r3, [r7, #12]
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003500:	68bb      	ldr	r3, [r7, #8]
 8003502:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 8003504:	68fb      	ldr	r3, [r7, #12]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	691b      	ldr	r3, [r3, #16]
 800350a:	f3c3 020e 	ubfx	r2, r3, #0, #15
 800350e:	68bb      	ldr	r3, [r7, #8]
 8003510:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 8003512:	68fb      	ldr	r3, [r7, #12]
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 800351c:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8003520:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> RTC_TR_HU_Pos);
 8003522:	697b      	ldr	r3, [r7, #20]
 8003524:	0c1b      	lsrs	r3, r3, #16
 8003526:	b2db      	uxtb	r3, r3
 8003528:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800352c:	b2da      	uxtb	r2, r3
 800352e:	68bb      	ldr	r3, [r7, #8]
 8003530:	701a      	strb	r2, [r3, #0]
  sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 8003532:	697b      	ldr	r3, [r7, #20]
 8003534:	0a1b      	lsrs	r3, r3, #8
 8003536:	b2db      	uxtb	r3, r3
 8003538:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800353c:	b2da      	uxtb	r2, r3
 800353e:	68bb      	ldr	r3, [r7, #8]
 8003540:	705a      	strb	r2, [r3, #1]
  sTime->Seconds = (uint8_t)((tmpreg & (RTC_TR_ST | RTC_TR_SU)) >> RTC_TR_SU_Pos);
 8003542:	697b      	ldr	r3, [r7, #20]
 8003544:	b2db      	uxtb	r3, r3
 8003546:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800354a:	b2da      	uxtb	r2, r3
 800354c:	68bb      	ldr	r3, [r7, #8]
 800354e:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> RTC_TR_PM_Pos);
 8003550:	697b      	ldr	r3, [r7, #20]
 8003552:	0d9b      	lsrs	r3, r3, #22
 8003554:	b2db      	uxtb	r3, r3
 8003556:	f003 0301 	and.w	r3, r3, #1
 800355a:	b2da      	uxtb	r2, r3
 800355c:	68bb      	ldr	r3, [r7, #8]
 800355e:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	2b00      	cmp	r3, #0
 8003564:	d11a      	bne.n	800359c <HAL_RTC_GetTime+0xae>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 8003566:	68bb      	ldr	r3, [r7, #8]
 8003568:	781b      	ldrb	r3, [r3, #0]
 800356a:	4618      	mov	r0, r3
 800356c:	f000 fad4 	bl	8003b18 <RTC_Bcd2ToByte>
 8003570:	4603      	mov	r3, r0
 8003572:	461a      	mov	r2, r3
 8003574:	68bb      	ldr	r3, [r7, #8]
 8003576:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 8003578:	68bb      	ldr	r3, [r7, #8]
 800357a:	785b      	ldrb	r3, [r3, #1]
 800357c:	4618      	mov	r0, r3
 800357e:	f000 facb 	bl	8003b18 <RTC_Bcd2ToByte>
 8003582:	4603      	mov	r3, r0
 8003584:	461a      	mov	r2, r3
 8003586:	68bb      	ldr	r3, [r7, #8]
 8003588:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 800358a:	68bb      	ldr	r3, [r7, #8]
 800358c:	789b      	ldrb	r3, [r3, #2]
 800358e:	4618      	mov	r0, r3
 8003590:	f000 fac2 	bl	8003b18 <RTC_Bcd2ToByte>
 8003594:	4603      	mov	r3, r0
 8003596:	461a      	mov	r2, r3
 8003598:	68bb      	ldr	r3, [r7, #8]
 800359a:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 800359c:	2300      	movs	r3, #0
}
 800359e:	4618      	mov	r0, r3
 80035a0:	3718      	adds	r7, #24
 80035a2:	46bd      	mov	sp, r7
 80035a4:	bd80      	pop	{r7, pc}

080035a6 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 80035a6:	b590      	push	{r4, r7, lr}
 80035a8:	b087      	sub	sp, #28
 80035aa:	af00      	add	r7, sp, #0
 80035ac:	60f8      	str	r0, [r7, #12]
 80035ae:	60b9      	str	r1, [r7, #8]
 80035b0:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80035b2:	68fb      	ldr	r3, [r7, #12]
 80035b4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80035b8:	2b01      	cmp	r3, #1
 80035ba:	d101      	bne.n	80035c0 <HAL_RTC_SetDate+0x1a>
 80035bc:	2302      	movs	r3, #2
 80035be:	e075      	b.n	80036ac <HAL_RTC_SetDate+0x106>
 80035c0:	68fb      	ldr	r3, [r7, #12]
 80035c2:	2201      	movs	r2, #1
 80035c4:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80035c8:	68fb      	ldr	r3, [r7, #12]
 80035ca:	2202      	movs	r2, #2
 80035cc:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	2b00      	cmp	r3, #0
 80035d4:	d10e      	bne.n	80035f4 <HAL_RTC_SetDate+0x4e>
 80035d6:	68bb      	ldr	r3, [r7, #8]
 80035d8:	785b      	ldrb	r3, [r3, #1]
 80035da:	f003 0310 	and.w	r3, r3, #16
 80035de:	2b00      	cmp	r3, #0
 80035e0:	d008      	beq.n	80035f4 <HAL_RTC_SetDate+0x4e>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 80035e2:	68bb      	ldr	r3, [r7, #8]
 80035e4:	785b      	ldrb	r3, [r3, #1]
 80035e6:	f023 0310 	bic.w	r3, r3, #16
 80035ea:	b2db      	uxtb	r3, r3
 80035ec:	330a      	adds	r3, #10
 80035ee:	b2da      	uxtb	r2, r3
 80035f0:	68bb      	ldr	r3, [r7, #8]
 80035f2:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	2b00      	cmp	r3, #0
 80035f8:	d11c      	bne.n	8003634 <HAL_RTC_SetDate+0x8e>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 80035fa:	68bb      	ldr	r3, [r7, #8]
 80035fc:	78db      	ldrb	r3, [r3, #3]
 80035fe:	4618      	mov	r0, r3
 8003600:	f000 fa6a 	bl	8003ad8 <RTC_ByteToBcd2>
 8003604:	4603      	mov	r3, r0
 8003606:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8003608:	68bb      	ldr	r3, [r7, #8]
 800360a:	785b      	ldrb	r3, [r3, #1]
 800360c:	4618      	mov	r0, r3
 800360e:	f000 fa63 	bl	8003ad8 <RTC_ByteToBcd2>
 8003612:	4603      	mov	r3, r0
 8003614:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 8003616:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date) << RTC_DR_DU_Pos) | \
 8003618:	68bb      	ldr	r3, [r7, #8]
 800361a:	789b      	ldrb	r3, [r3, #2]
 800361c:	4618      	mov	r0, r3
 800361e:	f000 fa5b 	bl	8003ad8 <RTC_ByteToBcd2>
 8003622:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8003624:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay << RTC_DR_WDU_Pos));
 8003628:	68bb      	ldr	r3, [r7, #8]
 800362a:	781b      	ldrb	r3, [r3, #0]
 800362c:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 800362e:	4313      	orrs	r3, r2
 8003630:	617b      	str	r3, [r7, #20]
 8003632:	e00e      	b.n	8003652 <HAL_RTC_SetDate+0xac>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 8003634:	68bb      	ldr	r3, [r7, #8]
 8003636:	78db      	ldrb	r3, [r3, #3]
 8003638:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 800363a:	68bb      	ldr	r3, [r7, #8]
 800363c:	785b      	ldrb	r3, [r3, #1]
 800363e:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 8003640:	4313      	orrs	r3, r2
                  (((uint32_t)sDate->Date) << RTC_DR_DU_Pos) | \
 8003642:	68ba      	ldr	r2, [r7, #8]
 8003644:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 8003646:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 8003648:	68bb      	ldr	r3, [r7, #8]
 800364a:	781b      	ldrb	r3, [r3, #0]
 800364c:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 800364e:	4313      	orrs	r3, r2
 8003650:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8003652:	68fb      	ldr	r3, [r7, #12]
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	22ca      	movs	r2, #202	; 0xca
 8003658:	625a      	str	r2, [r3, #36]	; 0x24
 800365a:	68fb      	ldr	r3, [r7, #12]
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	2253      	movs	r2, #83	; 0x53
 8003660:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8003662:	68f8      	ldr	r0, [r7, #12]
 8003664:	f000 f9c6 	bl	80039f4 <RTC_EnterInitMode>
 8003668:	4603      	mov	r3, r0
 800366a:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 800366c:	7cfb      	ldrb	r3, [r7, #19]
 800366e:	2b00      	cmp	r3, #0
 8003670:	d10c      	bne.n	800368c <HAL_RTC_SetDate+0xe6>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8003672:	68fb      	ldr	r3, [r7, #12]
 8003674:	681a      	ldr	r2, [r3, #0]
 8003676:	697b      	ldr	r3, [r7, #20]
 8003678:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800367c:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8003680:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8003682:	68f8      	ldr	r0, [r7, #12]
 8003684:	f000 f9ea 	bl	8003a5c <RTC_ExitInitMode>
 8003688:	4603      	mov	r3, r0
 800368a:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800368c:	68fb      	ldr	r3, [r7, #12]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	22ff      	movs	r2, #255	; 0xff
 8003692:	625a      	str	r2, [r3, #36]	; 0x24

  if (status == HAL_OK)
 8003694:	7cfb      	ldrb	r3, [r7, #19]
 8003696:	2b00      	cmp	r3, #0
 8003698:	d103      	bne.n	80036a2 <HAL_RTC_SetDate+0xfc>
  {
    hrtc->State = HAL_RTC_STATE_READY ;
 800369a:	68fb      	ldr	r3, [r7, #12]
 800369c:	2201      	movs	r2, #1
 800369e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80036a2:	68fb      	ldr	r3, [r7, #12]
 80036a4:	2200      	movs	r2, #0
 80036a6:	f883 2020 	strb.w	r2, [r3, #32]

  return status;
 80036aa:	7cfb      	ldrb	r3, [r7, #19]
}
 80036ac:	4618      	mov	r0, r3
 80036ae:	371c      	adds	r7, #28
 80036b0:	46bd      	mov	sp, r7
 80036b2:	bd90      	pop	{r4, r7, pc}

080036b4 <HAL_RTC_GetDate>:
  *            @arg RTC_FORMAT_BIN:  Binary data format
  *            @arg RTC_FORMAT_BCD:  BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 80036b4:	b580      	push	{r7, lr}
 80036b6:	b086      	sub	sp, #24
 80036b8:	af00      	add	r7, sp, #0
 80036ba:	60f8      	str	r0, [r7, #12]
 80036bc:	60b9      	str	r1, [r7, #8]
 80036be:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 80036c0:	68fb      	ldr	r3, [r7, #12]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	685b      	ldr	r3, [r3, #4]
 80036c6:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80036ca:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 80036ce:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 80036d0:	697b      	ldr	r3, [r7, #20]
 80036d2:	0c1b      	lsrs	r3, r3, #16
 80036d4:	b2da      	uxtb	r2, r3
 80036d6:	68bb      	ldr	r3, [r7, #8]
 80036d8:	70da      	strb	r2, [r3, #3]
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 80036da:	697b      	ldr	r3, [r7, #20]
 80036dc:	0a1b      	lsrs	r3, r3, #8
 80036de:	b2db      	uxtb	r3, r3
 80036e0:	f003 031f 	and.w	r3, r3, #31
 80036e4:	b2da      	uxtb	r2, r3
 80036e6:	68bb      	ldr	r3, [r7, #8]
 80036e8:	705a      	strb	r2, [r3, #1]
  sDate->Date = (uint8_t)((datetmpreg & (RTC_DR_DT | RTC_DR_DU)) >> RTC_DR_DU_Pos);
 80036ea:	697b      	ldr	r3, [r7, #20]
 80036ec:	b2db      	uxtb	r3, r3
 80036ee:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80036f2:	b2da      	uxtb	r2, r3
 80036f4:	68bb      	ldr	r3, [r7, #8]
 80036f6:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> RTC_DR_WDU_Pos);
 80036f8:	697b      	ldr	r3, [r7, #20]
 80036fa:	0b5b      	lsrs	r3, r3, #13
 80036fc:	b2db      	uxtb	r3, r3
 80036fe:	f003 0307 	and.w	r3, r3, #7
 8003702:	b2da      	uxtb	r2, r3
 8003704:	68bb      	ldr	r3, [r7, #8]
 8003706:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	2b00      	cmp	r3, #0
 800370c:	d11a      	bne.n	8003744 <HAL_RTC_GetDate+0x90>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 800370e:	68bb      	ldr	r3, [r7, #8]
 8003710:	78db      	ldrb	r3, [r3, #3]
 8003712:	4618      	mov	r0, r3
 8003714:	f000 fa00 	bl	8003b18 <RTC_Bcd2ToByte>
 8003718:	4603      	mov	r3, r0
 800371a:	461a      	mov	r2, r3
 800371c:	68bb      	ldr	r3, [r7, #8]
 800371e:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 8003720:	68bb      	ldr	r3, [r7, #8]
 8003722:	785b      	ldrb	r3, [r3, #1]
 8003724:	4618      	mov	r0, r3
 8003726:	f000 f9f7 	bl	8003b18 <RTC_Bcd2ToByte>
 800372a:	4603      	mov	r3, r0
 800372c:	461a      	mov	r2, r3
 800372e:	68bb      	ldr	r3, [r7, #8]
 8003730:	705a      	strb	r2, [r3, #1]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 8003732:	68bb      	ldr	r3, [r7, #8]
 8003734:	789b      	ldrb	r3, [r3, #2]
 8003736:	4618      	mov	r0, r3
 8003738:	f000 f9ee 	bl	8003b18 <RTC_Bcd2ToByte>
 800373c:	4603      	mov	r3, r0
 800373e:	461a      	mov	r2, r3
 8003740:	68bb      	ldr	r3, [r7, #8]
 8003742:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 8003744:	2300      	movs	r3, #0
}
 8003746:	4618      	mov	r0, r3
 8003748:	3718      	adds	r7, #24
 800374a:	46bd      	mov	sp, r7
 800374c:	bd80      	pop	{r7, pc}

0800374e <HAL_RTC_SetAlarm>:
  *             @arg RTC_FORMAT_BIN: Binary data format
  *             @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetAlarm(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
{
 800374e:	b590      	push	{r4, r7, lr}
 8003750:	b089      	sub	sp, #36	; 0x24
 8003752:	af00      	add	r7, sp, #0
 8003754:	60f8      	str	r0, [r7, #12]
 8003756:	60b9      	str	r1, [r7, #8]
 8003758:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_ALARM_DATE_WEEKDAY_SEL(sAlarm->AlarmDateWeekDaySel));
  assert_param(IS_RTC_ALARM_SUB_SECOND_VALUE(sAlarm->AlarmTime.SubSeconds));
  assert_param(IS_RTC_ALARM_SUB_SECOND_MASK(sAlarm->AlarmSubSecondMask));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800375a:	68fb      	ldr	r3, [r7, #12]
 800375c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003760:	2b01      	cmp	r3, #1
 8003762:	d101      	bne.n	8003768 <HAL_RTC_SetAlarm+0x1a>
 8003764:	2302      	movs	r3, #2
 8003766:	e11b      	b.n	80039a0 <HAL_RTC_SetAlarm+0x252>
 8003768:	68fb      	ldr	r3, [r7, #12]
 800376a:	2201      	movs	r2, #1
 800376c:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8003770:	68fb      	ldr	r3, [r7, #12]
 8003772:	2202      	movs	r2, #2
 8003774:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  if (Format == RTC_FORMAT_BIN)
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	2b00      	cmp	r3, #0
 800377c:	d137      	bne.n	80037ee <HAL_RTC_SetAlarm+0xa0>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800377e:	68fb      	ldr	r3, [r7, #12]
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	689b      	ldr	r3, [r3, #8]
 8003784:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003788:	2b00      	cmp	r3, #0
 800378a:	d102      	bne.n	8003792 <HAL_RTC_SetAlarm+0x44>
      assert_param(IS_RTC_HOUR12(sAlarm->AlarmTime.Hours));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 800378c:	68bb      	ldr	r3, [r7, #8]
 800378e:	2200      	movs	r2, #0
 8003790:	70da      	strb	r2, [r3, #3]
    }
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(sAlarm->AlarmDateWeekDay));
    }
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8003792:	68bb      	ldr	r3, [r7, #8]
 8003794:	781b      	ldrb	r3, [r3, #0]
 8003796:	4618      	mov	r0, r3
 8003798:	f000 f99e 	bl	8003ad8 <RTC_ByteToBcd2>
 800379c:	4603      	mov	r3, r0
 800379e:	041c      	lsls	r4, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 80037a0:	68bb      	ldr	r3, [r7, #8]
 80037a2:	785b      	ldrb	r3, [r3, #1]
 80037a4:	4618      	mov	r0, r3
 80037a6:	f000 f997 	bl	8003ad8 <RTC_ByteToBcd2>
 80037aa:	4603      	mov	r3, r0
 80037ac:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 80037ae:	431c      	orrs	r4, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 80037b0:	68bb      	ldr	r3, [r7, #8]
 80037b2:	789b      	ldrb	r3, [r3, #2]
 80037b4:	4618      	mov	r0, r3
 80037b6:	f000 f98f 	bl	8003ad8 <RTC_ByteToBcd2>
 80037ba:	4603      	mov	r3, r0
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 80037bc:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 80037c0:	68bb      	ldr	r3, [r7, #8]
 80037c2:	78db      	ldrb	r3, [r3, #3]
 80037c4:	059b      	lsls	r3, r3, #22
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 80037c6:	ea42 0403 	orr.w	r4, r2, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 80037ca:	68bb      	ldr	r3, [r7, #8]
 80037cc:	f893 3020 	ldrb.w	r3, [r3, #32]
 80037d0:	4618      	mov	r0, r3
 80037d2:	f000 f981 	bl	8003ad8 <RTC_ByteToBcd2>
 80037d6:	4603      	mov	r3, r0
 80037d8:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 80037da:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 80037de:	68bb      	ldr	r3, [r7, #8]
 80037e0:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 80037e2:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 80037e4:	68bb      	ldr	r3, [r7, #8]
 80037e6:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 80037e8:	4313      	orrs	r3, r2
 80037ea:	61fb      	str	r3, [r7, #28]
 80037ec:	e023      	b.n	8003836 <HAL_RTC_SetAlarm+0xe8>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 80037ee:	68fb      	ldr	r3, [r7, #12]
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	689b      	ldr	r3, [r3, #8]
 80037f4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80037f8:	2b00      	cmp	r3, #0
 80037fa:	d102      	bne.n	8003802 <HAL_RTC_SetAlarm+0xb4>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 80037fc:	68bb      	ldr	r3, [r7, #8]
 80037fe:	2200      	movs	r2, #0
 8003800:	70da      	strb	r2, [r3, #3]
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay)));
    }

#endif /* USE_FULL_ASSERT */
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8003802:	68bb      	ldr	r3, [r7, #8]
 8003804:	781b      	ldrb	r3, [r3, #0]
 8003806:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8003808:	68bb      	ldr	r3, [r7, #8]
 800380a:	785b      	ldrb	r3, [r3, #1]
 800380c:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 800380e:	4313      	orrs	r3, r2
              ((uint32_t)(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 8003810:	68ba      	ldr	r2, [r7, #8]
 8003812:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8003814:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 8003816:	68bb      	ldr	r3, [r7, #8]
 8003818:	78db      	ldrb	r3, [r3, #3]
 800381a:	059b      	lsls	r3, r3, #22
              ((uint32_t)(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 800381c:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 800381e:	68bb      	ldr	r3, [r7, #8]
 8003820:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003824:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 8003826:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 8003828:	68bb      	ldr	r3, [r7, #8]
 800382a:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 800382c:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 800382e:	68bb      	ldr	r3, [r7, #8]
 8003830:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8003832:	4313      	orrs	r3, r2
 8003834:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the Alarm A or Alarm B Sub Second registers */
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | (uint32_t)(sAlarm->AlarmSubSecondMask));
 8003836:	68bb      	ldr	r3, [r7, #8]
 8003838:	685a      	ldr	r2, [r3, #4]
 800383a:	68bb      	ldr	r3, [r7, #8]
 800383c:	699b      	ldr	r3, [r3, #24]
 800383e:	4313      	orrs	r3, r2
 8003840:	61bb      	str	r3, [r7, #24]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8003842:	68fb      	ldr	r3, [r7, #12]
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	22ca      	movs	r2, #202	; 0xca
 8003848:	625a      	str	r2, [r3, #36]	; 0x24
 800384a:	68fb      	ldr	r3, [r7, #12]
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	2253      	movs	r2, #83	; 0x53
 8003850:	625a      	str	r2, [r3, #36]	; 0x24

  /* Configure the Alarm register */
  if (sAlarm->Alarm == RTC_ALARM_A)
 8003852:	68bb      	ldr	r3, [r7, #8]
 8003854:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003856:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800385a:	d14a      	bne.n	80038f2 <HAL_RTC_SetAlarm+0x1a4>
  {
    /* Disable the Alarm A interrupt */
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 800385c:	68fb      	ldr	r3, [r7, #12]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	689a      	ldr	r2, [r3, #8]
 8003862:	68fb      	ldr	r3, [r7, #12]
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800386a:	609a      	str	r2, [r3, #8]
    /* Clear flag alarm A */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 800386c:	68fb      	ldr	r3, [r7, #12]
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	68db      	ldr	r3, [r3, #12]
 8003872:	b2da      	uxtb	r2, r3
 8003874:	68fb      	ldr	r3, [r7, #12]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	f462 72c0 	orn	r2, r2, #384	; 0x180
 800387c:	60da      	str	r2, [r3, #12]
    /* In case of interrupt mode is used, the interrupt source must disabled */
    __HAL_RTC_ALARM_DISABLE_IT(hrtc, RTC_IT_ALRA);
 800387e:	68fb      	ldr	r3, [r7, #12]
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	689a      	ldr	r2, [r3, #8]
 8003884:	68fb      	ldr	r3, [r7, #12]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800388c:	609a      	str	r2, [r3, #8]

#if defined (RTC_FLAG_ALRAWF)
    uint32_t tickstart = HAL_GetTick();
 800388e:	f7fd fe51 	bl	8001534 <HAL_GetTick>
 8003892:	6138      	str	r0, [r7, #16]
    /* Wait till RTC ALRAWF flag is set and if Time out is reached exit */
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 8003894:	e015      	b.n	80038c2 <HAL_RTC_SetAlarm+0x174>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8003896:	f7fd fe4d 	bl	8001534 <HAL_GetTick>
 800389a:	4602      	mov	r2, r0
 800389c:	693b      	ldr	r3, [r7, #16]
 800389e:	1ad3      	subs	r3, r2, r3
 80038a0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80038a4:	d90d      	bls.n	80038c2 <HAL_RTC_SetAlarm+0x174>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80038a6:	68fb      	ldr	r3, [r7, #12]
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	22ff      	movs	r2, #255	; 0xff
 80038ac:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80038ae:	68fb      	ldr	r3, [r7, #12]
 80038b0:	2203      	movs	r2, #3
 80038b2:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 80038b6:	68fb      	ldr	r3, [r7, #12]
 80038b8:	2200      	movs	r2, #0
 80038ba:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_TIMEOUT;
 80038be:	2303      	movs	r3, #3
 80038c0:	e06e      	b.n	80039a0 <HAL_RTC_SetAlarm+0x252>
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 80038c2:	68fb      	ldr	r3, [r7, #12]
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	68db      	ldr	r3, [r3, #12]
 80038c8:	f003 0301 	and.w	r3, r3, #1
 80038cc:	2b00      	cmp	r3, #0
 80038ce:	d0e2      	beq.n	8003896 <HAL_RTC_SetAlarm+0x148>
      }
    }
#endif

    hrtc->Instance->ALRMAR = (uint32_t)tmpreg;
 80038d0:	68fb      	ldr	r3, [r7, #12]
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	69fa      	ldr	r2, [r7, #28]
 80038d6:	61da      	str	r2, [r3, #28]
    /* Configure the Alarm A Sub Second register */
    hrtc->Instance->ALRMASSR = subsecondtmpreg;
 80038d8:	68fb      	ldr	r3, [r7, #12]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	69ba      	ldr	r2, [r7, #24]
 80038de:	645a      	str	r2, [r3, #68]	; 0x44
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMA_ENABLE(hrtc);
 80038e0:	68fb      	ldr	r3, [r7, #12]
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	689a      	ldr	r2, [r3, #8]
 80038e6:	68fb      	ldr	r3, [r7, #12]
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80038ee:	609a      	str	r2, [r3, #8]
 80038f0:	e049      	b.n	8003986 <HAL_RTC_SetAlarm+0x238>
  }
  else
  {
    /* Disable the Alarm B interrupt */
    __HAL_RTC_ALARMB_DISABLE(hrtc);
 80038f2:	68fb      	ldr	r3, [r7, #12]
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	689a      	ldr	r2, [r3, #8]
 80038f8:	68fb      	ldr	r3, [r7, #12]
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8003900:	609a      	str	r2, [r3, #8]
    /* Clear flag alarm B */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRBF);
 8003902:	68fb      	ldr	r3, [r7, #12]
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	68db      	ldr	r3, [r3, #12]
 8003908:	b2da      	uxtb	r2, r3
 800390a:	68fb      	ldr	r3, [r7, #12]
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	f462 7220 	orn	r2, r2, #640	; 0x280
 8003912:	60da      	str	r2, [r3, #12]
    /* In case of interrupt mode is used, the interrupt source must disabled */
    __HAL_RTC_ALARM_DISABLE_IT(hrtc, RTC_IT_ALRB);
 8003914:	68fb      	ldr	r3, [r7, #12]
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	689a      	ldr	r2, [r3, #8]
 800391a:	68fb      	ldr	r3, [r7, #12]
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003922:	609a      	str	r2, [r3, #8]

#if defined (RTC_FLAG_ALRBWF)
    uint32_t tickstart = HAL_GetTick();
 8003924:	f7fd fe06 	bl	8001534 <HAL_GetTick>
 8003928:	6178      	str	r0, [r7, #20]
    /* Wait till RTC ALRBWF flag is set and if Time out is reached exit */
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 800392a:	e015      	b.n	8003958 <HAL_RTC_SetAlarm+0x20a>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800392c:	f7fd fe02 	bl	8001534 <HAL_GetTick>
 8003930:	4602      	mov	r2, r0
 8003932:	697b      	ldr	r3, [r7, #20]
 8003934:	1ad3      	subs	r3, r2, r3
 8003936:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800393a:	d90d      	bls.n	8003958 <HAL_RTC_SetAlarm+0x20a>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800393c:	68fb      	ldr	r3, [r7, #12]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	22ff      	movs	r2, #255	; 0xff
 8003942:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8003944:	68fb      	ldr	r3, [r7, #12]
 8003946:	2203      	movs	r2, #3
 8003948:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 800394c:	68fb      	ldr	r3, [r7, #12]
 800394e:	2200      	movs	r2, #0
 8003950:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_TIMEOUT;
 8003954:	2303      	movs	r3, #3
 8003956:	e023      	b.n	80039a0 <HAL_RTC_SetAlarm+0x252>
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 8003958:	68fb      	ldr	r3, [r7, #12]
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	68db      	ldr	r3, [r3, #12]
 800395e:	f003 0302 	and.w	r3, r3, #2
 8003962:	2b00      	cmp	r3, #0
 8003964:	d0e2      	beq.n	800392c <HAL_RTC_SetAlarm+0x1de>
      }
    }
#endif

    hrtc->Instance->ALRMBR = (uint32_t)tmpreg;
 8003966:	68fb      	ldr	r3, [r7, #12]
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	69fa      	ldr	r2, [r7, #28]
 800396c:	621a      	str	r2, [r3, #32]
    /* Configure the Alarm B Sub Second register */
    hrtc->Instance->ALRMBSSR = subsecondtmpreg;
 800396e:	68fb      	ldr	r3, [r7, #12]
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	69ba      	ldr	r2, [r7, #24]
 8003974:	649a      	str	r2, [r3, #72]	; 0x48
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMB_ENABLE(hrtc);
 8003976:	68fb      	ldr	r3, [r7, #12]
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	689a      	ldr	r2, [r3, #8]
 800397c:	68fb      	ldr	r3, [r7, #12]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003984:	609a      	str	r2, [r3, #8]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003986:	68fb      	ldr	r3, [r7, #12]
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	22ff      	movs	r2, #255	; 0xff
 800398c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 800398e:	68fb      	ldr	r3, [r7, #12]
 8003990:	2201      	movs	r2, #1
 8003992:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8003996:	68fb      	ldr	r3, [r7, #12]
 8003998:	2200      	movs	r2, #0
 800399a:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 800399e:	2300      	movs	r3, #0
}
 80039a0:	4618      	mov	r0, r3
 80039a2:	3724      	adds	r7, #36	; 0x24
 80039a4:	46bd      	mov	sp, r7
 80039a6:	bd90      	pop	{r4, r7, pc}

080039a8 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 80039a8:	b580      	push	{r7, lr}
 80039aa:	b084      	sub	sp, #16
 80039ac:	af00      	add	r7, sp, #0
 80039ae:	6078      	str	r0, [r7, #4]

  /* Clear RSF flag */
#if defined(STM32L412xx) || defined(STM32L422xx)
  hrtc->Instance->ICSR &= (uint32_t)RTC_RSF_MASK;
#else
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	68da      	ldr	r2, [r3, #12]
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80039be:	60da      	str	r2, [r3, #12]
#endif

  tickstart = HAL_GetTick();
 80039c0:	f7fd fdb8 	bl	8001534 <HAL_GetTick>
 80039c4:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
#if defined(STM32L412xx) || defined(STM32L422xx)
  while ((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
#else
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 80039c6:	e009      	b.n	80039dc <HAL_RTC_WaitForSynchro+0x34>
#endif
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80039c8:	f7fd fdb4 	bl	8001534 <HAL_GetTick>
 80039cc:	4602      	mov	r2, r0
 80039ce:	68fb      	ldr	r3, [r7, #12]
 80039d0:	1ad3      	subs	r3, r2, r3
 80039d2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80039d6:	d901      	bls.n	80039dc <HAL_RTC_WaitForSynchro+0x34>
    {
      return HAL_TIMEOUT;
 80039d8:	2303      	movs	r3, #3
 80039da:	e007      	b.n	80039ec <HAL_RTC_WaitForSynchro+0x44>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	68db      	ldr	r3, [r3, #12]
 80039e2:	f003 0320 	and.w	r3, r3, #32
 80039e6:	2b00      	cmp	r3, #0
 80039e8:	d0ee      	beq.n	80039c8 <HAL_RTC_WaitForSynchro+0x20>
    }
  }

  return HAL_OK;
 80039ea:	2300      	movs	r3, #0
}
 80039ec:	4618      	mov	r0, r3
 80039ee:	3710      	adds	r7, #16
 80039f0:	46bd      	mov	sp, r7
 80039f2:	bd80      	pop	{r7, pc}

080039f4 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 80039f4:	b580      	push	{r7, lr}
 80039f6:	b084      	sub	sp, #16
 80039f8:	af00      	add	r7, sp, #0
 80039fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80039fc:	2300      	movs	r3, #0
 80039fe:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
      }
    }
  }
#else /* #if defined(STM32L412xx) || defined(STM32L422xx) */
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	68db      	ldr	r3, [r3, #12]
 8003a06:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003a0a:	2b00      	cmp	r3, #0
 8003a0c:	d120      	bne.n	8003a50 <RTC_EnterInitMode+0x5c>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	f04f 32ff 	mov.w	r2, #4294967295
 8003a16:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 8003a18:	f7fd fd8c 	bl	8001534 <HAL_GetTick>
 8003a1c:	60b8      	str	r0, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8003a1e:	e00d      	b.n	8003a3c <RTC_EnterInitMode+0x48>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 8003a20:	f7fd fd88 	bl	8001534 <HAL_GetTick>
 8003a24:	4602      	mov	r2, r0
 8003a26:	68bb      	ldr	r3, [r7, #8]
 8003a28:	1ad3      	subs	r3, r2, r3
 8003a2a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003a2e:	d905      	bls.n	8003a3c <RTC_EnterInitMode+0x48>
      {
        status = HAL_TIMEOUT;
 8003a30:	2303      	movs	r3, #3
 8003a32:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	2203      	movs	r2, #3
 8003a38:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	68db      	ldr	r3, [r3, #12]
 8003a42:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003a46:	2b00      	cmp	r3, #0
 8003a48:	d102      	bne.n	8003a50 <RTC_EnterInitMode+0x5c>
 8003a4a:	7bfb      	ldrb	r3, [r7, #15]
 8003a4c:	2b03      	cmp	r3, #3
 8003a4e:	d1e7      	bne.n	8003a20 <RTC_EnterInitMode+0x2c>
      }
    }
  }
#endif /* #if defined(STM32L412xx) || defined(STM32L422xx) */

  return status;
 8003a50:	7bfb      	ldrb	r3, [r7, #15]
}
 8003a52:	4618      	mov	r0, r3
 8003a54:	3710      	adds	r7, #16
 8003a56:	46bd      	mov	sp, r7
 8003a58:	bd80      	pop	{r7, pc}
	...

08003a5c <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8003a5c:	b580      	push	{r7, lr}
 8003a5e:	b084      	sub	sp, #16
 8003a60:	af00      	add	r7, sp, #0
 8003a62:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003a64:	2300      	movs	r3, #0
 8003a66:	73fb      	strb	r3, [r7, #15]
  /* Exit Initialization mode */
#if defined(STM32L412xx) || defined(STM32L422xx)
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
#else
  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ISR, RTC_ISR_INIT);
 8003a68:	4b1a      	ldr	r3, [pc, #104]	; (8003ad4 <RTC_ExitInitMode+0x78>)
 8003a6a:	68db      	ldr	r3, [r3, #12]
 8003a6c:	4a19      	ldr	r2, [pc, #100]	; (8003ad4 <RTC_ExitInitMode+0x78>)
 8003a6e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003a72:	60d3      	str	r3, [r2, #12]
#endif

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 8003a74:	4b17      	ldr	r3, [pc, #92]	; (8003ad4 <RTC_ExitInitMode+0x78>)
 8003a76:	689b      	ldr	r3, [r3, #8]
 8003a78:	f003 0320 	and.w	r3, r3, #32
 8003a7c:	2b00      	cmp	r3, #0
 8003a7e:	d10c      	bne.n	8003a9a <RTC_ExitInitMode+0x3e>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8003a80:	6878      	ldr	r0, [r7, #4]
 8003a82:	f7ff ff91 	bl	80039a8 <HAL_RTC_WaitForSynchro>
 8003a86:	4603      	mov	r3, r0
 8003a88:	2b00      	cmp	r3, #0
 8003a8a:	d01e      	beq.n	8003aca <RTC_ExitInitMode+0x6e>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	2203      	movs	r2, #3
 8003a90:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      status = HAL_TIMEOUT;
 8003a94:	2303      	movs	r3, #3
 8003a96:	73fb      	strb	r3, [r7, #15]
 8003a98:	e017      	b.n	8003aca <RTC_ExitInitMode+0x6e>
    }
  }
  else /* WA 2.9.6 Calendar initialization may fail in case of consecutive INIT mode entry */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8003a9a:	4b0e      	ldr	r3, [pc, #56]	; (8003ad4 <RTC_ExitInitMode+0x78>)
 8003a9c:	689b      	ldr	r3, [r3, #8]
 8003a9e:	4a0d      	ldr	r2, [pc, #52]	; (8003ad4 <RTC_ExitInitMode+0x78>)
 8003aa0:	f023 0320 	bic.w	r3, r3, #32
 8003aa4:	6093      	str	r3, [r2, #8]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8003aa6:	6878      	ldr	r0, [r7, #4]
 8003aa8:	f7ff ff7e 	bl	80039a8 <HAL_RTC_WaitForSynchro>
 8003aac:	4603      	mov	r3, r0
 8003aae:	2b00      	cmp	r3, #0
 8003ab0:	d005      	beq.n	8003abe <RTC_ExitInitMode+0x62>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	2203      	movs	r2, #3
 8003ab6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      status = HAL_TIMEOUT;
 8003aba:	2303      	movs	r3, #3
 8003abc:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8003abe:	4b05      	ldr	r3, [pc, #20]	; (8003ad4 <RTC_ExitInitMode+0x78>)
 8003ac0:	689b      	ldr	r3, [r3, #8]
 8003ac2:	4a04      	ldr	r2, [pc, #16]	; (8003ad4 <RTC_ExitInitMode+0x78>)
 8003ac4:	f043 0320 	orr.w	r3, r3, #32
 8003ac8:	6093      	str	r3, [r2, #8]
  }

  return status;
 8003aca:	7bfb      	ldrb	r3, [r7, #15]
}
 8003acc:	4618      	mov	r0, r3
 8003ace:	3710      	adds	r7, #16
 8003ad0:	46bd      	mov	sp, r7
 8003ad2:	bd80      	pop	{r7, pc}
 8003ad4:	40002800 	.word	0x40002800

08003ad8 <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 8003ad8:	b480      	push	{r7}
 8003ada:	b085      	sub	sp, #20
 8003adc:	af00      	add	r7, sp, #0
 8003ade:	4603      	mov	r3, r0
 8003ae0:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 8003ae2:	2300      	movs	r3, #0
 8003ae4:	60fb      	str	r3, [r7, #12]
  uint8_t temp = Value;
 8003ae6:	79fb      	ldrb	r3, [r7, #7]
 8003ae8:	72fb      	strb	r3, [r7, #11]

  while (temp >= 10U)
 8003aea:	e005      	b.n	8003af8 <RTC_ByteToBcd2+0x20>
  {
    bcdhigh++;
 8003aec:	68fb      	ldr	r3, [r7, #12]
 8003aee:	3301      	adds	r3, #1
 8003af0:	60fb      	str	r3, [r7, #12]
    temp -= 10U;
 8003af2:	7afb      	ldrb	r3, [r7, #11]
 8003af4:	3b0a      	subs	r3, #10
 8003af6:	72fb      	strb	r3, [r7, #11]
  while (temp >= 10U)
 8003af8:	7afb      	ldrb	r3, [r7, #11]
 8003afa:	2b09      	cmp	r3, #9
 8003afc:	d8f6      	bhi.n	8003aec <RTC_ByteToBcd2+0x14>
  }

  return ((uint8_t)(bcdhigh << 4U) | temp);
 8003afe:	68fb      	ldr	r3, [r7, #12]
 8003b00:	b2db      	uxtb	r3, r3
 8003b02:	011b      	lsls	r3, r3, #4
 8003b04:	b2da      	uxtb	r2, r3
 8003b06:	7afb      	ldrb	r3, [r7, #11]
 8003b08:	4313      	orrs	r3, r2
 8003b0a:	b2db      	uxtb	r3, r3
}
 8003b0c:	4618      	mov	r0, r3
 8003b0e:	3714      	adds	r7, #20
 8003b10:	46bd      	mov	sp, r7
 8003b12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b16:	4770      	bx	lr

08003b18 <RTC_Bcd2ToByte>:
  * @brief  Convert from 2 digit BCD to Binary.
  * @param  Value BCD value to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 8003b18:	b480      	push	{r7}
 8003b1a:	b085      	sub	sp, #20
 8003b1c:	af00      	add	r7, sp, #0
 8003b1e:	4603      	mov	r3, r0
 8003b20:	71fb      	strb	r3, [r7, #7]
  uint8_t tmp;
  tmp = ((Value & 0xF0U) >> 4U) * 10U;
 8003b22:	79fb      	ldrb	r3, [r7, #7]
 8003b24:	091b      	lsrs	r3, r3, #4
 8003b26:	b2db      	uxtb	r3, r3
 8003b28:	461a      	mov	r2, r3
 8003b2a:	0092      	lsls	r2, r2, #2
 8003b2c:	4413      	add	r3, r2
 8003b2e:	005b      	lsls	r3, r3, #1
 8003b30:	73fb      	strb	r3, [r7, #15]
  return (tmp + (Value & 0x0FU));
 8003b32:	79fb      	ldrb	r3, [r7, #7]
 8003b34:	f003 030f 	and.w	r3, r3, #15
 8003b38:	b2da      	uxtb	r2, r3
 8003b3a:	7bfb      	ldrb	r3, [r7, #15]
 8003b3c:	4413      	add	r3, r2
 8003b3e:	b2db      	uxtb	r3, r3
}
 8003b40:	4618      	mov	r0, r3
 8003b42:	3714      	adds	r7, #20
 8003b44:	46bd      	mov	sp, r7
 8003b46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b4a:	4770      	bx	lr

08003b4c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003b4c:	b580      	push	{r7, lr}
 8003b4e:	b084      	sub	sp, #16
 8003b50:	af00      	add	r7, sp, #0
 8003b52:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	2b00      	cmp	r3, #0
 8003b58:	d101      	bne.n	8003b5e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003b5a:	2301      	movs	r3, #1
 8003b5c:	e07c      	b.n	8003c58 <HAL_SPI_Init+0x10c>
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	2200      	movs	r2, #0
 8003b62:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8003b6a:	b2db      	uxtb	r3, r3
 8003b6c:	2b00      	cmp	r3, #0
 8003b6e:	d106      	bne.n	8003b7e <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	2200      	movs	r2, #0
 8003b74:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003b78:	6878      	ldr	r0, [r7, #4]
 8003b7a:	f7fd f931 	bl	8000de0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	2202      	movs	r2, #2
 8003b82:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	681a      	ldr	r2, [r3, #0]
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003b94:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	68db      	ldr	r3, [r3, #12]
 8003b9a:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003b9e:	d902      	bls.n	8003ba6 <HAL_SPI_Init+0x5a>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8003ba0:	2300      	movs	r3, #0
 8003ba2:	60fb      	str	r3, [r7, #12]
 8003ba4:	e002      	b.n	8003bac <HAL_SPI_Init+0x60>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8003ba6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003baa:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	68db      	ldr	r3, [r3, #12]
 8003bb0:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8003bb4:	d007      	beq.n	8003bc6 <HAL_SPI_Init+0x7a>
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	68db      	ldr	r3, [r3, #12]
 8003bba:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003bbe:	d002      	beq.n	8003bc6 <HAL_SPI_Init+0x7a>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	2200      	movs	r2, #0
 8003bc4:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Align the CRC Length on the data size */
  if (hspi->Init.CRCLength == SPI_CRC_LENGTH_DATASIZE)
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003bca:	2b00      	cmp	r3, #0
 8003bcc:	d10b      	bne.n	8003be6 <HAL_SPI_Init+0x9a>
  {
    /* CRC Length aligned on the data size : value set by default */
    if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	68db      	ldr	r3, [r3, #12]
 8003bd2:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003bd6:	d903      	bls.n	8003be0 <HAL_SPI_Init+0x94>
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_16BIT;
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	2202      	movs	r2, #2
 8003bdc:	631a      	str	r2, [r3, #48]	; 0x30
 8003bde:	e002      	b.n	8003be6 <HAL_SPI_Init+0x9a>
    }
    else
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_8BIT;
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	2201      	movs	r2, #1
 8003be4:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction |
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	685a      	ldr	r2, [r3, #4]
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	689b      	ldr	r3, [r3, #8]
 8003bee:	431a      	orrs	r2, r3
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	691b      	ldr	r3, [r3, #16]
 8003bf4:	431a      	orrs	r2, r3
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	695b      	ldr	r3, [r3, #20]
 8003bfa:	431a      	orrs	r2, r3
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	699b      	ldr	r3, [r3, #24]
 8003c00:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003c04:	431a      	orrs	r2, r3
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	69db      	ldr	r3, [r3, #28]
 8003c0a:	431a      	orrs	r2, r3
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	6a1b      	ldr	r3, [r3, #32]
 8003c10:	ea42 0103 	orr.w	r1, r2, r3
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	430a      	orrs	r2, r1
 8003c1e:	601a      	str	r2, [r3, #0]
    hspi->Instance->CR1 |= SPI_CR1_CRCL;
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode |
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	699b      	ldr	r3, [r3, #24]
 8003c24:	0c1b      	lsrs	r3, r3, #16
 8003c26:	f003 0204 	and.w	r2, r3, #4
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c2e:	431a      	orrs	r2, r3
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003c34:	431a      	orrs	r2, r3
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	68db      	ldr	r3, [r3, #12]
 8003c3a:	ea42 0103 	orr.w	r1, r2, r3
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	68fa      	ldr	r2, [r7, #12]
 8003c44:	430a      	orrs	r2, r1
 8003c46:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	2200      	movs	r2, #0
 8003c4c:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	2201      	movs	r2, #1
 8003c52:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8003c56:	2300      	movs	r3, #0
}
 8003c58:	4618      	mov	r0, r3
 8003c5a:	3710      	adds	r7, #16
 8003c5c:	46bd      	mov	sp, r7
 8003c5e:	bd80      	pop	{r7, pc}

08003c60 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003c60:	b580      	push	{r7, lr}
 8003c62:	b088      	sub	sp, #32
 8003c64:	af00      	add	r7, sp, #0
 8003c66:	60f8      	str	r0, [r7, #12]
 8003c68:	60b9      	str	r1, [r7, #8]
 8003c6a:	603b      	str	r3, [r7, #0]
 8003c6c:	4613      	mov	r3, r2
 8003c6e:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8003c70:	2300      	movs	r3, #0
 8003c72:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003c74:	68fb      	ldr	r3, [r7, #12]
 8003c76:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8003c7a:	2b01      	cmp	r3, #1
 8003c7c:	d101      	bne.n	8003c82 <HAL_SPI_Transmit+0x22>
 8003c7e:	2302      	movs	r3, #2
 8003c80:	e150      	b.n	8003f24 <HAL_SPI_Transmit+0x2c4>
 8003c82:	68fb      	ldr	r3, [r7, #12]
 8003c84:	2201      	movs	r2, #1
 8003c86:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003c8a:	f7fd fc53 	bl	8001534 <HAL_GetTick>
 8003c8e:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8003c90:	88fb      	ldrh	r3, [r7, #6]
 8003c92:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8003c94:	68fb      	ldr	r3, [r7, #12]
 8003c96:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8003c9a:	b2db      	uxtb	r3, r3
 8003c9c:	2b01      	cmp	r3, #1
 8003c9e:	d002      	beq.n	8003ca6 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8003ca0:	2302      	movs	r3, #2
 8003ca2:	77fb      	strb	r3, [r7, #31]
    goto error;
 8003ca4:	e135      	b.n	8003f12 <HAL_SPI_Transmit+0x2b2>
  }

  if ((pData == NULL) || (Size == 0U))
 8003ca6:	68bb      	ldr	r3, [r7, #8]
 8003ca8:	2b00      	cmp	r3, #0
 8003caa:	d002      	beq.n	8003cb2 <HAL_SPI_Transmit+0x52>
 8003cac:	88fb      	ldrh	r3, [r7, #6]
 8003cae:	2b00      	cmp	r3, #0
 8003cb0:	d102      	bne.n	8003cb8 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8003cb2:	2301      	movs	r3, #1
 8003cb4:	77fb      	strb	r3, [r7, #31]
    goto error;
 8003cb6:	e12c      	b.n	8003f12 <HAL_SPI_Transmit+0x2b2>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8003cb8:	68fb      	ldr	r3, [r7, #12]
 8003cba:	2203      	movs	r2, #3
 8003cbc:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003cc0:	68fb      	ldr	r3, [r7, #12]
 8003cc2:	2200      	movs	r2, #0
 8003cc4:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8003cc6:	68fb      	ldr	r3, [r7, #12]
 8003cc8:	68ba      	ldr	r2, [r7, #8]
 8003cca:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8003ccc:	68fb      	ldr	r3, [r7, #12]
 8003cce:	88fa      	ldrh	r2, [r7, #6]
 8003cd0:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8003cd2:	68fb      	ldr	r3, [r7, #12]
 8003cd4:	88fa      	ldrh	r2, [r7, #6]
 8003cd6:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8003cd8:	68fb      	ldr	r3, [r7, #12]
 8003cda:	2200      	movs	r2, #0
 8003cdc:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8003cde:	68fb      	ldr	r3, [r7, #12]
 8003ce0:	2200      	movs	r2, #0
 8003ce2:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 8003ce6:	68fb      	ldr	r3, [r7, #12]
 8003ce8:	2200      	movs	r2, #0
 8003cea:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 8003cee:	68fb      	ldr	r3, [r7, #12]
 8003cf0:	2200      	movs	r2, #0
 8003cf2:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 8003cf4:	68fb      	ldr	r3, [r7, #12]
 8003cf6:	2200      	movs	r2, #0
 8003cf8:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003cfa:	68fb      	ldr	r3, [r7, #12]
 8003cfc:	689b      	ldr	r3, [r3, #8]
 8003cfe:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003d02:	d107      	bne.n	8003d14 <HAL_SPI_Transmit+0xb4>
  {
    SPI_1LINE_TX(hspi);
 8003d04:	68fb      	ldr	r3, [r7, #12]
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	681a      	ldr	r2, [r3, #0]
 8003d0a:	68fb      	ldr	r3, [r7, #12]
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003d12:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003d14:	68fb      	ldr	r3, [r7, #12]
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003d1e:	2b40      	cmp	r3, #64	; 0x40
 8003d20:	d007      	beq.n	8003d32 <HAL_SPI_Transmit+0xd2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003d22:	68fb      	ldr	r3, [r7, #12]
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	681a      	ldr	r2, [r3, #0]
 8003d28:	68fb      	ldr	r3, [r7, #12]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003d30:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003d32:	68fb      	ldr	r3, [r7, #12]
 8003d34:	68db      	ldr	r3, [r3, #12]
 8003d36:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003d3a:	d94b      	bls.n	8003dd4 <HAL_SPI_Transmit+0x174>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003d3c:	68fb      	ldr	r3, [r7, #12]
 8003d3e:	685b      	ldr	r3, [r3, #4]
 8003d40:	2b00      	cmp	r3, #0
 8003d42:	d002      	beq.n	8003d4a <HAL_SPI_Transmit+0xea>
 8003d44:	8afb      	ldrh	r3, [r7, #22]
 8003d46:	2b01      	cmp	r3, #1
 8003d48:	d13e      	bne.n	8003dc8 <HAL_SPI_Transmit+0x168>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003d4a:	68fb      	ldr	r3, [r7, #12]
 8003d4c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d4e:	881a      	ldrh	r2, [r3, #0]
 8003d50:	68fb      	ldr	r3, [r7, #12]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003d56:	68fb      	ldr	r3, [r7, #12]
 8003d58:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d5a:	1c9a      	adds	r2, r3, #2
 8003d5c:	68fb      	ldr	r3, [r7, #12]
 8003d5e:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8003d60:	68fb      	ldr	r3, [r7, #12]
 8003d62:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003d64:	b29b      	uxth	r3, r3
 8003d66:	3b01      	subs	r3, #1
 8003d68:	b29a      	uxth	r2, r3
 8003d6a:	68fb      	ldr	r3, [r7, #12]
 8003d6c:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8003d6e:	e02b      	b.n	8003dc8 <HAL_SPI_Transmit+0x168>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003d70:	68fb      	ldr	r3, [r7, #12]
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	689b      	ldr	r3, [r3, #8]
 8003d76:	f003 0302 	and.w	r3, r3, #2
 8003d7a:	2b02      	cmp	r3, #2
 8003d7c:	d112      	bne.n	8003da4 <HAL_SPI_Transmit+0x144>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003d7e:	68fb      	ldr	r3, [r7, #12]
 8003d80:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d82:	881a      	ldrh	r2, [r3, #0]
 8003d84:	68fb      	ldr	r3, [r7, #12]
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003d8a:	68fb      	ldr	r3, [r7, #12]
 8003d8c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d8e:	1c9a      	adds	r2, r3, #2
 8003d90:	68fb      	ldr	r3, [r7, #12]
 8003d92:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8003d94:	68fb      	ldr	r3, [r7, #12]
 8003d96:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003d98:	b29b      	uxth	r3, r3
 8003d9a:	3b01      	subs	r3, #1
 8003d9c:	b29a      	uxth	r2, r3
 8003d9e:	68fb      	ldr	r3, [r7, #12]
 8003da0:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003da2:	e011      	b.n	8003dc8 <HAL_SPI_Transmit+0x168>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003da4:	f7fd fbc6 	bl	8001534 <HAL_GetTick>
 8003da8:	4602      	mov	r2, r0
 8003daa:	69bb      	ldr	r3, [r7, #24]
 8003dac:	1ad3      	subs	r3, r2, r3
 8003dae:	683a      	ldr	r2, [r7, #0]
 8003db0:	429a      	cmp	r2, r3
 8003db2:	d803      	bhi.n	8003dbc <HAL_SPI_Transmit+0x15c>
 8003db4:	683b      	ldr	r3, [r7, #0]
 8003db6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003dba:	d102      	bne.n	8003dc2 <HAL_SPI_Transmit+0x162>
 8003dbc:	683b      	ldr	r3, [r7, #0]
 8003dbe:	2b00      	cmp	r3, #0
 8003dc0:	d102      	bne.n	8003dc8 <HAL_SPI_Transmit+0x168>
        {
          errorcode = HAL_TIMEOUT;
 8003dc2:	2303      	movs	r3, #3
 8003dc4:	77fb      	strb	r3, [r7, #31]
          goto error;
 8003dc6:	e0a4      	b.n	8003f12 <HAL_SPI_Transmit+0x2b2>
    while (hspi->TxXferCount > 0U)
 8003dc8:	68fb      	ldr	r3, [r7, #12]
 8003dca:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003dcc:	b29b      	uxth	r3, r3
 8003dce:	2b00      	cmp	r3, #0
 8003dd0:	d1ce      	bne.n	8003d70 <HAL_SPI_Transmit+0x110>
 8003dd2:	e07c      	b.n	8003ece <HAL_SPI_Transmit+0x26e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003dd4:	68fb      	ldr	r3, [r7, #12]
 8003dd6:	685b      	ldr	r3, [r3, #4]
 8003dd8:	2b00      	cmp	r3, #0
 8003dda:	d002      	beq.n	8003de2 <HAL_SPI_Transmit+0x182>
 8003ddc:	8afb      	ldrh	r3, [r7, #22]
 8003dde:	2b01      	cmp	r3, #1
 8003de0:	d170      	bne.n	8003ec4 <HAL_SPI_Transmit+0x264>
    {
      if (hspi->TxXferCount > 1U)
 8003de2:	68fb      	ldr	r3, [r7, #12]
 8003de4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003de6:	b29b      	uxth	r3, r3
 8003de8:	2b01      	cmp	r3, #1
 8003dea:	d912      	bls.n	8003e12 <HAL_SPI_Transmit+0x1b2>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003dec:	68fb      	ldr	r3, [r7, #12]
 8003dee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003df0:	881a      	ldrh	r2, [r3, #0]
 8003df2:	68fb      	ldr	r3, [r7, #12]
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003df8:	68fb      	ldr	r3, [r7, #12]
 8003dfa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003dfc:	1c9a      	adds	r2, r3, #2
 8003dfe:	68fb      	ldr	r3, [r7, #12]
 8003e00:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8003e02:	68fb      	ldr	r3, [r7, #12]
 8003e04:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003e06:	b29b      	uxth	r3, r3
 8003e08:	3b02      	subs	r3, #2
 8003e0a:	b29a      	uxth	r2, r3
 8003e0c:	68fb      	ldr	r3, [r7, #12]
 8003e0e:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003e10:	e058      	b.n	8003ec4 <HAL_SPI_Transmit+0x264>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003e12:	68fb      	ldr	r3, [r7, #12]
 8003e14:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003e16:	68fb      	ldr	r3, [r7, #12]
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	330c      	adds	r3, #12
 8003e1c:	7812      	ldrb	r2, [r2, #0]
 8003e1e:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8003e20:	68fb      	ldr	r3, [r7, #12]
 8003e22:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e24:	1c5a      	adds	r2, r3, #1
 8003e26:	68fb      	ldr	r3, [r7, #12]
 8003e28:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8003e2a:	68fb      	ldr	r3, [r7, #12]
 8003e2c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003e2e:	b29b      	uxth	r3, r3
 8003e30:	3b01      	subs	r3, #1
 8003e32:	b29a      	uxth	r2, r3
 8003e34:	68fb      	ldr	r3, [r7, #12]
 8003e36:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8003e38:	e044      	b.n	8003ec4 <HAL_SPI_Transmit+0x264>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003e3a:	68fb      	ldr	r3, [r7, #12]
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	689b      	ldr	r3, [r3, #8]
 8003e40:	f003 0302 	and.w	r3, r3, #2
 8003e44:	2b02      	cmp	r3, #2
 8003e46:	d12b      	bne.n	8003ea0 <HAL_SPI_Transmit+0x240>
      {
        if (hspi->TxXferCount > 1U)
 8003e48:	68fb      	ldr	r3, [r7, #12]
 8003e4a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003e4c:	b29b      	uxth	r3, r3
 8003e4e:	2b01      	cmp	r3, #1
 8003e50:	d912      	bls.n	8003e78 <HAL_SPI_Transmit+0x218>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003e52:	68fb      	ldr	r3, [r7, #12]
 8003e54:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e56:	881a      	ldrh	r2, [r3, #0]
 8003e58:	68fb      	ldr	r3, [r7, #12]
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8003e5e:	68fb      	ldr	r3, [r7, #12]
 8003e60:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e62:	1c9a      	adds	r2, r3, #2
 8003e64:	68fb      	ldr	r3, [r7, #12]
 8003e66:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8003e68:	68fb      	ldr	r3, [r7, #12]
 8003e6a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003e6c:	b29b      	uxth	r3, r3
 8003e6e:	3b02      	subs	r3, #2
 8003e70:	b29a      	uxth	r2, r3
 8003e72:	68fb      	ldr	r3, [r7, #12]
 8003e74:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003e76:	e025      	b.n	8003ec4 <HAL_SPI_Transmit+0x264>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003e78:	68fb      	ldr	r3, [r7, #12]
 8003e7a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003e7c:	68fb      	ldr	r3, [r7, #12]
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	330c      	adds	r3, #12
 8003e82:	7812      	ldrb	r2, [r2, #0]
 8003e84:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8003e86:	68fb      	ldr	r3, [r7, #12]
 8003e88:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e8a:	1c5a      	adds	r2, r3, #1
 8003e8c:	68fb      	ldr	r3, [r7, #12]
 8003e8e:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8003e90:	68fb      	ldr	r3, [r7, #12]
 8003e92:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003e94:	b29b      	uxth	r3, r3
 8003e96:	3b01      	subs	r3, #1
 8003e98:	b29a      	uxth	r2, r3
 8003e9a:	68fb      	ldr	r3, [r7, #12]
 8003e9c:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003e9e:	e011      	b.n	8003ec4 <HAL_SPI_Transmit+0x264>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003ea0:	f7fd fb48 	bl	8001534 <HAL_GetTick>
 8003ea4:	4602      	mov	r2, r0
 8003ea6:	69bb      	ldr	r3, [r7, #24]
 8003ea8:	1ad3      	subs	r3, r2, r3
 8003eaa:	683a      	ldr	r2, [r7, #0]
 8003eac:	429a      	cmp	r2, r3
 8003eae:	d803      	bhi.n	8003eb8 <HAL_SPI_Transmit+0x258>
 8003eb0:	683b      	ldr	r3, [r7, #0]
 8003eb2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003eb6:	d102      	bne.n	8003ebe <HAL_SPI_Transmit+0x25e>
 8003eb8:	683b      	ldr	r3, [r7, #0]
 8003eba:	2b00      	cmp	r3, #0
 8003ebc:	d102      	bne.n	8003ec4 <HAL_SPI_Transmit+0x264>
        {
          errorcode = HAL_TIMEOUT;
 8003ebe:	2303      	movs	r3, #3
 8003ec0:	77fb      	strb	r3, [r7, #31]
          goto error;
 8003ec2:	e026      	b.n	8003f12 <HAL_SPI_Transmit+0x2b2>
    while (hspi->TxXferCount > 0U)
 8003ec4:	68fb      	ldr	r3, [r7, #12]
 8003ec6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003ec8:	b29b      	uxth	r3, r3
 8003eca:	2b00      	cmp	r3, #0
 8003ecc:	d1b5      	bne.n	8003e3a <HAL_SPI_Transmit+0x1da>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003ece:	69ba      	ldr	r2, [r7, #24]
 8003ed0:	6839      	ldr	r1, [r7, #0]
 8003ed2:	68f8      	ldr	r0, [r7, #12]
 8003ed4:	f000 f901 	bl	80040da <SPI_EndRxTxTransaction>
 8003ed8:	4603      	mov	r3, r0
 8003eda:	2b00      	cmp	r3, #0
 8003edc:	d002      	beq.n	8003ee4 <HAL_SPI_Transmit+0x284>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003ede:	68fb      	ldr	r3, [r7, #12]
 8003ee0:	2220      	movs	r2, #32
 8003ee2:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003ee4:	68fb      	ldr	r3, [r7, #12]
 8003ee6:	689b      	ldr	r3, [r3, #8]
 8003ee8:	2b00      	cmp	r3, #0
 8003eea:	d10a      	bne.n	8003f02 <HAL_SPI_Transmit+0x2a2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003eec:	2300      	movs	r3, #0
 8003eee:	613b      	str	r3, [r7, #16]
 8003ef0:	68fb      	ldr	r3, [r7, #12]
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	68db      	ldr	r3, [r3, #12]
 8003ef6:	613b      	str	r3, [r7, #16]
 8003ef8:	68fb      	ldr	r3, [r7, #12]
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	689b      	ldr	r3, [r3, #8]
 8003efe:	613b      	str	r3, [r7, #16]
 8003f00:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003f02:	68fb      	ldr	r3, [r7, #12]
 8003f04:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003f06:	2b00      	cmp	r3, #0
 8003f08:	d002      	beq.n	8003f10 <HAL_SPI_Transmit+0x2b0>
  {
    errorcode = HAL_ERROR;
 8003f0a:	2301      	movs	r3, #1
 8003f0c:	77fb      	strb	r3, [r7, #31]
 8003f0e:	e000      	b.n	8003f12 <HAL_SPI_Transmit+0x2b2>
  }

error:
 8003f10:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8003f12:	68fb      	ldr	r3, [r7, #12]
 8003f14:	2201      	movs	r2, #1
 8003f16:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8003f1a:	68fb      	ldr	r3, [r7, #12]
 8003f1c:	2200      	movs	r2, #0
 8003f1e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8003f22:	7ffb      	ldrb	r3, [r7, #31]
}
 8003f24:	4618      	mov	r0, r3
 8003f26:	3720      	adds	r7, #32
 8003f28:	46bd      	mov	sp, r7
 8003f2a:	bd80      	pop	{r7, pc}

08003f2c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003f2c:	b580      	push	{r7, lr}
 8003f2e:	b084      	sub	sp, #16
 8003f30:	af00      	add	r7, sp, #0
 8003f32:	60f8      	str	r0, [r7, #12]
 8003f34:	60b9      	str	r1, [r7, #8]
 8003f36:	603b      	str	r3, [r7, #0]
 8003f38:	4613      	mov	r3, r2
 8003f3a:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003f3c:	e04c      	b.n	8003fd8 <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 8003f3e:	683b      	ldr	r3, [r7, #0]
 8003f40:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003f44:	d048      	beq.n	8003fd8 <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 8003f46:	f7fd faf5 	bl	8001534 <HAL_GetTick>
 8003f4a:	4602      	mov	r2, r0
 8003f4c:	69bb      	ldr	r3, [r7, #24]
 8003f4e:	1ad3      	subs	r3, r2, r3
 8003f50:	683a      	ldr	r2, [r7, #0]
 8003f52:	429a      	cmp	r2, r3
 8003f54:	d902      	bls.n	8003f5c <SPI_WaitFlagStateUntilTimeout+0x30>
 8003f56:	683b      	ldr	r3, [r7, #0]
 8003f58:	2b00      	cmp	r3, #0
 8003f5a:	d13d      	bne.n	8003fd8 <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003f5c:	68fb      	ldr	r3, [r7, #12]
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	685a      	ldr	r2, [r3, #4]
 8003f62:	68fb      	ldr	r3, [r7, #12]
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8003f6a:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003f6c:	68fb      	ldr	r3, [r7, #12]
 8003f6e:	685b      	ldr	r3, [r3, #4]
 8003f70:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003f74:	d111      	bne.n	8003f9a <SPI_WaitFlagStateUntilTimeout+0x6e>
 8003f76:	68fb      	ldr	r3, [r7, #12]
 8003f78:	689b      	ldr	r3, [r3, #8]
 8003f7a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003f7e:	d004      	beq.n	8003f8a <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003f80:	68fb      	ldr	r3, [r7, #12]
 8003f82:	689b      	ldr	r3, [r3, #8]
 8003f84:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003f88:	d107      	bne.n	8003f9a <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003f8a:	68fb      	ldr	r3, [r7, #12]
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	681a      	ldr	r2, [r3, #0]
 8003f90:	68fb      	ldr	r3, [r7, #12]
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003f98:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003f9a:	68fb      	ldr	r3, [r7, #12]
 8003f9c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f9e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003fa2:	d10f      	bne.n	8003fc4 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 8003fa4:	68fb      	ldr	r3, [r7, #12]
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	681a      	ldr	r2, [r3, #0]
 8003faa:	68fb      	ldr	r3, [r7, #12]
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003fb2:	601a      	str	r2, [r3, #0]
 8003fb4:	68fb      	ldr	r3, [r7, #12]
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	681a      	ldr	r2, [r3, #0]
 8003fba:	68fb      	ldr	r3, [r7, #12]
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003fc2:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003fc4:	68fb      	ldr	r3, [r7, #12]
 8003fc6:	2201      	movs	r2, #1
 8003fc8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003fcc:	68fb      	ldr	r3, [r7, #12]
 8003fce:	2200      	movs	r2, #0
 8003fd0:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8003fd4:	2303      	movs	r3, #3
 8003fd6:	e00f      	b.n	8003ff8 <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003fd8:	68fb      	ldr	r3, [r7, #12]
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	689a      	ldr	r2, [r3, #8]
 8003fde:	68bb      	ldr	r3, [r7, #8]
 8003fe0:	4013      	ands	r3, r2
 8003fe2:	68ba      	ldr	r2, [r7, #8]
 8003fe4:	429a      	cmp	r2, r3
 8003fe6:	bf0c      	ite	eq
 8003fe8:	2301      	moveq	r3, #1
 8003fea:	2300      	movne	r3, #0
 8003fec:	b2db      	uxtb	r3, r3
 8003fee:	461a      	mov	r2, r3
 8003ff0:	79fb      	ldrb	r3, [r7, #7]
 8003ff2:	429a      	cmp	r2, r3
 8003ff4:	d1a3      	bne.n	8003f3e <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 8003ff6:	2300      	movs	r3, #0
}
 8003ff8:	4618      	mov	r0, r3
 8003ffa:	3710      	adds	r7, #16
 8003ffc:	46bd      	mov	sp, r7
 8003ffe:	bd80      	pop	{r7, pc}

08004000 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004000:	b580      	push	{r7, lr}
 8004002:	b084      	sub	sp, #16
 8004004:	af00      	add	r7, sp, #0
 8004006:	60f8      	str	r0, [r7, #12]
 8004008:	60b9      	str	r1, [r7, #8]
 800400a:	607a      	str	r2, [r7, #4]
 800400c:	603b      	str	r3, [r7, #0]
  while ((hspi->Instance->SR & Fifo) != State)
 800400e:	e057      	b.n	80040c0 <SPI_WaitFifoStateUntilTimeout+0xc0>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8004010:	68bb      	ldr	r3, [r7, #8]
 8004012:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8004016:	d106      	bne.n	8004026 <SPI_WaitFifoStateUntilTimeout+0x26>
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	2b00      	cmp	r3, #0
 800401c:	d103      	bne.n	8004026 <SPI_WaitFifoStateUntilTimeout+0x26>
    {
      /* Read 8bit CRC to flush Data Register */
      READ_REG(*((__IO uint8_t *)&hspi->Instance->DR));
 800401e:	68fb      	ldr	r3, [r7, #12]
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	330c      	adds	r3, #12
 8004024:	781b      	ldrb	r3, [r3, #0]
    }

    if (Timeout != HAL_MAX_DELAY)
 8004026:	683b      	ldr	r3, [r7, #0]
 8004028:	f1b3 3fff 	cmp.w	r3, #4294967295
 800402c:	d048      	beq.n	80040c0 <SPI_WaitFifoStateUntilTimeout+0xc0>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 800402e:	f7fd fa81 	bl	8001534 <HAL_GetTick>
 8004032:	4602      	mov	r2, r0
 8004034:	69bb      	ldr	r3, [r7, #24]
 8004036:	1ad3      	subs	r3, r2, r3
 8004038:	683a      	ldr	r2, [r7, #0]
 800403a:	429a      	cmp	r2, r3
 800403c:	d902      	bls.n	8004044 <SPI_WaitFifoStateUntilTimeout+0x44>
 800403e:	683b      	ldr	r3, [r7, #0]
 8004040:	2b00      	cmp	r3, #0
 8004042:	d13d      	bne.n	80040c0 <SPI_WaitFifoStateUntilTimeout+0xc0>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004044:	68fb      	ldr	r3, [r7, #12]
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	685a      	ldr	r2, [r3, #4]
 800404a:	68fb      	ldr	r3, [r7, #12]
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8004052:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004054:	68fb      	ldr	r3, [r7, #12]
 8004056:	685b      	ldr	r3, [r3, #4]
 8004058:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800405c:	d111      	bne.n	8004082 <SPI_WaitFifoStateUntilTimeout+0x82>
 800405e:	68fb      	ldr	r3, [r7, #12]
 8004060:	689b      	ldr	r3, [r3, #8]
 8004062:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004066:	d004      	beq.n	8004072 <SPI_WaitFifoStateUntilTimeout+0x72>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004068:	68fb      	ldr	r3, [r7, #12]
 800406a:	689b      	ldr	r3, [r3, #8]
 800406c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004070:	d107      	bne.n	8004082 <SPI_WaitFifoStateUntilTimeout+0x82>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004072:	68fb      	ldr	r3, [r7, #12]
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	681a      	ldr	r2, [r3, #0]
 8004078:	68fb      	ldr	r3, [r7, #12]
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004080:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004082:	68fb      	ldr	r3, [r7, #12]
 8004084:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004086:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800408a:	d10f      	bne.n	80040ac <SPI_WaitFifoStateUntilTimeout+0xac>
        {
          SPI_RESET_CRC(hspi);
 800408c:	68fb      	ldr	r3, [r7, #12]
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	681a      	ldr	r2, [r3, #0]
 8004092:	68fb      	ldr	r3, [r7, #12]
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800409a:	601a      	str	r2, [r3, #0]
 800409c:	68fb      	ldr	r3, [r7, #12]
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	681a      	ldr	r2, [r3, #0]
 80040a2:	68fb      	ldr	r3, [r7, #12]
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80040aa:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80040ac:	68fb      	ldr	r3, [r7, #12]
 80040ae:	2201      	movs	r2, #1
 80040b0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80040b4:	68fb      	ldr	r3, [r7, #12]
 80040b6:	2200      	movs	r2, #0
 80040b8:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 80040bc:	2303      	movs	r3, #3
 80040be:	e008      	b.n	80040d2 <SPI_WaitFifoStateUntilTimeout+0xd2>
  while ((hspi->Instance->SR & Fifo) != State)
 80040c0:	68fb      	ldr	r3, [r7, #12]
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	689a      	ldr	r2, [r3, #8]
 80040c6:	68bb      	ldr	r3, [r7, #8]
 80040c8:	4013      	ands	r3, r2
 80040ca:	687a      	ldr	r2, [r7, #4]
 80040cc:	429a      	cmp	r2, r3
 80040ce:	d19f      	bne.n	8004010 <SPI_WaitFifoStateUntilTimeout+0x10>
      }
    }
  }

  return HAL_OK;
 80040d0:	2300      	movs	r3, #0
}
 80040d2:	4618      	mov	r0, r3
 80040d4:	3710      	adds	r7, #16
 80040d6:	46bd      	mov	sp, r7
 80040d8:	bd80      	pop	{r7, pc}

080040da <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80040da:	b580      	push	{r7, lr}
 80040dc:	b086      	sub	sp, #24
 80040de:	af02      	add	r7, sp, #8
 80040e0:	60f8      	str	r0, [r7, #12]
 80040e2:	60b9      	str	r1, [r7, #8]
 80040e4:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	9300      	str	r3, [sp, #0]
 80040ea:	68bb      	ldr	r3, [r7, #8]
 80040ec:	2200      	movs	r2, #0
 80040ee:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 80040f2:	68f8      	ldr	r0, [r7, #12]
 80040f4:	f7ff ff84 	bl	8004000 <SPI_WaitFifoStateUntilTimeout>
 80040f8:	4603      	mov	r3, r0
 80040fa:	2b00      	cmp	r3, #0
 80040fc:	d007      	beq.n	800410e <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80040fe:	68fb      	ldr	r3, [r7, #12]
 8004100:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004102:	f043 0220 	orr.w	r2, r3, #32
 8004106:	68fb      	ldr	r3, [r7, #12]
 8004108:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800410a:	2303      	movs	r3, #3
 800410c:	e027      	b.n	800415e <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	9300      	str	r3, [sp, #0]
 8004112:	68bb      	ldr	r3, [r7, #8]
 8004114:	2200      	movs	r2, #0
 8004116:	2180      	movs	r1, #128	; 0x80
 8004118:	68f8      	ldr	r0, [r7, #12]
 800411a:	f7ff ff07 	bl	8003f2c <SPI_WaitFlagStateUntilTimeout>
 800411e:	4603      	mov	r3, r0
 8004120:	2b00      	cmp	r3, #0
 8004122:	d007      	beq.n	8004134 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004124:	68fb      	ldr	r3, [r7, #12]
 8004126:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004128:	f043 0220 	orr.w	r2, r3, #32
 800412c:	68fb      	ldr	r3, [r7, #12]
 800412e:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8004130:	2303      	movs	r3, #3
 8004132:	e014      	b.n	800415e <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	9300      	str	r3, [sp, #0]
 8004138:	68bb      	ldr	r3, [r7, #8]
 800413a:	2200      	movs	r2, #0
 800413c:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8004140:	68f8      	ldr	r0, [r7, #12]
 8004142:	f7ff ff5d 	bl	8004000 <SPI_WaitFifoStateUntilTimeout>
 8004146:	4603      	mov	r3, r0
 8004148:	2b00      	cmp	r3, #0
 800414a:	d007      	beq.n	800415c <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800414c:	68fb      	ldr	r3, [r7, #12]
 800414e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004150:	f043 0220 	orr.w	r2, r3, #32
 8004154:	68fb      	ldr	r3, [r7, #12]
 8004156:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8004158:	2303      	movs	r3, #3
 800415a:	e000      	b.n	800415e <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 800415c:	2300      	movs	r3, #0
}
 800415e:	4618      	mov	r0, r3
 8004160:	3710      	adds	r7, #16
 8004162:	46bd      	mov	sp, r7
 8004164:	bd80      	pop	{r7, pc}

08004166 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004166:	b580      	push	{r7, lr}
 8004168:	b082      	sub	sp, #8
 800416a:	af00      	add	r7, sp, #0
 800416c:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	2b00      	cmp	r3, #0
 8004172:	d101      	bne.n	8004178 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004174:	2301      	movs	r3, #1
 8004176:	e040      	b.n	80041fa <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800417c:	2b00      	cmp	r3, #0
 800417e:	d106      	bne.n	800418e <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	2200      	movs	r2, #0
 8004184:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004188:	6878      	ldr	r0, [r7, #4]
 800418a:	f7fd f879 	bl	8001280 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	2224      	movs	r2, #36	; 0x24
 8004192:	675a      	str	r2, [r3, #116]	; 0x74

  __HAL_UART_DISABLE(huart);
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	681a      	ldr	r2, [r3, #0]
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	f022 0201 	bic.w	r2, r2, #1
 80041a2:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80041a4:	6878      	ldr	r0, [r7, #4]
 80041a6:	f000 f82d 	bl	8004204 <UART_SetConfig>
 80041aa:	4603      	mov	r3, r0
 80041ac:	2b01      	cmp	r3, #1
 80041ae:	d101      	bne.n	80041b4 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 80041b0:	2301      	movs	r3, #1
 80041b2:	e022      	b.n	80041fa <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041b8:	2b00      	cmp	r3, #0
 80041ba:	d002      	beq.n	80041c2 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80041bc:	6878      	ldr	r0, [r7, #4]
 80041be:	f000 fb69 	bl	8004894 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	685a      	ldr	r2, [r3, #4]
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80041d0:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	689a      	ldr	r2, [r3, #8]
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80041e0:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	681a      	ldr	r2, [r3, #0]
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	f042 0201 	orr.w	r2, r2, #1
 80041f0:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80041f2:	6878      	ldr	r0, [r7, #4]
 80041f4:	f000 fbf0 	bl	80049d8 <UART_CheckIdleState>
 80041f8:	4603      	mov	r3, r0
}
 80041fa:	4618      	mov	r0, r3
 80041fc:	3708      	adds	r7, #8
 80041fe:	46bd      	mov	sp, r7
 8004200:	bd80      	pop	{r7, pc}
	...

08004204 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004204:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 8004208:	b088      	sub	sp, #32
 800420a:	af00      	add	r7, sp, #0
 800420c:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 800420e:	2300      	movs	r3, #0
 8004210:	617b      	str	r3, [r7, #20]
  HAL_StatusTypeDef ret               = HAL_OK;
 8004212:	2300      	movs	r3, #0
 8004214:	74fb      	strb	r3, [r7, #19]
  uint32_t lpuart_ker_ck_pres         = 0x00000000U;
 8004216:	2300      	movs	r3, #0
 8004218:	60fb      	str	r3, [r7, #12]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	689a      	ldr	r2, [r3, #8]
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	691b      	ldr	r3, [r3, #16]
 8004222:	431a      	orrs	r2, r3
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	695b      	ldr	r3, [r3, #20]
 8004228:	431a      	orrs	r2, r3
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	69db      	ldr	r3, [r3, #28]
 800422e:	4313      	orrs	r3, r2
 8004230:	61fb      	str	r3, [r7, #28]
#if defined(USART_CR1_FIFOEN)
  tmpreg |= (uint32_t)huart->FifoMode;
#endif /* USART_CR1_FIFOEN */
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	681a      	ldr	r2, [r3, #0]
 8004238:	4bac      	ldr	r3, [pc, #688]	; (80044ec <UART_SetConfig+0x2e8>)
 800423a:	4013      	ands	r3, r2
 800423c:	687a      	ldr	r2, [r7, #4]
 800423e:	6812      	ldr	r2, [r2, #0]
 8004240:	69f9      	ldr	r1, [r7, #28]
 8004242:	430b      	orrs	r3, r1
 8004244:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	685b      	ldr	r3, [r3, #4]
 800424c:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	68da      	ldr	r2, [r3, #12]
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	430a      	orrs	r2, r1
 800425a:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	699b      	ldr	r3, [r3, #24]
 8004260:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	4aa2      	ldr	r2, [pc, #648]	; (80044f0 <UART_SetConfig+0x2ec>)
 8004268:	4293      	cmp	r3, r2
 800426a:	d004      	beq.n	8004276 <UART_SetConfig+0x72>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	6a1b      	ldr	r3, [r3, #32]
 8004270:	69fa      	ldr	r2, [r7, #28]
 8004272:	4313      	orrs	r3, r2
 8004274:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	689b      	ldr	r3, [r3, #8]
 800427c:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	69fa      	ldr	r2, [r7, #28]
 8004286:	430a      	orrs	r2, r1
 8004288:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	4a99      	ldr	r2, [pc, #612]	; (80044f4 <UART_SetConfig+0x2f0>)
 8004290:	4293      	cmp	r3, r2
 8004292:	d121      	bne.n	80042d8 <UART_SetConfig+0xd4>
 8004294:	4b98      	ldr	r3, [pc, #608]	; (80044f8 <UART_SetConfig+0x2f4>)
 8004296:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800429a:	f003 0303 	and.w	r3, r3, #3
 800429e:	2b03      	cmp	r3, #3
 80042a0:	d816      	bhi.n	80042d0 <UART_SetConfig+0xcc>
 80042a2:	a201      	add	r2, pc, #4	; (adr r2, 80042a8 <UART_SetConfig+0xa4>)
 80042a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80042a8:	080042b9 	.word	0x080042b9
 80042ac:	080042c5 	.word	0x080042c5
 80042b0:	080042bf 	.word	0x080042bf
 80042b4:	080042cb 	.word	0x080042cb
 80042b8:	2301      	movs	r3, #1
 80042ba:	76fb      	strb	r3, [r7, #27]
 80042bc:	e0e8      	b.n	8004490 <UART_SetConfig+0x28c>
 80042be:	2302      	movs	r3, #2
 80042c0:	76fb      	strb	r3, [r7, #27]
 80042c2:	e0e5      	b.n	8004490 <UART_SetConfig+0x28c>
 80042c4:	2304      	movs	r3, #4
 80042c6:	76fb      	strb	r3, [r7, #27]
 80042c8:	e0e2      	b.n	8004490 <UART_SetConfig+0x28c>
 80042ca:	2308      	movs	r3, #8
 80042cc:	76fb      	strb	r3, [r7, #27]
 80042ce:	e0df      	b.n	8004490 <UART_SetConfig+0x28c>
 80042d0:	2310      	movs	r3, #16
 80042d2:	76fb      	strb	r3, [r7, #27]
 80042d4:	bf00      	nop
 80042d6:	e0db      	b.n	8004490 <UART_SetConfig+0x28c>
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	4a87      	ldr	r2, [pc, #540]	; (80044fc <UART_SetConfig+0x2f8>)
 80042de:	4293      	cmp	r3, r2
 80042e0:	d134      	bne.n	800434c <UART_SetConfig+0x148>
 80042e2:	4b85      	ldr	r3, [pc, #532]	; (80044f8 <UART_SetConfig+0x2f4>)
 80042e4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80042e8:	f003 030c 	and.w	r3, r3, #12
 80042ec:	2b0c      	cmp	r3, #12
 80042ee:	d829      	bhi.n	8004344 <UART_SetConfig+0x140>
 80042f0:	a201      	add	r2, pc, #4	; (adr r2, 80042f8 <UART_SetConfig+0xf4>)
 80042f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80042f6:	bf00      	nop
 80042f8:	0800432d 	.word	0x0800432d
 80042fc:	08004345 	.word	0x08004345
 8004300:	08004345 	.word	0x08004345
 8004304:	08004345 	.word	0x08004345
 8004308:	08004339 	.word	0x08004339
 800430c:	08004345 	.word	0x08004345
 8004310:	08004345 	.word	0x08004345
 8004314:	08004345 	.word	0x08004345
 8004318:	08004333 	.word	0x08004333
 800431c:	08004345 	.word	0x08004345
 8004320:	08004345 	.word	0x08004345
 8004324:	08004345 	.word	0x08004345
 8004328:	0800433f 	.word	0x0800433f
 800432c:	2300      	movs	r3, #0
 800432e:	76fb      	strb	r3, [r7, #27]
 8004330:	e0ae      	b.n	8004490 <UART_SetConfig+0x28c>
 8004332:	2302      	movs	r3, #2
 8004334:	76fb      	strb	r3, [r7, #27]
 8004336:	e0ab      	b.n	8004490 <UART_SetConfig+0x28c>
 8004338:	2304      	movs	r3, #4
 800433a:	76fb      	strb	r3, [r7, #27]
 800433c:	e0a8      	b.n	8004490 <UART_SetConfig+0x28c>
 800433e:	2308      	movs	r3, #8
 8004340:	76fb      	strb	r3, [r7, #27]
 8004342:	e0a5      	b.n	8004490 <UART_SetConfig+0x28c>
 8004344:	2310      	movs	r3, #16
 8004346:	76fb      	strb	r3, [r7, #27]
 8004348:	bf00      	nop
 800434a:	e0a1      	b.n	8004490 <UART_SetConfig+0x28c>
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	4a6b      	ldr	r2, [pc, #428]	; (8004500 <UART_SetConfig+0x2fc>)
 8004352:	4293      	cmp	r3, r2
 8004354:	d120      	bne.n	8004398 <UART_SetConfig+0x194>
 8004356:	4b68      	ldr	r3, [pc, #416]	; (80044f8 <UART_SetConfig+0x2f4>)
 8004358:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800435c:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8004360:	2b10      	cmp	r3, #16
 8004362:	d00f      	beq.n	8004384 <UART_SetConfig+0x180>
 8004364:	2b10      	cmp	r3, #16
 8004366:	d802      	bhi.n	800436e <UART_SetConfig+0x16a>
 8004368:	2b00      	cmp	r3, #0
 800436a:	d005      	beq.n	8004378 <UART_SetConfig+0x174>
 800436c:	e010      	b.n	8004390 <UART_SetConfig+0x18c>
 800436e:	2b20      	cmp	r3, #32
 8004370:	d005      	beq.n	800437e <UART_SetConfig+0x17a>
 8004372:	2b30      	cmp	r3, #48	; 0x30
 8004374:	d009      	beq.n	800438a <UART_SetConfig+0x186>
 8004376:	e00b      	b.n	8004390 <UART_SetConfig+0x18c>
 8004378:	2300      	movs	r3, #0
 800437a:	76fb      	strb	r3, [r7, #27]
 800437c:	e088      	b.n	8004490 <UART_SetConfig+0x28c>
 800437e:	2302      	movs	r3, #2
 8004380:	76fb      	strb	r3, [r7, #27]
 8004382:	e085      	b.n	8004490 <UART_SetConfig+0x28c>
 8004384:	2304      	movs	r3, #4
 8004386:	76fb      	strb	r3, [r7, #27]
 8004388:	e082      	b.n	8004490 <UART_SetConfig+0x28c>
 800438a:	2308      	movs	r3, #8
 800438c:	76fb      	strb	r3, [r7, #27]
 800438e:	e07f      	b.n	8004490 <UART_SetConfig+0x28c>
 8004390:	2310      	movs	r3, #16
 8004392:	76fb      	strb	r3, [r7, #27]
 8004394:	bf00      	nop
 8004396:	e07b      	b.n	8004490 <UART_SetConfig+0x28c>
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	4a59      	ldr	r2, [pc, #356]	; (8004504 <UART_SetConfig+0x300>)
 800439e:	4293      	cmp	r3, r2
 80043a0:	d120      	bne.n	80043e4 <UART_SetConfig+0x1e0>
 80043a2:	4b55      	ldr	r3, [pc, #340]	; (80044f8 <UART_SetConfig+0x2f4>)
 80043a4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80043a8:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80043ac:	2b40      	cmp	r3, #64	; 0x40
 80043ae:	d00f      	beq.n	80043d0 <UART_SetConfig+0x1cc>
 80043b0:	2b40      	cmp	r3, #64	; 0x40
 80043b2:	d802      	bhi.n	80043ba <UART_SetConfig+0x1b6>
 80043b4:	2b00      	cmp	r3, #0
 80043b6:	d005      	beq.n	80043c4 <UART_SetConfig+0x1c0>
 80043b8:	e010      	b.n	80043dc <UART_SetConfig+0x1d8>
 80043ba:	2b80      	cmp	r3, #128	; 0x80
 80043bc:	d005      	beq.n	80043ca <UART_SetConfig+0x1c6>
 80043be:	2bc0      	cmp	r3, #192	; 0xc0
 80043c0:	d009      	beq.n	80043d6 <UART_SetConfig+0x1d2>
 80043c2:	e00b      	b.n	80043dc <UART_SetConfig+0x1d8>
 80043c4:	2300      	movs	r3, #0
 80043c6:	76fb      	strb	r3, [r7, #27]
 80043c8:	e062      	b.n	8004490 <UART_SetConfig+0x28c>
 80043ca:	2302      	movs	r3, #2
 80043cc:	76fb      	strb	r3, [r7, #27]
 80043ce:	e05f      	b.n	8004490 <UART_SetConfig+0x28c>
 80043d0:	2304      	movs	r3, #4
 80043d2:	76fb      	strb	r3, [r7, #27]
 80043d4:	e05c      	b.n	8004490 <UART_SetConfig+0x28c>
 80043d6:	2308      	movs	r3, #8
 80043d8:	76fb      	strb	r3, [r7, #27]
 80043da:	e059      	b.n	8004490 <UART_SetConfig+0x28c>
 80043dc:	2310      	movs	r3, #16
 80043de:	76fb      	strb	r3, [r7, #27]
 80043e0:	bf00      	nop
 80043e2:	e055      	b.n	8004490 <UART_SetConfig+0x28c>
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	4a47      	ldr	r2, [pc, #284]	; (8004508 <UART_SetConfig+0x304>)
 80043ea:	4293      	cmp	r3, r2
 80043ec:	d124      	bne.n	8004438 <UART_SetConfig+0x234>
 80043ee:	4b42      	ldr	r3, [pc, #264]	; (80044f8 <UART_SetConfig+0x2f4>)
 80043f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80043f4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80043f8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80043fc:	d012      	beq.n	8004424 <UART_SetConfig+0x220>
 80043fe:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004402:	d802      	bhi.n	800440a <UART_SetConfig+0x206>
 8004404:	2b00      	cmp	r3, #0
 8004406:	d007      	beq.n	8004418 <UART_SetConfig+0x214>
 8004408:	e012      	b.n	8004430 <UART_SetConfig+0x22c>
 800440a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800440e:	d006      	beq.n	800441e <UART_SetConfig+0x21a>
 8004410:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004414:	d009      	beq.n	800442a <UART_SetConfig+0x226>
 8004416:	e00b      	b.n	8004430 <UART_SetConfig+0x22c>
 8004418:	2300      	movs	r3, #0
 800441a:	76fb      	strb	r3, [r7, #27]
 800441c:	e038      	b.n	8004490 <UART_SetConfig+0x28c>
 800441e:	2302      	movs	r3, #2
 8004420:	76fb      	strb	r3, [r7, #27]
 8004422:	e035      	b.n	8004490 <UART_SetConfig+0x28c>
 8004424:	2304      	movs	r3, #4
 8004426:	76fb      	strb	r3, [r7, #27]
 8004428:	e032      	b.n	8004490 <UART_SetConfig+0x28c>
 800442a:	2308      	movs	r3, #8
 800442c:	76fb      	strb	r3, [r7, #27]
 800442e:	e02f      	b.n	8004490 <UART_SetConfig+0x28c>
 8004430:	2310      	movs	r3, #16
 8004432:	76fb      	strb	r3, [r7, #27]
 8004434:	bf00      	nop
 8004436:	e02b      	b.n	8004490 <UART_SetConfig+0x28c>
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	4a2c      	ldr	r2, [pc, #176]	; (80044f0 <UART_SetConfig+0x2ec>)
 800443e:	4293      	cmp	r3, r2
 8004440:	d124      	bne.n	800448c <UART_SetConfig+0x288>
 8004442:	4b2d      	ldr	r3, [pc, #180]	; (80044f8 <UART_SetConfig+0x2f4>)
 8004444:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004448:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800444c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004450:	d012      	beq.n	8004478 <UART_SetConfig+0x274>
 8004452:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004456:	d802      	bhi.n	800445e <UART_SetConfig+0x25a>
 8004458:	2b00      	cmp	r3, #0
 800445a:	d007      	beq.n	800446c <UART_SetConfig+0x268>
 800445c:	e012      	b.n	8004484 <UART_SetConfig+0x280>
 800445e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004462:	d006      	beq.n	8004472 <UART_SetConfig+0x26e>
 8004464:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004468:	d009      	beq.n	800447e <UART_SetConfig+0x27a>
 800446a:	e00b      	b.n	8004484 <UART_SetConfig+0x280>
 800446c:	2300      	movs	r3, #0
 800446e:	76fb      	strb	r3, [r7, #27]
 8004470:	e00e      	b.n	8004490 <UART_SetConfig+0x28c>
 8004472:	2302      	movs	r3, #2
 8004474:	76fb      	strb	r3, [r7, #27]
 8004476:	e00b      	b.n	8004490 <UART_SetConfig+0x28c>
 8004478:	2304      	movs	r3, #4
 800447a:	76fb      	strb	r3, [r7, #27]
 800447c:	e008      	b.n	8004490 <UART_SetConfig+0x28c>
 800447e:	2308      	movs	r3, #8
 8004480:	76fb      	strb	r3, [r7, #27]
 8004482:	e005      	b.n	8004490 <UART_SetConfig+0x28c>
 8004484:	2310      	movs	r3, #16
 8004486:	76fb      	strb	r3, [r7, #27]
 8004488:	bf00      	nop
 800448a:	e001      	b.n	8004490 <UART_SetConfig+0x28c>
 800448c:	2310      	movs	r3, #16
 800448e:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	4a16      	ldr	r2, [pc, #88]	; (80044f0 <UART_SetConfig+0x2ec>)
 8004496:	4293      	cmp	r3, r2
 8004498:	f040 80fa 	bne.w	8004690 <UART_SetConfig+0x48c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800449c:	7efb      	ldrb	r3, [r7, #27]
 800449e:	2b08      	cmp	r3, #8
 80044a0:	d836      	bhi.n	8004510 <UART_SetConfig+0x30c>
 80044a2:	a201      	add	r2, pc, #4	; (adr r2, 80044a8 <UART_SetConfig+0x2a4>)
 80044a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80044a8:	080044cd 	.word	0x080044cd
 80044ac:	08004511 	.word	0x08004511
 80044b0:	080044d5 	.word	0x080044d5
 80044b4:	08004511 	.word	0x08004511
 80044b8:	080044db 	.word	0x080044db
 80044bc:	08004511 	.word	0x08004511
 80044c0:	08004511 	.word	0x08004511
 80044c4:	08004511 	.word	0x08004511
 80044c8:	080044e3 	.word	0x080044e3
    {
      case UART_CLOCKSOURCE_PCLK1:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = (HAL_RCC_GetPCLK1Freq() / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
#else
        lpuart_ker_ck_pres = HAL_RCC_GetPCLK1Freq();
 80044cc:	f7fe f9b8 	bl	8002840 <HAL_RCC_GetPCLK1Freq>
 80044d0:	60f8      	str	r0, [r7, #12]
#endif /* USART_PRESC_PRESCALER */
        break;
 80044d2:	e020      	b.n	8004516 <UART_SetConfig+0x312>
      case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = ((uint32_t)HSI_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
#else
        lpuart_ker_ck_pres = (uint32_t)HSI_VALUE;
 80044d4:	4b0d      	ldr	r3, [pc, #52]	; (800450c <UART_SetConfig+0x308>)
 80044d6:	60fb      	str	r3, [r7, #12]
#endif /* USART_PRESC_PRESCALER */
        break;
 80044d8:	e01d      	b.n	8004516 <UART_SetConfig+0x312>
      case UART_CLOCKSOURCE_SYSCLK:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = (HAL_RCC_GetSysClockFreq() / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
#else
        lpuart_ker_ck_pres = HAL_RCC_GetSysClockFreq();
 80044da:	f7fe f91b 	bl	8002714 <HAL_RCC_GetSysClockFreq>
 80044de:	60f8      	str	r0, [r7, #12]
#endif /* USART_PRESC_PRESCALER */
        break;
 80044e0:	e019      	b.n	8004516 <UART_SetConfig+0x312>
      case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = ((uint32_t)LSE_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
#else
        lpuart_ker_ck_pres = (uint32_t)LSE_VALUE;
 80044e2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80044e6:	60fb      	str	r3, [r7, #12]
#endif /* USART_PRESC_PRESCALER */
        break;
 80044e8:	e015      	b.n	8004516 <UART_SetConfig+0x312>
 80044ea:	bf00      	nop
 80044ec:	efff69f3 	.word	0xefff69f3
 80044f0:	40008000 	.word	0x40008000
 80044f4:	40013800 	.word	0x40013800
 80044f8:	40021000 	.word	0x40021000
 80044fc:	40004400 	.word	0x40004400
 8004500:	40004800 	.word	0x40004800
 8004504:	40004c00 	.word	0x40004c00
 8004508:	40005000 	.word	0x40005000
 800450c:	00f42400 	.word	0x00f42400
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 8004510:	2301      	movs	r3, #1
 8004512:	74fb      	strb	r3, [r7, #19]
        break;
 8004514:	bf00      	nop
    }

    /* if proper clock source reported */
    if (lpuart_ker_ck_pres != 0U)
 8004516:	68fb      	ldr	r3, [r7, #12]
 8004518:	2b00      	cmp	r3, #0
 800451a:	f000 81ac 	beq.w	8004876 <UART_SetConfig+0x672>
    {
      /* ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	685a      	ldr	r2, [r3, #4]
 8004522:	4613      	mov	r3, r2
 8004524:	005b      	lsls	r3, r3, #1
 8004526:	4413      	add	r3, r2
 8004528:	68fa      	ldr	r2, [r7, #12]
 800452a:	429a      	cmp	r2, r3
 800452c:	d305      	bcc.n	800453a <UART_SetConfig+0x336>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	685b      	ldr	r3, [r3, #4]
 8004532:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8004534:	68fa      	ldr	r2, [r7, #12]
 8004536:	429a      	cmp	r2, r3
 8004538:	d902      	bls.n	8004540 <UART_SetConfig+0x33c>
      {
        ret = HAL_ERROR;
 800453a:	2301      	movs	r3, #1
 800453c:	74fb      	strb	r3, [r7, #19]
 800453e:	e19a      	b.n	8004876 <UART_SetConfig+0x672>
      }
      else
      {
        switch (clocksource)
 8004540:	7efb      	ldrb	r3, [r7, #27]
 8004542:	2b08      	cmp	r3, #8
 8004544:	f200 8091 	bhi.w	800466a <UART_SetConfig+0x466>
 8004548:	a201      	add	r2, pc, #4	; (adr r2, 8004550 <UART_SetConfig+0x34c>)
 800454a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800454e:	bf00      	nop
 8004550:	08004575 	.word	0x08004575
 8004554:	0800466b 	.word	0x0800466b
 8004558:	080045c1 	.word	0x080045c1
 800455c:	0800466b 	.word	0x0800466b
 8004560:	080045f5 	.word	0x080045f5
 8004564:	0800466b 	.word	0x0800466b
 8004568:	0800466b 	.word	0x0800466b
 800456c:	0800466b 	.word	0x0800466b
 8004570:	08004641 	.word	0x08004641
        {
          case UART_CLOCKSOURCE_PCLK1:
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8004574:	f7fe f964 	bl	8002840 <HAL_RCC_GetPCLK1Freq>
 8004578:	4603      	mov	r3, r0
 800457a:	4619      	mov	r1, r3
 800457c:	f04f 0200 	mov.w	r2, #0
 8004580:	f04f 0300 	mov.w	r3, #0
 8004584:	f04f 0400 	mov.w	r4, #0
 8004588:	0214      	lsls	r4, r2, #8
 800458a:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 800458e:	020b      	lsls	r3, r1, #8
 8004590:	687a      	ldr	r2, [r7, #4]
 8004592:	6852      	ldr	r2, [r2, #4]
 8004594:	0852      	lsrs	r2, r2, #1
 8004596:	4611      	mov	r1, r2
 8004598:	f04f 0200 	mov.w	r2, #0
 800459c:	eb13 0b01 	adds.w	fp, r3, r1
 80045a0:	eb44 0c02 	adc.w	ip, r4, r2
 80045a4:	4658      	mov	r0, fp
 80045a6:	4661      	mov	r1, ip
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	685b      	ldr	r3, [r3, #4]
 80045ac:	f04f 0400 	mov.w	r4, #0
 80045b0:	461a      	mov	r2, r3
 80045b2:	4623      	mov	r3, r4
 80045b4:	f7fb fe6c 	bl	8000290 <__aeabi_uldivmod>
 80045b8:	4603      	mov	r3, r0
 80045ba:	460c      	mov	r4, r1
 80045bc:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
            break;
 80045be:	e057      	b.n	8004670 <UART_SetConfig+0x46c>
          case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate));
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	685b      	ldr	r3, [r3, #4]
 80045c4:	085b      	lsrs	r3, r3, #1
 80045c6:	f04f 0400 	mov.w	r4, #0
 80045ca:	49b1      	ldr	r1, [pc, #708]	; (8004890 <UART_SetConfig+0x68c>)
 80045cc:	f04f 0200 	mov.w	r2, #0
 80045d0:	eb13 0b01 	adds.w	fp, r3, r1
 80045d4:	eb44 0c02 	adc.w	ip, r4, r2
 80045d8:	4658      	mov	r0, fp
 80045da:	4661      	mov	r1, ip
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	685b      	ldr	r3, [r3, #4]
 80045e0:	f04f 0400 	mov.w	r4, #0
 80045e4:	461a      	mov	r2, r3
 80045e6:	4623      	mov	r3, r4
 80045e8:	f7fb fe52 	bl	8000290 <__aeabi_uldivmod>
 80045ec:	4603      	mov	r3, r0
 80045ee:	460c      	mov	r4, r1
 80045f0:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
            break;
 80045f2:	e03d      	b.n	8004670 <UART_SetConfig+0x46c>
          case UART_CLOCKSOURCE_SYSCLK:
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 80045f4:	f7fe f88e 	bl	8002714 <HAL_RCC_GetSysClockFreq>
 80045f8:	4603      	mov	r3, r0
 80045fa:	4619      	mov	r1, r3
 80045fc:	f04f 0200 	mov.w	r2, #0
 8004600:	f04f 0300 	mov.w	r3, #0
 8004604:	f04f 0400 	mov.w	r4, #0
 8004608:	0214      	lsls	r4, r2, #8
 800460a:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 800460e:	020b      	lsls	r3, r1, #8
 8004610:	687a      	ldr	r2, [r7, #4]
 8004612:	6852      	ldr	r2, [r2, #4]
 8004614:	0852      	lsrs	r2, r2, #1
 8004616:	4611      	mov	r1, r2
 8004618:	f04f 0200 	mov.w	r2, #0
 800461c:	eb13 0b01 	adds.w	fp, r3, r1
 8004620:	eb44 0c02 	adc.w	ip, r4, r2
 8004624:	4658      	mov	r0, fp
 8004626:	4661      	mov	r1, ip
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	685b      	ldr	r3, [r3, #4]
 800462c:	f04f 0400 	mov.w	r4, #0
 8004630:	461a      	mov	r2, r3
 8004632:	4623      	mov	r3, r4
 8004634:	f7fb fe2c 	bl	8000290 <__aeabi_uldivmod>
 8004638:	4603      	mov	r3, r0
 800463a:	460c      	mov	r4, r1
 800463c:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
            break;
 800463e:	e017      	b.n	8004670 <UART_SetConfig+0x46c>
          case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate));
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	685b      	ldr	r3, [r3, #4]
 8004644:	085b      	lsrs	r3, r3, #1
 8004646:	f04f 0400 	mov.w	r4, #0
 800464a:	f513 0000 	adds.w	r0, r3, #8388608	; 0x800000
 800464e:	f144 0100 	adc.w	r1, r4, #0
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	685b      	ldr	r3, [r3, #4]
 8004656:	f04f 0400 	mov.w	r4, #0
 800465a:	461a      	mov	r2, r3
 800465c:	4623      	mov	r3, r4
 800465e:	f7fb fe17 	bl	8000290 <__aeabi_uldivmod>
 8004662:	4603      	mov	r3, r0
 8004664:	460c      	mov	r4, r1
 8004666:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
            break;
 8004668:	e002      	b.n	8004670 <UART_SetConfig+0x46c>
          case UART_CLOCKSOURCE_UNDEFINED:
          default:
            ret = HAL_ERROR;
 800466a:	2301      	movs	r3, #1
 800466c:	74fb      	strb	r3, [r7, #19]
            break;
 800466e:	bf00      	nop
        }

        /* It is forbidden to write values lower than 0x300 in the LPUART_BRR register */
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8004670:	697b      	ldr	r3, [r7, #20]
 8004672:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004676:	d308      	bcc.n	800468a <UART_SetConfig+0x486>
 8004678:	697b      	ldr	r3, [r7, #20]
 800467a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800467e:	d204      	bcs.n	800468a <UART_SetConfig+0x486>
        {
          huart->Instance->BRR = usartdiv;
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	697a      	ldr	r2, [r7, #20]
 8004686:	60da      	str	r2, [r3, #12]
 8004688:	e0f5      	b.n	8004876 <UART_SetConfig+0x672>
        }
        else
        {
          ret = HAL_ERROR;
 800468a:	2301      	movs	r3, #1
 800468c:	74fb      	strb	r3, [r7, #19]
 800468e:	e0f2      	b.n	8004876 <UART_SetConfig+0x672>
        }
      } /*   if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) || (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (lpuart_ker_ck_pres != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	69db      	ldr	r3, [r3, #28]
 8004694:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004698:	d17f      	bne.n	800479a <UART_SetConfig+0x596>
  {
    switch (clocksource)
 800469a:	7efb      	ldrb	r3, [r7, #27]
 800469c:	2b08      	cmp	r3, #8
 800469e:	d85c      	bhi.n	800475a <UART_SetConfig+0x556>
 80046a0:	a201      	add	r2, pc, #4	; (adr r2, 80046a8 <UART_SetConfig+0x4a4>)
 80046a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80046a6:	bf00      	nop
 80046a8:	080046cd 	.word	0x080046cd
 80046ac:	080046eb 	.word	0x080046eb
 80046b0:	08004709 	.word	0x08004709
 80046b4:	0800475b 	.word	0x0800475b
 80046b8:	08004725 	.word	0x08004725
 80046bc:	0800475b 	.word	0x0800475b
 80046c0:	0800475b 	.word	0x0800475b
 80046c4:	0800475b 	.word	0x0800475b
 80046c8:	08004743 	.word	0x08004743
    {
      case UART_CLOCKSOURCE_PCLK1:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 80046cc:	f7fe f8b8 	bl	8002840 <HAL_RCC_GetPCLK1Freq>
 80046d0:	4603      	mov	r3, r0
 80046d2:	005a      	lsls	r2, r3, #1
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	685b      	ldr	r3, [r3, #4]
 80046d8:	085b      	lsrs	r3, r3, #1
 80046da:	441a      	add	r2, r3
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	685b      	ldr	r3, [r3, #4]
 80046e0:	fbb2 f3f3 	udiv	r3, r2, r3
 80046e4:	b29b      	uxth	r3, r3
 80046e6:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 80046e8:	e03a      	b.n	8004760 <UART_SetConfig+0x55c>
      case UART_CLOCKSOURCE_PCLK2:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 80046ea:	f7fe f8bf 	bl	800286c <HAL_RCC_GetPCLK2Freq>
 80046ee:	4603      	mov	r3, r0
 80046f0:	005a      	lsls	r2, r3, #1
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	685b      	ldr	r3, [r3, #4]
 80046f6:	085b      	lsrs	r3, r3, #1
 80046f8:	441a      	add	r2, r3
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	685b      	ldr	r3, [r3, #4]
 80046fe:	fbb2 f3f3 	udiv	r3, r2, r3
 8004702:	b29b      	uxth	r3, r3
 8004704:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 8004706:	e02b      	b.n	8004760 <UART_SetConfig+0x55c>
      case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	685b      	ldr	r3, [r3, #4]
 800470c:	085b      	lsrs	r3, r3, #1
 800470e:	f103 73f4 	add.w	r3, r3, #31981568	; 0x1e80000
 8004712:	f503 4390 	add.w	r3, r3, #18432	; 0x4800
 8004716:	687a      	ldr	r2, [r7, #4]
 8004718:	6852      	ldr	r2, [r2, #4]
 800471a:	fbb3 f3f2 	udiv	r3, r3, r2
 800471e:	b29b      	uxth	r3, r3
 8004720:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 8004722:	e01d      	b.n	8004760 <UART_SetConfig+0x55c>
      case UART_CLOCKSOURCE_SYSCLK:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8004724:	f7fd fff6 	bl	8002714 <HAL_RCC_GetSysClockFreq>
 8004728:	4603      	mov	r3, r0
 800472a:	005a      	lsls	r2, r3, #1
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	685b      	ldr	r3, [r3, #4]
 8004730:	085b      	lsrs	r3, r3, #1
 8004732:	441a      	add	r2, r3
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	685b      	ldr	r3, [r3, #4]
 8004738:	fbb2 f3f3 	udiv	r3, r2, r3
 800473c:	b29b      	uxth	r3, r3
 800473e:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 8004740:	e00e      	b.n	8004760 <UART_SetConfig+0x55c>
      case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	685b      	ldr	r3, [r3, #4]
 8004746:	085b      	lsrs	r3, r3, #1
 8004748:	f503 3280 	add.w	r2, r3, #65536	; 0x10000
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	685b      	ldr	r3, [r3, #4]
 8004750:	fbb2 f3f3 	udiv	r3, r2, r3
 8004754:	b29b      	uxth	r3, r3
 8004756:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 8004758:	e002      	b.n	8004760 <UART_SetConfig+0x55c>
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 800475a:	2301      	movs	r3, #1
 800475c:	74fb      	strb	r3, [r7, #19]
        break;
 800475e:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004760:	697b      	ldr	r3, [r7, #20]
 8004762:	2b0f      	cmp	r3, #15
 8004764:	d916      	bls.n	8004794 <UART_SetConfig+0x590>
 8004766:	697b      	ldr	r3, [r7, #20]
 8004768:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800476c:	d212      	bcs.n	8004794 <UART_SetConfig+0x590>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800476e:	697b      	ldr	r3, [r7, #20]
 8004770:	b29b      	uxth	r3, r3
 8004772:	f023 030f 	bic.w	r3, r3, #15
 8004776:	817b      	strh	r3, [r7, #10]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004778:	697b      	ldr	r3, [r7, #20]
 800477a:	085b      	lsrs	r3, r3, #1
 800477c:	b29b      	uxth	r3, r3
 800477e:	f003 0307 	and.w	r3, r3, #7
 8004782:	b29a      	uxth	r2, r3
 8004784:	897b      	ldrh	r3, [r7, #10]
 8004786:	4313      	orrs	r3, r2
 8004788:	817b      	strh	r3, [r7, #10]
      huart->Instance->BRR = brrtemp;
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	897a      	ldrh	r2, [r7, #10]
 8004790:	60da      	str	r2, [r3, #12]
 8004792:	e070      	b.n	8004876 <UART_SetConfig+0x672>
    }
    else
    {
      ret = HAL_ERROR;
 8004794:	2301      	movs	r3, #1
 8004796:	74fb      	strb	r3, [r7, #19]
 8004798:	e06d      	b.n	8004876 <UART_SetConfig+0x672>
    }
  }
  else
  {
    switch (clocksource)
 800479a:	7efb      	ldrb	r3, [r7, #27]
 800479c:	2b08      	cmp	r3, #8
 800479e:	d859      	bhi.n	8004854 <UART_SetConfig+0x650>
 80047a0:	a201      	add	r2, pc, #4	; (adr r2, 80047a8 <UART_SetConfig+0x5a4>)
 80047a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80047a6:	bf00      	nop
 80047a8:	080047cd 	.word	0x080047cd
 80047ac:	080047e9 	.word	0x080047e9
 80047b0:	08004805 	.word	0x08004805
 80047b4:	08004855 	.word	0x08004855
 80047b8:	08004821 	.word	0x08004821
 80047bc:	08004855 	.word	0x08004855
 80047c0:	08004855 	.word	0x08004855
 80047c4:	08004855 	.word	0x08004855
 80047c8:	0800483d 	.word	0x0800483d
    {
      case UART_CLOCKSOURCE_PCLK1:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 80047cc:	f7fe f838 	bl	8002840 <HAL_RCC_GetPCLK1Freq>
 80047d0:	4602      	mov	r2, r0
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	685b      	ldr	r3, [r3, #4]
 80047d6:	085b      	lsrs	r3, r3, #1
 80047d8:	441a      	add	r2, r3
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	685b      	ldr	r3, [r3, #4]
 80047de:	fbb2 f3f3 	udiv	r3, r2, r3
 80047e2:	b29b      	uxth	r3, r3
 80047e4:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 80047e6:	e038      	b.n	800485a <UART_SetConfig+0x656>
      case UART_CLOCKSOURCE_PCLK2:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 80047e8:	f7fe f840 	bl	800286c <HAL_RCC_GetPCLK2Freq>
 80047ec:	4602      	mov	r2, r0
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	685b      	ldr	r3, [r3, #4]
 80047f2:	085b      	lsrs	r3, r3, #1
 80047f4:	441a      	add	r2, r3
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	685b      	ldr	r3, [r3, #4]
 80047fa:	fbb2 f3f3 	udiv	r3, r2, r3
 80047fe:	b29b      	uxth	r3, r3
 8004800:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 8004802:	e02a      	b.n	800485a <UART_SetConfig+0x656>
      case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	685b      	ldr	r3, [r3, #4]
 8004808:	085b      	lsrs	r3, r3, #1
 800480a:	f503 0374 	add.w	r3, r3, #15990784	; 0xf40000
 800480e:	f503 5310 	add.w	r3, r3, #9216	; 0x2400
 8004812:	687a      	ldr	r2, [r7, #4]
 8004814:	6852      	ldr	r2, [r2, #4]
 8004816:	fbb3 f3f2 	udiv	r3, r3, r2
 800481a:	b29b      	uxth	r3, r3
 800481c:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 800481e:	e01c      	b.n	800485a <UART_SetConfig+0x656>
      case UART_CLOCKSOURCE_SYSCLK:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8004820:	f7fd ff78 	bl	8002714 <HAL_RCC_GetSysClockFreq>
 8004824:	4602      	mov	r2, r0
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	685b      	ldr	r3, [r3, #4]
 800482a:	085b      	lsrs	r3, r3, #1
 800482c:	441a      	add	r2, r3
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	685b      	ldr	r3, [r3, #4]
 8004832:	fbb2 f3f3 	udiv	r3, r2, r3
 8004836:	b29b      	uxth	r3, r3
 8004838:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 800483a:	e00e      	b.n	800485a <UART_SetConfig+0x656>
      case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	685b      	ldr	r3, [r3, #4]
 8004840:	085b      	lsrs	r3, r3, #1
 8004842:	f503 4200 	add.w	r2, r3, #32768	; 0x8000
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	685b      	ldr	r3, [r3, #4]
 800484a:	fbb2 f3f3 	udiv	r3, r2, r3
 800484e:	b29b      	uxth	r3, r3
 8004850:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 8004852:	e002      	b.n	800485a <UART_SetConfig+0x656>
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 8004854:	2301      	movs	r3, #1
 8004856:	74fb      	strb	r3, [r7, #19]
        break;
 8004858:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800485a:	697b      	ldr	r3, [r7, #20]
 800485c:	2b0f      	cmp	r3, #15
 800485e:	d908      	bls.n	8004872 <UART_SetConfig+0x66e>
 8004860:	697b      	ldr	r3, [r7, #20]
 8004862:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004866:	d204      	bcs.n	8004872 <UART_SetConfig+0x66e>
    {
      huart->Instance->BRR = usartdiv;
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	697a      	ldr	r2, [r7, #20]
 800486e:	60da      	str	r2, [r3, #12]
 8004870:	e001      	b.n	8004876 <UART_SetConfig+0x672>
    }
    else
    {
      ret = HAL_ERROR;
 8004872:	2301      	movs	r3, #1
 8004874:	74fb      	strb	r3, [r7, #19]
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	2200      	movs	r2, #0
 800487a:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	2200      	movs	r2, #0
 8004880:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 8004882:	7cfb      	ldrb	r3, [r7, #19]
}
 8004884:	4618      	mov	r0, r3
 8004886:	3720      	adds	r7, #32
 8004888:	46bd      	mov	sp, r7
 800488a:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}
 800488e:	bf00      	nop
 8004890:	f4240000 	.word	0xf4240000

08004894 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004894:	b480      	push	{r7}
 8004896:	b083      	sub	sp, #12
 8004898:	af00      	add	r7, sp, #0
 800489a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048a0:	f003 0301 	and.w	r3, r3, #1
 80048a4:	2b00      	cmp	r3, #0
 80048a6:	d00a      	beq.n	80048be <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	685b      	ldr	r3, [r3, #4]
 80048ae:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	430a      	orrs	r2, r1
 80048bc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048c2:	f003 0302 	and.w	r3, r3, #2
 80048c6:	2b00      	cmp	r3, #0
 80048c8:	d00a      	beq.n	80048e0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	685b      	ldr	r3, [r3, #4]
 80048d0:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	430a      	orrs	r2, r1
 80048de:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048e4:	f003 0304 	and.w	r3, r3, #4
 80048e8:	2b00      	cmp	r3, #0
 80048ea:	d00a      	beq.n	8004902 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	685b      	ldr	r3, [r3, #4]
 80048f2:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	430a      	orrs	r2, r1
 8004900:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004906:	f003 0308 	and.w	r3, r3, #8
 800490a:	2b00      	cmp	r3, #0
 800490c:	d00a      	beq.n	8004924 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	685b      	ldr	r3, [r3, #4]
 8004914:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	430a      	orrs	r2, r1
 8004922:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004928:	f003 0310 	and.w	r3, r3, #16
 800492c:	2b00      	cmp	r3, #0
 800492e:	d00a      	beq.n	8004946 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	689b      	ldr	r3, [r3, #8]
 8004936:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	430a      	orrs	r2, r1
 8004944:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800494a:	f003 0320 	and.w	r3, r3, #32
 800494e:	2b00      	cmp	r3, #0
 8004950:	d00a      	beq.n	8004968 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	689b      	ldr	r3, [r3, #8]
 8004958:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	430a      	orrs	r2, r1
 8004966:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800496c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004970:	2b00      	cmp	r3, #0
 8004972:	d01a      	beq.n	80049aa <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	685b      	ldr	r3, [r3, #4]
 800497a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	430a      	orrs	r2, r1
 8004988:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800498e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004992:	d10a      	bne.n	80049aa <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	685b      	ldr	r3, [r3, #4]
 800499a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	430a      	orrs	r2, r1
 80049a8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049ae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80049b2:	2b00      	cmp	r3, #0
 80049b4:	d00a      	beq.n	80049cc <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	685b      	ldr	r3, [r3, #4]
 80049bc:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	430a      	orrs	r2, r1
 80049ca:	605a      	str	r2, [r3, #4]
  }
}
 80049cc:	bf00      	nop
 80049ce:	370c      	adds	r7, #12
 80049d0:	46bd      	mov	sp, r7
 80049d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049d6:	4770      	bx	lr

080049d8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80049d8:	b580      	push	{r7, lr}
 80049da:	b086      	sub	sp, #24
 80049dc:	af02      	add	r7, sp, #8
 80049de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	2200      	movs	r2, #0
 80049e4:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 80049e6:	f7fc fda5 	bl	8001534 <HAL_GetTick>
 80049ea:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	f003 0308 	and.w	r3, r3, #8
 80049f6:	2b08      	cmp	r3, #8
 80049f8:	d10e      	bne.n	8004a18 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80049fa:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80049fe:	9300      	str	r3, [sp, #0]
 8004a00:	68fb      	ldr	r3, [r7, #12]
 8004a02:	2200      	movs	r2, #0
 8004a04:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8004a08:	6878      	ldr	r0, [r7, #4]
 8004a0a:	f000 f82a 	bl	8004a62 <UART_WaitOnFlagUntilTimeout>
 8004a0e:	4603      	mov	r3, r0
 8004a10:	2b00      	cmp	r3, #0
 8004a12:	d001      	beq.n	8004a18 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004a14:	2303      	movs	r3, #3
 8004a16:	e020      	b.n	8004a5a <UART_CheckIdleState+0x82>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	f003 0304 	and.w	r3, r3, #4
 8004a22:	2b04      	cmp	r3, #4
 8004a24:	d10e      	bne.n	8004a44 <UART_CheckIdleState+0x6c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004a26:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004a2a:	9300      	str	r3, [sp, #0]
 8004a2c:	68fb      	ldr	r3, [r7, #12]
 8004a2e:	2200      	movs	r2, #0
 8004a30:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8004a34:	6878      	ldr	r0, [r7, #4]
 8004a36:	f000 f814 	bl	8004a62 <UART_WaitOnFlagUntilTimeout>
 8004a3a:	4603      	mov	r3, r0
 8004a3c:	2b00      	cmp	r3, #0
 8004a3e:	d001      	beq.n	8004a44 <UART_CheckIdleState+0x6c>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004a40:	2303      	movs	r3, #3
 8004a42:	e00a      	b.n	8004a5a <UART_CheckIdleState+0x82>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	2220      	movs	r2, #32
 8004a48:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	2220      	movs	r2, #32
 8004a4e:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UNLOCK(huart);
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	2200      	movs	r2, #0
 8004a54:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 8004a58:	2300      	movs	r3, #0
}
 8004a5a:	4618      	mov	r0, r3
 8004a5c:	3710      	adds	r7, #16
 8004a5e:	46bd      	mov	sp, r7
 8004a60:	bd80      	pop	{r7, pc}

08004a62 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004a62:	b580      	push	{r7, lr}
 8004a64:	b084      	sub	sp, #16
 8004a66:	af00      	add	r7, sp, #0
 8004a68:	60f8      	str	r0, [r7, #12]
 8004a6a:	60b9      	str	r1, [r7, #8]
 8004a6c:	603b      	str	r3, [r7, #0]
 8004a6e:	4613      	mov	r3, r2
 8004a70:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004a72:	e02a      	b.n	8004aca <UART_WaitOnFlagUntilTimeout+0x68>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004a74:	69bb      	ldr	r3, [r7, #24]
 8004a76:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004a7a:	d026      	beq.n	8004aca <UART_WaitOnFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004a7c:	f7fc fd5a 	bl	8001534 <HAL_GetTick>
 8004a80:	4602      	mov	r2, r0
 8004a82:	683b      	ldr	r3, [r7, #0]
 8004a84:	1ad3      	subs	r3, r2, r3
 8004a86:	69ba      	ldr	r2, [r7, #24]
 8004a88:	429a      	cmp	r2, r3
 8004a8a:	d302      	bcc.n	8004a92 <UART_WaitOnFlagUntilTimeout+0x30>
 8004a8c:	69bb      	ldr	r3, [r7, #24]
 8004a8e:	2b00      	cmp	r3, #0
 8004a90:	d11b      	bne.n	8004aca <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004a92:	68fb      	ldr	r3, [r7, #12]
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	681a      	ldr	r2, [r3, #0]
 8004a98:	68fb      	ldr	r3, [r7, #12]
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8004aa0:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004aa2:	68fb      	ldr	r3, [r7, #12]
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	689a      	ldr	r2, [r3, #8]
 8004aa8:	68fb      	ldr	r3, [r7, #12]
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	f022 0201 	bic.w	r2, r2, #1
 8004ab0:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8004ab2:	68fb      	ldr	r3, [r7, #12]
 8004ab4:	2220      	movs	r2, #32
 8004ab6:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 8004ab8:	68fb      	ldr	r3, [r7, #12]
 8004aba:	2220      	movs	r2, #32
 8004abc:	679a      	str	r2, [r3, #120]	; 0x78

        __HAL_UNLOCK(huart);
 8004abe:	68fb      	ldr	r3, [r7, #12]
 8004ac0:	2200      	movs	r2, #0
 8004ac2:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        return HAL_TIMEOUT;
 8004ac6:	2303      	movs	r3, #3
 8004ac8:	e00f      	b.n	8004aea <UART_WaitOnFlagUntilTimeout+0x88>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004aca:	68fb      	ldr	r3, [r7, #12]
 8004acc:	681b      	ldr	r3, [r3, #0]
 8004ace:	69da      	ldr	r2, [r3, #28]
 8004ad0:	68bb      	ldr	r3, [r7, #8]
 8004ad2:	4013      	ands	r3, r2
 8004ad4:	68ba      	ldr	r2, [r7, #8]
 8004ad6:	429a      	cmp	r2, r3
 8004ad8:	bf0c      	ite	eq
 8004ada:	2301      	moveq	r3, #1
 8004adc:	2300      	movne	r3, #0
 8004ade:	b2db      	uxtb	r3, r3
 8004ae0:	461a      	mov	r2, r3
 8004ae2:	79fb      	ldrb	r3, [r7, #7]
 8004ae4:	429a      	cmp	r2, r3
 8004ae6:	d0c5      	beq.n	8004a74 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004ae8:	2300      	movs	r3, #0
}
 8004aea:	4618      	mov	r0, r3
 8004aec:	3710      	adds	r7, #16
 8004aee:	46bd      	mov	sp, r7
 8004af0:	bd80      	pop	{r7, pc}
	...

08004af4 <__errno>:
 8004af4:	4b01      	ldr	r3, [pc, #4]	; (8004afc <__errno+0x8>)
 8004af6:	6818      	ldr	r0, [r3, #0]
 8004af8:	4770      	bx	lr
 8004afa:	bf00      	nop
 8004afc:	2000000c 	.word	0x2000000c

08004b00 <__libc_init_array>:
 8004b00:	b570      	push	{r4, r5, r6, lr}
 8004b02:	4e0d      	ldr	r6, [pc, #52]	; (8004b38 <__libc_init_array+0x38>)
 8004b04:	4c0d      	ldr	r4, [pc, #52]	; (8004b3c <__libc_init_array+0x3c>)
 8004b06:	1ba4      	subs	r4, r4, r6
 8004b08:	10a4      	asrs	r4, r4, #2
 8004b0a:	2500      	movs	r5, #0
 8004b0c:	42a5      	cmp	r5, r4
 8004b0e:	d109      	bne.n	8004b24 <__libc_init_array+0x24>
 8004b10:	4e0b      	ldr	r6, [pc, #44]	; (8004b40 <__libc_init_array+0x40>)
 8004b12:	4c0c      	ldr	r4, [pc, #48]	; (8004b44 <__libc_init_array+0x44>)
 8004b14:	f000 ff04 	bl	8005920 <_init>
 8004b18:	1ba4      	subs	r4, r4, r6
 8004b1a:	10a4      	asrs	r4, r4, #2
 8004b1c:	2500      	movs	r5, #0
 8004b1e:	42a5      	cmp	r5, r4
 8004b20:	d105      	bne.n	8004b2e <__libc_init_array+0x2e>
 8004b22:	bd70      	pop	{r4, r5, r6, pc}
 8004b24:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8004b28:	4798      	blx	r3
 8004b2a:	3501      	adds	r5, #1
 8004b2c:	e7ee      	b.n	8004b0c <__libc_init_array+0xc>
 8004b2e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8004b32:	4798      	blx	r3
 8004b34:	3501      	adds	r5, #1
 8004b36:	e7f2      	b.n	8004b1e <__libc_init_array+0x1e>
 8004b38:	08005a50 	.word	0x08005a50
 8004b3c:	08005a50 	.word	0x08005a50
 8004b40:	08005a50 	.word	0x08005a50
 8004b44:	08005a54 	.word	0x08005a54

08004b48 <memset>:
 8004b48:	4402      	add	r2, r0
 8004b4a:	4603      	mov	r3, r0
 8004b4c:	4293      	cmp	r3, r2
 8004b4e:	d100      	bne.n	8004b52 <memset+0xa>
 8004b50:	4770      	bx	lr
 8004b52:	f803 1b01 	strb.w	r1, [r3], #1
 8004b56:	e7f9      	b.n	8004b4c <memset+0x4>

08004b58 <iprintf>:
 8004b58:	b40f      	push	{r0, r1, r2, r3}
 8004b5a:	4b0a      	ldr	r3, [pc, #40]	; (8004b84 <iprintf+0x2c>)
 8004b5c:	b513      	push	{r0, r1, r4, lr}
 8004b5e:	681c      	ldr	r4, [r3, #0]
 8004b60:	b124      	cbz	r4, 8004b6c <iprintf+0x14>
 8004b62:	69a3      	ldr	r3, [r4, #24]
 8004b64:	b913      	cbnz	r3, 8004b6c <iprintf+0x14>
 8004b66:	4620      	mov	r0, r4
 8004b68:	f000 f84e 	bl	8004c08 <__sinit>
 8004b6c:	ab05      	add	r3, sp, #20
 8004b6e:	9a04      	ldr	r2, [sp, #16]
 8004b70:	68a1      	ldr	r1, [r4, #8]
 8004b72:	9301      	str	r3, [sp, #4]
 8004b74:	4620      	mov	r0, r4
 8004b76:	f000 f955 	bl	8004e24 <_vfiprintf_r>
 8004b7a:	b002      	add	sp, #8
 8004b7c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004b80:	b004      	add	sp, #16
 8004b82:	4770      	bx	lr
 8004b84:	2000000c 	.word	0x2000000c

08004b88 <std>:
 8004b88:	2300      	movs	r3, #0
 8004b8a:	b510      	push	{r4, lr}
 8004b8c:	4604      	mov	r4, r0
 8004b8e:	e9c0 3300 	strd	r3, r3, [r0]
 8004b92:	6083      	str	r3, [r0, #8]
 8004b94:	8181      	strh	r1, [r0, #12]
 8004b96:	6643      	str	r3, [r0, #100]	; 0x64
 8004b98:	81c2      	strh	r2, [r0, #14]
 8004b9a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8004b9e:	6183      	str	r3, [r0, #24]
 8004ba0:	4619      	mov	r1, r3
 8004ba2:	2208      	movs	r2, #8
 8004ba4:	305c      	adds	r0, #92	; 0x5c
 8004ba6:	f7ff ffcf 	bl	8004b48 <memset>
 8004baa:	4b05      	ldr	r3, [pc, #20]	; (8004bc0 <std+0x38>)
 8004bac:	6263      	str	r3, [r4, #36]	; 0x24
 8004bae:	4b05      	ldr	r3, [pc, #20]	; (8004bc4 <std+0x3c>)
 8004bb0:	62a3      	str	r3, [r4, #40]	; 0x28
 8004bb2:	4b05      	ldr	r3, [pc, #20]	; (8004bc8 <std+0x40>)
 8004bb4:	62e3      	str	r3, [r4, #44]	; 0x2c
 8004bb6:	4b05      	ldr	r3, [pc, #20]	; (8004bcc <std+0x44>)
 8004bb8:	6224      	str	r4, [r4, #32]
 8004bba:	6323      	str	r3, [r4, #48]	; 0x30
 8004bbc:	bd10      	pop	{r4, pc}
 8004bbe:	bf00      	nop
 8004bc0:	08005381 	.word	0x08005381
 8004bc4:	080053a3 	.word	0x080053a3
 8004bc8:	080053db 	.word	0x080053db
 8004bcc:	080053ff 	.word	0x080053ff

08004bd0 <_cleanup_r>:
 8004bd0:	4901      	ldr	r1, [pc, #4]	; (8004bd8 <_cleanup_r+0x8>)
 8004bd2:	f000 b885 	b.w	8004ce0 <_fwalk_reent>
 8004bd6:	bf00      	nop
 8004bd8:	080056d9 	.word	0x080056d9

08004bdc <__sfmoreglue>:
 8004bdc:	b570      	push	{r4, r5, r6, lr}
 8004bde:	1e4a      	subs	r2, r1, #1
 8004be0:	2568      	movs	r5, #104	; 0x68
 8004be2:	4355      	muls	r5, r2
 8004be4:	460e      	mov	r6, r1
 8004be6:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8004bea:	f000 f897 	bl	8004d1c <_malloc_r>
 8004bee:	4604      	mov	r4, r0
 8004bf0:	b140      	cbz	r0, 8004c04 <__sfmoreglue+0x28>
 8004bf2:	2100      	movs	r1, #0
 8004bf4:	e9c0 1600 	strd	r1, r6, [r0]
 8004bf8:	300c      	adds	r0, #12
 8004bfa:	60a0      	str	r0, [r4, #8]
 8004bfc:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8004c00:	f7ff ffa2 	bl	8004b48 <memset>
 8004c04:	4620      	mov	r0, r4
 8004c06:	bd70      	pop	{r4, r5, r6, pc}

08004c08 <__sinit>:
 8004c08:	6983      	ldr	r3, [r0, #24]
 8004c0a:	b510      	push	{r4, lr}
 8004c0c:	4604      	mov	r4, r0
 8004c0e:	bb33      	cbnz	r3, 8004c5e <__sinit+0x56>
 8004c10:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 8004c14:	6503      	str	r3, [r0, #80]	; 0x50
 8004c16:	4b12      	ldr	r3, [pc, #72]	; (8004c60 <__sinit+0x58>)
 8004c18:	4a12      	ldr	r2, [pc, #72]	; (8004c64 <__sinit+0x5c>)
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	6282      	str	r2, [r0, #40]	; 0x28
 8004c1e:	4298      	cmp	r0, r3
 8004c20:	bf04      	itt	eq
 8004c22:	2301      	moveq	r3, #1
 8004c24:	6183      	streq	r3, [r0, #24]
 8004c26:	f000 f81f 	bl	8004c68 <__sfp>
 8004c2a:	6060      	str	r0, [r4, #4]
 8004c2c:	4620      	mov	r0, r4
 8004c2e:	f000 f81b 	bl	8004c68 <__sfp>
 8004c32:	60a0      	str	r0, [r4, #8]
 8004c34:	4620      	mov	r0, r4
 8004c36:	f000 f817 	bl	8004c68 <__sfp>
 8004c3a:	2200      	movs	r2, #0
 8004c3c:	60e0      	str	r0, [r4, #12]
 8004c3e:	2104      	movs	r1, #4
 8004c40:	6860      	ldr	r0, [r4, #4]
 8004c42:	f7ff ffa1 	bl	8004b88 <std>
 8004c46:	2201      	movs	r2, #1
 8004c48:	2109      	movs	r1, #9
 8004c4a:	68a0      	ldr	r0, [r4, #8]
 8004c4c:	f7ff ff9c 	bl	8004b88 <std>
 8004c50:	2202      	movs	r2, #2
 8004c52:	2112      	movs	r1, #18
 8004c54:	68e0      	ldr	r0, [r4, #12]
 8004c56:	f7ff ff97 	bl	8004b88 <std>
 8004c5a:	2301      	movs	r3, #1
 8004c5c:	61a3      	str	r3, [r4, #24]
 8004c5e:	bd10      	pop	{r4, pc}
 8004c60:	080059b0 	.word	0x080059b0
 8004c64:	08004bd1 	.word	0x08004bd1

08004c68 <__sfp>:
 8004c68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004c6a:	4b1b      	ldr	r3, [pc, #108]	; (8004cd8 <__sfp+0x70>)
 8004c6c:	681e      	ldr	r6, [r3, #0]
 8004c6e:	69b3      	ldr	r3, [r6, #24]
 8004c70:	4607      	mov	r7, r0
 8004c72:	b913      	cbnz	r3, 8004c7a <__sfp+0x12>
 8004c74:	4630      	mov	r0, r6
 8004c76:	f7ff ffc7 	bl	8004c08 <__sinit>
 8004c7a:	3648      	adds	r6, #72	; 0x48
 8004c7c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8004c80:	3b01      	subs	r3, #1
 8004c82:	d503      	bpl.n	8004c8c <__sfp+0x24>
 8004c84:	6833      	ldr	r3, [r6, #0]
 8004c86:	b133      	cbz	r3, 8004c96 <__sfp+0x2e>
 8004c88:	6836      	ldr	r6, [r6, #0]
 8004c8a:	e7f7      	b.n	8004c7c <__sfp+0x14>
 8004c8c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8004c90:	b16d      	cbz	r5, 8004cae <__sfp+0x46>
 8004c92:	3468      	adds	r4, #104	; 0x68
 8004c94:	e7f4      	b.n	8004c80 <__sfp+0x18>
 8004c96:	2104      	movs	r1, #4
 8004c98:	4638      	mov	r0, r7
 8004c9a:	f7ff ff9f 	bl	8004bdc <__sfmoreglue>
 8004c9e:	6030      	str	r0, [r6, #0]
 8004ca0:	2800      	cmp	r0, #0
 8004ca2:	d1f1      	bne.n	8004c88 <__sfp+0x20>
 8004ca4:	230c      	movs	r3, #12
 8004ca6:	603b      	str	r3, [r7, #0]
 8004ca8:	4604      	mov	r4, r0
 8004caa:	4620      	mov	r0, r4
 8004cac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004cae:	4b0b      	ldr	r3, [pc, #44]	; (8004cdc <__sfp+0x74>)
 8004cb0:	6665      	str	r5, [r4, #100]	; 0x64
 8004cb2:	e9c4 5500 	strd	r5, r5, [r4]
 8004cb6:	60a5      	str	r5, [r4, #8]
 8004cb8:	e9c4 3503 	strd	r3, r5, [r4, #12]
 8004cbc:	e9c4 5505 	strd	r5, r5, [r4, #20]
 8004cc0:	2208      	movs	r2, #8
 8004cc2:	4629      	mov	r1, r5
 8004cc4:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8004cc8:	f7ff ff3e 	bl	8004b48 <memset>
 8004ccc:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8004cd0:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8004cd4:	e7e9      	b.n	8004caa <__sfp+0x42>
 8004cd6:	bf00      	nop
 8004cd8:	080059b0 	.word	0x080059b0
 8004cdc:	ffff0001 	.word	0xffff0001

08004ce0 <_fwalk_reent>:
 8004ce0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004ce4:	4680      	mov	r8, r0
 8004ce6:	4689      	mov	r9, r1
 8004ce8:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8004cec:	2600      	movs	r6, #0
 8004cee:	b914      	cbnz	r4, 8004cf6 <_fwalk_reent+0x16>
 8004cf0:	4630      	mov	r0, r6
 8004cf2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004cf6:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 8004cfa:	3f01      	subs	r7, #1
 8004cfc:	d501      	bpl.n	8004d02 <_fwalk_reent+0x22>
 8004cfe:	6824      	ldr	r4, [r4, #0]
 8004d00:	e7f5      	b.n	8004cee <_fwalk_reent+0xe>
 8004d02:	89ab      	ldrh	r3, [r5, #12]
 8004d04:	2b01      	cmp	r3, #1
 8004d06:	d907      	bls.n	8004d18 <_fwalk_reent+0x38>
 8004d08:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8004d0c:	3301      	adds	r3, #1
 8004d0e:	d003      	beq.n	8004d18 <_fwalk_reent+0x38>
 8004d10:	4629      	mov	r1, r5
 8004d12:	4640      	mov	r0, r8
 8004d14:	47c8      	blx	r9
 8004d16:	4306      	orrs	r6, r0
 8004d18:	3568      	adds	r5, #104	; 0x68
 8004d1a:	e7ee      	b.n	8004cfa <_fwalk_reent+0x1a>

08004d1c <_malloc_r>:
 8004d1c:	b570      	push	{r4, r5, r6, lr}
 8004d1e:	1ccd      	adds	r5, r1, #3
 8004d20:	f025 0503 	bic.w	r5, r5, #3
 8004d24:	3508      	adds	r5, #8
 8004d26:	2d0c      	cmp	r5, #12
 8004d28:	bf38      	it	cc
 8004d2a:	250c      	movcc	r5, #12
 8004d2c:	2d00      	cmp	r5, #0
 8004d2e:	4606      	mov	r6, r0
 8004d30:	db01      	blt.n	8004d36 <_malloc_r+0x1a>
 8004d32:	42a9      	cmp	r1, r5
 8004d34:	d903      	bls.n	8004d3e <_malloc_r+0x22>
 8004d36:	230c      	movs	r3, #12
 8004d38:	6033      	str	r3, [r6, #0]
 8004d3a:	2000      	movs	r0, #0
 8004d3c:	bd70      	pop	{r4, r5, r6, pc}
 8004d3e:	f000 fd6b 	bl	8005818 <__malloc_lock>
 8004d42:	4a21      	ldr	r2, [pc, #132]	; (8004dc8 <_malloc_r+0xac>)
 8004d44:	6814      	ldr	r4, [r2, #0]
 8004d46:	4621      	mov	r1, r4
 8004d48:	b991      	cbnz	r1, 8004d70 <_malloc_r+0x54>
 8004d4a:	4c20      	ldr	r4, [pc, #128]	; (8004dcc <_malloc_r+0xb0>)
 8004d4c:	6823      	ldr	r3, [r4, #0]
 8004d4e:	b91b      	cbnz	r3, 8004d58 <_malloc_r+0x3c>
 8004d50:	4630      	mov	r0, r6
 8004d52:	f000 fb05 	bl	8005360 <_sbrk_r>
 8004d56:	6020      	str	r0, [r4, #0]
 8004d58:	4629      	mov	r1, r5
 8004d5a:	4630      	mov	r0, r6
 8004d5c:	f000 fb00 	bl	8005360 <_sbrk_r>
 8004d60:	1c43      	adds	r3, r0, #1
 8004d62:	d124      	bne.n	8004dae <_malloc_r+0x92>
 8004d64:	230c      	movs	r3, #12
 8004d66:	6033      	str	r3, [r6, #0]
 8004d68:	4630      	mov	r0, r6
 8004d6a:	f000 fd56 	bl	800581a <__malloc_unlock>
 8004d6e:	e7e4      	b.n	8004d3a <_malloc_r+0x1e>
 8004d70:	680b      	ldr	r3, [r1, #0]
 8004d72:	1b5b      	subs	r3, r3, r5
 8004d74:	d418      	bmi.n	8004da8 <_malloc_r+0x8c>
 8004d76:	2b0b      	cmp	r3, #11
 8004d78:	d90f      	bls.n	8004d9a <_malloc_r+0x7e>
 8004d7a:	600b      	str	r3, [r1, #0]
 8004d7c:	50cd      	str	r5, [r1, r3]
 8004d7e:	18cc      	adds	r4, r1, r3
 8004d80:	4630      	mov	r0, r6
 8004d82:	f000 fd4a 	bl	800581a <__malloc_unlock>
 8004d86:	f104 000b 	add.w	r0, r4, #11
 8004d8a:	1d23      	adds	r3, r4, #4
 8004d8c:	f020 0007 	bic.w	r0, r0, #7
 8004d90:	1ac3      	subs	r3, r0, r3
 8004d92:	d0d3      	beq.n	8004d3c <_malloc_r+0x20>
 8004d94:	425a      	negs	r2, r3
 8004d96:	50e2      	str	r2, [r4, r3]
 8004d98:	e7d0      	b.n	8004d3c <_malloc_r+0x20>
 8004d9a:	428c      	cmp	r4, r1
 8004d9c:	684b      	ldr	r3, [r1, #4]
 8004d9e:	bf16      	itet	ne
 8004da0:	6063      	strne	r3, [r4, #4]
 8004da2:	6013      	streq	r3, [r2, #0]
 8004da4:	460c      	movne	r4, r1
 8004da6:	e7eb      	b.n	8004d80 <_malloc_r+0x64>
 8004da8:	460c      	mov	r4, r1
 8004daa:	6849      	ldr	r1, [r1, #4]
 8004dac:	e7cc      	b.n	8004d48 <_malloc_r+0x2c>
 8004dae:	1cc4      	adds	r4, r0, #3
 8004db0:	f024 0403 	bic.w	r4, r4, #3
 8004db4:	42a0      	cmp	r0, r4
 8004db6:	d005      	beq.n	8004dc4 <_malloc_r+0xa8>
 8004db8:	1a21      	subs	r1, r4, r0
 8004dba:	4630      	mov	r0, r6
 8004dbc:	f000 fad0 	bl	8005360 <_sbrk_r>
 8004dc0:	3001      	adds	r0, #1
 8004dc2:	d0cf      	beq.n	8004d64 <_malloc_r+0x48>
 8004dc4:	6025      	str	r5, [r4, #0]
 8004dc6:	e7db      	b.n	8004d80 <_malloc_r+0x64>
 8004dc8:	20000090 	.word	0x20000090
 8004dcc:	20000094 	.word	0x20000094

08004dd0 <__sfputc_r>:
 8004dd0:	6893      	ldr	r3, [r2, #8]
 8004dd2:	3b01      	subs	r3, #1
 8004dd4:	2b00      	cmp	r3, #0
 8004dd6:	b410      	push	{r4}
 8004dd8:	6093      	str	r3, [r2, #8]
 8004dda:	da08      	bge.n	8004dee <__sfputc_r+0x1e>
 8004ddc:	6994      	ldr	r4, [r2, #24]
 8004dde:	42a3      	cmp	r3, r4
 8004de0:	db01      	blt.n	8004de6 <__sfputc_r+0x16>
 8004de2:	290a      	cmp	r1, #10
 8004de4:	d103      	bne.n	8004dee <__sfputc_r+0x1e>
 8004de6:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004dea:	f000 bb0d 	b.w	8005408 <__swbuf_r>
 8004dee:	6813      	ldr	r3, [r2, #0]
 8004df0:	1c58      	adds	r0, r3, #1
 8004df2:	6010      	str	r0, [r2, #0]
 8004df4:	7019      	strb	r1, [r3, #0]
 8004df6:	4608      	mov	r0, r1
 8004df8:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004dfc:	4770      	bx	lr

08004dfe <__sfputs_r>:
 8004dfe:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004e00:	4606      	mov	r6, r0
 8004e02:	460f      	mov	r7, r1
 8004e04:	4614      	mov	r4, r2
 8004e06:	18d5      	adds	r5, r2, r3
 8004e08:	42ac      	cmp	r4, r5
 8004e0a:	d101      	bne.n	8004e10 <__sfputs_r+0x12>
 8004e0c:	2000      	movs	r0, #0
 8004e0e:	e007      	b.n	8004e20 <__sfputs_r+0x22>
 8004e10:	463a      	mov	r2, r7
 8004e12:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004e16:	4630      	mov	r0, r6
 8004e18:	f7ff ffda 	bl	8004dd0 <__sfputc_r>
 8004e1c:	1c43      	adds	r3, r0, #1
 8004e1e:	d1f3      	bne.n	8004e08 <__sfputs_r+0xa>
 8004e20:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08004e24 <_vfiprintf_r>:
 8004e24:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004e28:	460c      	mov	r4, r1
 8004e2a:	b09d      	sub	sp, #116	; 0x74
 8004e2c:	4617      	mov	r7, r2
 8004e2e:	461d      	mov	r5, r3
 8004e30:	4606      	mov	r6, r0
 8004e32:	b118      	cbz	r0, 8004e3c <_vfiprintf_r+0x18>
 8004e34:	6983      	ldr	r3, [r0, #24]
 8004e36:	b90b      	cbnz	r3, 8004e3c <_vfiprintf_r+0x18>
 8004e38:	f7ff fee6 	bl	8004c08 <__sinit>
 8004e3c:	4b7c      	ldr	r3, [pc, #496]	; (8005030 <_vfiprintf_r+0x20c>)
 8004e3e:	429c      	cmp	r4, r3
 8004e40:	d158      	bne.n	8004ef4 <_vfiprintf_r+0xd0>
 8004e42:	6874      	ldr	r4, [r6, #4]
 8004e44:	89a3      	ldrh	r3, [r4, #12]
 8004e46:	0718      	lsls	r0, r3, #28
 8004e48:	d55e      	bpl.n	8004f08 <_vfiprintf_r+0xe4>
 8004e4a:	6923      	ldr	r3, [r4, #16]
 8004e4c:	2b00      	cmp	r3, #0
 8004e4e:	d05b      	beq.n	8004f08 <_vfiprintf_r+0xe4>
 8004e50:	2300      	movs	r3, #0
 8004e52:	9309      	str	r3, [sp, #36]	; 0x24
 8004e54:	2320      	movs	r3, #32
 8004e56:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8004e5a:	2330      	movs	r3, #48	; 0x30
 8004e5c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8004e60:	9503      	str	r5, [sp, #12]
 8004e62:	f04f 0b01 	mov.w	fp, #1
 8004e66:	46b8      	mov	r8, r7
 8004e68:	4645      	mov	r5, r8
 8004e6a:	f815 3b01 	ldrb.w	r3, [r5], #1
 8004e6e:	b10b      	cbz	r3, 8004e74 <_vfiprintf_r+0x50>
 8004e70:	2b25      	cmp	r3, #37	; 0x25
 8004e72:	d154      	bne.n	8004f1e <_vfiprintf_r+0xfa>
 8004e74:	ebb8 0a07 	subs.w	sl, r8, r7
 8004e78:	d00b      	beq.n	8004e92 <_vfiprintf_r+0x6e>
 8004e7a:	4653      	mov	r3, sl
 8004e7c:	463a      	mov	r2, r7
 8004e7e:	4621      	mov	r1, r4
 8004e80:	4630      	mov	r0, r6
 8004e82:	f7ff ffbc 	bl	8004dfe <__sfputs_r>
 8004e86:	3001      	adds	r0, #1
 8004e88:	f000 80c2 	beq.w	8005010 <_vfiprintf_r+0x1ec>
 8004e8c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004e8e:	4453      	add	r3, sl
 8004e90:	9309      	str	r3, [sp, #36]	; 0x24
 8004e92:	f898 3000 	ldrb.w	r3, [r8]
 8004e96:	2b00      	cmp	r3, #0
 8004e98:	f000 80ba 	beq.w	8005010 <_vfiprintf_r+0x1ec>
 8004e9c:	2300      	movs	r3, #0
 8004e9e:	f04f 32ff 	mov.w	r2, #4294967295
 8004ea2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004ea6:	9304      	str	r3, [sp, #16]
 8004ea8:	9307      	str	r3, [sp, #28]
 8004eaa:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8004eae:	931a      	str	r3, [sp, #104]	; 0x68
 8004eb0:	46a8      	mov	r8, r5
 8004eb2:	2205      	movs	r2, #5
 8004eb4:	f818 1b01 	ldrb.w	r1, [r8], #1
 8004eb8:	485e      	ldr	r0, [pc, #376]	; (8005034 <_vfiprintf_r+0x210>)
 8004eba:	f7fb f999 	bl	80001f0 <memchr>
 8004ebe:	9b04      	ldr	r3, [sp, #16]
 8004ec0:	bb78      	cbnz	r0, 8004f22 <_vfiprintf_r+0xfe>
 8004ec2:	06d9      	lsls	r1, r3, #27
 8004ec4:	bf44      	itt	mi
 8004ec6:	2220      	movmi	r2, #32
 8004ec8:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8004ecc:	071a      	lsls	r2, r3, #28
 8004ece:	bf44      	itt	mi
 8004ed0:	222b      	movmi	r2, #43	; 0x2b
 8004ed2:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8004ed6:	782a      	ldrb	r2, [r5, #0]
 8004ed8:	2a2a      	cmp	r2, #42	; 0x2a
 8004eda:	d02a      	beq.n	8004f32 <_vfiprintf_r+0x10e>
 8004edc:	9a07      	ldr	r2, [sp, #28]
 8004ede:	46a8      	mov	r8, r5
 8004ee0:	2000      	movs	r0, #0
 8004ee2:	250a      	movs	r5, #10
 8004ee4:	4641      	mov	r1, r8
 8004ee6:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004eea:	3b30      	subs	r3, #48	; 0x30
 8004eec:	2b09      	cmp	r3, #9
 8004eee:	d969      	bls.n	8004fc4 <_vfiprintf_r+0x1a0>
 8004ef0:	b360      	cbz	r0, 8004f4c <_vfiprintf_r+0x128>
 8004ef2:	e024      	b.n	8004f3e <_vfiprintf_r+0x11a>
 8004ef4:	4b50      	ldr	r3, [pc, #320]	; (8005038 <_vfiprintf_r+0x214>)
 8004ef6:	429c      	cmp	r4, r3
 8004ef8:	d101      	bne.n	8004efe <_vfiprintf_r+0xda>
 8004efa:	68b4      	ldr	r4, [r6, #8]
 8004efc:	e7a2      	b.n	8004e44 <_vfiprintf_r+0x20>
 8004efe:	4b4f      	ldr	r3, [pc, #316]	; (800503c <_vfiprintf_r+0x218>)
 8004f00:	429c      	cmp	r4, r3
 8004f02:	bf08      	it	eq
 8004f04:	68f4      	ldreq	r4, [r6, #12]
 8004f06:	e79d      	b.n	8004e44 <_vfiprintf_r+0x20>
 8004f08:	4621      	mov	r1, r4
 8004f0a:	4630      	mov	r0, r6
 8004f0c:	f000 fae0 	bl	80054d0 <__swsetup_r>
 8004f10:	2800      	cmp	r0, #0
 8004f12:	d09d      	beq.n	8004e50 <_vfiprintf_r+0x2c>
 8004f14:	f04f 30ff 	mov.w	r0, #4294967295
 8004f18:	b01d      	add	sp, #116	; 0x74
 8004f1a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004f1e:	46a8      	mov	r8, r5
 8004f20:	e7a2      	b.n	8004e68 <_vfiprintf_r+0x44>
 8004f22:	4a44      	ldr	r2, [pc, #272]	; (8005034 <_vfiprintf_r+0x210>)
 8004f24:	1a80      	subs	r0, r0, r2
 8004f26:	fa0b f000 	lsl.w	r0, fp, r0
 8004f2a:	4318      	orrs	r0, r3
 8004f2c:	9004      	str	r0, [sp, #16]
 8004f2e:	4645      	mov	r5, r8
 8004f30:	e7be      	b.n	8004eb0 <_vfiprintf_r+0x8c>
 8004f32:	9a03      	ldr	r2, [sp, #12]
 8004f34:	1d11      	adds	r1, r2, #4
 8004f36:	6812      	ldr	r2, [r2, #0]
 8004f38:	9103      	str	r1, [sp, #12]
 8004f3a:	2a00      	cmp	r2, #0
 8004f3c:	db01      	blt.n	8004f42 <_vfiprintf_r+0x11e>
 8004f3e:	9207      	str	r2, [sp, #28]
 8004f40:	e004      	b.n	8004f4c <_vfiprintf_r+0x128>
 8004f42:	4252      	negs	r2, r2
 8004f44:	f043 0302 	orr.w	r3, r3, #2
 8004f48:	9207      	str	r2, [sp, #28]
 8004f4a:	9304      	str	r3, [sp, #16]
 8004f4c:	f898 3000 	ldrb.w	r3, [r8]
 8004f50:	2b2e      	cmp	r3, #46	; 0x2e
 8004f52:	d10e      	bne.n	8004f72 <_vfiprintf_r+0x14e>
 8004f54:	f898 3001 	ldrb.w	r3, [r8, #1]
 8004f58:	2b2a      	cmp	r3, #42	; 0x2a
 8004f5a:	d138      	bne.n	8004fce <_vfiprintf_r+0x1aa>
 8004f5c:	9b03      	ldr	r3, [sp, #12]
 8004f5e:	1d1a      	adds	r2, r3, #4
 8004f60:	681b      	ldr	r3, [r3, #0]
 8004f62:	9203      	str	r2, [sp, #12]
 8004f64:	2b00      	cmp	r3, #0
 8004f66:	bfb8      	it	lt
 8004f68:	f04f 33ff 	movlt.w	r3, #4294967295
 8004f6c:	f108 0802 	add.w	r8, r8, #2
 8004f70:	9305      	str	r3, [sp, #20]
 8004f72:	4d33      	ldr	r5, [pc, #204]	; (8005040 <_vfiprintf_r+0x21c>)
 8004f74:	f898 1000 	ldrb.w	r1, [r8]
 8004f78:	2203      	movs	r2, #3
 8004f7a:	4628      	mov	r0, r5
 8004f7c:	f7fb f938 	bl	80001f0 <memchr>
 8004f80:	b140      	cbz	r0, 8004f94 <_vfiprintf_r+0x170>
 8004f82:	2340      	movs	r3, #64	; 0x40
 8004f84:	1b40      	subs	r0, r0, r5
 8004f86:	fa03 f000 	lsl.w	r0, r3, r0
 8004f8a:	9b04      	ldr	r3, [sp, #16]
 8004f8c:	4303      	orrs	r3, r0
 8004f8e:	f108 0801 	add.w	r8, r8, #1
 8004f92:	9304      	str	r3, [sp, #16]
 8004f94:	f898 1000 	ldrb.w	r1, [r8]
 8004f98:	482a      	ldr	r0, [pc, #168]	; (8005044 <_vfiprintf_r+0x220>)
 8004f9a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8004f9e:	2206      	movs	r2, #6
 8004fa0:	f108 0701 	add.w	r7, r8, #1
 8004fa4:	f7fb f924 	bl	80001f0 <memchr>
 8004fa8:	2800      	cmp	r0, #0
 8004faa:	d037      	beq.n	800501c <_vfiprintf_r+0x1f8>
 8004fac:	4b26      	ldr	r3, [pc, #152]	; (8005048 <_vfiprintf_r+0x224>)
 8004fae:	bb1b      	cbnz	r3, 8004ff8 <_vfiprintf_r+0x1d4>
 8004fb0:	9b03      	ldr	r3, [sp, #12]
 8004fb2:	3307      	adds	r3, #7
 8004fb4:	f023 0307 	bic.w	r3, r3, #7
 8004fb8:	3308      	adds	r3, #8
 8004fba:	9303      	str	r3, [sp, #12]
 8004fbc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004fbe:	444b      	add	r3, r9
 8004fc0:	9309      	str	r3, [sp, #36]	; 0x24
 8004fc2:	e750      	b.n	8004e66 <_vfiprintf_r+0x42>
 8004fc4:	fb05 3202 	mla	r2, r5, r2, r3
 8004fc8:	2001      	movs	r0, #1
 8004fca:	4688      	mov	r8, r1
 8004fcc:	e78a      	b.n	8004ee4 <_vfiprintf_r+0xc0>
 8004fce:	2300      	movs	r3, #0
 8004fd0:	f108 0801 	add.w	r8, r8, #1
 8004fd4:	9305      	str	r3, [sp, #20]
 8004fd6:	4619      	mov	r1, r3
 8004fd8:	250a      	movs	r5, #10
 8004fda:	4640      	mov	r0, r8
 8004fdc:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004fe0:	3a30      	subs	r2, #48	; 0x30
 8004fe2:	2a09      	cmp	r2, #9
 8004fe4:	d903      	bls.n	8004fee <_vfiprintf_r+0x1ca>
 8004fe6:	2b00      	cmp	r3, #0
 8004fe8:	d0c3      	beq.n	8004f72 <_vfiprintf_r+0x14e>
 8004fea:	9105      	str	r1, [sp, #20]
 8004fec:	e7c1      	b.n	8004f72 <_vfiprintf_r+0x14e>
 8004fee:	fb05 2101 	mla	r1, r5, r1, r2
 8004ff2:	2301      	movs	r3, #1
 8004ff4:	4680      	mov	r8, r0
 8004ff6:	e7f0      	b.n	8004fda <_vfiprintf_r+0x1b6>
 8004ff8:	ab03      	add	r3, sp, #12
 8004ffa:	9300      	str	r3, [sp, #0]
 8004ffc:	4622      	mov	r2, r4
 8004ffe:	4b13      	ldr	r3, [pc, #76]	; (800504c <_vfiprintf_r+0x228>)
 8005000:	a904      	add	r1, sp, #16
 8005002:	4630      	mov	r0, r6
 8005004:	f3af 8000 	nop.w
 8005008:	f1b0 3fff 	cmp.w	r0, #4294967295
 800500c:	4681      	mov	r9, r0
 800500e:	d1d5      	bne.n	8004fbc <_vfiprintf_r+0x198>
 8005010:	89a3      	ldrh	r3, [r4, #12]
 8005012:	065b      	lsls	r3, r3, #25
 8005014:	f53f af7e 	bmi.w	8004f14 <_vfiprintf_r+0xf0>
 8005018:	9809      	ldr	r0, [sp, #36]	; 0x24
 800501a:	e77d      	b.n	8004f18 <_vfiprintf_r+0xf4>
 800501c:	ab03      	add	r3, sp, #12
 800501e:	9300      	str	r3, [sp, #0]
 8005020:	4622      	mov	r2, r4
 8005022:	4b0a      	ldr	r3, [pc, #40]	; (800504c <_vfiprintf_r+0x228>)
 8005024:	a904      	add	r1, sp, #16
 8005026:	4630      	mov	r0, r6
 8005028:	f000 f888 	bl	800513c <_printf_i>
 800502c:	e7ec      	b.n	8005008 <_vfiprintf_r+0x1e4>
 800502e:	bf00      	nop
 8005030:	080059d4 	.word	0x080059d4
 8005034:	08005a14 	.word	0x08005a14
 8005038:	080059f4 	.word	0x080059f4
 800503c:	080059b4 	.word	0x080059b4
 8005040:	08005a1a 	.word	0x08005a1a
 8005044:	08005a1e 	.word	0x08005a1e
 8005048:	00000000 	.word	0x00000000
 800504c:	08004dff 	.word	0x08004dff

08005050 <_printf_common>:
 8005050:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005054:	4691      	mov	r9, r2
 8005056:	461f      	mov	r7, r3
 8005058:	688a      	ldr	r2, [r1, #8]
 800505a:	690b      	ldr	r3, [r1, #16]
 800505c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005060:	4293      	cmp	r3, r2
 8005062:	bfb8      	it	lt
 8005064:	4613      	movlt	r3, r2
 8005066:	f8c9 3000 	str.w	r3, [r9]
 800506a:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800506e:	4606      	mov	r6, r0
 8005070:	460c      	mov	r4, r1
 8005072:	b112      	cbz	r2, 800507a <_printf_common+0x2a>
 8005074:	3301      	adds	r3, #1
 8005076:	f8c9 3000 	str.w	r3, [r9]
 800507a:	6823      	ldr	r3, [r4, #0]
 800507c:	0699      	lsls	r1, r3, #26
 800507e:	bf42      	ittt	mi
 8005080:	f8d9 3000 	ldrmi.w	r3, [r9]
 8005084:	3302      	addmi	r3, #2
 8005086:	f8c9 3000 	strmi.w	r3, [r9]
 800508a:	6825      	ldr	r5, [r4, #0]
 800508c:	f015 0506 	ands.w	r5, r5, #6
 8005090:	d107      	bne.n	80050a2 <_printf_common+0x52>
 8005092:	f104 0a19 	add.w	sl, r4, #25
 8005096:	68e3      	ldr	r3, [r4, #12]
 8005098:	f8d9 2000 	ldr.w	r2, [r9]
 800509c:	1a9b      	subs	r3, r3, r2
 800509e:	42ab      	cmp	r3, r5
 80050a0:	dc28      	bgt.n	80050f4 <_printf_common+0xa4>
 80050a2:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 80050a6:	6822      	ldr	r2, [r4, #0]
 80050a8:	3300      	adds	r3, #0
 80050aa:	bf18      	it	ne
 80050ac:	2301      	movne	r3, #1
 80050ae:	0692      	lsls	r2, r2, #26
 80050b0:	d42d      	bmi.n	800510e <_printf_common+0xbe>
 80050b2:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80050b6:	4639      	mov	r1, r7
 80050b8:	4630      	mov	r0, r6
 80050ba:	47c0      	blx	r8
 80050bc:	3001      	adds	r0, #1
 80050be:	d020      	beq.n	8005102 <_printf_common+0xb2>
 80050c0:	6823      	ldr	r3, [r4, #0]
 80050c2:	68e5      	ldr	r5, [r4, #12]
 80050c4:	f8d9 2000 	ldr.w	r2, [r9]
 80050c8:	f003 0306 	and.w	r3, r3, #6
 80050cc:	2b04      	cmp	r3, #4
 80050ce:	bf08      	it	eq
 80050d0:	1aad      	subeq	r5, r5, r2
 80050d2:	68a3      	ldr	r3, [r4, #8]
 80050d4:	6922      	ldr	r2, [r4, #16]
 80050d6:	bf0c      	ite	eq
 80050d8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80050dc:	2500      	movne	r5, #0
 80050de:	4293      	cmp	r3, r2
 80050e0:	bfc4      	itt	gt
 80050e2:	1a9b      	subgt	r3, r3, r2
 80050e4:	18ed      	addgt	r5, r5, r3
 80050e6:	f04f 0900 	mov.w	r9, #0
 80050ea:	341a      	adds	r4, #26
 80050ec:	454d      	cmp	r5, r9
 80050ee:	d11a      	bne.n	8005126 <_printf_common+0xd6>
 80050f0:	2000      	movs	r0, #0
 80050f2:	e008      	b.n	8005106 <_printf_common+0xb6>
 80050f4:	2301      	movs	r3, #1
 80050f6:	4652      	mov	r2, sl
 80050f8:	4639      	mov	r1, r7
 80050fa:	4630      	mov	r0, r6
 80050fc:	47c0      	blx	r8
 80050fe:	3001      	adds	r0, #1
 8005100:	d103      	bne.n	800510a <_printf_common+0xba>
 8005102:	f04f 30ff 	mov.w	r0, #4294967295
 8005106:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800510a:	3501      	adds	r5, #1
 800510c:	e7c3      	b.n	8005096 <_printf_common+0x46>
 800510e:	18e1      	adds	r1, r4, r3
 8005110:	1c5a      	adds	r2, r3, #1
 8005112:	2030      	movs	r0, #48	; 0x30
 8005114:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005118:	4422      	add	r2, r4
 800511a:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800511e:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005122:	3302      	adds	r3, #2
 8005124:	e7c5      	b.n	80050b2 <_printf_common+0x62>
 8005126:	2301      	movs	r3, #1
 8005128:	4622      	mov	r2, r4
 800512a:	4639      	mov	r1, r7
 800512c:	4630      	mov	r0, r6
 800512e:	47c0      	blx	r8
 8005130:	3001      	adds	r0, #1
 8005132:	d0e6      	beq.n	8005102 <_printf_common+0xb2>
 8005134:	f109 0901 	add.w	r9, r9, #1
 8005138:	e7d8      	b.n	80050ec <_printf_common+0x9c>
	...

0800513c <_printf_i>:
 800513c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8005140:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8005144:	460c      	mov	r4, r1
 8005146:	7e09      	ldrb	r1, [r1, #24]
 8005148:	b085      	sub	sp, #20
 800514a:	296e      	cmp	r1, #110	; 0x6e
 800514c:	4617      	mov	r7, r2
 800514e:	4606      	mov	r6, r0
 8005150:	4698      	mov	r8, r3
 8005152:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8005154:	f000 80b3 	beq.w	80052be <_printf_i+0x182>
 8005158:	d822      	bhi.n	80051a0 <_printf_i+0x64>
 800515a:	2963      	cmp	r1, #99	; 0x63
 800515c:	d036      	beq.n	80051cc <_printf_i+0x90>
 800515e:	d80a      	bhi.n	8005176 <_printf_i+0x3a>
 8005160:	2900      	cmp	r1, #0
 8005162:	f000 80b9 	beq.w	80052d8 <_printf_i+0x19c>
 8005166:	2958      	cmp	r1, #88	; 0x58
 8005168:	f000 8083 	beq.w	8005272 <_printf_i+0x136>
 800516c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005170:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8005174:	e032      	b.n	80051dc <_printf_i+0xa0>
 8005176:	2964      	cmp	r1, #100	; 0x64
 8005178:	d001      	beq.n	800517e <_printf_i+0x42>
 800517a:	2969      	cmp	r1, #105	; 0x69
 800517c:	d1f6      	bne.n	800516c <_printf_i+0x30>
 800517e:	6820      	ldr	r0, [r4, #0]
 8005180:	6813      	ldr	r3, [r2, #0]
 8005182:	0605      	lsls	r5, r0, #24
 8005184:	f103 0104 	add.w	r1, r3, #4
 8005188:	d52a      	bpl.n	80051e0 <_printf_i+0xa4>
 800518a:	681b      	ldr	r3, [r3, #0]
 800518c:	6011      	str	r1, [r2, #0]
 800518e:	2b00      	cmp	r3, #0
 8005190:	da03      	bge.n	800519a <_printf_i+0x5e>
 8005192:	222d      	movs	r2, #45	; 0x2d
 8005194:	425b      	negs	r3, r3
 8005196:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 800519a:	486f      	ldr	r0, [pc, #444]	; (8005358 <_printf_i+0x21c>)
 800519c:	220a      	movs	r2, #10
 800519e:	e039      	b.n	8005214 <_printf_i+0xd8>
 80051a0:	2973      	cmp	r1, #115	; 0x73
 80051a2:	f000 809d 	beq.w	80052e0 <_printf_i+0x1a4>
 80051a6:	d808      	bhi.n	80051ba <_printf_i+0x7e>
 80051a8:	296f      	cmp	r1, #111	; 0x6f
 80051aa:	d020      	beq.n	80051ee <_printf_i+0xb2>
 80051ac:	2970      	cmp	r1, #112	; 0x70
 80051ae:	d1dd      	bne.n	800516c <_printf_i+0x30>
 80051b0:	6823      	ldr	r3, [r4, #0]
 80051b2:	f043 0320 	orr.w	r3, r3, #32
 80051b6:	6023      	str	r3, [r4, #0]
 80051b8:	e003      	b.n	80051c2 <_printf_i+0x86>
 80051ba:	2975      	cmp	r1, #117	; 0x75
 80051bc:	d017      	beq.n	80051ee <_printf_i+0xb2>
 80051be:	2978      	cmp	r1, #120	; 0x78
 80051c0:	d1d4      	bne.n	800516c <_printf_i+0x30>
 80051c2:	2378      	movs	r3, #120	; 0x78
 80051c4:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80051c8:	4864      	ldr	r0, [pc, #400]	; (800535c <_printf_i+0x220>)
 80051ca:	e055      	b.n	8005278 <_printf_i+0x13c>
 80051cc:	6813      	ldr	r3, [r2, #0]
 80051ce:	1d19      	adds	r1, r3, #4
 80051d0:	681b      	ldr	r3, [r3, #0]
 80051d2:	6011      	str	r1, [r2, #0]
 80051d4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80051d8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80051dc:	2301      	movs	r3, #1
 80051de:	e08c      	b.n	80052fa <_printf_i+0x1be>
 80051e0:	681b      	ldr	r3, [r3, #0]
 80051e2:	6011      	str	r1, [r2, #0]
 80051e4:	f010 0f40 	tst.w	r0, #64	; 0x40
 80051e8:	bf18      	it	ne
 80051ea:	b21b      	sxthne	r3, r3
 80051ec:	e7cf      	b.n	800518e <_printf_i+0x52>
 80051ee:	6813      	ldr	r3, [r2, #0]
 80051f0:	6825      	ldr	r5, [r4, #0]
 80051f2:	1d18      	adds	r0, r3, #4
 80051f4:	6010      	str	r0, [r2, #0]
 80051f6:	0628      	lsls	r0, r5, #24
 80051f8:	d501      	bpl.n	80051fe <_printf_i+0xc2>
 80051fa:	681b      	ldr	r3, [r3, #0]
 80051fc:	e002      	b.n	8005204 <_printf_i+0xc8>
 80051fe:	0668      	lsls	r0, r5, #25
 8005200:	d5fb      	bpl.n	80051fa <_printf_i+0xbe>
 8005202:	881b      	ldrh	r3, [r3, #0]
 8005204:	4854      	ldr	r0, [pc, #336]	; (8005358 <_printf_i+0x21c>)
 8005206:	296f      	cmp	r1, #111	; 0x6f
 8005208:	bf14      	ite	ne
 800520a:	220a      	movne	r2, #10
 800520c:	2208      	moveq	r2, #8
 800520e:	2100      	movs	r1, #0
 8005210:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005214:	6865      	ldr	r5, [r4, #4]
 8005216:	60a5      	str	r5, [r4, #8]
 8005218:	2d00      	cmp	r5, #0
 800521a:	f2c0 8095 	blt.w	8005348 <_printf_i+0x20c>
 800521e:	6821      	ldr	r1, [r4, #0]
 8005220:	f021 0104 	bic.w	r1, r1, #4
 8005224:	6021      	str	r1, [r4, #0]
 8005226:	2b00      	cmp	r3, #0
 8005228:	d13d      	bne.n	80052a6 <_printf_i+0x16a>
 800522a:	2d00      	cmp	r5, #0
 800522c:	f040 808e 	bne.w	800534c <_printf_i+0x210>
 8005230:	4665      	mov	r5, ip
 8005232:	2a08      	cmp	r2, #8
 8005234:	d10b      	bne.n	800524e <_printf_i+0x112>
 8005236:	6823      	ldr	r3, [r4, #0]
 8005238:	07db      	lsls	r3, r3, #31
 800523a:	d508      	bpl.n	800524e <_printf_i+0x112>
 800523c:	6923      	ldr	r3, [r4, #16]
 800523e:	6862      	ldr	r2, [r4, #4]
 8005240:	429a      	cmp	r2, r3
 8005242:	bfde      	ittt	le
 8005244:	2330      	movle	r3, #48	; 0x30
 8005246:	f805 3c01 	strble.w	r3, [r5, #-1]
 800524a:	f105 35ff 	addle.w	r5, r5, #4294967295
 800524e:	ebac 0305 	sub.w	r3, ip, r5
 8005252:	6123      	str	r3, [r4, #16]
 8005254:	f8cd 8000 	str.w	r8, [sp]
 8005258:	463b      	mov	r3, r7
 800525a:	aa03      	add	r2, sp, #12
 800525c:	4621      	mov	r1, r4
 800525e:	4630      	mov	r0, r6
 8005260:	f7ff fef6 	bl	8005050 <_printf_common>
 8005264:	3001      	adds	r0, #1
 8005266:	d14d      	bne.n	8005304 <_printf_i+0x1c8>
 8005268:	f04f 30ff 	mov.w	r0, #4294967295
 800526c:	b005      	add	sp, #20
 800526e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8005272:	4839      	ldr	r0, [pc, #228]	; (8005358 <_printf_i+0x21c>)
 8005274:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8005278:	6813      	ldr	r3, [r2, #0]
 800527a:	6821      	ldr	r1, [r4, #0]
 800527c:	1d1d      	adds	r5, r3, #4
 800527e:	681b      	ldr	r3, [r3, #0]
 8005280:	6015      	str	r5, [r2, #0]
 8005282:	060a      	lsls	r2, r1, #24
 8005284:	d50b      	bpl.n	800529e <_printf_i+0x162>
 8005286:	07ca      	lsls	r2, r1, #31
 8005288:	bf44      	itt	mi
 800528a:	f041 0120 	orrmi.w	r1, r1, #32
 800528e:	6021      	strmi	r1, [r4, #0]
 8005290:	b91b      	cbnz	r3, 800529a <_printf_i+0x15e>
 8005292:	6822      	ldr	r2, [r4, #0]
 8005294:	f022 0220 	bic.w	r2, r2, #32
 8005298:	6022      	str	r2, [r4, #0]
 800529a:	2210      	movs	r2, #16
 800529c:	e7b7      	b.n	800520e <_printf_i+0xd2>
 800529e:	064d      	lsls	r5, r1, #25
 80052a0:	bf48      	it	mi
 80052a2:	b29b      	uxthmi	r3, r3
 80052a4:	e7ef      	b.n	8005286 <_printf_i+0x14a>
 80052a6:	4665      	mov	r5, ip
 80052a8:	fbb3 f1f2 	udiv	r1, r3, r2
 80052ac:	fb02 3311 	mls	r3, r2, r1, r3
 80052b0:	5cc3      	ldrb	r3, [r0, r3]
 80052b2:	f805 3d01 	strb.w	r3, [r5, #-1]!
 80052b6:	460b      	mov	r3, r1
 80052b8:	2900      	cmp	r1, #0
 80052ba:	d1f5      	bne.n	80052a8 <_printf_i+0x16c>
 80052bc:	e7b9      	b.n	8005232 <_printf_i+0xf6>
 80052be:	6813      	ldr	r3, [r2, #0]
 80052c0:	6825      	ldr	r5, [r4, #0]
 80052c2:	6961      	ldr	r1, [r4, #20]
 80052c4:	1d18      	adds	r0, r3, #4
 80052c6:	6010      	str	r0, [r2, #0]
 80052c8:	0628      	lsls	r0, r5, #24
 80052ca:	681b      	ldr	r3, [r3, #0]
 80052cc:	d501      	bpl.n	80052d2 <_printf_i+0x196>
 80052ce:	6019      	str	r1, [r3, #0]
 80052d0:	e002      	b.n	80052d8 <_printf_i+0x19c>
 80052d2:	066a      	lsls	r2, r5, #25
 80052d4:	d5fb      	bpl.n	80052ce <_printf_i+0x192>
 80052d6:	8019      	strh	r1, [r3, #0]
 80052d8:	2300      	movs	r3, #0
 80052da:	6123      	str	r3, [r4, #16]
 80052dc:	4665      	mov	r5, ip
 80052de:	e7b9      	b.n	8005254 <_printf_i+0x118>
 80052e0:	6813      	ldr	r3, [r2, #0]
 80052e2:	1d19      	adds	r1, r3, #4
 80052e4:	6011      	str	r1, [r2, #0]
 80052e6:	681d      	ldr	r5, [r3, #0]
 80052e8:	6862      	ldr	r2, [r4, #4]
 80052ea:	2100      	movs	r1, #0
 80052ec:	4628      	mov	r0, r5
 80052ee:	f7fa ff7f 	bl	80001f0 <memchr>
 80052f2:	b108      	cbz	r0, 80052f8 <_printf_i+0x1bc>
 80052f4:	1b40      	subs	r0, r0, r5
 80052f6:	6060      	str	r0, [r4, #4]
 80052f8:	6863      	ldr	r3, [r4, #4]
 80052fa:	6123      	str	r3, [r4, #16]
 80052fc:	2300      	movs	r3, #0
 80052fe:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005302:	e7a7      	b.n	8005254 <_printf_i+0x118>
 8005304:	6923      	ldr	r3, [r4, #16]
 8005306:	462a      	mov	r2, r5
 8005308:	4639      	mov	r1, r7
 800530a:	4630      	mov	r0, r6
 800530c:	47c0      	blx	r8
 800530e:	3001      	adds	r0, #1
 8005310:	d0aa      	beq.n	8005268 <_printf_i+0x12c>
 8005312:	6823      	ldr	r3, [r4, #0]
 8005314:	079b      	lsls	r3, r3, #30
 8005316:	d413      	bmi.n	8005340 <_printf_i+0x204>
 8005318:	68e0      	ldr	r0, [r4, #12]
 800531a:	9b03      	ldr	r3, [sp, #12]
 800531c:	4298      	cmp	r0, r3
 800531e:	bfb8      	it	lt
 8005320:	4618      	movlt	r0, r3
 8005322:	e7a3      	b.n	800526c <_printf_i+0x130>
 8005324:	2301      	movs	r3, #1
 8005326:	464a      	mov	r2, r9
 8005328:	4639      	mov	r1, r7
 800532a:	4630      	mov	r0, r6
 800532c:	47c0      	blx	r8
 800532e:	3001      	adds	r0, #1
 8005330:	d09a      	beq.n	8005268 <_printf_i+0x12c>
 8005332:	3501      	adds	r5, #1
 8005334:	68e3      	ldr	r3, [r4, #12]
 8005336:	9a03      	ldr	r2, [sp, #12]
 8005338:	1a9b      	subs	r3, r3, r2
 800533a:	42ab      	cmp	r3, r5
 800533c:	dcf2      	bgt.n	8005324 <_printf_i+0x1e8>
 800533e:	e7eb      	b.n	8005318 <_printf_i+0x1dc>
 8005340:	2500      	movs	r5, #0
 8005342:	f104 0919 	add.w	r9, r4, #25
 8005346:	e7f5      	b.n	8005334 <_printf_i+0x1f8>
 8005348:	2b00      	cmp	r3, #0
 800534a:	d1ac      	bne.n	80052a6 <_printf_i+0x16a>
 800534c:	7803      	ldrb	r3, [r0, #0]
 800534e:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005352:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005356:	e76c      	b.n	8005232 <_printf_i+0xf6>
 8005358:	08005a25 	.word	0x08005a25
 800535c:	08005a36 	.word	0x08005a36

08005360 <_sbrk_r>:
 8005360:	b538      	push	{r3, r4, r5, lr}
 8005362:	4c06      	ldr	r4, [pc, #24]	; (800537c <_sbrk_r+0x1c>)
 8005364:	2300      	movs	r3, #0
 8005366:	4605      	mov	r5, r0
 8005368:	4608      	mov	r0, r1
 800536a:	6023      	str	r3, [r4, #0]
 800536c:	f7fb fe5a 	bl	8001024 <_sbrk>
 8005370:	1c43      	adds	r3, r0, #1
 8005372:	d102      	bne.n	800537a <_sbrk_r+0x1a>
 8005374:	6823      	ldr	r3, [r4, #0]
 8005376:	b103      	cbz	r3, 800537a <_sbrk_r+0x1a>
 8005378:	602b      	str	r3, [r5, #0]
 800537a:	bd38      	pop	{r3, r4, r5, pc}
 800537c:	20000314 	.word	0x20000314

08005380 <__sread>:
 8005380:	b510      	push	{r4, lr}
 8005382:	460c      	mov	r4, r1
 8005384:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005388:	f000 fa96 	bl	80058b8 <_read_r>
 800538c:	2800      	cmp	r0, #0
 800538e:	bfab      	itete	ge
 8005390:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8005392:	89a3      	ldrhlt	r3, [r4, #12]
 8005394:	181b      	addge	r3, r3, r0
 8005396:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800539a:	bfac      	ite	ge
 800539c:	6563      	strge	r3, [r4, #84]	; 0x54
 800539e:	81a3      	strhlt	r3, [r4, #12]
 80053a0:	bd10      	pop	{r4, pc}

080053a2 <__swrite>:
 80053a2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80053a6:	461f      	mov	r7, r3
 80053a8:	898b      	ldrh	r3, [r1, #12]
 80053aa:	05db      	lsls	r3, r3, #23
 80053ac:	4605      	mov	r5, r0
 80053ae:	460c      	mov	r4, r1
 80053b0:	4616      	mov	r6, r2
 80053b2:	d505      	bpl.n	80053c0 <__swrite+0x1e>
 80053b4:	2302      	movs	r3, #2
 80053b6:	2200      	movs	r2, #0
 80053b8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80053bc:	f000 f9b6 	bl	800572c <_lseek_r>
 80053c0:	89a3      	ldrh	r3, [r4, #12]
 80053c2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80053c6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80053ca:	81a3      	strh	r3, [r4, #12]
 80053cc:	4632      	mov	r2, r6
 80053ce:	463b      	mov	r3, r7
 80053d0:	4628      	mov	r0, r5
 80053d2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80053d6:	f000 b869 	b.w	80054ac <_write_r>

080053da <__sseek>:
 80053da:	b510      	push	{r4, lr}
 80053dc:	460c      	mov	r4, r1
 80053de:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80053e2:	f000 f9a3 	bl	800572c <_lseek_r>
 80053e6:	1c43      	adds	r3, r0, #1
 80053e8:	89a3      	ldrh	r3, [r4, #12]
 80053ea:	bf15      	itete	ne
 80053ec:	6560      	strne	r0, [r4, #84]	; 0x54
 80053ee:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80053f2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80053f6:	81a3      	strheq	r3, [r4, #12]
 80053f8:	bf18      	it	ne
 80053fa:	81a3      	strhne	r3, [r4, #12]
 80053fc:	bd10      	pop	{r4, pc}

080053fe <__sclose>:
 80053fe:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005402:	f000 b8d3 	b.w	80055ac <_close_r>
	...

08005408 <__swbuf_r>:
 8005408:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800540a:	460e      	mov	r6, r1
 800540c:	4614      	mov	r4, r2
 800540e:	4605      	mov	r5, r0
 8005410:	b118      	cbz	r0, 800541a <__swbuf_r+0x12>
 8005412:	6983      	ldr	r3, [r0, #24]
 8005414:	b90b      	cbnz	r3, 800541a <__swbuf_r+0x12>
 8005416:	f7ff fbf7 	bl	8004c08 <__sinit>
 800541a:	4b21      	ldr	r3, [pc, #132]	; (80054a0 <__swbuf_r+0x98>)
 800541c:	429c      	cmp	r4, r3
 800541e:	d12a      	bne.n	8005476 <__swbuf_r+0x6e>
 8005420:	686c      	ldr	r4, [r5, #4]
 8005422:	69a3      	ldr	r3, [r4, #24]
 8005424:	60a3      	str	r3, [r4, #8]
 8005426:	89a3      	ldrh	r3, [r4, #12]
 8005428:	071a      	lsls	r2, r3, #28
 800542a:	d52e      	bpl.n	800548a <__swbuf_r+0x82>
 800542c:	6923      	ldr	r3, [r4, #16]
 800542e:	b363      	cbz	r3, 800548a <__swbuf_r+0x82>
 8005430:	6923      	ldr	r3, [r4, #16]
 8005432:	6820      	ldr	r0, [r4, #0]
 8005434:	1ac0      	subs	r0, r0, r3
 8005436:	6963      	ldr	r3, [r4, #20]
 8005438:	b2f6      	uxtb	r6, r6
 800543a:	4283      	cmp	r3, r0
 800543c:	4637      	mov	r7, r6
 800543e:	dc04      	bgt.n	800544a <__swbuf_r+0x42>
 8005440:	4621      	mov	r1, r4
 8005442:	4628      	mov	r0, r5
 8005444:	f000 f948 	bl	80056d8 <_fflush_r>
 8005448:	bb28      	cbnz	r0, 8005496 <__swbuf_r+0x8e>
 800544a:	68a3      	ldr	r3, [r4, #8]
 800544c:	3b01      	subs	r3, #1
 800544e:	60a3      	str	r3, [r4, #8]
 8005450:	6823      	ldr	r3, [r4, #0]
 8005452:	1c5a      	adds	r2, r3, #1
 8005454:	6022      	str	r2, [r4, #0]
 8005456:	701e      	strb	r6, [r3, #0]
 8005458:	6963      	ldr	r3, [r4, #20]
 800545a:	3001      	adds	r0, #1
 800545c:	4283      	cmp	r3, r0
 800545e:	d004      	beq.n	800546a <__swbuf_r+0x62>
 8005460:	89a3      	ldrh	r3, [r4, #12]
 8005462:	07db      	lsls	r3, r3, #31
 8005464:	d519      	bpl.n	800549a <__swbuf_r+0x92>
 8005466:	2e0a      	cmp	r6, #10
 8005468:	d117      	bne.n	800549a <__swbuf_r+0x92>
 800546a:	4621      	mov	r1, r4
 800546c:	4628      	mov	r0, r5
 800546e:	f000 f933 	bl	80056d8 <_fflush_r>
 8005472:	b190      	cbz	r0, 800549a <__swbuf_r+0x92>
 8005474:	e00f      	b.n	8005496 <__swbuf_r+0x8e>
 8005476:	4b0b      	ldr	r3, [pc, #44]	; (80054a4 <__swbuf_r+0x9c>)
 8005478:	429c      	cmp	r4, r3
 800547a:	d101      	bne.n	8005480 <__swbuf_r+0x78>
 800547c:	68ac      	ldr	r4, [r5, #8]
 800547e:	e7d0      	b.n	8005422 <__swbuf_r+0x1a>
 8005480:	4b09      	ldr	r3, [pc, #36]	; (80054a8 <__swbuf_r+0xa0>)
 8005482:	429c      	cmp	r4, r3
 8005484:	bf08      	it	eq
 8005486:	68ec      	ldreq	r4, [r5, #12]
 8005488:	e7cb      	b.n	8005422 <__swbuf_r+0x1a>
 800548a:	4621      	mov	r1, r4
 800548c:	4628      	mov	r0, r5
 800548e:	f000 f81f 	bl	80054d0 <__swsetup_r>
 8005492:	2800      	cmp	r0, #0
 8005494:	d0cc      	beq.n	8005430 <__swbuf_r+0x28>
 8005496:	f04f 37ff 	mov.w	r7, #4294967295
 800549a:	4638      	mov	r0, r7
 800549c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800549e:	bf00      	nop
 80054a0:	080059d4 	.word	0x080059d4
 80054a4:	080059f4 	.word	0x080059f4
 80054a8:	080059b4 	.word	0x080059b4

080054ac <_write_r>:
 80054ac:	b538      	push	{r3, r4, r5, lr}
 80054ae:	4c07      	ldr	r4, [pc, #28]	; (80054cc <_write_r+0x20>)
 80054b0:	4605      	mov	r5, r0
 80054b2:	4608      	mov	r0, r1
 80054b4:	4611      	mov	r1, r2
 80054b6:	2200      	movs	r2, #0
 80054b8:	6022      	str	r2, [r4, #0]
 80054ba:	461a      	mov	r2, r3
 80054bc:	f7fb fd61 	bl	8000f82 <_write>
 80054c0:	1c43      	adds	r3, r0, #1
 80054c2:	d102      	bne.n	80054ca <_write_r+0x1e>
 80054c4:	6823      	ldr	r3, [r4, #0]
 80054c6:	b103      	cbz	r3, 80054ca <_write_r+0x1e>
 80054c8:	602b      	str	r3, [r5, #0]
 80054ca:	bd38      	pop	{r3, r4, r5, pc}
 80054cc:	20000314 	.word	0x20000314

080054d0 <__swsetup_r>:
 80054d0:	4b32      	ldr	r3, [pc, #200]	; (800559c <__swsetup_r+0xcc>)
 80054d2:	b570      	push	{r4, r5, r6, lr}
 80054d4:	681d      	ldr	r5, [r3, #0]
 80054d6:	4606      	mov	r6, r0
 80054d8:	460c      	mov	r4, r1
 80054da:	b125      	cbz	r5, 80054e6 <__swsetup_r+0x16>
 80054dc:	69ab      	ldr	r3, [r5, #24]
 80054de:	b913      	cbnz	r3, 80054e6 <__swsetup_r+0x16>
 80054e0:	4628      	mov	r0, r5
 80054e2:	f7ff fb91 	bl	8004c08 <__sinit>
 80054e6:	4b2e      	ldr	r3, [pc, #184]	; (80055a0 <__swsetup_r+0xd0>)
 80054e8:	429c      	cmp	r4, r3
 80054ea:	d10f      	bne.n	800550c <__swsetup_r+0x3c>
 80054ec:	686c      	ldr	r4, [r5, #4]
 80054ee:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80054f2:	b29a      	uxth	r2, r3
 80054f4:	0715      	lsls	r5, r2, #28
 80054f6:	d42c      	bmi.n	8005552 <__swsetup_r+0x82>
 80054f8:	06d0      	lsls	r0, r2, #27
 80054fa:	d411      	bmi.n	8005520 <__swsetup_r+0x50>
 80054fc:	2209      	movs	r2, #9
 80054fe:	6032      	str	r2, [r6, #0]
 8005500:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005504:	81a3      	strh	r3, [r4, #12]
 8005506:	f04f 30ff 	mov.w	r0, #4294967295
 800550a:	e03e      	b.n	800558a <__swsetup_r+0xba>
 800550c:	4b25      	ldr	r3, [pc, #148]	; (80055a4 <__swsetup_r+0xd4>)
 800550e:	429c      	cmp	r4, r3
 8005510:	d101      	bne.n	8005516 <__swsetup_r+0x46>
 8005512:	68ac      	ldr	r4, [r5, #8]
 8005514:	e7eb      	b.n	80054ee <__swsetup_r+0x1e>
 8005516:	4b24      	ldr	r3, [pc, #144]	; (80055a8 <__swsetup_r+0xd8>)
 8005518:	429c      	cmp	r4, r3
 800551a:	bf08      	it	eq
 800551c:	68ec      	ldreq	r4, [r5, #12]
 800551e:	e7e6      	b.n	80054ee <__swsetup_r+0x1e>
 8005520:	0751      	lsls	r1, r2, #29
 8005522:	d512      	bpl.n	800554a <__swsetup_r+0x7a>
 8005524:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005526:	b141      	cbz	r1, 800553a <__swsetup_r+0x6a>
 8005528:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800552c:	4299      	cmp	r1, r3
 800552e:	d002      	beq.n	8005536 <__swsetup_r+0x66>
 8005530:	4630      	mov	r0, r6
 8005532:	f000 f973 	bl	800581c <_free_r>
 8005536:	2300      	movs	r3, #0
 8005538:	6363      	str	r3, [r4, #52]	; 0x34
 800553a:	89a3      	ldrh	r3, [r4, #12]
 800553c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8005540:	81a3      	strh	r3, [r4, #12]
 8005542:	2300      	movs	r3, #0
 8005544:	6063      	str	r3, [r4, #4]
 8005546:	6923      	ldr	r3, [r4, #16]
 8005548:	6023      	str	r3, [r4, #0]
 800554a:	89a3      	ldrh	r3, [r4, #12]
 800554c:	f043 0308 	orr.w	r3, r3, #8
 8005550:	81a3      	strh	r3, [r4, #12]
 8005552:	6923      	ldr	r3, [r4, #16]
 8005554:	b94b      	cbnz	r3, 800556a <__swsetup_r+0x9a>
 8005556:	89a3      	ldrh	r3, [r4, #12]
 8005558:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800555c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005560:	d003      	beq.n	800556a <__swsetup_r+0x9a>
 8005562:	4621      	mov	r1, r4
 8005564:	4630      	mov	r0, r6
 8005566:	f000 f917 	bl	8005798 <__smakebuf_r>
 800556a:	89a2      	ldrh	r2, [r4, #12]
 800556c:	f012 0301 	ands.w	r3, r2, #1
 8005570:	d00c      	beq.n	800558c <__swsetup_r+0xbc>
 8005572:	2300      	movs	r3, #0
 8005574:	60a3      	str	r3, [r4, #8]
 8005576:	6963      	ldr	r3, [r4, #20]
 8005578:	425b      	negs	r3, r3
 800557a:	61a3      	str	r3, [r4, #24]
 800557c:	6923      	ldr	r3, [r4, #16]
 800557e:	b953      	cbnz	r3, 8005596 <__swsetup_r+0xc6>
 8005580:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005584:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 8005588:	d1ba      	bne.n	8005500 <__swsetup_r+0x30>
 800558a:	bd70      	pop	{r4, r5, r6, pc}
 800558c:	0792      	lsls	r2, r2, #30
 800558e:	bf58      	it	pl
 8005590:	6963      	ldrpl	r3, [r4, #20]
 8005592:	60a3      	str	r3, [r4, #8]
 8005594:	e7f2      	b.n	800557c <__swsetup_r+0xac>
 8005596:	2000      	movs	r0, #0
 8005598:	e7f7      	b.n	800558a <__swsetup_r+0xba>
 800559a:	bf00      	nop
 800559c:	2000000c 	.word	0x2000000c
 80055a0:	080059d4 	.word	0x080059d4
 80055a4:	080059f4 	.word	0x080059f4
 80055a8:	080059b4 	.word	0x080059b4

080055ac <_close_r>:
 80055ac:	b538      	push	{r3, r4, r5, lr}
 80055ae:	4c06      	ldr	r4, [pc, #24]	; (80055c8 <_close_r+0x1c>)
 80055b0:	2300      	movs	r3, #0
 80055b2:	4605      	mov	r5, r0
 80055b4:	4608      	mov	r0, r1
 80055b6:	6023      	str	r3, [r4, #0]
 80055b8:	f7fb fcff 	bl	8000fba <_close>
 80055bc:	1c43      	adds	r3, r0, #1
 80055be:	d102      	bne.n	80055c6 <_close_r+0x1a>
 80055c0:	6823      	ldr	r3, [r4, #0]
 80055c2:	b103      	cbz	r3, 80055c6 <_close_r+0x1a>
 80055c4:	602b      	str	r3, [r5, #0]
 80055c6:	bd38      	pop	{r3, r4, r5, pc}
 80055c8:	20000314 	.word	0x20000314

080055cc <__sflush_r>:
 80055cc:	898a      	ldrh	r2, [r1, #12]
 80055ce:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80055d2:	4605      	mov	r5, r0
 80055d4:	0710      	lsls	r0, r2, #28
 80055d6:	460c      	mov	r4, r1
 80055d8:	d458      	bmi.n	800568c <__sflush_r+0xc0>
 80055da:	684b      	ldr	r3, [r1, #4]
 80055dc:	2b00      	cmp	r3, #0
 80055de:	dc05      	bgt.n	80055ec <__sflush_r+0x20>
 80055e0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80055e2:	2b00      	cmp	r3, #0
 80055e4:	dc02      	bgt.n	80055ec <__sflush_r+0x20>
 80055e6:	2000      	movs	r0, #0
 80055e8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80055ec:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80055ee:	2e00      	cmp	r6, #0
 80055f0:	d0f9      	beq.n	80055e6 <__sflush_r+0x1a>
 80055f2:	2300      	movs	r3, #0
 80055f4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80055f8:	682f      	ldr	r7, [r5, #0]
 80055fa:	6a21      	ldr	r1, [r4, #32]
 80055fc:	602b      	str	r3, [r5, #0]
 80055fe:	d032      	beq.n	8005666 <__sflush_r+0x9a>
 8005600:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8005602:	89a3      	ldrh	r3, [r4, #12]
 8005604:	075a      	lsls	r2, r3, #29
 8005606:	d505      	bpl.n	8005614 <__sflush_r+0x48>
 8005608:	6863      	ldr	r3, [r4, #4]
 800560a:	1ac0      	subs	r0, r0, r3
 800560c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800560e:	b10b      	cbz	r3, 8005614 <__sflush_r+0x48>
 8005610:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8005612:	1ac0      	subs	r0, r0, r3
 8005614:	2300      	movs	r3, #0
 8005616:	4602      	mov	r2, r0
 8005618:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800561a:	6a21      	ldr	r1, [r4, #32]
 800561c:	4628      	mov	r0, r5
 800561e:	47b0      	blx	r6
 8005620:	1c43      	adds	r3, r0, #1
 8005622:	89a3      	ldrh	r3, [r4, #12]
 8005624:	d106      	bne.n	8005634 <__sflush_r+0x68>
 8005626:	6829      	ldr	r1, [r5, #0]
 8005628:	291d      	cmp	r1, #29
 800562a:	d848      	bhi.n	80056be <__sflush_r+0xf2>
 800562c:	4a29      	ldr	r2, [pc, #164]	; (80056d4 <__sflush_r+0x108>)
 800562e:	40ca      	lsrs	r2, r1
 8005630:	07d6      	lsls	r6, r2, #31
 8005632:	d544      	bpl.n	80056be <__sflush_r+0xf2>
 8005634:	2200      	movs	r2, #0
 8005636:	6062      	str	r2, [r4, #4]
 8005638:	04d9      	lsls	r1, r3, #19
 800563a:	6922      	ldr	r2, [r4, #16]
 800563c:	6022      	str	r2, [r4, #0]
 800563e:	d504      	bpl.n	800564a <__sflush_r+0x7e>
 8005640:	1c42      	adds	r2, r0, #1
 8005642:	d101      	bne.n	8005648 <__sflush_r+0x7c>
 8005644:	682b      	ldr	r3, [r5, #0]
 8005646:	b903      	cbnz	r3, 800564a <__sflush_r+0x7e>
 8005648:	6560      	str	r0, [r4, #84]	; 0x54
 800564a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800564c:	602f      	str	r7, [r5, #0]
 800564e:	2900      	cmp	r1, #0
 8005650:	d0c9      	beq.n	80055e6 <__sflush_r+0x1a>
 8005652:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005656:	4299      	cmp	r1, r3
 8005658:	d002      	beq.n	8005660 <__sflush_r+0x94>
 800565a:	4628      	mov	r0, r5
 800565c:	f000 f8de 	bl	800581c <_free_r>
 8005660:	2000      	movs	r0, #0
 8005662:	6360      	str	r0, [r4, #52]	; 0x34
 8005664:	e7c0      	b.n	80055e8 <__sflush_r+0x1c>
 8005666:	2301      	movs	r3, #1
 8005668:	4628      	mov	r0, r5
 800566a:	47b0      	blx	r6
 800566c:	1c41      	adds	r1, r0, #1
 800566e:	d1c8      	bne.n	8005602 <__sflush_r+0x36>
 8005670:	682b      	ldr	r3, [r5, #0]
 8005672:	2b00      	cmp	r3, #0
 8005674:	d0c5      	beq.n	8005602 <__sflush_r+0x36>
 8005676:	2b1d      	cmp	r3, #29
 8005678:	d001      	beq.n	800567e <__sflush_r+0xb2>
 800567a:	2b16      	cmp	r3, #22
 800567c:	d101      	bne.n	8005682 <__sflush_r+0xb6>
 800567e:	602f      	str	r7, [r5, #0]
 8005680:	e7b1      	b.n	80055e6 <__sflush_r+0x1a>
 8005682:	89a3      	ldrh	r3, [r4, #12]
 8005684:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005688:	81a3      	strh	r3, [r4, #12]
 800568a:	e7ad      	b.n	80055e8 <__sflush_r+0x1c>
 800568c:	690f      	ldr	r7, [r1, #16]
 800568e:	2f00      	cmp	r7, #0
 8005690:	d0a9      	beq.n	80055e6 <__sflush_r+0x1a>
 8005692:	0793      	lsls	r3, r2, #30
 8005694:	680e      	ldr	r6, [r1, #0]
 8005696:	bf08      	it	eq
 8005698:	694b      	ldreq	r3, [r1, #20]
 800569a:	600f      	str	r7, [r1, #0]
 800569c:	bf18      	it	ne
 800569e:	2300      	movne	r3, #0
 80056a0:	eba6 0807 	sub.w	r8, r6, r7
 80056a4:	608b      	str	r3, [r1, #8]
 80056a6:	f1b8 0f00 	cmp.w	r8, #0
 80056aa:	dd9c      	ble.n	80055e6 <__sflush_r+0x1a>
 80056ac:	4643      	mov	r3, r8
 80056ae:	463a      	mov	r2, r7
 80056b0:	6a21      	ldr	r1, [r4, #32]
 80056b2:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80056b4:	4628      	mov	r0, r5
 80056b6:	47b0      	blx	r6
 80056b8:	2800      	cmp	r0, #0
 80056ba:	dc06      	bgt.n	80056ca <__sflush_r+0xfe>
 80056bc:	89a3      	ldrh	r3, [r4, #12]
 80056be:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80056c2:	81a3      	strh	r3, [r4, #12]
 80056c4:	f04f 30ff 	mov.w	r0, #4294967295
 80056c8:	e78e      	b.n	80055e8 <__sflush_r+0x1c>
 80056ca:	4407      	add	r7, r0
 80056cc:	eba8 0800 	sub.w	r8, r8, r0
 80056d0:	e7e9      	b.n	80056a6 <__sflush_r+0xda>
 80056d2:	bf00      	nop
 80056d4:	20400001 	.word	0x20400001

080056d8 <_fflush_r>:
 80056d8:	b538      	push	{r3, r4, r5, lr}
 80056da:	690b      	ldr	r3, [r1, #16]
 80056dc:	4605      	mov	r5, r0
 80056de:	460c      	mov	r4, r1
 80056e0:	b1db      	cbz	r3, 800571a <_fflush_r+0x42>
 80056e2:	b118      	cbz	r0, 80056ec <_fflush_r+0x14>
 80056e4:	6983      	ldr	r3, [r0, #24]
 80056e6:	b90b      	cbnz	r3, 80056ec <_fflush_r+0x14>
 80056e8:	f7ff fa8e 	bl	8004c08 <__sinit>
 80056ec:	4b0c      	ldr	r3, [pc, #48]	; (8005720 <_fflush_r+0x48>)
 80056ee:	429c      	cmp	r4, r3
 80056f0:	d109      	bne.n	8005706 <_fflush_r+0x2e>
 80056f2:	686c      	ldr	r4, [r5, #4]
 80056f4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80056f8:	b17b      	cbz	r3, 800571a <_fflush_r+0x42>
 80056fa:	4621      	mov	r1, r4
 80056fc:	4628      	mov	r0, r5
 80056fe:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005702:	f7ff bf63 	b.w	80055cc <__sflush_r>
 8005706:	4b07      	ldr	r3, [pc, #28]	; (8005724 <_fflush_r+0x4c>)
 8005708:	429c      	cmp	r4, r3
 800570a:	d101      	bne.n	8005710 <_fflush_r+0x38>
 800570c:	68ac      	ldr	r4, [r5, #8]
 800570e:	e7f1      	b.n	80056f4 <_fflush_r+0x1c>
 8005710:	4b05      	ldr	r3, [pc, #20]	; (8005728 <_fflush_r+0x50>)
 8005712:	429c      	cmp	r4, r3
 8005714:	bf08      	it	eq
 8005716:	68ec      	ldreq	r4, [r5, #12]
 8005718:	e7ec      	b.n	80056f4 <_fflush_r+0x1c>
 800571a:	2000      	movs	r0, #0
 800571c:	bd38      	pop	{r3, r4, r5, pc}
 800571e:	bf00      	nop
 8005720:	080059d4 	.word	0x080059d4
 8005724:	080059f4 	.word	0x080059f4
 8005728:	080059b4 	.word	0x080059b4

0800572c <_lseek_r>:
 800572c:	b538      	push	{r3, r4, r5, lr}
 800572e:	4c07      	ldr	r4, [pc, #28]	; (800574c <_lseek_r+0x20>)
 8005730:	4605      	mov	r5, r0
 8005732:	4608      	mov	r0, r1
 8005734:	4611      	mov	r1, r2
 8005736:	2200      	movs	r2, #0
 8005738:	6022      	str	r2, [r4, #0]
 800573a:	461a      	mov	r2, r3
 800573c:	f7fb fc64 	bl	8001008 <_lseek>
 8005740:	1c43      	adds	r3, r0, #1
 8005742:	d102      	bne.n	800574a <_lseek_r+0x1e>
 8005744:	6823      	ldr	r3, [r4, #0]
 8005746:	b103      	cbz	r3, 800574a <_lseek_r+0x1e>
 8005748:	602b      	str	r3, [r5, #0]
 800574a:	bd38      	pop	{r3, r4, r5, pc}
 800574c:	20000314 	.word	0x20000314

08005750 <__swhatbuf_r>:
 8005750:	b570      	push	{r4, r5, r6, lr}
 8005752:	460e      	mov	r6, r1
 8005754:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005758:	2900      	cmp	r1, #0
 800575a:	b096      	sub	sp, #88	; 0x58
 800575c:	4614      	mov	r4, r2
 800575e:	461d      	mov	r5, r3
 8005760:	da07      	bge.n	8005772 <__swhatbuf_r+0x22>
 8005762:	2300      	movs	r3, #0
 8005764:	602b      	str	r3, [r5, #0]
 8005766:	89b3      	ldrh	r3, [r6, #12]
 8005768:	061a      	lsls	r2, r3, #24
 800576a:	d410      	bmi.n	800578e <__swhatbuf_r+0x3e>
 800576c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005770:	e00e      	b.n	8005790 <__swhatbuf_r+0x40>
 8005772:	466a      	mov	r2, sp
 8005774:	f000 f8b2 	bl	80058dc <_fstat_r>
 8005778:	2800      	cmp	r0, #0
 800577a:	dbf2      	blt.n	8005762 <__swhatbuf_r+0x12>
 800577c:	9a01      	ldr	r2, [sp, #4]
 800577e:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8005782:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8005786:	425a      	negs	r2, r3
 8005788:	415a      	adcs	r2, r3
 800578a:	602a      	str	r2, [r5, #0]
 800578c:	e7ee      	b.n	800576c <__swhatbuf_r+0x1c>
 800578e:	2340      	movs	r3, #64	; 0x40
 8005790:	2000      	movs	r0, #0
 8005792:	6023      	str	r3, [r4, #0]
 8005794:	b016      	add	sp, #88	; 0x58
 8005796:	bd70      	pop	{r4, r5, r6, pc}

08005798 <__smakebuf_r>:
 8005798:	898b      	ldrh	r3, [r1, #12]
 800579a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800579c:	079d      	lsls	r5, r3, #30
 800579e:	4606      	mov	r6, r0
 80057a0:	460c      	mov	r4, r1
 80057a2:	d507      	bpl.n	80057b4 <__smakebuf_r+0x1c>
 80057a4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80057a8:	6023      	str	r3, [r4, #0]
 80057aa:	6123      	str	r3, [r4, #16]
 80057ac:	2301      	movs	r3, #1
 80057ae:	6163      	str	r3, [r4, #20]
 80057b0:	b002      	add	sp, #8
 80057b2:	bd70      	pop	{r4, r5, r6, pc}
 80057b4:	ab01      	add	r3, sp, #4
 80057b6:	466a      	mov	r2, sp
 80057b8:	f7ff ffca 	bl	8005750 <__swhatbuf_r>
 80057bc:	9900      	ldr	r1, [sp, #0]
 80057be:	4605      	mov	r5, r0
 80057c0:	4630      	mov	r0, r6
 80057c2:	f7ff faab 	bl	8004d1c <_malloc_r>
 80057c6:	b948      	cbnz	r0, 80057dc <__smakebuf_r+0x44>
 80057c8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80057cc:	059a      	lsls	r2, r3, #22
 80057ce:	d4ef      	bmi.n	80057b0 <__smakebuf_r+0x18>
 80057d0:	f023 0303 	bic.w	r3, r3, #3
 80057d4:	f043 0302 	orr.w	r3, r3, #2
 80057d8:	81a3      	strh	r3, [r4, #12]
 80057da:	e7e3      	b.n	80057a4 <__smakebuf_r+0xc>
 80057dc:	4b0d      	ldr	r3, [pc, #52]	; (8005814 <__smakebuf_r+0x7c>)
 80057de:	62b3      	str	r3, [r6, #40]	; 0x28
 80057e0:	89a3      	ldrh	r3, [r4, #12]
 80057e2:	6020      	str	r0, [r4, #0]
 80057e4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80057e8:	81a3      	strh	r3, [r4, #12]
 80057ea:	9b00      	ldr	r3, [sp, #0]
 80057ec:	6163      	str	r3, [r4, #20]
 80057ee:	9b01      	ldr	r3, [sp, #4]
 80057f0:	6120      	str	r0, [r4, #16]
 80057f2:	b15b      	cbz	r3, 800580c <__smakebuf_r+0x74>
 80057f4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80057f8:	4630      	mov	r0, r6
 80057fa:	f000 f881 	bl	8005900 <_isatty_r>
 80057fe:	b128      	cbz	r0, 800580c <__smakebuf_r+0x74>
 8005800:	89a3      	ldrh	r3, [r4, #12]
 8005802:	f023 0303 	bic.w	r3, r3, #3
 8005806:	f043 0301 	orr.w	r3, r3, #1
 800580a:	81a3      	strh	r3, [r4, #12]
 800580c:	89a3      	ldrh	r3, [r4, #12]
 800580e:	431d      	orrs	r5, r3
 8005810:	81a5      	strh	r5, [r4, #12]
 8005812:	e7cd      	b.n	80057b0 <__smakebuf_r+0x18>
 8005814:	08004bd1 	.word	0x08004bd1

08005818 <__malloc_lock>:
 8005818:	4770      	bx	lr

0800581a <__malloc_unlock>:
 800581a:	4770      	bx	lr

0800581c <_free_r>:
 800581c:	b538      	push	{r3, r4, r5, lr}
 800581e:	4605      	mov	r5, r0
 8005820:	2900      	cmp	r1, #0
 8005822:	d045      	beq.n	80058b0 <_free_r+0x94>
 8005824:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005828:	1f0c      	subs	r4, r1, #4
 800582a:	2b00      	cmp	r3, #0
 800582c:	bfb8      	it	lt
 800582e:	18e4      	addlt	r4, r4, r3
 8005830:	f7ff fff2 	bl	8005818 <__malloc_lock>
 8005834:	4a1f      	ldr	r2, [pc, #124]	; (80058b4 <_free_r+0x98>)
 8005836:	6813      	ldr	r3, [r2, #0]
 8005838:	4610      	mov	r0, r2
 800583a:	b933      	cbnz	r3, 800584a <_free_r+0x2e>
 800583c:	6063      	str	r3, [r4, #4]
 800583e:	6014      	str	r4, [r2, #0]
 8005840:	4628      	mov	r0, r5
 8005842:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005846:	f7ff bfe8 	b.w	800581a <__malloc_unlock>
 800584a:	42a3      	cmp	r3, r4
 800584c:	d90c      	bls.n	8005868 <_free_r+0x4c>
 800584e:	6821      	ldr	r1, [r4, #0]
 8005850:	1862      	adds	r2, r4, r1
 8005852:	4293      	cmp	r3, r2
 8005854:	bf04      	itt	eq
 8005856:	681a      	ldreq	r2, [r3, #0]
 8005858:	685b      	ldreq	r3, [r3, #4]
 800585a:	6063      	str	r3, [r4, #4]
 800585c:	bf04      	itt	eq
 800585e:	1852      	addeq	r2, r2, r1
 8005860:	6022      	streq	r2, [r4, #0]
 8005862:	6004      	str	r4, [r0, #0]
 8005864:	e7ec      	b.n	8005840 <_free_r+0x24>
 8005866:	4613      	mov	r3, r2
 8005868:	685a      	ldr	r2, [r3, #4]
 800586a:	b10a      	cbz	r2, 8005870 <_free_r+0x54>
 800586c:	42a2      	cmp	r2, r4
 800586e:	d9fa      	bls.n	8005866 <_free_r+0x4a>
 8005870:	6819      	ldr	r1, [r3, #0]
 8005872:	1858      	adds	r0, r3, r1
 8005874:	42a0      	cmp	r0, r4
 8005876:	d10b      	bne.n	8005890 <_free_r+0x74>
 8005878:	6820      	ldr	r0, [r4, #0]
 800587a:	4401      	add	r1, r0
 800587c:	1858      	adds	r0, r3, r1
 800587e:	4282      	cmp	r2, r0
 8005880:	6019      	str	r1, [r3, #0]
 8005882:	d1dd      	bne.n	8005840 <_free_r+0x24>
 8005884:	6810      	ldr	r0, [r2, #0]
 8005886:	6852      	ldr	r2, [r2, #4]
 8005888:	605a      	str	r2, [r3, #4]
 800588a:	4401      	add	r1, r0
 800588c:	6019      	str	r1, [r3, #0]
 800588e:	e7d7      	b.n	8005840 <_free_r+0x24>
 8005890:	d902      	bls.n	8005898 <_free_r+0x7c>
 8005892:	230c      	movs	r3, #12
 8005894:	602b      	str	r3, [r5, #0]
 8005896:	e7d3      	b.n	8005840 <_free_r+0x24>
 8005898:	6820      	ldr	r0, [r4, #0]
 800589a:	1821      	adds	r1, r4, r0
 800589c:	428a      	cmp	r2, r1
 800589e:	bf04      	itt	eq
 80058a0:	6811      	ldreq	r1, [r2, #0]
 80058a2:	6852      	ldreq	r2, [r2, #4]
 80058a4:	6062      	str	r2, [r4, #4]
 80058a6:	bf04      	itt	eq
 80058a8:	1809      	addeq	r1, r1, r0
 80058aa:	6021      	streq	r1, [r4, #0]
 80058ac:	605c      	str	r4, [r3, #4]
 80058ae:	e7c7      	b.n	8005840 <_free_r+0x24>
 80058b0:	bd38      	pop	{r3, r4, r5, pc}
 80058b2:	bf00      	nop
 80058b4:	20000090 	.word	0x20000090

080058b8 <_read_r>:
 80058b8:	b538      	push	{r3, r4, r5, lr}
 80058ba:	4c07      	ldr	r4, [pc, #28]	; (80058d8 <_read_r+0x20>)
 80058bc:	4605      	mov	r5, r0
 80058be:	4608      	mov	r0, r1
 80058c0:	4611      	mov	r1, r2
 80058c2:	2200      	movs	r2, #0
 80058c4:	6022      	str	r2, [r4, #0]
 80058c6:	461a      	mov	r2, r3
 80058c8:	f7fb fb3e 	bl	8000f48 <_read>
 80058cc:	1c43      	adds	r3, r0, #1
 80058ce:	d102      	bne.n	80058d6 <_read_r+0x1e>
 80058d0:	6823      	ldr	r3, [r4, #0]
 80058d2:	b103      	cbz	r3, 80058d6 <_read_r+0x1e>
 80058d4:	602b      	str	r3, [r5, #0]
 80058d6:	bd38      	pop	{r3, r4, r5, pc}
 80058d8:	20000314 	.word	0x20000314

080058dc <_fstat_r>:
 80058dc:	b538      	push	{r3, r4, r5, lr}
 80058de:	4c07      	ldr	r4, [pc, #28]	; (80058fc <_fstat_r+0x20>)
 80058e0:	2300      	movs	r3, #0
 80058e2:	4605      	mov	r5, r0
 80058e4:	4608      	mov	r0, r1
 80058e6:	4611      	mov	r1, r2
 80058e8:	6023      	str	r3, [r4, #0]
 80058ea:	f7fb fb72 	bl	8000fd2 <_fstat>
 80058ee:	1c43      	adds	r3, r0, #1
 80058f0:	d102      	bne.n	80058f8 <_fstat_r+0x1c>
 80058f2:	6823      	ldr	r3, [r4, #0]
 80058f4:	b103      	cbz	r3, 80058f8 <_fstat_r+0x1c>
 80058f6:	602b      	str	r3, [r5, #0]
 80058f8:	bd38      	pop	{r3, r4, r5, pc}
 80058fa:	bf00      	nop
 80058fc:	20000314 	.word	0x20000314

08005900 <_isatty_r>:
 8005900:	b538      	push	{r3, r4, r5, lr}
 8005902:	4c06      	ldr	r4, [pc, #24]	; (800591c <_isatty_r+0x1c>)
 8005904:	2300      	movs	r3, #0
 8005906:	4605      	mov	r5, r0
 8005908:	4608      	mov	r0, r1
 800590a:	6023      	str	r3, [r4, #0]
 800590c:	f7fb fb71 	bl	8000ff2 <_isatty>
 8005910:	1c43      	adds	r3, r0, #1
 8005912:	d102      	bne.n	800591a <_isatty_r+0x1a>
 8005914:	6823      	ldr	r3, [r4, #0]
 8005916:	b103      	cbz	r3, 800591a <_isatty_r+0x1a>
 8005918:	602b      	str	r3, [r5, #0]
 800591a:	bd38      	pop	{r3, r4, r5, pc}
 800591c:	20000314 	.word	0x20000314

08005920 <_init>:
 8005920:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005922:	bf00      	nop
 8005924:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005926:	bc08      	pop	{r3}
 8005928:	469e      	mov	lr, r3
 800592a:	4770      	bx	lr

0800592c <_fini>:
 800592c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800592e:	bf00      	nop
 8005930:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005932:	bc08      	pop	{r3}
 8005934:	469e      	mov	lr, r3
 8005936:	4770      	bx	lr
