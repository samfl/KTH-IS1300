
Project_1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004cc8  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000012c  08004e58  08004e58  00014e58  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004f84  08004f84  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  08004f84  08004f84  00014f84  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004f8c  08004f8c  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004f8c  08004f8c  00014f8c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004f90  08004f90  00014f90  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08004f94  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000260  20000070  08005004  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200002d0  08005004  000202d0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001288a  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00002830  00000000  00000000  0003292a  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000ee8  00000000  00000000  00035160  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000d80  00000000  00000000  00036048  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000275bf  00000000  00000000  00036dc8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000de8d  00000000  00000000  0005e387  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000ecc7e  00000000  00000000  0006c214  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00158e92  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000042b8  00000000  00000000  00158f10  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000070 	.word	0x20000070
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08004e40 	.word	0x08004e40

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000074 	.word	0x20000074
 80001cc:	08004e40 	.word	0x08004e40

080001d0 <strcmp>:
 80001d0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001d4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001d8:	2a01      	cmp	r2, #1
 80001da:	bf28      	it	cs
 80001dc:	429a      	cmpcs	r2, r3
 80001de:	d0f7      	beq.n	80001d0 <strcmp>
 80001e0:	1ad0      	subs	r0, r2, r3
 80001e2:	4770      	bx	lr
	...

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295
 80002a4:	f000 b972 	b.w	800058c <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	9e08      	ldr	r6, [sp, #32]
 80002c6:	4604      	mov	r4, r0
 80002c8:	4688      	mov	r8, r1
 80002ca:	2b00      	cmp	r3, #0
 80002cc:	d14b      	bne.n	8000366 <__udivmoddi4+0xa6>
 80002ce:	428a      	cmp	r2, r1
 80002d0:	4615      	mov	r5, r2
 80002d2:	d967      	bls.n	80003a4 <__udivmoddi4+0xe4>
 80002d4:	fab2 f282 	clz	r2, r2
 80002d8:	b14a      	cbz	r2, 80002ee <__udivmoddi4+0x2e>
 80002da:	f1c2 0720 	rsb	r7, r2, #32
 80002de:	fa01 f302 	lsl.w	r3, r1, r2
 80002e2:	fa20 f707 	lsr.w	r7, r0, r7
 80002e6:	4095      	lsls	r5, r2
 80002e8:	ea47 0803 	orr.w	r8, r7, r3
 80002ec:	4094      	lsls	r4, r2
 80002ee:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80002f2:	0c23      	lsrs	r3, r4, #16
 80002f4:	fbb8 f7fe 	udiv	r7, r8, lr
 80002f8:	fa1f fc85 	uxth.w	ip, r5
 80002fc:	fb0e 8817 	mls	r8, lr, r7, r8
 8000300:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000304:	fb07 f10c 	mul.w	r1, r7, ip
 8000308:	4299      	cmp	r1, r3
 800030a:	d909      	bls.n	8000320 <__udivmoddi4+0x60>
 800030c:	18eb      	adds	r3, r5, r3
 800030e:	f107 30ff 	add.w	r0, r7, #4294967295
 8000312:	f080 811b 	bcs.w	800054c <__udivmoddi4+0x28c>
 8000316:	4299      	cmp	r1, r3
 8000318:	f240 8118 	bls.w	800054c <__udivmoddi4+0x28c>
 800031c:	3f02      	subs	r7, #2
 800031e:	442b      	add	r3, r5
 8000320:	1a5b      	subs	r3, r3, r1
 8000322:	b2a4      	uxth	r4, r4
 8000324:	fbb3 f0fe 	udiv	r0, r3, lr
 8000328:	fb0e 3310 	mls	r3, lr, r0, r3
 800032c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000330:	fb00 fc0c 	mul.w	ip, r0, ip
 8000334:	45a4      	cmp	ip, r4
 8000336:	d909      	bls.n	800034c <__udivmoddi4+0x8c>
 8000338:	192c      	adds	r4, r5, r4
 800033a:	f100 33ff 	add.w	r3, r0, #4294967295
 800033e:	f080 8107 	bcs.w	8000550 <__udivmoddi4+0x290>
 8000342:	45a4      	cmp	ip, r4
 8000344:	f240 8104 	bls.w	8000550 <__udivmoddi4+0x290>
 8000348:	3802      	subs	r0, #2
 800034a:	442c      	add	r4, r5
 800034c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000350:	eba4 040c 	sub.w	r4, r4, ip
 8000354:	2700      	movs	r7, #0
 8000356:	b11e      	cbz	r6, 8000360 <__udivmoddi4+0xa0>
 8000358:	40d4      	lsrs	r4, r2
 800035a:	2300      	movs	r3, #0
 800035c:	e9c6 4300 	strd	r4, r3, [r6]
 8000360:	4639      	mov	r1, r7
 8000362:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000366:	428b      	cmp	r3, r1
 8000368:	d909      	bls.n	800037e <__udivmoddi4+0xbe>
 800036a:	2e00      	cmp	r6, #0
 800036c:	f000 80eb 	beq.w	8000546 <__udivmoddi4+0x286>
 8000370:	2700      	movs	r7, #0
 8000372:	e9c6 0100 	strd	r0, r1, [r6]
 8000376:	4638      	mov	r0, r7
 8000378:	4639      	mov	r1, r7
 800037a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800037e:	fab3 f783 	clz	r7, r3
 8000382:	2f00      	cmp	r7, #0
 8000384:	d147      	bne.n	8000416 <__udivmoddi4+0x156>
 8000386:	428b      	cmp	r3, r1
 8000388:	d302      	bcc.n	8000390 <__udivmoddi4+0xd0>
 800038a:	4282      	cmp	r2, r0
 800038c:	f200 80fa 	bhi.w	8000584 <__udivmoddi4+0x2c4>
 8000390:	1a84      	subs	r4, r0, r2
 8000392:	eb61 0303 	sbc.w	r3, r1, r3
 8000396:	2001      	movs	r0, #1
 8000398:	4698      	mov	r8, r3
 800039a:	2e00      	cmp	r6, #0
 800039c:	d0e0      	beq.n	8000360 <__udivmoddi4+0xa0>
 800039e:	e9c6 4800 	strd	r4, r8, [r6]
 80003a2:	e7dd      	b.n	8000360 <__udivmoddi4+0xa0>
 80003a4:	b902      	cbnz	r2, 80003a8 <__udivmoddi4+0xe8>
 80003a6:	deff      	udf	#255	; 0xff
 80003a8:	fab2 f282 	clz	r2, r2
 80003ac:	2a00      	cmp	r2, #0
 80003ae:	f040 808f 	bne.w	80004d0 <__udivmoddi4+0x210>
 80003b2:	1b49      	subs	r1, r1, r5
 80003b4:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80003b8:	fa1f f885 	uxth.w	r8, r5
 80003bc:	2701      	movs	r7, #1
 80003be:	fbb1 fcfe 	udiv	ip, r1, lr
 80003c2:	0c23      	lsrs	r3, r4, #16
 80003c4:	fb0e 111c 	mls	r1, lr, ip, r1
 80003c8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003cc:	fb08 f10c 	mul.w	r1, r8, ip
 80003d0:	4299      	cmp	r1, r3
 80003d2:	d907      	bls.n	80003e4 <__udivmoddi4+0x124>
 80003d4:	18eb      	adds	r3, r5, r3
 80003d6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80003da:	d202      	bcs.n	80003e2 <__udivmoddi4+0x122>
 80003dc:	4299      	cmp	r1, r3
 80003de:	f200 80cd 	bhi.w	800057c <__udivmoddi4+0x2bc>
 80003e2:	4684      	mov	ip, r0
 80003e4:	1a59      	subs	r1, r3, r1
 80003e6:	b2a3      	uxth	r3, r4
 80003e8:	fbb1 f0fe 	udiv	r0, r1, lr
 80003ec:	fb0e 1410 	mls	r4, lr, r0, r1
 80003f0:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 80003f4:	fb08 f800 	mul.w	r8, r8, r0
 80003f8:	45a0      	cmp	r8, r4
 80003fa:	d907      	bls.n	800040c <__udivmoddi4+0x14c>
 80003fc:	192c      	adds	r4, r5, r4
 80003fe:	f100 33ff 	add.w	r3, r0, #4294967295
 8000402:	d202      	bcs.n	800040a <__udivmoddi4+0x14a>
 8000404:	45a0      	cmp	r8, r4
 8000406:	f200 80b6 	bhi.w	8000576 <__udivmoddi4+0x2b6>
 800040a:	4618      	mov	r0, r3
 800040c:	eba4 0408 	sub.w	r4, r4, r8
 8000410:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000414:	e79f      	b.n	8000356 <__udivmoddi4+0x96>
 8000416:	f1c7 0c20 	rsb	ip, r7, #32
 800041a:	40bb      	lsls	r3, r7
 800041c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000420:	ea4e 0e03 	orr.w	lr, lr, r3
 8000424:	fa01 f407 	lsl.w	r4, r1, r7
 8000428:	fa20 f50c 	lsr.w	r5, r0, ip
 800042c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000430:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000434:	4325      	orrs	r5, r4
 8000436:	fbb3 f9f8 	udiv	r9, r3, r8
 800043a:	0c2c      	lsrs	r4, r5, #16
 800043c:	fb08 3319 	mls	r3, r8, r9, r3
 8000440:	fa1f fa8e 	uxth.w	sl, lr
 8000444:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000448:	fb09 f40a 	mul.w	r4, r9, sl
 800044c:	429c      	cmp	r4, r3
 800044e:	fa02 f207 	lsl.w	r2, r2, r7
 8000452:	fa00 f107 	lsl.w	r1, r0, r7
 8000456:	d90b      	bls.n	8000470 <__udivmoddi4+0x1b0>
 8000458:	eb1e 0303 	adds.w	r3, lr, r3
 800045c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000460:	f080 8087 	bcs.w	8000572 <__udivmoddi4+0x2b2>
 8000464:	429c      	cmp	r4, r3
 8000466:	f240 8084 	bls.w	8000572 <__udivmoddi4+0x2b2>
 800046a:	f1a9 0902 	sub.w	r9, r9, #2
 800046e:	4473      	add	r3, lr
 8000470:	1b1b      	subs	r3, r3, r4
 8000472:	b2ad      	uxth	r5, r5
 8000474:	fbb3 f0f8 	udiv	r0, r3, r8
 8000478:	fb08 3310 	mls	r3, r8, r0, r3
 800047c:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000480:	fb00 fa0a 	mul.w	sl, r0, sl
 8000484:	45a2      	cmp	sl, r4
 8000486:	d908      	bls.n	800049a <__udivmoddi4+0x1da>
 8000488:	eb1e 0404 	adds.w	r4, lr, r4
 800048c:	f100 33ff 	add.w	r3, r0, #4294967295
 8000490:	d26b      	bcs.n	800056a <__udivmoddi4+0x2aa>
 8000492:	45a2      	cmp	sl, r4
 8000494:	d969      	bls.n	800056a <__udivmoddi4+0x2aa>
 8000496:	3802      	subs	r0, #2
 8000498:	4474      	add	r4, lr
 800049a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800049e:	fba0 8902 	umull	r8, r9, r0, r2
 80004a2:	eba4 040a 	sub.w	r4, r4, sl
 80004a6:	454c      	cmp	r4, r9
 80004a8:	46c2      	mov	sl, r8
 80004aa:	464b      	mov	r3, r9
 80004ac:	d354      	bcc.n	8000558 <__udivmoddi4+0x298>
 80004ae:	d051      	beq.n	8000554 <__udivmoddi4+0x294>
 80004b0:	2e00      	cmp	r6, #0
 80004b2:	d069      	beq.n	8000588 <__udivmoddi4+0x2c8>
 80004b4:	ebb1 050a 	subs.w	r5, r1, sl
 80004b8:	eb64 0403 	sbc.w	r4, r4, r3
 80004bc:	fa04 fc0c 	lsl.w	ip, r4, ip
 80004c0:	40fd      	lsrs	r5, r7
 80004c2:	40fc      	lsrs	r4, r7
 80004c4:	ea4c 0505 	orr.w	r5, ip, r5
 80004c8:	e9c6 5400 	strd	r5, r4, [r6]
 80004cc:	2700      	movs	r7, #0
 80004ce:	e747      	b.n	8000360 <__udivmoddi4+0xa0>
 80004d0:	f1c2 0320 	rsb	r3, r2, #32
 80004d4:	fa20 f703 	lsr.w	r7, r0, r3
 80004d8:	4095      	lsls	r5, r2
 80004da:	fa01 f002 	lsl.w	r0, r1, r2
 80004de:	fa21 f303 	lsr.w	r3, r1, r3
 80004e2:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80004e6:	4338      	orrs	r0, r7
 80004e8:	0c01      	lsrs	r1, r0, #16
 80004ea:	fbb3 f7fe 	udiv	r7, r3, lr
 80004ee:	fa1f f885 	uxth.w	r8, r5
 80004f2:	fb0e 3317 	mls	r3, lr, r7, r3
 80004f6:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004fa:	fb07 f308 	mul.w	r3, r7, r8
 80004fe:	428b      	cmp	r3, r1
 8000500:	fa04 f402 	lsl.w	r4, r4, r2
 8000504:	d907      	bls.n	8000516 <__udivmoddi4+0x256>
 8000506:	1869      	adds	r1, r5, r1
 8000508:	f107 3cff 	add.w	ip, r7, #4294967295
 800050c:	d22f      	bcs.n	800056e <__udivmoddi4+0x2ae>
 800050e:	428b      	cmp	r3, r1
 8000510:	d92d      	bls.n	800056e <__udivmoddi4+0x2ae>
 8000512:	3f02      	subs	r7, #2
 8000514:	4429      	add	r1, r5
 8000516:	1acb      	subs	r3, r1, r3
 8000518:	b281      	uxth	r1, r0
 800051a:	fbb3 f0fe 	udiv	r0, r3, lr
 800051e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000522:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000526:	fb00 f308 	mul.w	r3, r0, r8
 800052a:	428b      	cmp	r3, r1
 800052c:	d907      	bls.n	800053e <__udivmoddi4+0x27e>
 800052e:	1869      	adds	r1, r5, r1
 8000530:	f100 3cff 	add.w	ip, r0, #4294967295
 8000534:	d217      	bcs.n	8000566 <__udivmoddi4+0x2a6>
 8000536:	428b      	cmp	r3, r1
 8000538:	d915      	bls.n	8000566 <__udivmoddi4+0x2a6>
 800053a:	3802      	subs	r0, #2
 800053c:	4429      	add	r1, r5
 800053e:	1ac9      	subs	r1, r1, r3
 8000540:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000544:	e73b      	b.n	80003be <__udivmoddi4+0xfe>
 8000546:	4637      	mov	r7, r6
 8000548:	4630      	mov	r0, r6
 800054a:	e709      	b.n	8000360 <__udivmoddi4+0xa0>
 800054c:	4607      	mov	r7, r0
 800054e:	e6e7      	b.n	8000320 <__udivmoddi4+0x60>
 8000550:	4618      	mov	r0, r3
 8000552:	e6fb      	b.n	800034c <__udivmoddi4+0x8c>
 8000554:	4541      	cmp	r1, r8
 8000556:	d2ab      	bcs.n	80004b0 <__udivmoddi4+0x1f0>
 8000558:	ebb8 0a02 	subs.w	sl, r8, r2
 800055c:	eb69 020e 	sbc.w	r2, r9, lr
 8000560:	3801      	subs	r0, #1
 8000562:	4613      	mov	r3, r2
 8000564:	e7a4      	b.n	80004b0 <__udivmoddi4+0x1f0>
 8000566:	4660      	mov	r0, ip
 8000568:	e7e9      	b.n	800053e <__udivmoddi4+0x27e>
 800056a:	4618      	mov	r0, r3
 800056c:	e795      	b.n	800049a <__udivmoddi4+0x1da>
 800056e:	4667      	mov	r7, ip
 8000570:	e7d1      	b.n	8000516 <__udivmoddi4+0x256>
 8000572:	4681      	mov	r9, r0
 8000574:	e77c      	b.n	8000470 <__udivmoddi4+0x1b0>
 8000576:	3802      	subs	r0, #2
 8000578:	442c      	add	r4, r5
 800057a:	e747      	b.n	800040c <__udivmoddi4+0x14c>
 800057c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000580:	442b      	add	r3, r5
 8000582:	e72f      	b.n	80003e4 <__udivmoddi4+0x124>
 8000584:	4638      	mov	r0, r7
 8000586:	e708      	b.n	800039a <__udivmoddi4+0xda>
 8000588:	4637      	mov	r7, r6
 800058a:	e6e9      	b.n	8000360 <__udivmoddi4+0xa0>

0800058c <__aeabi_idiv0>:
 800058c:	4770      	bx	lr
 800058e:	bf00      	nop

08000590 <Set_cs>:
 *      Author: samfl
 */

#include <display.h>

void Set_cs(uint8_t signal) {
 8000590:	b580      	push	{r7, lr}
 8000592:	b082      	sub	sp, #8
 8000594:	af00      	add	r7, sp, #0
 8000596:	4603      	mov	r3, r0
 8000598:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(CS_SPI2_GPIO_Port, CS_SPI2_Pin, signal);
 800059a:	79fb      	ldrb	r3, [r7, #7]
 800059c:	461a      	mov	r2, r3
 800059e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80005a2:	4803      	ldr	r0, [pc, #12]	; (80005b0 <Set_cs+0x20>)
 80005a4:	f001 f95c 	bl	8001860 <HAL_GPIO_WritePin>
}
 80005a8:	bf00      	nop
 80005aa:	3708      	adds	r7, #8
 80005ac:	46bd      	mov	sp, r7
 80005ae:	bd80      	pop	{r7, pc}
 80005b0:	48000400 	.word	0x48000400

080005b4 <Write_data>:

void Write_data(uint8_t hexa) {
 80005b4:	b580      	push	{r7, lr}
 80005b6:	b084      	sub	sp, #16
 80005b8:	af00      	add	r7, sp, #0
 80005ba:	4603      	mov	r3, r0
 80005bc:	71fb      	strb	r3, [r7, #7]
    Spi_rdy();
 80005be:	f000 f88b 	bl	80006d8 <Spi_rdy>
	uint8_t data[3];
	data[0] = 0x5f;
 80005c2:	235f      	movs	r3, #95	; 0x5f
 80005c4:	733b      	strb	r3, [r7, #12]
	data[1] = hexa & 0x0f;
 80005c6:	79fb      	ldrb	r3, [r7, #7]
 80005c8:	f003 030f 	and.w	r3, r3, #15
 80005cc:	b2db      	uxtb	r3, r3
 80005ce:	737b      	strb	r3, [r7, #13]
	data[2] = (hexa >> 4) & 0x0f;
 80005d0:	79fb      	ldrb	r3, [r7, #7]
 80005d2:	091b      	lsrs	r3, r3, #4
 80005d4:	b2db      	uxtb	r3, r3
 80005d6:	73bb      	strb	r3, [r7, #14]
	HAL_SPI_Transmit(&hspi2, data,3,10);
 80005d8:	f107 010c 	add.w	r1, r7, #12
 80005dc:	230a      	movs	r3, #10
 80005de:	2203      	movs	r2, #3
 80005e0:	4803      	ldr	r0, [pc, #12]	; (80005f0 <Write_data+0x3c>)
 80005e2:	f002 fdcd 	bl	8003180 <HAL_SPI_Transmit>
	return;
 80005e6:	bf00      	nop
}
 80005e8:	3710      	adds	r7, #16
 80005ea:	46bd      	mov	sp, r7
 80005ec:	bd80      	pop	{r7, pc}
 80005ee:	bf00      	nop
 80005f0:	200000e4 	.word	0x200000e4

080005f4 <Write_string>:

void Write_string(char * string) {
 80005f4:	b580      	push	{r7, lr}
 80005f6:	b082      	sub	sp, #8
 80005f8:	af00      	add	r7, sp, #0
 80005fa:	6078      	str	r0, [r7, #4]
	do {
		Write_data(*string++);
 80005fc:	687b      	ldr	r3, [r7, #4]
 80005fe:	1c5a      	adds	r2, r3, #1
 8000600:	607a      	str	r2, [r7, #4]
 8000602:	781b      	ldrb	r3, [r3, #0]
 8000604:	4618      	mov	r0, r3
 8000606:	f7ff ffd5 	bl	80005b4 <Write_data>
	} while(*string);
 800060a:	687b      	ldr	r3, [r7, #4]
 800060c:	781b      	ldrb	r3, [r3, #0]
 800060e:	2b00      	cmp	r3, #0
 8000610:	d1f4      	bne.n	80005fc <Write_string+0x8>
}
 8000612:	bf00      	nop
 8000614:	3708      	adds	r7, #8
 8000616:	46bd      	mov	sp, r7
 8000618:	bd80      	pop	{r7, pc}
	...

0800061c <Display_color>:
	Delay_spi();
	HAL_GPIO_WritePin(Display_reset_GPIO_Port, Display_reset_Pin, RESET);
	HAL_Delay(100);
}

void Display_color(char* color) {
 800061c:	b580      	push	{r7, lr}
 800061e:	b082      	sub	sp, #8
 8000620:	af00      	add	r7, sp, #0
 8000622:	6078      	str	r0, [r7, #4]
	if(!strcmp(color, "red")) HAL_GPIO_WritePin(Display_red_GPIO_Port, Display_red_Pin, SET);
 8000624:	4917      	ldr	r1, [pc, #92]	; (8000684 <Display_color+0x68>)
 8000626:	6878      	ldr	r0, [r7, #4]
 8000628:	f7ff fdd2 	bl	80001d0 <strcmp>
 800062c:	4603      	mov	r3, r0
 800062e:	2b00      	cmp	r3, #0
 8000630:	d105      	bne.n	800063e <Display_color+0x22>
 8000632:	2201      	movs	r2, #1
 8000634:	2180      	movs	r1, #128	; 0x80
 8000636:	4814      	ldr	r0, [pc, #80]	; (8000688 <Display_color+0x6c>)
 8000638:	f001 f912 	bl	8001860 <HAL_GPIO_WritePin>
	else if(!strcmp(color, "green")) HAL_GPIO_WritePin(Display_green_GPIO_Port, Display_green_Pin, SET);
	else if(!strcmp(color, "white")) HAL_GPIO_WritePin(Display_white_GPIO_Port, Display_white_Pin, SET);
	else printf("No color was set");
}
 800063c:	e01e      	b.n	800067c <Display_color+0x60>
	else if(!strcmp(color, "green")) HAL_GPIO_WritePin(Display_green_GPIO_Port, Display_green_Pin, SET);
 800063e:	4913      	ldr	r1, [pc, #76]	; (800068c <Display_color+0x70>)
 8000640:	6878      	ldr	r0, [r7, #4]
 8000642:	f7ff fdc5 	bl	80001d0 <strcmp>
 8000646:	4603      	mov	r3, r0
 8000648:	2b00      	cmp	r3, #0
 800064a:	d106      	bne.n	800065a <Display_color+0x3e>
 800064c:	2201      	movs	r2, #1
 800064e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000652:	480d      	ldr	r0, [pc, #52]	; (8000688 <Display_color+0x6c>)
 8000654:	f001 f904 	bl	8001860 <HAL_GPIO_WritePin>
}
 8000658:	e010      	b.n	800067c <Display_color+0x60>
	else if(!strcmp(color, "white")) HAL_GPIO_WritePin(Display_white_GPIO_Port, Display_white_Pin, SET);
 800065a:	490d      	ldr	r1, [pc, #52]	; (8000690 <Display_color+0x74>)
 800065c:	6878      	ldr	r0, [r7, #4]
 800065e:	f7ff fdb7 	bl	80001d0 <strcmp>
 8000662:	4603      	mov	r3, r0
 8000664:	2b00      	cmp	r3, #0
 8000666:	d106      	bne.n	8000676 <Display_color+0x5a>
 8000668:	2201      	movs	r2, #1
 800066a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800066e:	4806      	ldr	r0, [pc, #24]	; (8000688 <Display_color+0x6c>)
 8000670:	f001 f8f6 	bl	8001860 <HAL_GPIO_WritePin>
}
 8000674:	e002      	b.n	800067c <Display_color+0x60>
	else printf("No color was set");
 8000676:	4807      	ldr	r0, [pc, #28]	; (8000694 <Display_color+0x78>)
 8000678:	f003 fcfe 	bl	8004078 <iprintf>
}
 800067c:	bf00      	nop
 800067e:	3708      	adds	r7, #8
 8000680:	46bd      	mov	sp, r7
 8000682:	bd80      	pop	{r7, pc}
 8000684:	08004e58 	.word	0x08004e58
 8000688:	48000800 	.word	0x48000800
 800068c:	08004e5c 	.word	0x08004e5c
 8000690:	08004e64 	.word	0x08004e64
 8000694:	08004e6c 	.word	0x08004e6c

08000698 <Write_ins>:

void Write_ins(uint8_t hexa){
 8000698:	b580      	push	{r7, lr}
 800069a:	b084      	sub	sp, #16
 800069c:	af00      	add	r7, sp, #0
 800069e:	4603      	mov	r3, r0
 80006a0:	71fb      	strb	r3, [r7, #7]
	Spi_rdy();
 80006a2:	f000 f819 	bl	80006d8 <Spi_rdy>
	uint8_t data[3];
	data[0] = 0x1f;
 80006a6:	231f      	movs	r3, #31
 80006a8:	733b      	strb	r3, [r7, #12]
	data[1] = hexa & 0x0f;
 80006aa:	79fb      	ldrb	r3, [r7, #7]
 80006ac:	f003 030f 	and.w	r3, r3, #15
 80006b0:	b2db      	uxtb	r3, r3
 80006b2:	737b      	strb	r3, [r7, #13]
	data[2] = (hexa >> 4) & 0x0f;
 80006b4:	79fb      	ldrb	r3, [r7, #7]
 80006b6:	091b      	lsrs	r3, r3, #4
 80006b8:	b2db      	uxtb	r3, r3
 80006ba:	73bb      	strb	r3, [r7, #14]
	HAL_SPI_Transmit(&hspi2, data,3,10);
 80006bc:	f107 010c 	add.w	r1, r7, #12
 80006c0:	230a      	movs	r3, #10
 80006c2:	2203      	movs	r2, #3
 80006c4:	4803      	ldr	r0, [pc, #12]	; (80006d4 <Write_ins+0x3c>)
 80006c6:	f002 fd5b 	bl	8003180 <HAL_SPI_Transmit>
	return;
 80006ca:	bf00      	nop
}
 80006cc:	3710      	adds	r7, #16
 80006ce:	46bd      	mov	sp, r7
 80006d0:	bd80      	pop	{r7, pc}
 80006d2:	bf00      	nop
 80006d4:	200000e4 	.word	0x200000e4

080006d8 <Spi_rdy>:

void Spi_rdy(void) {
 80006d8:	b580      	push	{r7, lr}
 80006da:	af00      	add	r7, sp, #0
    Set_cs(1);
 80006dc:	2001      	movs	r0, #1
 80006de:	f7ff ff57 	bl	8000590 <Set_cs>
    HAL_Delay(10);
 80006e2:	200a      	movs	r0, #10
 80006e4:	f000 fe0c 	bl	8001300 <HAL_Delay>
    Set_cs(0);
 80006e8:	2000      	movs	r0, #0
 80006ea:	f7ff ff51 	bl	8000590 <Set_cs>
}
 80006ee:	bf00      	nop
 80006f0:	bd80      	pop	{r7, pc}
	...

080006f4 <Init_display>:

void Init_display(void)
{
 80006f4:	b580      	push	{r7, lr}
 80006f6:	af00      	add	r7, sp, #0
		// Delay
		Spi_rdy();
 80006f8:	f7ff ffee 	bl	80006d8 <Spi_rdy>

	    // Reset Display
	    HAL_GPIO_WritePin(Display_reset_GPIO_Port, Display_reset_Pin, GPIO_PIN_SET);
 80006fc:	2201      	movs	r2, #1
 80006fe:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000702:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000706:	f001 f8ab 	bl	8001860 <HAL_GPIO_WritePin>
	    HAL_Delay(10);
 800070a:	200a      	movs	r0, #10
 800070c:	f000 fdf8 	bl	8001300 <HAL_Delay>

	    // Initialization Example
	    Write_ins(0x3a); // function set: RE=1; REV=0
 8000710:	203a      	movs	r0, #58	; 0x3a
 8000712:	f7ff ffc1 	bl	8000698 <Write_ins>
	    Write_ins(0x09); // extended function set: 4-line initialization
 8000716:	2009      	movs	r0, #9
 8000718:	f7ff ffbe 	bl	8000698 <Write_ins>
	    Write_ins(0x06); // entry mode set: Botton View
 800071c:	2006      	movs	r0, #6
 800071e:	f7ff ffbb 	bl	8000698 <Write_ins>
	    Write_ins(0x1e); // bias setting: BS1 = 1
 8000722:	201e      	movs	r0, #30
 8000724:	f7ff ffb8 	bl	8000698 <Write_ins>
	    Write_ins(0x39); // function set: RE=0, IS=1
 8000728:	2039      	movs	r0, #57	; 0x39
 800072a:	f7ff ffb5 	bl	8000698 <Write_ins>
	    Write_ins(0x1b); // internal osc: BS0=1 -> Bias=1/6
 800072e:	201b      	movs	r0, #27
 8000730:	f7ff ffb2 	bl	8000698 <Write_ins>
	    Write_ins(0x6e); // follower control: divider on and set value
 8000734:	206e      	movs	r0, #110	; 0x6e
 8000736:	f7ff ffaf 	bl	8000698 <Write_ins>
	    Write_ins(0x56); // power control: booster on and set contrast
 800073a:	2056      	movs	r0, #86	; 0x56
 800073c:	f7ff ffac 	bl	8000698 <Write_ins>
	    Write_ins(0x7a); // contrast set: DB3-DB0=C3-C0
 8000740:	207a      	movs	r0, #122	; 0x7a
 8000742:	f7ff ffa9 	bl	8000698 <Write_ins>
	    Write_ins(0x38); // function set: RE=0, IS=0
 8000746:	2038      	movs	r0, #56	; 0x38
 8000748:	f7ff ffa6 	bl	8000698 <Write_ins>

		// Change View
		Write_ins(0x3a); // function set: RE=1, IS=0
 800074c:	203a      	movs	r0, #58	; 0x3a
 800074e:	f7ff ffa3 	bl	8000698 <Write_ins>
		Write_ins(0x06); // entry mode: bottom view
 8000752:	2006      	movs	r0, #6
 8000754:	f7ff ffa0 	bl	8000698 <Write_ins>
		Write_ins(0x38); // function set: RE=0, IS=0
 8000758:	2038      	movs	r0, #56	; 0x38
 800075a:	f7ff ff9d 	bl	8000698 <Write_ins>

		// Display On
	    Write_ins(0x0f); // display on, cursor on, blink on
 800075e:	200f      	movs	r0, #15
 8000760:	f7ff ff9a 	bl	8000698 <Write_ins>

	    // Clear Display
	    Write_ins(0x01);
 8000764:	2001      	movs	r0, #1
 8000766:	f7ff ff97 	bl	8000698 <Write_ins>

	    // String Sequence Line 1
	    Write_ins(0x80); //address
 800076a:	2080      	movs	r0, #128	; 0x80
 800076c:	f7ff ff94 	bl	8000698 <Write_ins>
	    Write_string("Sam");
 8000770:	480c      	ldr	r0, [pc, #48]	; (80007a4 <Init_display+0xb0>)
 8000772:	f7ff ff3f 	bl	80005f4 <Write_string>

	    // String Sequence Line 2
	    Write_ins(0xa0); //address
 8000776:	20a0      	movs	r0, #160	; 0xa0
 8000778:	f7ff ff8e 	bl	8000698 <Write_ins>
	    Write_string("Florin");
 800077c:	480a      	ldr	r0, [pc, #40]	; (80007a8 <Init_display+0xb4>)
 800077e:	f7ff ff39 	bl	80005f4 <Write_string>

	    // String Sequence Line 3
	    Write_ins(0xc0); //address
 8000782:	20c0      	movs	r0, #192	; 0xc0
 8000784:	f7ff ff88 	bl	8000698 <Write_ins>
	    Write_string("S-tuna");
 8000788:	4808      	ldr	r0, [pc, #32]	; (80007ac <Init_display+0xb8>)
 800078a:	f7ff ff33 	bl	80005f4 <Write_string>

	    // String Sequence Line 4
	    Write_ins(0xe0); //address
 800078e:	20e0      	movs	r0, #224	; 0xe0
 8000790:	f7ff ff82 	bl	8000698 <Write_ins>
	    Write_string("TIDAB");
 8000794:	4806      	ldr	r0, [pc, #24]	; (80007b0 <Init_display+0xbc>)
 8000796:	f7ff ff2d 	bl	80005f4 <Write_string>

	    // Stop Transmit
	    Set_cs(1);
 800079a:	2001      	movs	r0, #1
 800079c:	f7ff fef8 	bl	8000590 <Set_cs>
}
 80007a0:	bf00      	nop
 80007a2:	bd80      	pop	{r7, pc}
 80007a4:	08004e80 	.word	0x08004e80
 80007a8:	08004e84 	.word	0x08004e84
 80007ac:	08004e8c 	.word	0x08004e8c
 80007b0:	08004e94 	.word	0x08004e94

080007b4 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80007b4:	b580      	push	{r7, lr}
 80007b6:	b08a      	sub	sp, #40	; 0x28
 80007b8:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007ba:	f107 0314 	add.w	r3, r7, #20
 80007be:	2200      	movs	r2, #0
 80007c0:	601a      	str	r2, [r3, #0]
 80007c2:	605a      	str	r2, [r3, #4]
 80007c4:	609a      	str	r2, [r3, #8]
 80007c6:	60da      	str	r2, [r3, #12]
 80007c8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80007ca:	4b4c      	ldr	r3, [pc, #304]	; (80008fc <MX_GPIO_Init+0x148>)
 80007cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007ce:	4a4b      	ldr	r2, [pc, #300]	; (80008fc <MX_GPIO_Init+0x148>)
 80007d0:	f043 0304 	orr.w	r3, r3, #4
 80007d4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80007d6:	4b49      	ldr	r3, [pc, #292]	; (80008fc <MX_GPIO_Init+0x148>)
 80007d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007da:	f003 0304 	and.w	r3, r3, #4
 80007de:	613b      	str	r3, [r7, #16]
 80007e0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80007e2:	4b46      	ldr	r3, [pc, #280]	; (80008fc <MX_GPIO_Init+0x148>)
 80007e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007e6:	4a45      	ldr	r2, [pc, #276]	; (80008fc <MX_GPIO_Init+0x148>)
 80007e8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80007ec:	64d3      	str	r3, [r2, #76]	; 0x4c
 80007ee:	4b43      	ldr	r3, [pc, #268]	; (80008fc <MX_GPIO_Init+0x148>)
 80007f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007f2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80007f6:	60fb      	str	r3, [r7, #12]
 80007f8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80007fa:	4b40      	ldr	r3, [pc, #256]	; (80008fc <MX_GPIO_Init+0x148>)
 80007fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007fe:	4a3f      	ldr	r2, [pc, #252]	; (80008fc <MX_GPIO_Init+0x148>)
 8000800:	f043 0301 	orr.w	r3, r3, #1
 8000804:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000806:	4b3d      	ldr	r3, [pc, #244]	; (80008fc <MX_GPIO_Init+0x148>)
 8000808:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800080a:	f003 0301 	and.w	r3, r3, #1
 800080e:	60bb      	str	r3, [r7, #8]
 8000810:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000812:	4b3a      	ldr	r3, [pc, #232]	; (80008fc <MX_GPIO_Init+0x148>)
 8000814:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000816:	4a39      	ldr	r2, [pc, #228]	; (80008fc <MX_GPIO_Init+0x148>)
 8000818:	f043 0302 	orr.w	r3, r3, #2
 800081c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800081e:	4b37      	ldr	r3, [pc, #220]	; (80008fc <MX_GPIO_Init+0x148>)
 8000820:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000822:	f003 0302 	and.w	r3, r3, #2
 8000826:	607b      	str	r3, [r7, #4]
 8000828:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800082a:	4b34      	ldr	r3, [pc, #208]	; (80008fc <MX_GPIO_Init+0x148>)
 800082c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800082e:	4a33      	ldr	r2, [pc, #204]	; (80008fc <MX_GPIO_Init+0x148>)
 8000830:	f043 0308 	orr.w	r3, r3, #8
 8000834:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000836:	4b31      	ldr	r3, [pc, #196]	; (80008fc <MX_GPIO_Init+0x148>)
 8000838:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800083a:	f003 0308 	and.w	r3, r3, #8
 800083e:	603b      	str	r3, [r7, #0]
 8000840:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000842:	2200      	movs	r2, #0
 8000844:	2120      	movs	r1, #32
 8000846:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800084a:	f001 f809 	bl	8001860 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Rtc_out_cal_GPIO_Port, Rtc_out_cal_Pin, GPIO_PIN_RESET);
 800084e:	2200      	movs	r2, #0
 8000850:	2104      	movs	r1, #4
 8000852:	482b      	ldr	r0, [pc, #172]	; (8000900 <MX_GPIO_Init+0x14c>)
 8000854:	f001 f804 	bl	8001860 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_SPI2_GPIO_Port, CS_SPI2_Pin, GPIO_PIN_SET);
 8000858:	2201      	movs	r2, #1
 800085a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800085e:	4828      	ldr	r0, [pc, #160]	; (8000900 <MX_GPIO_Init+0x14c>)
 8000860:	f000 fffe 	bl	8001860 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, Display_red_Pin|Display_green_Pin|Display_white_Pin, GPIO_PIN_RESET);
 8000864:	2200      	movs	r2, #0
 8000866:	f44f 6148 	mov.w	r1, #3200	; 0xc80
 800086a:	4826      	ldr	r0, [pc, #152]	; (8000904 <MX_GPIO_Init+0x150>)
 800086c:	f000 fff8 	bl	8001860 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Display_reset_GPIO_Port, Display_reset_Pin, GPIO_PIN_SET);
 8000870:	2201      	movs	r2, #1
 8000872:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000876:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800087a:	f000 fff1 	bl	8001860 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 800087e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000882:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000884:	4b20      	ldr	r3, [pc, #128]	; (8000908 <MX_GPIO_Init+0x154>)
 8000886:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000888:	2300      	movs	r3, #0
 800088a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800088c:	f107 0314 	add.w	r3, r7, #20
 8000890:	4619      	mov	r1, r3
 8000892:	481c      	ldr	r0, [pc, #112]	; (8000904 <MX_GPIO_Init+0x150>)
 8000894:	f000 fe3c 	bl	8001510 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = LD2_Pin|Display_reset_Pin;
 8000898:	f248 0320 	movw	r3, #32800	; 0x8020
 800089c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800089e:	2301      	movs	r3, #1
 80008a0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008a2:	2300      	movs	r3, #0
 80008a4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008a6:	2300      	movs	r3, #0
 80008a8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008aa:	f107 0314 	add.w	r3, r7, #20
 80008ae:	4619      	mov	r1, r3
 80008b0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80008b4:	f000 fe2c 	bl	8001510 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = Rtc_out_cal_Pin|CS_SPI2_Pin;
 80008b8:	f241 0304 	movw	r3, #4100	; 0x1004
 80008bc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008be:	2301      	movs	r3, #1
 80008c0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008c2:	2300      	movs	r3, #0
 80008c4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008c6:	2300      	movs	r3, #0
 80008c8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80008ca:	f107 0314 	add.w	r3, r7, #20
 80008ce:	4619      	mov	r1, r3
 80008d0:	480b      	ldr	r0, [pc, #44]	; (8000900 <MX_GPIO_Init+0x14c>)
 80008d2:	f000 fe1d 	bl	8001510 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = Display_red_Pin|Display_green_Pin|Display_white_Pin;
 80008d6:	f44f 6348 	mov.w	r3, #3200	; 0xc80
 80008da:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008dc:	2301      	movs	r3, #1
 80008de:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008e0:	2300      	movs	r3, #0
 80008e2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008e4:	2300      	movs	r3, #0
 80008e6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80008e8:	f107 0314 	add.w	r3, r7, #20
 80008ec:	4619      	mov	r1, r3
 80008ee:	4805      	ldr	r0, [pc, #20]	; (8000904 <MX_GPIO_Init+0x150>)
 80008f0:	f000 fe0e 	bl	8001510 <HAL_GPIO_Init>

}
 80008f4:	bf00      	nop
 80008f6:	3728      	adds	r7, #40	; 0x28
 80008f8:	46bd      	mov	sp, r7
 80008fa:	bd80      	pop	{r7, pc}
 80008fc:	40021000 	.word	0x40021000
 8000900:	48000400 	.word	0x48000400
 8000904:	48000800 	.word	0x48000800
 8000908:	10210000 	.word	0x10210000

0800090c <MX_I2C3_Init>:

I2C_HandleTypeDef hi2c3;

/* I2C3 init function */
void MX_I2C3_Init(void)
{
 800090c:	b580      	push	{r7, lr}
 800090e:	af00      	add	r7, sp, #0

  hi2c3.Instance = I2C3;
 8000910:	4b1b      	ldr	r3, [pc, #108]	; (8000980 <MX_I2C3_Init+0x74>)
 8000912:	4a1c      	ldr	r2, [pc, #112]	; (8000984 <MX_I2C3_Init+0x78>)
 8000914:	601a      	str	r2, [r3, #0]
  hi2c3.Init.Timing = 0x10909CEC;
 8000916:	4b1a      	ldr	r3, [pc, #104]	; (8000980 <MX_I2C3_Init+0x74>)
 8000918:	4a1b      	ldr	r2, [pc, #108]	; (8000988 <MX_I2C3_Init+0x7c>)
 800091a:	605a      	str	r2, [r3, #4]
  hi2c3.Init.OwnAddress1 = 0;
 800091c:	4b18      	ldr	r3, [pc, #96]	; (8000980 <MX_I2C3_Init+0x74>)
 800091e:	2200      	movs	r2, #0
 8000920:	609a      	str	r2, [r3, #8]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000922:	4b17      	ldr	r3, [pc, #92]	; (8000980 <MX_I2C3_Init+0x74>)
 8000924:	2201      	movs	r2, #1
 8000926:	60da      	str	r2, [r3, #12]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000928:	4b15      	ldr	r3, [pc, #84]	; (8000980 <MX_I2C3_Init+0x74>)
 800092a:	2200      	movs	r2, #0
 800092c:	611a      	str	r2, [r3, #16]
  hi2c3.Init.OwnAddress2 = 0;
 800092e:	4b14      	ldr	r3, [pc, #80]	; (8000980 <MX_I2C3_Init+0x74>)
 8000930:	2200      	movs	r2, #0
 8000932:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000934:	4b12      	ldr	r3, [pc, #72]	; (8000980 <MX_I2C3_Init+0x74>)
 8000936:	2200      	movs	r2, #0
 8000938:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800093a:	4b11      	ldr	r3, [pc, #68]	; (8000980 <MX_I2C3_Init+0x74>)
 800093c:	2200      	movs	r2, #0
 800093e:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000940:	4b0f      	ldr	r3, [pc, #60]	; (8000980 <MX_I2C3_Init+0x74>)
 8000942:	2200      	movs	r2, #0
 8000944:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8000946:	480e      	ldr	r0, [pc, #56]	; (8000980 <MX_I2C3_Init+0x74>)
 8000948:	f000 ffa2 	bl	8001890 <HAL_I2C_Init>
 800094c:	4603      	mov	r3, r0
 800094e:	2b00      	cmp	r3, #0
 8000950:	d001      	beq.n	8000956 <MX_I2C3_Init+0x4a>
  {
    Error_Handler();
 8000952:	f000 f8f0 	bl	8000b36 <Error_Handler>
  }
  /** Configure Analogue filter 
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000956:	2100      	movs	r1, #0
 8000958:	4809      	ldr	r0, [pc, #36]	; (8000980 <MX_I2C3_Init+0x74>)
 800095a:	f001 f828 	bl	80019ae <HAL_I2CEx_ConfigAnalogFilter>
 800095e:	4603      	mov	r3, r0
 8000960:	2b00      	cmp	r3, #0
 8000962:	d001      	beq.n	8000968 <MX_I2C3_Init+0x5c>
  {
    Error_Handler();
 8000964:	f000 f8e7 	bl	8000b36 <Error_Handler>
  }
  /** Configure Digital filter 
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 8000968:	2100      	movs	r1, #0
 800096a:	4805      	ldr	r0, [pc, #20]	; (8000980 <MX_I2C3_Init+0x74>)
 800096c:	f001 f86a 	bl	8001a44 <HAL_I2CEx_ConfigDigitalFilter>
 8000970:	4603      	mov	r3, r0
 8000972:	2b00      	cmp	r3, #0
 8000974:	d001      	beq.n	800097a <MX_I2C3_Init+0x6e>
  {
    Error_Handler();
 8000976:	f000 f8de 	bl	8000b36 <Error_Handler>
  }

}
 800097a:	bf00      	nop
 800097c:	bd80      	pop	{r7, pc}
 800097e:	bf00      	nop
 8000980:	20000098 	.word	0x20000098
 8000984:	40005c00 	.word	0x40005c00
 8000988:	10909cec 	.word	0x10909cec

0800098c <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 800098c:	b580      	push	{r7, lr}
 800098e:	b08a      	sub	sp, #40	; 0x28
 8000990:	af00      	add	r7, sp, #0
 8000992:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000994:	f107 0314 	add.w	r3, r7, #20
 8000998:	2200      	movs	r2, #0
 800099a:	601a      	str	r2, [r3, #0]
 800099c:	605a      	str	r2, [r3, #4]
 800099e:	609a      	str	r2, [r3, #8]
 80009a0:	60da      	str	r2, [r3, #12]
 80009a2:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C3)
 80009a4:	687b      	ldr	r3, [r7, #4]
 80009a6:	681b      	ldr	r3, [r3, #0]
 80009a8:	4a17      	ldr	r2, [pc, #92]	; (8000a08 <HAL_I2C_MspInit+0x7c>)
 80009aa:	4293      	cmp	r3, r2
 80009ac:	d127      	bne.n	80009fe <HAL_I2C_MspInit+0x72>
  {
  /* USER CODE BEGIN I2C3_MspInit 0 */

  /* USER CODE END I2C3_MspInit 0 */
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80009ae:	4b17      	ldr	r3, [pc, #92]	; (8000a0c <HAL_I2C_MspInit+0x80>)
 80009b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009b2:	4a16      	ldr	r2, [pc, #88]	; (8000a0c <HAL_I2C_MspInit+0x80>)
 80009b4:	f043 0304 	orr.w	r3, r3, #4
 80009b8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80009ba:	4b14      	ldr	r3, [pc, #80]	; (8000a0c <HAL_I2C_MspInit+0x80>)
 80009bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009be:	f003 0304 	and.w	r3, r3, #4
 80009c2:	613b      	str	r3, [r7, #16]
 80009c4:	693b      	ldr	r3, [r7, #16]
    /**I2C3 GPIO Configuration    
    PC0     ------> I2C3_SCL
    PC1     ------> I2C3_SDA 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80009c6:	2303      	movs	r3, #3
 80009c8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80009ca:	2312      	movs	r3, #18
 80009cc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80009ce:	2301      	movs	r3, #1
 80009d0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80009d2:	2303      	movs	r3, #3
 80009d4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 80009d6:	2304      	movs	r3, #4
 80009d8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80009da:	f107 0314 	add.w	r3, r7, #20
 80009de:	4619      	mov	r1, r3
 80009e0:	480b      	ldr	r0, [pc, #44]	; (8000a10 <HAL_I2C_MspInit+0x84>)
 80009e2:	f000 fd95 	bl	8001510 <HAL_GPIO_Init>

    /* I2C3 clock enable */
    __HAL_RCC_I2C3_CLK_ENABLE();
 80009e6:	4b09      	ldr	r3, [pc, #36]	; (8000a0c <HAL_I2C_MspInit+0x80>)
 80009e8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80009ea:	4a08      	ldr	r2, [pc, #32]	; (8000a0c <HAL_I2C_MspInit+0x80>)
 80009ec:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80009f0:	6593      	str	r3, [r2, #88]	; 0x58
 80009f2:	4b06      	ldr	r3, [pc, #24]	; (8000a0c <HAL_I2C_MspInit+0x80>)
 80009f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80009f6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80009fa:	60fb      	str	r3, [r7, #12]
 80009fc:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }
}
 80009fe:	bf00      	nop
 8000a00:	3728      	adds	r7, #40	; 0x28
 8000a02:	46bd      	mov	sp, r7
 8000a04:	bd80      	pop	{r7, pc}
 8000a06:	bf00      	nop
 8000a08:	40005c00 	.word	0x40005c00
 8000a0c:	40021000 	.word	0x40021000
 8000a10:	48000800 	.word	0x48000800

08000a14 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000a14:	b580      	push	{r7, lr}
 8000a16:	af00      	add	r7, sp, #0
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000a18:	f000 fbfa 	bl	8001210 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000a1c:	f000 f80f 	bl	8000a3e <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000a20:	f7ff fec8 	bl	80007b4 <MX_GPIO_Init>
  MX_I2C3_Init();
 8000a24:	f7ff ff72 	bl	800090c <MX_I2C3_Init>
  MX_SPI2_Init();
 8000a28:	f000 f88c 	bl	8000b44 <MX_SPI2_Init>
  MX_UART4_Init();
 8000a2c:	f000 fa72 	bl	8000f14 <MX_UART4_Init>
  MX_UART5_Init();
 8000a30:	f000 faa0 	bl	8000f74 <MX_UART5_Init>
  MX_USART2_UART_Init();
 8000a34:	f000 face 	bl	8000fd4 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
#ifdef RUN_TEST_PROGRAM
  Test_program();
 8000a38:	f000 fa46 	bl	8000ec8 <Test_program>
#endif
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000a3c:	e7fe      	b.n	8000a3c <main+0x28>

08000a3e <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000a3e:	b580      	push	{r7, lr}
 8000a40:	b0b8      	sub	sp, #224	; 0xe0
 8000a42:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000a44:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000a48:	2244      	movs	r2, #68	; 0x44
 8000a4a:	2100      	movs	r1, #0
 8000a4c:	4618      	mov	r0, r3
 8000a4e:	f003 fb0b 	bl	8004068 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000a52:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8000a56:	2200      	movs	r2, #0
 8000a58:	601a      	str	r2, [r3, #0]
 8000a5a:	605a      	str	r2, [r3, #4]
 8000a5c:	609a      	str	r2, [r3, #8]
 8000a5e:	60da      	str	r2, [r3, #12]
 8000a60:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000a62:	463b      	mov	r3, r7
 8000a64:	2288      	movs	r2, #136	; 0x88
 8000a66:	2100      	movs	r1, #0
 8000a68:	4618      	mov	r0, r3
 8000a6a:	f003 fafd 	bl	8004068 <memset>

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000a6e:	2302      	movs	r3, #2
 8000a70:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000a74:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000a78:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000a7c:	2310      	movs	r3, #16
 8000a7e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000a82:	2302      	movs	r3, #2
 8000a84:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000a88:	2302      	movs	r3, #2
 8000a8a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000a8e:	2301      	movs	r3, #1
 8000a90:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_OscInitStruct.PLL.PLLN = 10;
 8000a94:	230a      	movs	r3, #10
 8000a96:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000a9a:	2307      	movs	r3, #7
 8000a9c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000aa0:	2302      	movs	r3, #2
 8000aa2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000aa6:	2302      	movs	r3, #2
 8000aa8:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000aac:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000ab0:	4618      	mov	r0, r3
 8000ab2:	f001 f877 	bl	8001ba4 <HAL_RCC_OscConfig>
 8000ab6:	4603      	mov	r3, r0
 8000ab8:	2b00      	cmp	r3, #0
 8000aba:	d001      	beq.n	8000ac0 <SystemClock_Config+0x82>
  {
    Error_Handler();
 8000abc:	f000 f83b 	bl	8000b36 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000ac0:	230f      	movs	r3, #15
 8000ac2:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000ac6:	2303      	movs	r3, #3
 8000ac8:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000acc:	2300      	movs	r3, #0
 8000ace:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000ad2:	2300      	movs	r3, #0
 8000ad4:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000ad8:	2300      	movs	r3, #0
 8000ada:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000ade:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8000ae2:	2104      	movs	r1, #4
 8000ae4:	4618      	mov	r0, r3
 8000ae6:	f001 fc0d 	bl	8002304 <HAL_RCC_ClockConfig>
 8000aea:	4603      	mov	r3, r0
 8000aec:	2b00      	cmp	r3, #0
 8000aee:	d001      	beq.n	8000af4 <SystemClock_Config+0xb6>
  {
    Error_Handler();
 8000af0:	f000 f821 	bl	8000b36 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2|RCC_PERIPHCLK_UART4
 8000af4:	f44f 738d 	mov.w	r3, #282	; 0x11a
 8000af8:	603b      	str	r3, [r7, #0]
                              |RCC_PERIPHCLK_UART5|RCC_PERIPHCLK_I2C3;
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000afa:	2300      	movs	r3, #0
 8000afc:	63fb      	str	r3, [r7, #60]	; 0x3c
  PeriphClkInit.Uart4ClockSelection = RCC_UART4CLKSOURCE_PCLK1;
 8000afe:	2300      	movs	r3, #0
 8000b00:	647b      	str	r3, [r7, #68]	; 0x44
  PeriphClkInit.Uart5ClockSelection = RCC_UART5CLKSOURCE_PCLK1;
 8000b02:	2300      	movs	r3, #0
 8000b04:	64bb      	str	r3, [r7, #72]	; 0x48
  PeriphClkInit.I2c3ClockSelection = RCC_I2C3CLKSOURCE_PCLK1;
 8000b06:	2300      	movs	r3, #0
 8000b08:	65bb      	str	r3, [r7, #88]	; 0x58
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000b0a:	463b      	mov	r3, r7
 8000b0c:	4618      	mov	r0, r3
 8000b0e:	f001 fdfd 	bl	800270c <HAL_RCCEx_PeriphCLKConfig>
 8000b12:	4603      	mov	r3, r0
 8000b14:	2b00      	cmp	r3, #0
 8000b16:	d001      	beq.n	8000b1c <SystemClock_Config+0xde>
  {
    Error_Handler();
 8000b18:	f000 f80d 	bl	8000b36 <Error_Handler>
  }
  /** Configure the main internal regulator output voltage 
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000b1c:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000b20:	f000 ffea 	bl	8001af8 <HAL_PWREx_ControlVoltageScaling>
 8000b24:	4603      	mov	r3, r0
 8000b26:	2b00      	cmp	r3, #0
 8000b28:	d001      	beq.n	8000b2e <SystemClock_Config+0xf0>
  {
    Error_Handler();
 8000b2a:	f000 f804 	bl	8000b36 <Error_Handler>
  }
}
 8000b2e:	bf00      	nop
 8000b30:	37e0      	adds	r7, #224	; 0xe0
 8000b32:	46bd      	mov	sp, r7
 8000b34:	bd80      	pop	{r7, pc}

08000b36 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b36:	b480      	push	{r7}
 8000b38:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000b3a:	bf00      	nop
 8000b3c:	46bd      	mov	sp, r7
 8000b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b42:	4770      	bx	lr

08000b44 <MX_SPI2_Init>:

SPI_HandleTypeDef hspi2;

/* SPI2 init function */
void MX_SPI2_Init(void)
{
 8000b44:	b580      	push	{r7, lr}
 8000b46:	af00      	add	r7, sp, #0

  hspi2.Instance = SPI2;
 8000b48:	4b1b      	ldr	r3, [pc, #108]	; (8000bb8 <MX_SPI2_Init+0x74>)
 8000b4a:	4a1c      	ldr	r2, [pc, #112]	; (8000bbc <MX_SPI2_Init+0x78>)
 8000b4c:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8000b4e:	4b1a      	ldr	r3, [pc, #104]	; (8000bb8 <MX_SPI2_Init+0x74>)
 8000b50:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000b54:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8000b56:	4b18      	ldr	r3, [pc, #96]	; (8000bb8 <MX_SPI2_Init+0x74>)
 8000b58:	2200      	movs	r2, #0
 8000b5a:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8000b5c:	4b16      	ldr	r3, [pc, #88]	; (8000bb8 <MX_SPI2_Init+0x74>)
 8000b5e:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8000b62:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8000b64:	4b14      	ldr	r3, [pc, #80]	; (8000bb8 <MX_SPI2_Init+0x74>)
 8000b66:	2202      	movs	r2, #2
 8000b68:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_2EDGE;
 8000b6a:	4b13      	ldr	r3, [pc, #76]	; (8000bb8 <MX_SPI2_Init+0x74>)
 8000b6c:	2201      	movs	r2, #1
 8000b6e:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8000b70:	4b11      	ldr	r3, [pc, #68]	; (8000bb8 <MX_SPI2_Init+0x74>)
 8000b72:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000b76:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 8000b78:	4b0f      	ldr	r3, [pc, #60]	; (8000bb8 <MX_SPI2_Init+0x74>)
 8000b7a:	2238      	movs	r2, #56	; 0x38
 8000b7c:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_LSB;
 8000b7e:	4b0e      	ldr	r3, [pc, #56]	; (8000bb8 <MX_SPI2_Init+0x74>)
 8000b80:	2280      	movs	r2, #128	; 0x80
 8000b82:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8000b84:	4b0c      	ldr	r3, [pc, #48]	; (8000bb8 <MX_SPI2_Init+0x74>)
 8000b86:	2200      	movs	r2, #0
 8000b88:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000b8a:	4b0b      	ldr	r3, [pc, #44]	; (8000bb8 <MX_SPI2_Init+0x74>)
 8000b8c:	2200      	movs	r2, #0
 8000b8e:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 7;
 8000b90:	4b09      	ldr	r3, [pc, #36]	; (8000bb8 <MX_SPI2_Init+0x74>)
 8000b92:	2207      	movs	r2, #7
 8000b94:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000b96:	4b08      	ldr	r3, [pc, #32]	; (8000bb8 <MX_SPI2_Init+0x74>)
 8000b98:	2200      	movs	r2, #0
 8000b9a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8000b9c:	4b06      	ldr	r3, [pc, #24]	; (8000bb8 <MX_SPI2_Init+0x74>)
 8000b9e:	2200      	movs	r2, #0
 8000ba0:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8000ba2:	4805      	ldr	r0, [pc, #20]	; (8000bb8 <MX_SPI2_Init+0x74>)
 8000ba4:	f002 fa62 	bl	800306c <HAL_SPI_Init>
 8000ba8:	4603      	mov	r3, r0
 8000baa:	2b00      	cmp	r3, #0
 8000bac:	d001      	beq.n	8000bb2 <MX_SPI2_Init+0x6e>
  {
    Error_Handler();
 8000bae:	f7ff ffc2 	bl	8000b36 <Error_Handler>
  }

}
 8000bb2:	bf00      	nop
 8000bb4:	bd80      	pop	{r7, pc}
 8000bb6:	bf00      	nop
 8000bb8:	200000e4 	.word	0x200000e4
 8000bbc:	40003800 	.word	0x40003800

08000bc0 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8000bc0:	b580      	push	{r7, lr}
 8000bc2:	b08a      	sub	sp, #40	; 0x28
 8000bc4:	af00      	add	r7, sp, #0
 8000bc6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bc8:	f107 0314 	add.w	r3, r7, #20
 8000bcc:	2200      	movs	r2, #0
 8000bce:	601a      	str	r2, [r3, #0]
 8000bd0:	605a      	str	r2, [r3, #4]
 8000bd2:	609a      	str	r2, [r3, #8]
 8000bd4:	60da      	str	r2, [r3, #12]
 8000bd6:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI2)
 8000bd8:	687b      	ldr	r3, [r7, #4]
 8000bda:	681b      	ldr	r3, [r3, #0]
 8000bdc:	4a25      	ldr	r2, [pc, #148]	; (8000c74 <HAL_SPI_MspInit+0xb4>)
 8000bde:	4293      	cmp	r3, r2
 8000be0:	d144      	bne.n	8000c6c <HAL_SPI_MspInit+0xac>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* SPI2 clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8000be2:	4b25      	ldr	r3, [pc, #148]	; (8000c78 <HAL_SPI_MspInit+0xb8>)
 8000be4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000be6:	4a24      	ldr	r2, [pc, #144]	; (8000c78 <HAL_SPI_MspInit+0xb8>)
 8000be8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000bec:	6593      	str	r3, [r2, #88]	; 0x58
 8000bee:	4b22      	ldr	r3, [pc, #136]	; (8000c78 <HAL_SPI_MspInit+0xb8>)
 8000bf0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000bf2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000bf6:	613b      	str	r3, [r7, #16]
 8000bf8:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000bfa:	4b1f      	ldr	r3, [pc, #124]	; (8000c78 <HAL_SPI_MspInit+0xb8>)
 8000bfc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000bfe:	4a1e      	ldr	r2, [pc, #120]	; (8000c78 <HAL_SPI_MspInit+0xb8>)
 8000c00:	f043 0304 	orr.w	r3, r3, #4
 8000c04:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000c06:	4b1c      	ldr	r3, [pc, #112]	; (8000c78 <HAL_SPI_MspInit+0xb8>)
 8000c08:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c0a:	f003 0304 	and.w	r3, r3, #4
 8000c0e:	60fb      	str	r3, [r7, #12]
 8000c10:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c12:	4b19      	ldr	r3, [pc, #100]	; (8000c78 <HAL_SPI_MspInit+0xb8>)
 8000c14:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c16:	4a18      	ldr	r2, [pc, #96]	; (8000c78 <HAL_SPI_MspInit+0xb8>)
 8000c18:	f043 0302 	orr.w	r3, r3, #2
 8000c1c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000c1e:	4b16      	ldr	r3, [pc, #88]	; (8000c78 <HAL_SPI_MspInit+0xb8>)
 8000c20:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c22:	f003 0302 	and.w	r3, r3, #2
 8000c26:	60bb      	str	r3, [r7, #8]
 8000c28:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration    
    PC2     ------> SPI2_MISO
    PC3     ------> SPI2_MOSI
    PB10     ------> SPI2_SCK 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000c2a:	230c      	movs	r3, #12
 8000c2c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c2e:	2302      	movs	r3, #2
 8000c30:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c32:	2300      	movs	r3, #0
 8000c34:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c36:	2303      	movs	r3, #3
 8000c38:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000c3a:	2305      	movs	r3, #5
 8000c3c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000c3e:	f107 0314 	add.w	r3, r7, #20
 8000c42:	4619      	mov	r1, r3
 8000c44:	480d      	ldr	r0, [pc, #52]	; (8000c7c <HAL_SPI_MspInit+0xbc>)
 8000c46:	f000 fc63 	bl	8001510 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000c4a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000c4e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c50:	2302      	movs	r3, #2
 8000c52:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c54:	2300      	movs	r3, #0
 8000c56:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c58:	2303      	movs	r3, #3
 8000c5a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000c5c:	2305      	movs	r3, #5
 8000c5e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c60:	f107 0314 	add.w	r3, r7, #20
 8000c64:	4619      	mov	r1, r3
 8000c66:	4806      	ldr	r0, [pc, #24]	; (8000c80 <HAL_SPI_MspInit+0xc0>)
 8000c68:	f000 fc52 	bl	8001510 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 8000c6c:	bf00      	nop
 8000c6e:	3728      	adds	r7, #40	; 0x28
 8000c70:	46bd      	mov	sp, r7
 8000c72:	bd80      	pop	{r7, pc}
 8000c74:	40003800 	.word	0x40003800
 8000c78:	40021000 	.word	0x40021000
 8000c7c:	48000800 	.word	0x48000800
 8000c80:	48000400 	.word	0x48000400

08000c84 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000c84:	b480      	push	{r7}
 8000c86:	b083      	sub	sp, #12
 8000c88:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c8a:	4b0f      	ldr	r3, [pc, #60]	; (8000cc8 <HAL_MspInit+0x44>)
 8000c8c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000c8e:	4a0e      	ldr	r2, [pc, #56]	; (8000cc8 <HAL_MspInit+0x44>)
 8000c90:	f043 0301 	orr.w	r3, r3, #1
 8000c94:	6613      	str	r3, [r2, #96]	; 0x60
 8000c96:	4b0c      	ldr	r3, [pc, #48]	; (8000cc8 <HAL_MspInit+0x44>)
 8000c98:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000c9a:	f003 0301 	and.w	r3, r3, #1
 8000c9e:	607b      	str	r3, [r7, #4]
 8000ca0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000ca2:	4b09      	ldr	r3, [pc, #36]	; (8000cc8 <HAL_MspInit+0x44>)
 8000ca4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000ca6:	4a08      	ldr	r2, [pc, #32]	; (8000cc8 <HAL_MspInit+0x44>)
 8000ca8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000cac:	6593      	str	r3, [r2, #88]	; 0x58
 8000cae:	4b06      	ldr	r3, [pc, #24]	; (8000cc8 <HAL_MspInit+0x44>)
 8000cb0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000cb2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000cb6:	603b      	str	r3, [r7, #0]
 8000cb8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000cba:	bf00      	nop
 8000cbc:	370c      	adds	r7, #12
 8000cbe:	46bd      	mov	sp, r7
 8000cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cc4:	4770      	bx	lr
 8000cc6:	bf00      	nop
 8000cc8:	40021000 	.word	0x40021000

08000ccc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000ccc:	b480      	push	{r7}
 8000cce:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000cd0:	bf00      	nop
 8000cd2:	46bd      	mov	sp, r7
 8000cd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cd8:	4770      	bx	lr

08000cda <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000cda:	b480      	push	{r7}
 8000cdc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000cde:	e7fe      	b.n	8000cde <HardFault_Handler+0x4>

08000ce0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000ce0:	b480      	push	{r7}
 8000ce2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000ce4:	e7fe      	b.n	8000ce4 <MemManage_Handler+0x4>

08000ce6 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000ce6:	b480      	push	{r7}
 8000ce8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000cea:	e7fe      	b.n	8000cea <BusFault_Handler+0x4>

08000cec <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000cec:	b480      	push	{r7}
 8000cee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000cf0:	e7fe      	b.n	8000cf0 <UsageFault_Handler+0x4>

08000cf2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000cf2:	b480      	push	{r7}
 8000cf4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000cf6:	bf00      	nop
 8000cf8:	46bd      	mov	sp, r7
 8000cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cfe:	4770      	bx	lr

08000d00 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000d00:	b480      	push	{r7}
 8000d02:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000d04:	bf00      	nop
 8000d06:	46bd      	mov	sp, r7
 8000d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d0c:	4770      	bx	lr

08000d0e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000d0e:	b480      	push	{r7}
 8000d10:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000d12:	bf00      	nop
 8000d14:	46bd      	mov	sp, r7
 8000d16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d1a:	4770      	bx	lr

08000d1c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000d1c:	b580      	push	{r7, lr}
 8000d1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000d20:	f000 fad0 	bl	80012c4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000d24:	bf00      	nop
 8000d26:	bd80      	pop	{r7, pc}

08000d28 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000d28:	b580      	push	{r7, lr}
 8000d2a:	b086      	sub	sp, #24
 8000d2c:	af00      	add	r7, sp, #0
 8000d2e:	60f8      	str	r0, [r7, #12]
 8000d30:	60b9      	str	r1, [r7, #8]
 8000d32:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000d34:	2300      	movs	r3, #0
 8000d36:	617b      	str	r3, [r7, #20]
 8000d38:	e00a      	b.n	8000d50 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000d3a:	f3af 8000 	nop.w
 8000d3e:	4601      	mov	r1, r0
 8000d40:	68bb      	ldr	r3, [r7, #8]
 8000d42:	1c5a      	adds	r2, r3, #1
 8000d44:	60ba      	str	r2, [r7, #8]
 8000d46:	b2ca      	uxtb	r2, r1
 8000d48:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000d4a:	697b      	ldr	r3, [r7, #20]
 8000d4c:	3301      	adds	r3, #1
 8000d4e:	617b      	str	r3, [r7, #20]
 8000d50:	697a      	ldr	r2, [r7, #20]
 8000d52:	687b      	ldr	r3, [r7, #4]
 8000d54:	429a      	cmp	r2, r3
 8000d56:	dbf0      	blt.n	8000d3a <_read+0x12>
	}

return len;
 8000d58:	687b      	ldr	r3, [r7, #4]
}
 8000d5a:	4618      	mov	r0, r3
 8000d5c:	3718      	adds	r7, #24
 8000d5e:	46bd      	mov	sp, r7
 8000d60:	bd80      	pop	{r7, pc}

08000d62 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000d62:	b580      	push	{r7, lr}
 8000d64:	b086      	sub	sp, #24
 8000d66:	af00      	add	r7, sp, #0
 8000d68:	60f8      	str	r0, [r7, #12]
 8000d6a:	60b9      	str	r1, [r7, #8]
 8000d6c:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000d6e:	2300      	movs	r3, #0
 8000d70:	617b      	str	r3, [r7, #20]
 8000d72:	e009      	b.n	8000d88 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8000d74:	68bb      	ldr	r3, [r7, #8]
 8000d76:	1c5a      	adds	r2, r3, #1
 8000d78:	60ba      	str	r2, [r7, #8]
 8000d7a:	781b      	ldrb	r3, [r3, #0]
 8000d7c:	4618      	mov	r0, r3
 8000d7e:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000d82:	697b      	ldr	r3, [r7, #20]
 8000d84:	3301      	adds	r3, #1
 8000d86:	617b      	str	r3, [r7, #20]
 8000d88:	697a      	ldr	r2, [r7, #20]
 8000d8a:	687b      	ldr	r3, [r7, #4]
 8000d8c:	429a      	cmp	r2, r3
 8000d8e:	dbf1      	blt.n	8000d74 <_write+0x12>
	}
	return len;
 8000d90:	687b      	ldr	r3, [r7, #4]
}
 8000d92:	4618      	mov	r0, r3
 8000d94:	3718      	adds	r7, #24
 8000d96:	46bd      	mov	sp, r7
 8000d98:	bd80      	pop	{r7, pc}

08000d9a <_close>:

int _close(int file)
{
 8000d9a:	b480      	push	{r7}
 8000d9c:	b083      	sub	sp, #12
 8000d9e:	af00      	add	r7, sp, #0
 8000da0:	6078      	str	r0, [r7, #4]
	return -1;
 8000da2:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000da6:	4618      	mov	r0, r3
 8000da8:	370c      	adds	r7, #12
 8000daa:	46bd      	mov	sp, r7
 8000dac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000db0:	4770      	bx	lr

08000db2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000db2:	b480      	push	{r7}
 8000db4:	b083      	sub	sp, #12
 8000db6:	af00      	add	r7, sp, #0
 8000db8:	6078      	str	r0, [r7, #4]
 8000dba:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000dbc:	683b      	ldr	r3, [r7, #0]
 8000dbe:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000dc2:	605a      	str	r2, [r3, #4]
	return 0;
 8000dc4:	2300      	movs	r3, #0
}
 8000dc6:	4618      	mov	r0, r3
 8000dc8:	370c      	adds	r7, #12
 8000dca:	46bd      	mov	sp, r7
 8000dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dd0:	4770      	bx	lr

08000dd2 <_isatty>:

int _isatty(int file)
{
 8000dd2:	b480      	push	{r7}
 8000dd4:	b083      	sub	sp, #12
 8000dd6:	af00      	add	r7, sp, #0
 8000dd8:	6078      	str	r0, [r7, #4]
	return 1;
 8000dda:	2301      	movs	r3, #1
}
 8000ddc:	4618      	mov	r0, r3
 8000dde:	370c      	adds	r7, #12
 8000de0:	46bd      	mov	sp, r7
 8000de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000de6:	4770      	bx	lr

08000de8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000de8:	b480      	push	{r7}
 8000dea:	b085      	sub	sp, #20
 8000dec:	af00      	add	r7, sp, #0
 8000dee:	60f8      	str	r0, [r7, #12]
 8000df0:	60b9      	str	r1, [r7, #8]
 8000df2:	607a      	str	r2, [r7, #4]
	return 0;
 8000df4:	2300      	movs	r3, #0
}
 8000df6:	4618      	mov	r0, r3
 8000df8:	3714      	adds	r7, #20
 8000dfa:	46bd      	mov	sp, r7
 8000dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e00:	4770      	bx	lr
	...

08000e04 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8000e04:	b580      	push	{r7, lr}
 8000e06:	b084      	sub	sp, #16
 8000e08:	af00      	add	r7, sp, #0
 8000e0a:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8000e0c:	4b11      	ldr	r3, [pc, #68]	; (8000e54 <_sbrk+0x50>)
 8000e0e:	681b      	ldr	r3, [r3, #0]
 8000e10:	2b00      	cmp	r3, #0
 8000e12:	d102      	bne.n	8000e1a <_sbrk+0x16>
		heap_end = &end;
 8000e14:	4b0f      	ldr	r3, [pc, #60]	; (8000e54 <_sbrk+0x50>)
 8000e16:	4a10      	ldr	r2, [pc, #64]	; (8000e58 <_sbrk+0x54>)
 8000e18:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8000e1a:	4b0e      	ldr	r3, [pc, #56]	; (8000e54 <_sbrk+0x50>)
 8000e1c:	681b      	ldr	r3, [r3, #0]
 8000e1e:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8000e20:	4b0c      	ldr	r3, [pc, #48]	; (8000e54 <_sbrk+0x50>)
 8000e22:	681a      	ldr	r2, [r3, #0]
 8000e24:	687b      	ldr	r3, [r7, #4]
 8000e26:	4413      	add	r3, r2
 8000e28:	466a      	mov	r2, sp
 8000e2a:	4293      	cmp	r3, r2
 8000e2c:	d907      	bls.n	8000e3e <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8000e2e:	f003 f8f1 	bl	8004014 <__errno>
 8000e32:	4602      	mov	r2, r0
 8000e34:	230c      	movs	r3, #12
 8000e36:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8000e38:	f04f 33ff 	mov.w	r3, #4294967295
 8000e3c:	e006      	b.n	8000e4c <_sbrk+0x48>
	}

	heap_end += incr;
 8000e3e:	4b05      	ldr	r3, [pc, #20]	; (8000e54 <_sbrk+0x50>)
 8000e40:	681a      	ldr	r2, [r3, #0]
 8000e42:	687b      	ldr	r3, [r7, #4]
 8000e44:	4413      	add	r3, r2
 8000e46:	4a03      	ldr	r2, [pc, #12]	; (8000e54 <_sbrk+0x50>)
 8000e48:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8000e4a:	68fb      	ldr	r3, [r7, #12]
}
 8000e4c:	4618      	mov	r0, r3
 8000e4e:	3710      	adds	r7, #16
 8000e50:	46bd      	mov	sp, r7
 8000e52:	bd80      	pop	{r7, pc}
 8000e54:	2000008c 	.word	0x2000008c
 8000e58:	200002d0 	.word	0x200002d0

08000e5c <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8000e5c:	b480      	push	{r7}
 8000e5e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000e60:	4b17      	ldr	r3, [pc, #92]	; (8000ec0 <SystemInit+0x64>)
 8000e62:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000e66:	4a16      	ldr	r2, [pc, #88]	; (8000ec0 <SystemInit+0x64>)
 8000e68:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000e6c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8000e70:	4b14      	ldr	r3, [pc, #80]	; (8000ec4 <SystemInit+0x68>)
 8000e72:	681b      	ldr	r3, [r3, #0]
 8000e74:	4a13      	ldr	r2, [pc, #76]	; (8000ec4 <SystemInit+0x68>)
 8000e76:	f043 0301 	orr.w	r3, r3, #1
 8000e7a:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 8000e7c:	4b11      	ldr	r3, [pc, #68]	; (8000ec4 <SystemInit+0x68>)
 8000e7e:	2200      	movs	r2, #0
 8000e80:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 8000e82:	4b10      	ldr	r3, [pc, #64]	; (8000ec4 <SystemInit+0x68>)
 8000e84:	681b      	ldr	r3, [r3, #0]
 8000e86:	4a0f      	ldr	r2, [pc, #60]	; (8000ec4 <SystemInit+0x68>)
 8000e88:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 8000e8c:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 8000e90:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 8000e92:	4b0c      	ldr	r3, [pc, #48]	; (8000ec4 <SystemInit+0x68>)
 8000e94:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000e98:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000e9a:	4b0a      	ldr	r3, [pc, #40]	; (8000ec4 <SystemInit+0x68>)
 8000e9c:	681b      	ldr	r3, [r3, #0]
 8000e9e:	4a09      	ldr	r2, [pc, #36]	; (8000ec4 <SystemInit+0x68>)
 8000ea0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000ea4:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 8000ea6:	4b07      	ldr	r3, [pc, #28]	; (8000ec4 <SystemInit+0x68>)
 8000ea8:	2200      	movs	r2, #0
 8000eaa:	619a      	str	r2, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000eac:	4b04      	ldr	r3, [pc, #16]	; (8000ec0 <SystemInit+0x64>)
 8000eae:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000eb2:	609a      	str	r2, [r3, #8]
#endif
}
 8000eb4:	bf00      	nop
 8000eb6:	46bd      	mov	sp, r7
 8000eb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ebc:	4770      	bx	lr
 8000ebe:	bf00      	nop
 8000ec0:	e000ed00 	.word	0xe000ed00
 8000ec4:	40021000 	.word	0x40021000

08000ec8 <Test_program>:
 *  Created on: Nov 25, 2019
 *      Author: samfl
 */
#include <test.h>

void Test_program(void) {
 8000ec8:	b580      	push	{r7, lr}
 8000eca:	af00      	add	r7, sp, #0
	Test_display_background("green");
 8000ecc:	4803      	ldr	r0, [pc, #12]	; (8000edc <Test_program+0x14>)
 8000ece:	f000 f815 	bl	8000efc <Test_display_background>
	Test_display();
 8000ed2:	f000 f805 	bl	8000ee0 <Test_display>

	return;
 8000ed6:	bf00      	nop
}
 8000ed8:	bd80      	pop	{r7, pc}
 8000eda:	bf00      	nop
 8000edc:	08004e9c 	.word	0x08004e9c

08000ee0 <Test_display>:

void Test_display(void) {
 8000ee0:	b580      	push	{r7, lr}
 8000ee2:	af00      	add	r7, sp, #0
	Init_display();
 8000ee4:	f7ff fc06 	bl	80006f4 <Init_display>
//	Write_data(0x61);
	HAL_GPIO_WritePin(Display_white_GPIO_Port, Display_white_Pin, SET);
 8000ee8:	2201      	movs	r2, #1
 8000eea:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000eee:	4802      	ldr	r0, [pc, #8]	; (8000ef8 <Test_display+0x18>)
 8000ef0:	f000 fcb6 	bl	8001860 <HAL_GPIO_WritePin>
}
 8000ef4:	bf00      	nop
 8000ef6:	bd80      	pop	{r7, pc}
 8000ef8:	48000800 	.word	0x48000800

08000efc <Test_display_background>:

void Test_display_background(char color[]) {
 8000efc:	b580      	push	{r7, lr}
 8000efe:	b082      	sub	sp, #8
 8000f00:	af00      	add	r7, sp, #0
 8000f02:	6078      	str	r0, [r7, #4]
	Display_color(color);
 8000f04:	6878      	ldr	r0, [r7, #4]
 8000f06:	f7ff fb89 	bl	800061c <Display_color>
}
 8000f0a:	bf00      	nop
 8000f0c:	3708      	adds	r7, #8
 8000f0e:	46bd      	mov	sp, r7
 8000f10:	bd80      	pop	{r7, pc}
	...

08000f14 <MX_UART4_Init>:
UART_HandleTypeDef huart5;
UART_HandleTypeDef huart2;

/* UART4 init function */
void MX_UART4_Init(void)
{
 8000f14:	b580      	push	{r7, lr}
 8000f16:	af00      	add	r7, sp, #0

  huart4.Instance = UART4;
 8000f18:	4b14      	ldr	r3, [pc, #80]	; (8000f6c <MX_UART4_Init+0x58>)
 8000f1a:	4a15      	ldr	r2, [pc, #84]	; (8000f70 <MX_UART4_Init+0x5c>)
 8000f1c:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 8000f1e:	4b13      	ldr	r3, [pc, #76]	; (8000f6c <MX_UART4_Init+0x58>)
 8000f20:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000f24:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8000f26:	4b11      	ldr	r3, [pc, #68]	; (8000f6c <MX_UART4_Init+0x58>)
 8000f28:	2200      	movs	r2, #0
 8000f2a:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8000f2c:	4b0f      	ldr	r3, [pc, #60]	; (8000f6c <MX_UART4_Init+0x58>)
 8000f2e:	2200      	movs	r2, #0
 8000f30:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8000f32:	4b0e      	ldr	r3, [pc, #56]	; (8000f6c <MX_UART4_Init+0x58>)
 8000f34:	2200      	movs	r2, #0
 8000f36:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8000f38:	4b0c      	ldr	r3, [pc, #48]	; (8000f6c <MX_UART4_Init+0x58>)
 8000f3a:	220c      	movs	r2, #12
 8000f3c:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000f3e:	4b0b      	ldr	r3, [pc, #44]	; (8000f6c <MX_UART4_Init+0x58>)
 8000f40:	2200      	movs	r2, #0
 8000f42:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8000f44:	4b09      	ldr	r3, [pc, #36]	; (8000f6c <MX_UART4_Init+0x58>)
 8000f46:	2200      	movs	r2, #0
 8000f48:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000f4a:	4b08      	ldr	r3, [pc, #32]	; (8000f6c <MX_UART4_Init+0x58>)
 8000f4c:	2200      	movs	r2, #0
 8000f4e:	621a      	str	r2, [r3, #32]
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000f50:	4b06      	ldr	r3, [pc, #24]	; (8000f6c <MX_UART4_Init+0x58>)
 8000f52:	2200      	movs	r2, #0
 8000f54:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8000f56:	4805      	ldr	r0, [pc, #20]	; (8000f6c <MX_UART4_Init+0x58>)
 8000f58:	f002 fb95 	bl	8003686 <HAL_UART_Init>
 8000f5c:	4603      	mov	r3, r0
 8000f5e:	2b00      	cmp	r3, #0
 8000f60:	d001      	beq.n	8000f66 <MX_UART4_Init+0x52>
  {
    Error_Handler();
 8000f62:	f7ff fde8 	bl	8000b36 <Error_Handler>
  }

}
 8000f66:	bf00      	nop
 8000f68:	bd80      	pop	{r7, pc}
 8000f6a:	bf00      	nop
 8000f6c:	200001c8 	.word	0x200001c8
 8000f70:	40004c00 	.word	0x40004c00

08000f74 <MX_UART5_Init>:
/* UART5 init function */
void MX_UART5_Init(void)
{
 8000f74:	b580      	push	{r7, lr}
 8000f76:	af00      	add	r7, sp, #0

  huart5.Instance = UART5;
 8000f78:	4b14      	ldr	r3, [pc, #80]	; (8000fcc <MX_UART5_Init+0x58>)
 8000f7a:	4a15      	ldr	r2, [pc, #84]	; (8000fd0 <MX_UART5_Init+0x5c>)
 8000f7c:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 115200;
 8000f7e:	4b13      	ldr	r3, [pc, #76]	; (8000fcc <MX_UART5_Init+0x58>)
 8000f80:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000f84:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 8000f86:	4b11      	ldr	r3, [pc, #68]	; (8000fcc <MX_UART5_Init+0x58>)
 8000f88:	2200      	movs	r2, #0
 8000f8a:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 8000f8c:	4b0f      	ldr	r3, [pc, #60]	; (8000fcc <MX_UART5_Init+0x58>)
 8000f8e:	2200      	movs	r2, #0
 8000f90:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 8000f92:	4b0e      	ldr	r3, [pc, #56]	; (8000fcc <MX_UART5_Init+0x58>)
 8000f94:	2200      	movs	r2, #0
 8000f96:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 8000f98:	4b0c      	ldr	r3, [pc, #48]	; (8000fcc <MX_UART5_Init+0x58>)
 8000f9a:	220c      	movs	r2, #12
 8000f9c:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000f9e:	4b0b      	ldr	r3, [pc, #44]	; (8000fcc <MX_UART5_Init+0x58>)
 8000fa0:	2200      	movs	r2, #0
 8000fa2:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 8000fa4:	4b09      	ldr	r3, [pc, #36]	; (8000fcc <MX_UART5_Init+0x58>)
 8000fa6:	2200      	movs	r2, #0
 8000fa8:	61da      	str	r2, [r3, #28]
  huart5.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000faa:	4b08      	ldr	r3, [pc, #32]	; (8000fcc <MX_UART5_Init+0x58>)
 8000fac:	2200      	movs	r2, #0
 8000fae:	621a      	str	r2, [r3, #32]
  huart5.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000fb0:	4b06      	ldr	r3, [pc, #24]	; (8000fcc <MX_UART5_Init+0x58>)
 8000fb2:	2200      	movs	r2, #0
 8000fb4:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart5) != HAL_OK)
 8000fb6:	4805      	ldr	r0, [pc, #20]	; (8000fcc <MX_UART5_Init+0x58>)
 8000fb8:	f002 fb65 	bl	8003686 <HAL_UART_Init>
 8000fbc:	4603      	mov	r3, r0
 8000fbe:	2b00      	cmp	r3, #0
 8000fc0:	d001      	beq.n	8000fc6 <MX_UART5_Init+0x52>
  {
    Error_Handler();
 8000fc2:	f7ff fdb8 	bl	8000b36 <Error_Handler>
  }

}
 8000fc6:	bf00      	nop
 8000fc8:	bd80      	pop	{r7, pc}
 8000fca:	bf00      	nop
 8000fcc:	20000148 	.word	0x20000148
 8000fd0:	40005000 	.word	0x40005000

08000fd4 <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8000fd4:	b580      	push	{r7, lr}
 8000fd6:	af00      	add	r7, sp, #0

  huart2.Instance = USART2;
 8000fd8:	4b14      	ldr	r3, [pc, #80]	; (800102c <MX_USART2_UART_Init+0x58>)
 8000fda:	4a15      	ldr	r2, [pc, #84]	; (8001030 <MX_USART2_UART_Init+0x5c>)
 8000fdc:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000fde:	4b13      	ldr	r3, [pc, #76]	; (800102c <MX_USART2_UART_Init+0x58>)
 8000fe0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000fe4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000fe6:	4b11      	ldr	r3, [pc, #68]	; (800102c <MX_USART2_UART_Init+0x58>)
 8000fe8:	2200      	movs	r2, #0
 8000fea:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000fec:	4b0f      	ldr	r3, [pc, #60]	; (800102c <MX_USART2_UART_Init+0x58>)
 8000fee:	2200      	movs	r2, #0
 8000ff0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000ff2:	4b0e      	ldr	r3, [pc, #56]	; (800102c <MX_USART2_UART_Init+0x58>)
 8000ff4:	2200      	movs	r2, #0
 8000ff6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000ff8:	4b0c      	ldr	r3, [pc, #48]	; (800102c <MX_USART2_UART_Init+0x58>)
 8000ffa:	220c      	movs	r2, #12
 8000ffc:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000ffe:	4b0b      	ldr	r3, [pc, #44]	; (800102c <MX_USART2_UART_Init+0x58>)
 8001000:	2200      	movs	r2, #0
 8001002:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001004:	4b09      	ldr	r3, [pc, #36]	; (800102c <MX_USART2_UART_Init+0x58>)
 8001006:	2200      	movs	r2, #0
 8001008:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800100a:	4b08      	ldr	r3, [pc, #32]	; (800102c <MX_USART2_UART_Init+0x58>)
 800100c:	2200      	movs	r2, #0
 800100e:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001010:	4b06      	ldr	r3, [pc, #24]	; (800102c <MX_USART2_UART_Init+0x58>)
 8001012:	2200      	movs	r2, #0
 8001014:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001016:	4805      	ldr	r0, [pc, #20]	; (800102c <MX_USART2_UART_Init+0x58>)
 8001018:	f002 fb35 	bl	8003686 <HAL_UART_Init>
 800101c:	4603      	mov	r3, r0
 800101e:	2b00      	cmp	r3, #0
 8001020:	d001      	beq.n	8001026 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8001022:	f7ff fd88 	bl	8000b36 <Error_Handler>
  }

}
 8001026:	bf00      	nop
 8001028:	bd80      	pop	{r7, pc}
 800102a:	bf00      	nop
 800102c:	20000248 	.word	0x20000248
 8001030:	40004400 	.word	0x40004400

08001034 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001034:	b580      	push	{r7, lr}
 8001036:	b08e      	sub	sp, #56	; 0x38
 8001038:	af00      	add	r7, sp, #0
 800103a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800103c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001040:	2200      	movs	r2, #0
 8001042:	601a      	str	r2, [r3, #0]
 8001044:	605a      	str	r2, [r3, #4]
 8001046:	609a      	str	r2, [r3, #8]
 8001048:	60da      	str	r2, [r3, #12]
 800104a:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==UART4)
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	681b      	ldr	r3, [r3, #0]
 8001050:	4a54      	ldr	r2, [pc, #336]	; (80011a4 <HAL_UART_MspInit+0x170>)
 8001052:	4293      	cmp	r3, r2
 8001054:	d129      	bne.n	80010aa <HAL_UART_MspInit+0x76>
  {
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
    /* UART4 clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8001056:	4b54      	ldr	r3, [pc, #336]	; (80011a8 <HAL_UART_MspInit+0x174>)
 8001058:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800105a:	4a53      	ldr	r2, [pc, #332]	; (80011a8 <HAL_UART_MspInit+0x174>)
 800105c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8001060:	6593      	str	r3, [r2, #88]	; 0x58
 8001062:	4b51      	ldr	r3, [pc, #324]	; (80011a8 <HAL_UART_MspInit+0x174>)
 8001064:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001066:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800106a:	623b      	str	r3, [r7, #32]
 800106c:	6a3b      	ldr	r3, [r7, #32]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800106e:	4b4e      	ldr	r3, [pc, #312]	; (80011a8 <HAL_UART_MspInit+0x174>)
 8001070:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001072:	4a4d      	ldr	r2, [pc, #308]	; (80011a8 <HAL_UART_MspInit+0x174>)
 8001074:	f043 0301 	orr.w	r3, r3, #1
 8001078:	64d3      	str	r3, [r2, #76]	; 0x4c
 800107a:	4b4b      	ldr	r3, [pc, #300]	; (80011a8 <HAL_UART_MspInit+0x174>)
 800107c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800107e:	f003 0301 	and.w	r3, r3, #1
 8001082:	61fb      	str	r3, [r7, #28]
 8001084:	69fb      	ldr	r3, [r7, #28]
    /**UART4 GPIO Configuration    
    PA0     ------> UART4_TX
    PA1     ------> UART4_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001086:	2303      	movs	r3, #3
 8001088:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800108a:	2302      	movs	r3, #2
 800108c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800108e:	2300      	movs	r3, #0
 8001090:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001092:	2303      	movs	r3, #3
 8001094:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8001096:	2308      	movs	r3, #8
 8001098:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800109a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800109e:	4619      	mov	r1, r3
 80010a0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80010a4:	f000 fa34 	bl	8001510 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 80010a8:	e078      	b.n	800119c <HAL_UART_MspInit+0x168>
  else if(uartHandle->Instance==UART5)
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	681b      	ldr	r3, [r3, #0]
 80010ae:	4a3f      	ldr	r2, [pc, #252]	; (80011ac <HAL_UART_MspInit+0x178>)
 80010b0:	4293      	cmp	r3, r2
 80010b2:	d145      	bne.n	8001140 <HAL_UART_MspInit+0x10c>
    __HAL_RCC_UART5_CLK_ENABLE();
 80010b4:	4b3c      	ldr	r3, [pc, #240]	; (80011a8 <HAL_UART_MspInit+0x174>)
 80010b6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80010b8:	4a3b      	ldr	r2, [pc, #236]	; (80011a8 <HAL_UART_MspInit+0x174>)
 80010ba:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80010be:	6593      	str	r3, [r2, #88]	; 0x58
 80010c0:	4b39      	ldr	r3, [pc, #228]	; (80011a8 <HAL_UART_MspInit+0x174>)
 80010c2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80010c4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80010c8:	61bb      	str	r3, [r7, #24]
 80010ca:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80010cc:	4b36      	ldr	r3, [pc, #216]	; (80011a8 <HAL_UART_MspInit+0x174>)
 80010ce:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010d0:	4a35      	ldr	r2, [pc, #212]	; (80011a8 <HAL_UART_MspInit+0x174>)
 80010d2:	f043 0304 	orr.w	r3, r3, #4
 80010d6:	64d3      	str	r3, [r2, #76]	; 0x4c
 80010d8:	4b33      	ldr	r3, [pc, #204]	; (80011a8 <HAL_UART_MspInit+0x174>)
 80010da:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010dc:	f003 0304 	and.w	r3, r3, #4
 80010e0:	617b      	str	r3, [r7, #20]
 80010e2:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80010e4:	4b30      	ldr	r3, [pc, #192]	; (80011a8 <HAL_UART_MspInit+0x174>)
 80010e6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010e8:	4a2f      	ldr	r2, [pc, #188]	; (80011a8 <HAL_UART_MspInit+0x174>)
 80010ea:	f043 0308 	orr.w	r3, r3, #8
 80010ee:	64d3      	str	r3, [r2, #76]	; 0x4c
 80010f0:	4b2d      	ldr	r3, [pc, #180]	; (80011a8 <HAL_UART_MspInit+0x174>)
 80010f2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010f4:	f003 0308 	and.w	r3, r3, #8
 80010f8:	613b      	str	r3, [r7, #16]
 80010fa:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 80010fc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001100:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001102:	2302      	movs	r3, #2
 8001104:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001106:	2300      	movs	r3, #0
 8001108:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800110a:	2303      	movs	r3, #3
 800110c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 800110e:	2308      	movs	r3, #8
 8001110:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001112:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001116:	4619      	mov	r1, r3
 8001118:	4825      	ldr	r0, [pc, #148]	; (80011b0 <HAL_UART_MspInit+0x17c>)
 800111a:	f000 f9f9 	bl	8001510 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 800111e:	2304      	movs	r3, #4
 8001120:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001122:	2302      	movs	r3, #2
 8001124:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001126:	2300      	movs	r3, #0
 8001128:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800112a:	2303      	movs	r3, #3
 800112c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 800112e:	2308      	movs	r3, #8
 8001130:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001132:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001136:	4619      	mov	r1, r3
 8001138:	481e      	ldr	r0, [pc, #120]	; (80011b4 <HAL_UART_MspInit+0x180>)
 800113a:	f000 f9e9 	bl	8001510 <HAL_GPIO_Init>
}
 800113e:	e02d      	b.n	800119c <HAL_UART_MspInit+0x168>
  else if(uartHandle->Instance==USART2)
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	681b      	ldr	r3, [r3, #0]
 8001144:	4a1c      	ldr	r2, [pc, #112]	; (80011b8 <HAL_UART_MspInit+0x184>)
 8001146:	4293      	cmp	r3, r2
 8001148:	d128      	bne.n	800119c <HAL_UART_MspInit+0x168>
    __HAL_RCC_USART2_CLK_ENABLE();
 800114a:	4b17      	ldr	r3, [pc, #92]	; (80011a8 <HAL_UART_MspInit+0x174>)
 800114c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800114e:	4a16      	ldr	r2, [pc, #88]	; (80011a8 <HAL_UART_MspInit+0x174>)
 8001150:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001154:	6593      	str	r3, [r2, #88]	; 0x58
 8001156:	4b14      	ldr	r3, [pc, #80]	; (80011a8 <HAL_UART_MspInit+0x174>)
 8001158:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800115a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800115e:	60fb      	str	r3, [r7, #12]
 8001160:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001162:	4b11      	ldr	r3, [pc, #68]	; (80011a8 <HAL_UART_MspInit+0x174>)
 8001164:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001166:	4a10      	ldr	r2, [pc, #64]	; (80011a8 <HAL_UART_MspInit+0x174>)
 8001168:	f043 0301 	orr.w	r3, r3, #1
 800116c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800116e:	4b0e      	ldr	r3, [pc, #56]	; (80011a8 <HAL_UART_MspInit+0x174>)
 8001170:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001172:	f003 0301 	and.w	r3, r3, #1
 8001176:	60bb      	str	r3, [r7, #8]
 8001178:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 800117a:	230c      	movs	r3, #12
 800117c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800117e:	2302      	movs	r3, #2
 8001180:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001182:	2300      	movs	r3, #0
 8001184:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001186:	2303      	movs	r3, #3
 8001188:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800118a:	2307      	movs	r3, #7
 800118c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800118e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001192:	4619      	mov	r1, r3
 8001194:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001198:	f000 f9ba 	bl	8001510 <HAL_GPIO_Init>
}
 800119c:	bf00      	nop
 800119e:	3738      	adds	r7, #56	; 0x38
 80011a0:	46bd      	mov	sp, r7
 80011a2:	bd80      	pop	{r7, pc}
 80011a4:	40004c00 	.word	0x40004c00
 80011a8:	40021000 	.word	0x40021000
 80011ac:	40005000 	.word	0x40005000
 80011b0:	48000800 	.word	0x48000800
 80011b4:	48000c00 	.word	0x48000c00
 80011b8:	40004400 	.word	0x40004400

080011bc <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80011bc:	f8df d034 	ldr.w	sp, [pc, #52]	; 80011f4 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 80011c0:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 80011c2:	e003      	b.n	80011cc <LoopCopyDataInit>

080011c4 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 80011c4:	4b0c      	ldr	r3, [pc, #48]	; (80011f8 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 80011c6:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 80011c8:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 80011ca:	3104      	adds	r1, #4

080011cc <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 80011cc:	480b      	ldr	r0, [pc, #44]	; (80011fc <LoopForever+0xa>)
	ldr	r3, =_edata
 80011ce:	4b0c      	ldr	r3, [pc, #48]	; (8001200 <LoopForever+0xe>)
	adds	r2, r0, r1
 80011d0:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 80011d2:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 80011d4:	d3f6      	bcc.n	80011c4 <CopyDataInit>
	ldr	r2, =_sbss
 80011d6:	4a0b      	ldr	r2, [pc, #44]	; (8001204 <LoopForever+0x12>)
	b	LoopFillZerobss
 80011d8:	e002      	b.n	80011e0 <LoopFillZerobss>

080011da <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 80011da:	2300      	movs	r3, #0
	str	r3, [r2], #4
 80011dc:	f842 3b04 	str.w	r3, [r2], #4

080011e0 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 80011e0:	4b09      	ldr	r3, [pc, #36]	; (8001208 <LoopForever+0x16>)
	cmp	r2, r3
 80011e2:	429a      	cmp	r2, r3
	bcc	FillZerobss
 80011e4:	d3f9      	bcc.n	80011da <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80011e6:	f7ff fe39 	bl	8000e5c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80011ea:	f002 ff19 	bl	8004020 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80011ee:	f7ff fc11 	bl	8000a14 <main>

080011f2 <LoopForever>:

LoopForever:
    b LoopForever
 80011f2:	e7fe      	b.n	80011f2 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80011f4:	20018000 	.word	0x20018000
	ldr	r3, =_sidata
 80011f8:	08004f94 	.word	0x08004f94
	ldr	r0, =_sdata
 80011fc:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8001200:	20000070 	.word	0x20000070
	ldr	r2, =_sbss
 8001204:	20000070 	.word	0x20000070
	ldr	r3, = _ebss
 8001208:	200002d0 	.word	0x200002d0

0800120c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800120c:	e7fe      	b.n	800120c <ADC1_2_IRQHandler>
	...

08001210 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001210:	b580      	push	{r7, lr}
 8001212:	b082      	sub	sp, #8
 8001214:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001216:	2300      	movs	r3, #0
 8001218:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800121a:	4b0c      	ldr	r3, [pc, #48]	; (800124c <HAL_Init+0x3c>)
 800121c:	681b      	ldr	r3, [r3, #0]
 800121e:	4a0b      	ldr	r2, [pc, #44]	; (800124c <HAL_Init+0x3c>)
 8001220:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001224:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001226:	2003      	movs	r0, #3
 8001228:	f000 f93e 	bl	80014a8 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800122c:	2000      	movs	r0, #0
 800122e:	f000 f80f 	bl	8001250 <HAL_InitTick>
 8001232:	4603      	mov	r3, r0
 8001234:	2b00      	cmp	r3, #0
 8001236:	d002      	beq.n	800123e <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8001238:	2301      	movs	r3, #1
 800123a:	71fb      	strb	r3, [r7, #7]
 800123c:	e001      	b.n	8001242 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800123e:	f7ff fd21 	bl	8000c84 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001242:	79fb      	ldrb	r3, [r7, #7]
}
 8001244:	4618      	mov	r0, r3
 8001246:	3708      	adds	r7, #8
 8001248:	46bd      	mov	sp, r7
 800124a:	bd80      	pop	{r7, pc}
 800124c:	40022000 	.word	0x40022000

08001250 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001250:	b580      	push	{r7, lr}
 8001252:	b084      	sub	sp, #16
 8001254:	af00      	add	r7, sp, #0
 8001256:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001258:	2300      	movs	r3, #0
 800125a:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 800125c:	4b16      	ldr	r3, [pc, #88]	; (80012b8 <HAL_InitTick+0x68>)
 800125e:	681b      	ldr	r3, [r3, #0]
 8001260:	2b00      	cmp	r3, #0
 8001262:	d022      	beq.n	80012aa <HAL_InitTick+0x5a>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8001264:	4b15      	ldr	r3, [pc, #84]	; (80012bc <HAL_InitTick+0x6c>)
 8001266:	681a      	ldr	r2, [r3, #0]
 8001268:	4b13      	ldr	r3, [pc, #76]	; (80012b8 <HAL_InitTick+0x68>)
 800126a:	681b      	ldr	r3, [r3, #0]
 800126c:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8001270:	fbb1 f3f3 	udiv	r3, r1, r3
 8001274:	fbb2 f3f3 	udiv	r3, r2, r3
 8001278:	4618      	mov	r0, r3
 800127a:	f000 f93c 	bl	80014f6 <HAL_SYSTICK_Config>
 800127e:	4603      	mov	r3, r0
 8001280:	2b00      	cmp	r3, #0
 8001282:	d10f      	bne.n	80012a4 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	2b0f      	cmp	r3, #15
 8001288:	d809      	bhi.n	800129e <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800128a:	2200      	movs	r2, #0
 800128c:	6879      	ldr	r1, [r7, #4]
 800128e:	f04f 30ff 	mov.w	r0, #4294967295
 8001292:	f000 f914 	bl	80014be <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001296:	4a0a      	ldr	r2, [pc, #40]	; (80012c0 <HAL_InitTick+0x70>)
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	6013      	str	r3, [r2, #0]
 800129c:	e007      	b.n	80012ae <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 800129e:	2301      	movs	r3, #1
 80012a0:	73fb      	strb	r3, [r7, #15]
 80012a2:	e004      	b.n	80012ae <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 80012a4:	2301      	movs	r3, #1
 80012a6:	73fb      	strb	r3, [r7, #15]
 80012a8:	e001      	b.n	80012ae <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 80012aa:	2301      	movs	r3, #1
 80012ac:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80012ae:	7bfb      	ldrb	r3, [r7, #15]
}
 80012b0:	4618      	mov	r0, r3
 80012b2:	3710      	adds	r7, #16
 80012b4:	46bd      	mov	sp, r7
 80012b6:	bd80      	pop	{r7, pc}
 80012b8:	20000008 	.word	0x20000008
 80012bc:	20000000 	.word	0x20000000
 80012c0:	20000004 	.word	0x20000004

080012c4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80012c4:	b480      	push	{r7}
 80012c6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80012c8:	4b05      	ldr	r3, [pc, #20]	; (80012e0 <HAL_IncTick+0x1c>)
 80012ca:	681a      	ldr	r2, [r3, #0]
 80012cc:	4b05      	ldr	r3, [pc, #20]	; (80012e4 <HAL_IncTick+0x20>)
 80012ce:	681b      	ldr	r3, [r3, #0]
 80012d0:	4413      	add	r3, r2
 80012d2:	4a03      	ldr	r2, [pc, #12]	; (80012e0 <HAL_IncTick+0x1c>)
 80012d4:	6013      	str	r3, [r2, #0]
}
 80012d6:	bf00      	nop
 80012d8:	46bd      	mov	sp, r7
 80012da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012de:	4770      	bx	lr
 80012e0:	200002c8 	.word	0x200002c8
 80012e4:	20000008 	.word	0x20000008

080012e8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80012e8:	b480      	push	{r7}
 80012ea:	af00      	add	r7, sp, #0
  return uwTick;
 80012ec:	4b03      	ldr	r3, [pc, #12]	; (80012fc <HAL_GetTick+0x14>)
 80012ee:	681b      	ldr	r3, [r3, #0]
}
 80012f0:	4618      	mov	r0, r3
 80012f2:	46bd      	mov	sp, r7
 80012f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012f8:	4770      	bx	lr
 80012fa:	bf00      	nop
 80012fc:	200002c8 	.word	0x200002c8

08001300 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001300:	b580      	push	{r7, lr}
 8001302:	b084      	sub	sp, #16
 8001304:	af00      	add	r7, sp, #0
 8001306:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001308:	f7ff ffee 	bl	80012e8 <HAL_GetTick>
 800130c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001312:	68fb      	ldr	r3, [r7, #12]
 8001314:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001318:	d004      	beq.n	8001324 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 800131a:	4b09      	ldr	r3, [pc, #36]	; (8001340 <HAL_Delay+0x40>)
 800131c:	681b      	ldr	r3, [r3, #0]
 800131e:	68fa      	ldr	r2, [r7, #12]
 8001320:	4413      	add	r3, r2
 8001322:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001324:	bf00      	nop
 8001326:	f7ff ffdf 	bl	80012e8 <HAL_GetTick>
 800132a:	4602      	mov	r2, r0
 800132c:	68bb      	ldr	r3, [r7, #8]
 800132e:	1ad3      	subs	r3, r2, r3
 8001330:	68fa      	ldr	r2, [r7, #12]
 8001332:	429a      	cmp	r2, r3
 8001334:	d8f7      	bhi.n	8001326 <HAL_Delay+0x26>
  {
  }
}
 8001336:	bf00      	nop
 8001338:	3710      	adds	r7, #16
 800133a:	46bd      	mov	sp, r7
 800133c:	bd80      	pop	{r7, pc}
 800133e:	bf00      	nop
 8001340:	20000008 	.word	0x20000008

08001344 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001344:	b480      	push	{r7}
 8001346:	b085      	sub	sp, #20
 8001348:	af00      	add	r7, sp, #0
 800134a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	f003 0307 	and.w	r3, r3, #7
 8001352:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001354:	4b0c      	ldr	r3, [pc, #48]	; (8001388 <__NVIC_SetPriorityGrouping+0x44>)
 8001356:	68db      	ldr	r3, [r3, #12]
 8001358:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800135a:	68ba      	ldr	r2, [r7, #8]
 800135c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001360:	4013      	ands	r3, r2
 8001362:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001364:	68fb      	ldr	r3, [r7, #12]
 8001366:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001368:	68bb      	ldr	r3, [r7, #8]
 800136a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800136c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001370:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001374:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001376:	4a04      	ldr	r2, [pc, #16]	; (8001388 <__NVIC_SetPriorityGrouping+0x44>)
 8001378:	68bb      	ldr	r3, [r7, #8]
 800137a:	60d3      	str	r3, [r2, #12]
}
 800137c:	bf00      	nop
 800137e:	3714      	adds	r7, #20
 8001380:	46bd      	mov	sp, r7
 8001382:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001386:	4770      	bx	lr
 8001388:	e000ed00 	.word	0xe000ed00

0800138c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800138c:	b480      	push	{r7}
 800138e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001390:	4b04      	ldr	r3, [pc, #16]	; (80013a4 <__NVIC_GetPriorityGrouping+0x18>)
 8001392:	68db      	ldr	r3, [r3, #12]
 8001394:	0a1b      	lsrs	r3, r3, #8
 8001396:	f003 0307 	and.w	r3, r3, #7
}
 800139a:	4618      	mov	r0, r3
 800139c:	46bd      	mov	sp, r7
 800139e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013a2:	4770      	bx	lr
 80013a4:	e000ed00 	.word	0xe000ed00

080013a8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80013a8:	b480      	push	{r7}
 80013aa:	b083      	sub	sp, #12
 80013ac:	af00      	add	r7, sp, #0
 80013ae:	4603      	mov	r3, r0
 80013b0:	6039      	str	r1, [r7, #0]
 80013b2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80013b4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013b8:	2b00      	cmp	r3, #0
 80013ba:	db0a      	blt.n	80013d2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80013bc:	683b      	ldr	r3, [r7, #0]
 80013be:	b2da      	uxtb	r2, r3
 80013c0:	490c      	ldr	r1, [pc, #48]	; (80013f4 <__NVIC_SetPriority+0x4c>)
 80013c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013c6:	0112      	lsls	r2, r2, #4
 80013c8:	b2d2      	uxtb	r2, r2
 80013ca:	440b      	add	r3, r1
 80013cc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80013d0:	e00a      	b.n	80013e8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80013d2:	683b      	ldr	r3, [r7, #0]
 80013d4:	b2da      	uxtb	r2, r3
 80013d6:	4908      	ldr	r1, [pc, #32]	; (80013f8 <__NVIC_SetPriority+0x50>)
 80013d8:	79fb      	ldrb	r3, [r7, #7]
 80013da:	f003 030f 	and.w	r3, r3, #15
 80013de:	3b04      	subs	r3, #4
 80013e0:	0112      	lsls	r2, r2, #4
 80013e2:	b2d2      	uxtb	r2, r2
 80013e4:	440b      	add	r3, r1
 80013e6:	761a      	strb	r2, [r3, #24]
}
 80013e8:	bf00      	nop
 80013ea:	370c      	adds	r7, #12
 80013ec:	46bd      	mov	sp, r7
 80013ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013f2:	4770      	bx	lr
 80013f4:	e000e100 	.word	0xe000e100
 80013f8:	e000ed00 	.word	0xe000ed00

080013fc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80013fc:	b480      	push	{r7}
 80013fe:	b089      	sub	sp, #36	; 0x24
 8001400:	af00      	add	r7, sp, #0
 8001402:	60f8      	str	r0, [r7, #12]
 8001404:	60b9      	str	r1, [r7, #8]
 8001406:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001408:	68fb      	ldr	r3, [r7, #12]
 800140a:	f003 0307 	and.w	r3, r3, #7
 800140e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001410:	69fb      	ldr	r3, [r7, #28]
 8001412:	f1c3 0307 	rsb	r3, r3, #7
 8001416:	2b04      	cmp	r3, #4
 8001418:	bf28      	it	cs
 800141a:	2304      	movcs	r3, #4
 800141c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800141e:	69fb      	ldr	r3, [r7, #28]
 8001420:	3304      	adds	r3, #4
 8001422:	2b06      	cmp	r3, #6
 8001424:	d902      	bls.n	800142c <NVIC_EncodePriority+0x30>
 8001426:	69fb      	ldr	r3, [r7, #28]
 8001428:	3b03      	subs	r3, #3
 800142a:	e000      	b.n	800142e <NVIC_EncodePriority+0x32>
 800142c:	2300      	movs	r3, #0
 800142e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001430:	f04f 32ff 	mov.w	r2, #4294967295
 8001434:	69bb      	ldr	r3, [r7, #24]
 8001436:	fa02 f303 	lsl.w	r3, r2, r3
 800143a:	43da      	mvns	r2, r3
 800143c:	68bb      	ldr	r3, [r7, #8]
 800143e:	401a      	ands	r2, r3
 8001440:	697b      	ldr	r3, [r7, #20]
 8001442:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001444:	f04f 31ff 	mov.w	r1, #4294967295
 8001448:	697b      	ldr	r3, [r7, #20]
 800144a:	fa01 f303 	lsl.w	r3, r1, r3
 800144e:	43d9      	mvns	r1, r3
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001454:	4313      	orrs	r3, r2
         );
}
 8001456:	4618      	mov	r0, r3
 8001458:	3724      	adds	r7, #36	; 0x24
 800145a:	46bd      	mov	sp, r7
 800145c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001460:	4770      	bx	lr
	...

08001464 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001464:	b580      	push	{r7, lr}
 8001466:	b082      	sub	sp, #8
 8001468:	af00      	add	r7, sp, #0
 800146a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	3b01      	subs	r3, #1
 8001470:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001474:	d301      	bcc.n	800147a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001476:	2301      	movs	r3, #1
 8001478:	e00f      	b.n	800149a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800147a:	4a0a      	ldr	r2, [pc, #40]	; (80014a4 <SysTick_Config+0x40>)
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	3b01      	subs	r3, #1
 8001480:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001482:	210f      	movs	r1, #15
 8001484:	f04f 30ff 	mov.w	r0, #4294967295
 8001488:	f7ff ff8e 	bl	80013a8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800148c:	4b05      	ldr	r3, [pc, #20]	; (80014a4 <SysTick_Config+0x40>)
 800148e:	2200      	movs	r2, #0
 8001490:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001492:	4b04      	ldr	r3, [pc, #16]	; (80014a4 <SysTick_Config+0x40>)
 8001494:	2207      	movs	r2, #7
 8001496:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001498:	2300      	movs	r3, #0
}
 800149a:	4618      	mov	r0, r3
 800149c:	3708      	adds	r7, #8
 800149e:	46bd      	mov	sp, r7
 80014a0:	bd80      	pop	{r7, pc}
 80014a2:	bf00      	nop
 80014a4:	e000e010 	.word	0xe000e010

080014a8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80014a8:	b580      	push	{r7, lr}
 80014aa:	b082      	sub	sp, #8
 80014ac:	af00      	add	r7, sp, #0
 80014ae:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80014b0:	6878      	ldr	r0, [r7, #4]
 80014b2:	f7ff ff47 	bl	8001344 <__NVIC_SetPriorityGrouping>
}
 80014b6:	bf00      	nop
 80014b8:	3708      	adds	r7, #8
 80014ba:	46bd      	mov	sp, r7
 80014bc:	bd80      	pop	{r7, pc}

080014be <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80014be:	b580      	push	{r7, lr}
 80014c0:	b086      	sub	sp, #24
 80014c2:	af00      	add	r7, sp, #0
 80014c4:	4603      	mov	r3, r0
 80014c6:	60b9      	str	r1, [r7, #8]
 80014c8:	607a      	str	r2, [r7, #4]
 80014ca:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80014cc:	2300      	movs	r3, #0
 80014ce:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80014d0:	f7ff ff5c 	bl	800138c <__NVIC_GetPriorityGrouping>
 80014d4:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80014d6:	687a      	ldr	r2, [r7, #4]
 80014d8:	68b9      	ldr	r1, [r7, #8]
 80014da:	6978      	ldr	r0, [r7, #20]
 80014dc:	f7ff ff8e 	bl	80013fc <NVIC_EncodePriority>
 80014e0:	4602      	mov	r2, r0
 80014e2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80014e6:	4611      	mov	r1, r2
 80014e8:	4618      	mov	r0, r3
 80014ea:	f7ff ff5d 	bl	80013a8 <__NVIC_SetPriority>
}
 80014ee:	bf00      	nop
 80014f0:	3718      	adds	r7, #24
 80014f2:	46bd      	mov	sp, r7
 80014f4:	bd80      	pop	{r7, pc}

080014f6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80014f6:	b580      	push	{r7, lr}
 80014f8:	b082      	sub	sp, #8
 80014fa:	af00      	add	r7, sp, #0
 80014fc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80014fe:	6878      	ldr	r0, [r7, #4]
 8001500:	f7ff ffb0 	bl	8001464 <SysTick_Config>
 8001504:	4603      	mov	r3, r0
}
 8001506:	4618      	mov	r0, r3
 8001508:	3708      	adds	r7, #8
 800150a:	46bd      	mov	sp, r7
 800150c:	bd80      	pop	{r7, pc}
	...

08001510 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001510:	b480      	push	{r7}
 8001512:	b087      	sub	sp, #28
 8001514:	af00      	add	r7, sp, #0
 8001516:	6078      	str	r0, [r7, #4]
 8001518:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800151a:	2300      	movs	r3, #0
 800151c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800151e:	e17f      	b.n	8001820 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001520:	683b      	ldr	r3, [r7, #0]
 8001522:	681a      	ldr	r2, [r3, #0]
 8001524:	2101      	movs	r1, #1
 8001526:	697b      	ldr	r3, [r7, #20]
 8001528:	fa01 f303 	lsl.w	r3, r1, r3
 800152c:	4013      	ands	r3, r2
 800152e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001530:	68fb      	ldr	r3, [r7, #12]
 8001532:	2b00      	cmp	r3, #0
 8001534:	f000 8171 	beq.w	800181a <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001538:	683b      	ldr	r3, [r7, #0]
 800153a:	685b      	ldr	r3, [r3, #4]
 800153c:	2b02      	cmp	r3, #2
 800153e:	d003      	beq.n	8001548 <HAL_GPIO_Init+0x38>
 8001540:	683b      	ldr	r3, [r7, #0]
 8001542:	685b      	ldr	r3, [r3, #4]
 8001544:	2b12      	cmp	r3, #18
 8001546:	d123      	bne.n	8001590 <HAL_GPIO_Init+0x80>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001548:	697b      	ldr	r3, [r7, #20]
 800154a:	08da      	lsrs	r2, r3, #3
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	3208      	adds	r2, #8
 8001550:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001554:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001556:	697b      	ldr	r3, [r7, #20]
 8001558:	f003 0307 	and.w	r3, r3, #7
 800155c:	009b      	lsls	r3, r3, #2
 800155e:	220f      	movs	r2, #15
 8001560:	fa02 f303 	lsl.w	r3, r2, r3
 8001564:	43db      	mvns	r3, r3
 8001566:	693a      	ldr	r2, [r7, #16]
 8001568:	4013      	ands	r3, r2
 800156a:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800156c:	683b      	ldr	r3, [r7, #0]
 800156e:	691a      	ldr	r2, [r3, #16]
 8001570:	697b      	ldr	r3, [r7, #20]
 8001572:	f003 0307 	and.w	r3, r3, #7
 8001576:	009b      	lsls	r3, r3, #2
 8001578:	fa02 f303 	lsl.w	r3, r2, r3
 800157c:	693a      	ldr	r2, [r7, #16]
 800157e:	4313      	orrs	r3, r2
 8001580:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001582:	697b      	ldr	r3, [r7, #20]
 8001584:	08da      	lsrs	r2, r3, #3
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	3208      	adds	r2, #8
 800158a:	6939      	ldr	r1, [r7, #16]
 800158c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	681b      	ldr	r3, [r3, #0]
 8001594:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001596:	697b      	ldr	r3, [r7, #20]
 8001598:	005b      	lsls	r3, r3, #1
 800159a:	2203      	movs	r2, #3
 800159c:	fa02 f303 	lsl.w	r3, r2, r3
 80015a0:	43db      	mvns	r3, r3
 80015a2:	693a      	ldr	r2, [r7, #16]
 80015a4:	4013      	ands	r3, r2
 80015a6:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80015a8:	683b      	ldr	r3, [r7, #0]
 80015aa:	685b      	ldr	r3, [r3, #4]
 80015ac:	f003 0203 	and.w	r2, r3, #3
 80015b0:	697b      	ldr	r3, [r7, #20]
 80015b2:	005b      	lsls	r3, r3, #1
 80015b4:	fa02 f303 	lsl.w	r3, r2, r3
 80015b8:	693a      	ldr	r2, [r7, #16]
 80015ba:	4313      	orrs	r3, r2
 80015bc:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	693a      	ldr	r2, [r7, #16]
 80015c2:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80015c4:	683b      	ldr	r3, [r7, #0]
 80015c6:	685b      	ldr	r3, [r3, #4]
 80015c8:	2b01      	cmp	r3, #1
 80015ca:	d00b      	beq.n	80015e4 <HAL_GPIO_Init+0xd4>
 80015cc:	683b      	ldr	r3, [r7, #0]
 80015ce:	685b      	ldr	r3, [r3, #4]
 80015d0:	2b02      	cmp	r3, #2
 80015d2:	d007      	beq.n	80015e4 <HAL_GPIO_Init+0xd4>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80015d4:	683b      	ldr	r3, [r7, #0]
 80015d6:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80015d8:	2b11      	cmp	r3, #17
 80015da:	d003      	beq.n	80015e4 <HAL_GPIO_Init+0xd4>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80015dc:	683b      	ldr	r3, [r7, #0]
 80015de:	685b      	ldr	r3, [r3, #4]
 80015e0:	2b12      	cmp	r3, #18
 80015e2:	d130      	bne.n	8001646 <HAL_GPIO_Init+0x136>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	689b      	ldr	r3, [r3, #8]
 80015e8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80015ea:	697b      	ldr	r3, [r7, #20]
 80015ec:	005b      	lsls	r3, r3, #1
 80015ee:	2203      	movs	r2, #3
 80015f0:	fa02 f303 	lsl.w	r3, r2, r3
 80015f4:	43db      	mvns	r3, r3
 80015f6:	693a      	ldr	r2, [r7, #16]
 80015f8:	4013      	ands	r3, r2
 80015fa:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80015fc:	683b      	ldr	r3, [r7, #0]
 80015fe:	68da      	ldr	r2, [r3, #12]
 8001600:	697b      	ldr	r3, [r7, #20]
 8001602:	005b      	lsls	r3, r3, #1
 8001604:	fa02 f303 	lsl.w	r3, r2, r3
 8001608:	693a      	ldr	r2, [r7, #16]
 800160a:	4313      	orrs	r3, r2
 800160c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	693a      	ldr	r2, [r7, #16]
 8001612:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	685b      	ldr	r3, [r3, #4]
 8001618:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800161a:	2201      	movs	r2, #1
 800161c:	697b      	ldr	r3, [r7, #20]
 800161e:	fa02 f303 	lsl.w	r3, r2, r3
 8001622:	43db      	mvns	r3, r3
 8001624:	693a      	ldr	r2, [r7, #16]
 8001626:	4013      	ands	r3, r2
 8001628:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 800162a:	683b      	ldr	r3, [r7, #0]
 800162c:	685b      	ldr	r3, [r3, #4]
 800162e:	091b      	lsrs	r3, r3, #4
 8001630:	f003 0201 	and.w	r2, r3, #1
 8001634:	697b      	ldr	r3, [r7, #20]
 8001636:	fa02 f303 	lsl.w	r3, r2, r3
 800163a:	693a      	ldr	r2, [r7, #16]
 800163c:	4313      	orrs	r3, r2
 800163e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	693a      	ldr	r2, [r7, #16]
 8001644:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8001646:	683b      	ldr	r3, [r7, #0]
 8001648:	685b      	ldr	r3, [r3, #4]
 800164a:	f003 0303 	and.w	r3, r3, #3
 800164e:	2b03      	cmp	r3, #3
 8001650:	d118      	bne.n	8001684 <HAL_GPIO_Init+0x174>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001656:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8001658:	2201      	movs	r2, #1
 800165a:	697b      	ldr	r3, [r7, #20]
 800165c:	fa02 f303 	lsl.w	r3, r2, r3
 8001660:	43db      	mvns	r3, r3
 8001662:	693a      	ldr	r2, [r7, #16]
 8001664:	4013      	ands	r3, r2
 8001666:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & ANALOG_MODE) >> 3) << position);
 8001668:	683b      	ldr	r3, [r7, #0]
 800166a:	685b      	ldr	r3, [r3, #4]
 800166c:	08db      	lsrs	r3, r3, #3
 800166e:	f003 0201 	and.w	r2, r3, #1
 8001672:	697b      	ldr	r3, [r7, #20]
 8001674:	fa02 f303 	lsl.w	r3, r2, r3
 8001678:	693a      	ldr	r2, [r7, #16]
 800167a:	4313      	orrs	r3, r2
 800167c:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	693a      	ldr	r2, [r7, #16]
 8001682:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	68db      	ldr	r3, [r3, #12]
 8001688:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 800168a:	697b      	ldr	r3, [r7, #20]
 800168c:	005b      	lsls	r3, r3, #1
 800168e:	2203      	movs	r2, #3
 8001690:	fa02 f303 	lsl.w	r3, r2, r3
 8001694:	43db      	mvns	r3, r3
 8001696:	693a      	ldr	r2, [r7, #16]
 8001698:	4013      	ands	r3, r2
 800169a:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 800169c:	683b      	ldr	r3, [r7, #0]
 800169e:	689a      	ldr	r2, [r3, #8]
 80016a0:	697b      	ldr	r3, [r7, #20]
 80016a2:	005b      	lsls	r3, r3, #1
 80016a4:	fa02 f303 	lsl.w	r3, r2, r3
 80016a8:	693a      	ldr	r2, [r7, #16]
 80016aa:	4313      	orrs	r3, r2
 80016ac:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	693a      	ldr	r2, [r7, #16]
 80016b2:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80016b4:	683b      	ldr	r3, [r7, #0]
 80016b6:	685b      	ldr	r3, [r3, #4]
 80016b8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80016bc:	2b00      	cmp	r3, #0
 80016be:	f000 80ac 	beq.w	800181a <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80016c2:	4b5e      	ldr	r3, [pc, #376]	; (800183c <HAL_GPIO_Init+0x32c>)
 80016c4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80016c6:	4a5d      	ldr	r2, [pc, #372]	; (800183c <HAL_GPIO_Init+0x32c>)
 80016c8:	f043 0301 	orr.w	r3, r3, #1
 80016cc:	6613      	str	r3, [r2, #96]	; 0x60
 80016ce:	4b5b      	ldr	r3, [pc, #364]	; (800183c <HAL_GPIO_Init+0x32c>)
 80016d0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80016d2:	f003 0301 	and.w	r3, r3, #1
 80016d6:	60bb      	str	r3, [r7, #8]
 80016d8:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80016da:	4a59      	ldr	r2, [pc, #356]	; (8001840 <HAL_GPIO_Init+0x330>)
 80016dc:	697b      	ldr	r3, [r7, #20]
 80016de:	089b      	lsrs	r3, r3, #2
 80016e0:	3302      	adds	r3, #2
 80016e2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80016e6:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80016e8:	697b      	ldr	r3, [r7, #20]
 80016ea:	f003 0303 	and.w	r3, r3, #3
 80016ee:	009b      	lsls	r3, r3, #2
 80016f0:	220f      	movs	r2, #15
 80016f2:	fa02 f303 	lsl.w	r3, r2, r3
 80016f6:	43db      	mvns	r3, r3
 80016f8:	693a      	ldr	r2, [r7, #16]
 80016fa:	4013      	ands	r3, r2
 80016fc:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001704:	d025      	beq.n	8001752 <HAL_GPIO_Init+0x242>
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	4a4e      	ldr	r2, [pc, #312]	; (8001844 <HAL_GPIO_Init+0x334>)
 800170a:	4293      	cmp	r3, r2
 800170c:	d01f      	beq.n	800174e <HAL_GPIO_Init+0x23e>
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	4a4d      	ldr	r2, [pc, #308]	; (8001848 <HAL_GPIO_Init+0x338>)
 8001712:	4293      	cmp	r3, r2
 8001714:	d019      	beq.n	800174a <HAL_GPIO_Init+0x23a>
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	4a4c      	ldr	r2, [pc, #304]	; (800184c <HAL_GPIO_Init+0x33c>)
 800171a:	4293      	cmp	r3, r2
 800171c:	d013      	beq.n	8001746 <HAL_GPIO_Init+0x236>
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	4a4b      	ldr	r2, [pc, #300]	; (8001850 <HAL_GPIO_Init+0x340>)
 8001722:	4293      	cmp	r3, r2
 8001724:	d00d      	beq.n	8001742 <HAL_GPIO_Init+0x232>
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	4a4a      	ldr	r2, [pc, #296]	; (8001854 <HAL_GPIO_Init+0x344>)
 800172a:	4293      	cmp	r3, r2
 800172c:	d007      	beq.n	800173e <HAL_GPIO_Init+0x22e>
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	4a49      	ldr	r2, [pc, #292]	; (8001858 <HAL_GPIO_Init+0x348>)
 8001732:	4293      	cmp	r3, r2
 8001734:	d101      	bne.n	800173a <HAL_GPIO_Init+0x22a>
 8001736:	2306      	movs	r3, #6
 8001738:	e00c      	b.n	8001754 <HAL_GPIO_Init+0x244>
 800173a:	2307      	movs	r3, #7
 800173c:	e00a      	b.n	8001754 <HAL_GPIO_Init+0x244>
 800173e:	2305      	movs	r3, #5
 8001740:	e008      	b.n	8001754 <HAL_GPIO_Init+0x244>
 8001742:	2304      	movs	r3, #4
 8001744:	e006      	b.n	8001754 <HAL_GPIO_Init+0x244>
 8001746:	2303      	movs	r3, #3
 8001748:	e004      	b.n	8001754 <HAL_GPIO_Init+0x244>
 800174a:	2302      	movs	r3, #2
 800174c:	e002      	b.n	8001754 <HAL_GPIO_Init+0x244>
 800174e:	2301      	movs	r3, #1
 8001750:	e000      	b.n	8001754 <HAL_GPIO_Init+0x244>
 8001752:	2300      	movs	r3, #0
 8001754:	697a      	ldr	r2, [r7, #20]
 8001756:	f002 0203 	and.w	r2, r2, #3
 800175a:	0092      	lsls	r2, r2, #2
 800175c:	4093      	lsls	r3, r2
 800175e:	693a      	ldr	r2, [r7, #16]
 8001760:	4313      	orrs	r3, r2
 8001762:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001764:	4936      	ldr	r1, [pc, #216]	; (8001840 <HAL_GPIO_Init+0x330>)
 8001766:	697b      	ldr	r3, [r7, #20]
 8001768:	089b      	lsrs	r3, r3, #2
 800176a:	3302      	adds	r3, #2
 800176c:	693a      	ldr	r2, [r7, #16]
 800176e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8001772:	4b3a      	ldr	r3, [pc, #232]	; (800185c <HAL_GPIO_Init+0x34c>)
 8001774:	681b      	ldr	r3, [r3, #0]
 8001776:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001778:	68fb      	ldr	r3, [r7, #12]
 800177a:	43db      	mvns	r3, r3
 800177c:	693a      	ldr	r2, [r7, #16]
 800177e:	4013      	ands	r3, r2
 8001780:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001782:	683b      	ldr	r3, [r7, #0]
 8001784:	685b      	ldr	r3, [r3, #4]
 8001786:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800178a:	2b00      	cmp	r3, #0
 800178c:	d003      	beq.n	8001796 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 800178e:	693a      	ldr	r2, [r7, #16]
 8001790:	68fb      	ldr	r3, [r7, #12]
 8001792:	4313      	orrs	r3, r2
 8001794:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001796:	4a31      	ldr	r2, [pc, #196]	; (800185c <HAL_GPIO_Init+0x34c>)
 8001798:	693b      	ldr	r3, [r7, #16]
 800179a:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 800179c:	4b2f      	ldr	r3, [pc, #188]	; (800185c <HAL_GPIO_Init+0x34c>)
 800179e:	685b      	ldr	r3, [r3, #4]
 80017a0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80017a2:	68fb      	ldr	r3, [r7, #12]
 80017a4:	43db      	mvns	r3, r3
 80017a6:	693a      	ldr	r2, [r7, #16]
 80017a8:	4013      	ands	r3, r2
 80017aa:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80017ac:	683b      	ldr	r3, [r7, #0]
 80017ae:	685b      	ldr	r3, [r3, #4]
 80017b0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80017b4:	2b00      	cmp	r3, #0
 80017b6:	d003      	beq.n	80017c0 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 80017b8:	693a      	ldr	r2, [r7, #16]
 80017ba:	68fb      	ldr	r3, [r7, #12]
 80017bc:	4313      	orrs	r3, r2
 80017be:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80017c0:	4a26      	ldr	r2, [pc, #152]	; (800185c <HAL_GPIO_Init+0x34c>)
 80017c2:	693b      	ldr	r3, [r7, #16]
 80017c4:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80017c6:	4b25      	ldr	r3, [pc, #148]	; (800185c <HAL_GPIO_Init+0x34c>)
 80017c8:	689b      	ldr	r3, [r3, #8]
 80017ca:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80017cc:	68fb      	ldr	r3, [r7, #12]
 80017ce:	43db      	mvns	r3, r3
 80017d0:	693a      	ldr	r2, [r7, #16]
 80017d2:	4013      	ands	r3, r2
 80017d4:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80017d6:	683b      	ldr	r3, [r7, #0]
 80017d8:	685b      	ldr	r3, [r3, #4]
 80017da:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80017de:	2b00      	cmp	r3, #0
 80017e0:	d003      	beq.n	80017ea <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 80017e2:	693a      	ldr	r2, [r7, #16]
 80017e4:	68fb      	ldr	r3, [r7, #12]
 80017e6:	4313      	orrs	r3, r2
 80017e8:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80017ea:	4a1c      	ldr	r2, [pc, #112]	; (800185c <HAL_GPIO_Init+0x34c>)
 80017ec:	693b      	ldr	r3, [r7, #16]
 80017ee:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80017f0:	4b1a      	ldr	r3, [pc, #104]	; (800185c <HAL_GPIO_Init+0x34c>)
 80017f2:	68db      	ldr	r3, [r3, #12]
 80017f4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80017f6:	68fb      	ldr	r3, [r7, #12]
 80017f8:	43db      	mvns	r3, r3
 80017fa:	693a      	ldr	r2, [r7, #16]
 80017fc:	4013      	ands	r3, r2
 80017fe:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001800:	683b      	ldr	r3, [r7, #0]
 8001802:	685b      	ldr	r3, [r3, #4]
 8001804:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001808:	2b00      	cmp	r3, #0
 800180a:	d003      	beq.n	8001814 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 800180c:	693a      	ldr	r2, [r7, #16]
 800180e:	68fb      	ldr	r3, [r7, #12]
 8001810:	4313      	orrs	r3, r2
 8001812:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001814:	4a11      	ldr	r2, [pc, #68]	; (800185c <HAL_GPIO_Init+0x34c>)
 8001816:	693b      	ldr	r3, [r7, #16]
 8001818:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 800181a:	697b      	ldr	r3, [r7, #20]
 800181c:	3301      	adds	r3, #1
 800181e:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001820:	683b      	ldr	r3, [r7, #0]
 8001822:	681a      	ldr	r2, [r3, #0]
 8001824:	697b      	ldr	r3, [r7, #20]
 8001826:	fa22 f303 	lsr.w	r3, r2, r3
 800182a:	2b00      	cmp	r3, #0
 800182c:	f47f ae78 	bne.w	8001520 <HAL_GPIO_Init+0x10>
  }
}
 8001830:	bf00      	nop
 8001832:	371c      	adds	r7, #28
 8001834:	46bd      	mov	sp, r7
 8001836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800183a:	4770      	bx	lr
 800183c:	40021000 	.word	0x40021000
 8001840:	40010000 	.word	0x40010000
 8001844:	48000400 	.word	0x48000400
 8001848:	48000800 	.word	0x48000800
 800184c:	48000c00 	.word	0x48000c00
 8001850:	48001000 	.word	0x48001000
 8001854:	48001400 	.word	0x48001400
 8001858:	48001800 	.word	0x48001800
 800185c:	40010400 	.word	0x40010400

08001860 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001860:	b480      	push	{r7}
 8001862:	b083      	sub	sp, #12
 8001864:	af00      	add	r7, sp, #0
 8001866:	6078      	str	r0, [r7, #4]
 8001868:	460b      	mov	r3, r1
 800186a:	807b      	strh	r3, [r7, #2]
 800186c:	4613      	mov	r3, r2
 800186e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001870:	787b      	ldrb	r3, [r7, #1]
 8001872:	2b00      	cmp	r3, #0
 8001874:	d003      	beq.n	800187e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001876:	887a      	ldrh	r2, [r7, #2]
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800187c:	e002      	b.n	8001884 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800187e:	887a      	ldrh	r2, [r7, #2]
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001884:	bf00      	nop
 8001886:	370c      	adds	r7, #12
 8001888:	46bd      	mov	sp, r7
 800188a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800188e:	4770      	bx	lr

08001890 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001890:	b580      	push	{r7, lr}
 8001892:	b082      	sub	sp, #8
 8001894:	af00      	add	r7, sp, #0
 8001896:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	2b00      	cmp	r3, #0
 800189c:	d101      	bne.n	80018a2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800189e:	2301      	movs	r3, #1
 80018a0:	e081      	b.n	80019a6 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80018a8:	b2db      	uxtb	r3, r3
 80018aa:	2b00      	cmp	r3, #0
 80018ac:	d106      	bne.n	80018bc <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	2200      	movs	r2, #0
 80018b2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80018b6:	6878      	ldr	r0, [r7, #4]
 80018b8:	f7ff f868 	bl	800098c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	2224      	movs	r2, #36	; 0x24
 80018c0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	681a      	ldr	r2, [r3, #0]
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	f022 0201 	bic.w	r2, r2, #1
 80018d2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	685a      	ldr	r2, [r3, #4]
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80018e0:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	681b      	ldr	r3, [r3, #0]
 80018e6:	689a      	ldr	r2, [r3, #8]
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80018f0:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	68db      	ldr	r3, [r3, #12]
 80018f6:	2b01      	cmp	r3, #1
 80018f8:	d107      	bne.n	800190a <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	689a      	ldr	r2, [r3, #8]
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	681b      	ldr	r3, [r3, #0]
 8001902:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001906:	609a      	str	r2, [r3, #8]
 8001908:	e006      	b.n	8001918 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	689a      	ldr	r2, [r3, #8]
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	681b      	ldr	r3, [r3, #0]
 8001912:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8001916:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	68db      	ldr	r3, [r3, #12]
 800191c:	2b02      	cmp	r3, #2
 800191e:	d104      	bne.n	800192a <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001928:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	685b      	ldr	r3, [r3, #4]
 8001930:	687a      	ldr	r2, [r7, #4]
 8001932:	6812      	ldr	r2, [r2, #0]
 8001934:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001938:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800193c:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	68da      	ldr	r2, [r3, #12]
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800194c:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	691a      	ldr	r2, [r3, #16]
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	695b      	ldr	r3, [r3, #20]
 8001956:	ea42 0103 	orr.w	r1, r2, r3
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	699b      	ldr	r3, [r3, #24]
 800195e:	021a      	lsls	r2, r3, #8
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	430a      	orrs	r2, r1
 8001966:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	69d9      	ldr	r1, [r3, #28]
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	6a1a      	ldr	r2, [r3, #32]
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	430a      	orrs	r2, r1
 8001976:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	681a      	ldr	r2, [r3, #0]
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	681b      	ldr	r3, [r3, #0]
 8001982:	f042 0201 	orr.w	r2, r2, #1
 8001986:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	2200      	movs	r2, #0
 800198c:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	2220      	movs	r2, #32
 8001992:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	2200      	movs	r2, #0
 800199a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	2200      	movs	r2, #0
 80019a0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 80019a4:	2300      	movs	r3, #0
}
 80019a6:	4618      	mov	r0, r3
 80019a8:	3708      	adds	r7, #8
 80019aa:	46bd      	mov	sp, r7
 80019ac:	bd80      	pop	{r7, pc}

080019ae <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80019ae:	b480      	push	{r7}
 80019b0:	b083      	sub	sp, #12
 80019b2:	af00      	add	r7, sp, #0
 80019b4:	6078      	str	r0, [r7, #4]
 80019b6:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80019be:	b2db      	uxtb	r3, r3
 80019c0:	2b20      	cmp	r3, #32
 80019c2:	d138      	bne.n	8001a36 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80019ca:	2b01      	cmp	r3, #1
 80019cc:	d101      	bne.n	80019d2 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80019ce:	2302      	movs	r3, #2
 80019d0:	e032      	b.n	8001a38 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	2201      	movs	r2, #1
 80019d6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	2224      	movs	r2, #36	; 0x24
 80019de:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	681a      	ldr	r2, [r3, #0]
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	f022 0201 	bic.w	r2, r2, #1
 80019f0:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	681a      	ldr	r2, [r3, #0]
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8001a00:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	6819      	ldr	r1, [r3, #0]
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	683a      	ldr	r2, [r7, #0]
 8001a0e:	430a      	orrs	r2, r1
 8001a10:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	681a      	ldr	r2, [r3, #0]
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	f042 0201 	orr.w	r2, r2, #1
 8001a20:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	2220      	movs	r2, #32
 8001a26:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	2200      	movs	r2, #0
 8001a2e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8001a32:	2300      	movs	r3, #0
 8001a34:	e000      	b.n	8001a38 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8001a36:	2302      	movs	r3, #2
  }
}
 8001a38:	4618      	mov	r0, r3
 8001a3a:	370c      	adds	r7, #12
 8001a3c:	46bd      	mov	sp, r7
 8001a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a42:	4770      	bx	lr

08001a44 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8001a44:	b480      	push	{r7}
 8001a46:	b085      	sub	sp, #20
 8001a48:	af00      	add	r7, sp, #0
 8001a4a:	6078      	str	r0, [r7, #4]
 8001a4c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001a54:	b2db      	uxtb	r3, r3
 8001a56:	2b20      	cmp	r3, #32
 8001a58:	d139      	bne.n	8001ace <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001a60:	2b01      	cmp	r3, #1
 8001a62:	d101      	bne.n	8001a68 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8001a64:	2302      	movs	r3, #2
 8001a66:	e033      	b.n	8001ad0 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	2201      	movs	r2, #1
 8001a6c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	2224      	movs	r2, #36	; 0x24
 8001a74:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	681a      	ldr	r2, [r3, #0]
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	f022 0201 	bic.w	r2, r2, #1
 8001a86:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8001a90:	68fb      	ldr	r3, [r7, #12]
 8001a92:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8001a96:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8001a98:	683b      	ldr	r3, [r7, #0]
 8001a9a:	021b      	lsls	r3, r3, #8
 8001a9c:	68fa      	ldr	r2, [r7, #12]
 8001a9e:	4313      	orrs	r3, r2
 8001aa0:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	68fa      	ldr	r2, [r7, #12]
 8001aa8:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	681a      	ldr	r2, [r3, #0]
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	f042 0201 	orr.w	r2, r2, #1
 8001ab8:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	2220      	movs	r2, #32
 8001abe:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	2200      	movs	r2, #0
 8001ac6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8001aca:	2300      	movs	r3, #0
 8001acc:	e000      	b.n	8001ad0 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8001ace:	2302      	movs	r3, #2
  }
}
 8001ad0:	4618      	mov	r0, r3
 8001ad2:	3714      	adds	r7, #20
 8001ad4:	46bd      	mov	sp, r7
 8001ad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ada:	4770      	bx	lr

08001adc <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_RANGE1 or PWR_REGULATOR_VOLTAGE_RANGE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8001adc:	b480      	push	{r7}
 8001ade:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8001ae0:	4b04      	ldr	r3, [pc, #16]	; (8001af4 <HAL_PWREx_GetVoltageRange+0x18>)
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8001ae8:	4618      	mov	r0, r3
 8001aea:	46bd      	mov	sp, r7
 8001aec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001af0:	4770      	bx	lr
 8001af2:	bf00      	nop
 8001af4:	40007000 	.word	0x40007000

08001af8 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001af8:	b480      	push	{r7}
 8001afa:	b085      	sub	sp, #20
 8001afc:	af00      	add	r7, sp, #0
 8001afe:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001b06:	d130      	bne.n	8001b6a <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8001b08:	4b23      	ldr	r3, [pc, #140]	; (8001b98 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001b10:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001b14:	d038      	beq.n	8001b88 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001b16:	4b20      	ldr	r3, [pc, #128]	; (8001b98 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001b1e:	4a1e      	ldr	r2, [pc, #120]	; (8001b98 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001b20:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001b24:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001b26:	4b1d      	ldr	r3, [pc, #116]	; (8001b9c <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	2232      	movs	r2, #50	; 0x32
 8001b2c:	fb02 f303 	mul.w	r3, r2, r3
 8001b30:	4a1b      	ldr	r2, [pc, #108]	; (8001ba0 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8001b32:	fba2 2303 	umull	r2, r3, r2, r3
 8001b36:	0c9b      	lsrs	r3, r3, #18
 8001b38:	3301      	adds	r3, #1
 8001b3a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001b3c:	e002      	b.n	8001b44 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8001b3e:	68fb      	ldr	r3, [r7, #12]
 8001b40:	3b01      	subs	r3, #1
 8001b42:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001b44:	4b14      	ldr	r3, [pc, #80]	; (8001b98 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001b46:	695b      	ldr	r3, [r3, #20]
 8001b48:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001b4c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001b50:	d102      	bne.n	8001b58 <HAL_PWREx_ControlVoltageScaling+0x60>
 8001b52:	68fb      	ldr	r3, [r7, #12]
 8001b54:	2b00      	cmp	r3, #0
 8001b56:	d1f2      	bne.n	8001b3e <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001b58:	4b0f      	ldr	r3, [pc, #60]	; (8001b98 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001b5a:	695b      	ldr	r3, [r3, #20]
 8001b5c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001b60:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001b64:	d110      	bne.n	8001b88 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8001b66:	2303      	movs	r3, #3
 8001b68:	e00f      	b.n	8001b8a <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8001b6a:	4b0b      	ldr	r3, [pc, #44]	; (8001b98 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001b72:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001b76:	d007      	beq.n	8001b88 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001b78:	4b07      	ldr	r3, [pc, #28]	; (8001b98 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001b80:	4a05      	ldr	r2, [pc, #20]	; (8001b98 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001b82:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001b86:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8001b88:	2300      	movs	r3, #0
}
 8001b8a:	4618      	mov	r0, r3
 8001b8c:	3714      	adds	r7, #20
 8001b8e:	46bd      	mov	sp, r7
 8001b90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b94:	4770      	bx	lr
 8001b96:	bf00      	nop
 8001b98:	40007000 	.word	0x40007000
 8001b9c:	20000000 	.word	0x20000000
 8001ba0:	431bde83 	.word	0x431bde83

08001ba4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001ba4:	b580      	push	{r7, lr}
 8001ba6:	b088      	sub	sp, #32
 8001ba8:	af00      	add	r7, sp, #0
 8001baa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	2b00      	cmp	r3, #0
 8001bb0:	d101      	bne.n	8001bb6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001bb2:	2301      	movs	r3, #1
 8001bb4:	e39d      	b.n	80022f2 <HAL_RCC_OscConfig+0x74e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001bb6:	4ba4      	ldr	r3, [pc, #656]	; (8001e48 <HAL_RCC_OscConfig+0x2a4>)
 8001bb8:	689b      	ldr	r3, [r3, #8]
 8001bba:	f003 030c 	and.w	r3, r3, #12
 8001bbe:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001bc0:	4ba1      	ldr	r3, [pc, #644]	; (8001e48 <HAL_RCC_OscConfig+0x2a4>)
 8001bc2:	68db      	ldr	r3, [r3, #12]
 8001bc4:	f003 0303 	and.w	r3, r3, #3
 8001bc8:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	f003 0310 	and.w	r3, r3, #16
 8001bd2:	2b00      	cmp	r3, #0
 8001bd4:	f000 80e1 	beq.w	8001d9a <HAL_RCC_OscConfig+0x1f6>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001bd8:	69bb      	ldr	r3, [r7, #24]
 8001bda:	2b00      	cmp	r3, #0
 8001bdc:	d007      	beq.n	8001bee <HAL_RCC_OscConfig+0x4a>
 8001bde:	69bb      	ldr	r3, [r7, #24]
 8001be0:	2b0c      	cmp	r3, #12
 8001be2:	f040 8088 	bne.w	8001cf6 <HAL_RCC_OscConfig+0x152>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8001be6:	697b      	ldr	r3, [r7, #20]
 8001be8:	2b01      	cmp	r3, #1
 8001bea:	f040 8084 	bne.w	8001cf6 <HAL_RCC_OscConfig+0x152>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001bee:	4b96      	ldr	r3, [pc, #600]	; (8001e48 <HAL_RCC_OscConfig+0x2a4>)
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	f003 0302 	and.w	r3, r3, #2
 8001bf6:	2b00      	cmp	r3, #0
 8001bf8:	d005      	beq.n	8001c06 <HAL_RCC_OscConfig+0x62>
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	699b      	ldr	r3, [r3, #24]
 8001bfe:	2b00      	cmp	r3, #0
 8001c00:	d101      	bne.n	8001c06 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8001c02:	2301      	movs	r3, #1
 8001c04:	e375      	b.n	80022f2 <HAL_RCC_OscConfig+0x74e>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	6a1a      	ldr	r2, [r3, #32]
 8001c0a:	4b8f      	ldr	r3, [pc, #572]	; (8001e48 <HAL_RCC_OscConfig+0x2a4>)
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	f003 0308 	and.w	r3, r3, #8
 8001c12:	2b00      	cmp	r3, #0
 8001c14:	d004      	beq.n	8001c20 <HAL_RCC_OscConfig+0x7c>
 8001c16:	4b8c      	ldr	r3, [pc, #560]	; (8001e48 <HAL_RCC_OscConfig+0x2a4>)
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001c1e:	e005      	b.n	8001c2c <HAL_RCC_OscConfig+0x88>
 8001c20:	4b89      	ldr	r3, [pc, #548]	; (8001e48 <HAL_RCC_OscConfig+0x2a4>)
 8001c22:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001c26:	091b      	lsrs	r3, r3, #4
 8001c28:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001c2c:	4293      	cmp	r3, r2
 8001c2e:	d223      	bcs.n	8001c78 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	6a1b      	ldr	r3, [r3, #32]
 8001c34:	4618      	mov	r0, r3
 8001c36:	f000 fd09 	bl	800264c <RCC_SetFlashLatencyFromMSIRange>
 8001c3a:	4603      	mov	r3, r0
 8001c3c:	2b00      	cmp	r3, #0
 8001c3e:	d001      	beq.n	8001c44 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8001c40:	2301      	movs	r3, #1
 8001c42:	e356      	b.n	80022f2 <HAL_RCC_OscConfig+0x74e>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001c44:	4b80      	ldr	r3, [pc, #512]	; (8001e48 <HAL_RCC_OscConfig+0x2a4>)
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	4a7f      	ldr	r2, [pc, #508]	; (8001e48 <HAL_RCC_OscConfig+0x2a4>)
 8001c4a:	f043 0308 	orr.w	r3, r3, #8
 8001c4e:	6013      	str	r3, [r2, #0]
 8001c50:	4b7d      	ldr	r3, [pc, #500]	; (8001e48 <HAL_RCC_OscConfig+0x2a4>)
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	6a1b      	ldr	r3, [r3, #32]
 8001c5c:	497a      	ldr	r1, [pc, #488]	; (8001e48 <HAL_RCC_OscConfig+0x2a4>)
 8001c5e:	4313      	orrs	r3, r2
 8001c60:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001c62:	4b79      	ldr	r3, [pc, #484]	; (8001e48 <HAL_RCC_OscConfig+0x2a4>)
 8001c64:	685b      	ldr	r3, [r3, #4]
 8001c66:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	69db      	ldr	r3, [r3, #28]
 8001c6e:	021b      	lsls	r3, r3, #8
 8001c70:	4975      	ldr	r1, [pc, #468]	; (8001e48 <HAL_RCC_OscConfig+0x2a4>)
 8001c72:	4313      	orrs	r3, r2
 8001c74:	604b      	str	r3, [r1, #4]
 8001c76:	e022      	b.n	8001cbe <HAL_RCC_OscConfig+0x11a>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001c78:	4b73      	ldr	r3, [pc, #460]	; (8001e48 <HAL_RCC_OscConfig+0x2a4>)
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	4a72      	ldr	r2, [pc, #456]	; (8001e48 <HAL_RCC_OscConfig+0x2a4>)
 8001c7e:	f043 0308 	orr.w	r3, r3, #8
 8001c82:	6013      	str	r3, [r2, #0]
 8001c84:	4b70      	ldr	r3, [pc, #448]	; (8001e48 <HAL_RCC_OscConfig+0x2a4>)
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	6a1b      	ldr	r3, [r3, #32]
 8001c90:	496d      	ldr	r1, [pc, #436]	; (8001e48 <HAL_RCC_OscConfig+0x2a4>)
 8001c92:	4313      	orrs	r3, r2
 8001c94:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001c96:	4b6c      	ldr	r3, [pc, #432]	; (8001e48 <HAL_RCC_OscConfig+0x2a4>)
 8001c98:	685b      	ldr	r3, [r3, #4]
 8001c9a:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	69db      	ldr	r3, [r3, #28]
 8001ca2:	021b      	lsls	r3, r3, #8
 8001ca4:	4968      	ldr	r1, [pc, #416]	; (8001e48 <HAL_RCC_OscConfig+0x2a4>)
 8001ca6:	4313      	orrs	r3, r2
 8001ca8:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	6a1b      	ldr	r3, [r3, #32]
 8001cae:	4618      	mov	r0, r3
 8001cb0:	f000 fccc 	bl	800264c <RCC_SetFlashLatencyFromMSIRange>
 8001cb4:	4603      	mov	r3, r0
 8001cb6:	2b00      	cmp	r3, #0
 8001cb8:	d001      	beq.n	8001cbe <HAL_RCC_OscConfig+0x11a>
          {
            return HAL_ERROR;
 8001cba:	2301      	movs	r3, #1
 8001cbc:	e319      	b.n	80022f2 <HAL_RCC_OscConfig+0x74e>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001cbe:	f000 fc03 	bl	80024c8 <HAL_RCC_GetSysClockFreq>
 8001cc2:	4601      	mov	r1, r0
 8001cc4:	4b60      	ldr	r3, [pc, #384]	; (8001e48 <HAL_RCC_OscConfig+0x2a4>)
 8001cc6:	689b      	ldr	r3, [r3, #8]
 8001cc8:	091b      	lsrs	r3, r3, #4
 8001cca:	f003 030f 	and.w	r3, r3, #15
 8001cce:	4a5f      	ldr	r2, [pc, #380]	; (8001e4c <HAL_RCC_OscConfig+0x2a8>)
 8001cd0:	5cd3      	ldrb	r3, [r2, r3]
 8001cd2:	f003 031f 	and.w	r3, r3, #31
 8001cd6:	fa21 f303 	lsr.w	r3, r1, r3
 8001cda:	4a5d      	ldr	r2, [pc, #372]	; (8001e50 <HAL_RCC_OscConfig+0x2ac>)
 8001cdc:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8001cde:	4b5d      	ldr	r3, [pc, #372]	; (8001e54 <HAL_RCC_OscConfig+0x2b0>)
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	4618      	mov	r0, r3
 8001ce4:	f7ff fab4 	bl	8001250 <HAL_InitTick>
 8001ce8:	4603      	mov	r3, r0
 8001cea:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8001cec:	7bfb      	ldrb	r3, [r7, #15]
 8001cee:	2b00      	cmp	r3, #0
 8001cf0:	d052      	beq.n	8001d98 <HAL_RCC_OscConfig+0x1f4>
        {
          return status;
 8001cf2:	7bfb      	ldrb	r3, [r7, #15]
 8001cf4:	e2fd      	b.n	80022f2 <HAL_RCC_OscConfig+0x74e>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	699b      	ldr	r3, [r3, #24]
 8001cfa:	2b00      	cmp	r3, #0
 8001cfc:	d032      	beq.n	8001d64 <HAL_RCC_OscConfig+0x1c0>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001cfe:	4b52      	ldr	r3, [pc, #328]	; (8001e48 <HAL_RCC_OscConfig+0x2a4>)
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	4a51      	ldr	r2, [pc, #324]	; (8001e48 <HAL_RCC_OscConfig+0x2a4>)
 8001d04:	f043 0301 	orr.w	r3, r3, #1
 8001d08:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001d0a:	f7ff faed 	bl	80012e8 <HAL_GetTick>
 8001d0e:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001d10:	e008      	b.n	8001d24 <HAL_RCC_OscConfig+0x180>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001d12:	f7ff fae9 	bl	80012e8 <HAL_GetTick>
 8001d16:	4602      	mov	r2, r0
 8001d18:	693b      	ldr	r3, [r7, #16]
 8001d1a:	1ad3      	subs	r3, r2, r3
 8001d1c:	2b02      	cmp	r3, #2
 8001d1e:	d901      	bls.n	8001d24 <HAL_RCC_OscConfig+0x180>
          {
            return HAL_TIMEOUT;
 8001d20:	2303      	movs	r3, #3
 8001d22:	e2e6      	b.n	80022f2 <HAL_RCC_OscConfig+0x74e>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001d24:	4b48      	ldr	r3, [pc, #288]	; (8001e48 <HAL_RCC_OscConfig+0x2a4>)
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	f003 0302 	and.w	r3, r3, #2
 8001d2c:	2b00      	cmp	r3, #0
 8001d2e:	d0f0      	beq.n	8001d12 <HAL_RCC_OscConfig+0x16e>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001d30:	4b45      	ldr	r3, [pc, #276]	; (8001e48 <HAL_RCC_OscConfig+0x2a4>)
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	4a44      	ldr	r2, [pc, #272]	; (8001e48 <HAL_RCC_OscConfig+0x2a4>)
 8001d36:	f043 0308 	orr.w	r3, r3, #8
 8001d3a:	6013      	str	r3, [r2, #0]
 8001d3c:	4b42      	ldr	r3, [pc, #264]	; (8001e48 <HAL_RCC_OscConfig+0x2a4>)
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	6a1b      	ldr	r3, [r3, #32]
 8001d48:	493f      	ldr	r1, [pc, #252]	; (8001e48 <HAL_RCC_OscConfig+0x2a4>)
 8001d4a:	4313      	orrs	r3, r2
 8001d4c:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001d4e:	4b3e      	ldr	r3, [pc, #248]	; (8001e48 <HAL_RCC_OscConfig+0x2a4>)
 8001d50:	685b      	ldr	r3, [r3, #4]
 8001d52:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	69db      	ldr	r3, [r3, #28]
 8001d5a:	021b      	lsls	r3, r3, #8
 8001d5c:	493a      	ldr	r1, [pc, #232]	; (8001e48 <HAL_RCC_OscConfig+0x2a4>)
 8001d5e:	4313      	orrs	r3, r2
 8001d60:	604b      	str	r3, [r1, #4]
 8001d62:	e01a      	b.n	8001d9a <HAL_RCC_OscConfig+0x1f6>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001d64:	4b38      	ldr	r3, [pc, #224]	; (8001e48 <HAL_RCC_OscConfig+0x2a4>)
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	4a37      	ldr	r2, [pc, #220]	; (8001e48 <HAL_RCC_OscConfig+0x2a4>)
 8001d6a:	f023 0301 	bic.w	r3, r3, #1
 8001d6e:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001d70:	f7ff faba 	bl	80012e8 <HAL_GetTick>
 8001d74:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001d76:	e008      	b.n	8001d8a <HAL_RCC_OscConfig+0x1e6>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001d78:	f7ff fab6 	bl	80012e8 <HAL_GetTick>
 8001d7c:	4602      	mov	r2, r0
 8001d7e:	693b      	ldr	r3, [r7, #16]
 8001d80:	1ad3      	subs	r3, r2, r3
 8001d82:	2b02      	cmp	r3, #2
 8001d84:	d901      	bls.n	8001d8a <HAL_RCC_OscConfig+0x1e6>
          {
            return HAL_TIMEOUT;
 8001d86:	2303      	movs	r3, #3
 8001d88:	e2b3      	b.n	80022f2 <HAL_RCC_OscConfig+0x74e>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001d8a:	4b2f      	ldr	r3, [pc, #188]	; (8001e48 <HAL_RCC_OscConfig+0x2a4>)
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	f003 0302 	and.w	r3, r3, #2
 8001d92:	2b00      	cmp	r3, #0
 8001d94:	d1f0      	bne.n	8001d78 <HAL_RCC_OscConfig+0x1d4>
 8001d96:	e000      	b.n	8001d9a <HAL_RCC_OscConfig+0x1f6>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001d98:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	f003 0301 	and.w	r3, r3, #1
 8001da2:	2b00      	cmp	r3, #0
 8001da4:	d074      	beq.n	8001e90 <HAL_RCC_OscConfig+0x2ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8001da6:	69bb      	ldr	r3, [r7, #24]
 8001da8:	2b08      	cmp	r3, #8
 8001daa:	d005      	beq.n	8001db8 <HAL_RCC_OscConfig+0x214>
 8001dac:	69bb      	ldr	r3, [r7, #24]
 8001dae:	2b0c      	cmp	r3, #12
 8001db0:	d10e      	bne.n	8001dd0 <HAL_RCC_OscConfig+0x22c>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001db2:	697b      	ldr	r3, [r7, #20]
 8001db4:	2b03      	cmp	r3, #3
 8001db6:	d10b      	bne.n	8001dd0 <HAL_RCC_OscConfig+0x22c>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001db8:	4b23      	ldr	r3, [pc, #140]	; (8001e48 <HAL_RCC_OscConfig+0x2a4>)
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001dc0:	2b00      	cmp	r3, #0
 8001dc2:	d064      	beq.n	8001e8e <HAL_RCC_OscConfig+0x2ea>
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	685b      	ldr	r3, [r3, #4]
 8001dc8:	2b00      	cmp	r3, #0
 8001dca:	d160      	bne.n	8001e8e <HAL_RCC_OscConfig+0x2ea>
      {
        return HAL_ERROR;
 8001dcc:	2301      	movs	r3, #1
 8001dce:	e290      	b.n	80022f2 <HAL_RCC_OscConfig+0x74e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	685b      	ldr	r3, [r3, #4]
 8001dd4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001dd8:	d106      	bne.n	8001de8 <HAL_RCC_OscConfig+0x244>
 8001dda:	4b1b      	ldr	r3, [pc, #108]	; (8001e48 <HAL_RCC_OscConfig+0x2a4>)
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	4a1a      	ldr	r2, [pc, #104]	; (8001e48 <HAL_RCC_OscConfig+0x2a4>)
 8001de0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001de4:	6013      	str	r3, [r2, #0]
 8001de6:	e01d      	b.n	8001e24 <HAL_RCC_OscConfig+0x280>
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	685b      	ldr	r3, [r3, #4]
 8001dec:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001df0:	d10c      	bne.n	8001e0c <HAL_RCC_OscConfig+0x268>
 8001df2:	4b15      	ldr	r3, [pc, #84]	; (8001e48 <HAL_RCC_OscConfig+0x2a4>)
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	4a14      	ldr	r2, [pc, #80]	; (8001e48 <HAL_RCC_OscConfig+0x2a4>)
 8001df8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001dfc:	6013      	str	r3, [r2, #0]
 8001dfe:	4b12      	ldr	r3, [pc, #72]	; (8001e48 <HAL_RCC_OscConfig+0x2a4>)
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	4a11      	ldr	r2, [pc, #68]	; (8001e48 <HAL_RCC_OscConfig+0x2a4>)
 8001e04:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001e08:	6013      	str	r3, [r2, #0]
 8001e0a:	e00b      	b.n	8001e24 <HAL_RCC_OscConfig+0x280>
 8001e0c:	4b0e      	ldr	r3, [pc, #56]	; (8001e48 <HAL_RCC_OscConfig+0x2a4>)
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	4a0d      	ldr	r2, [pc, #52]	; (8001e48 <HAL_RCC_OscConfig+0x2a4>)
 8001e12:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001e16:	6013      	str	r3, [r2, #0]
 8001e18:	4b0b      	ldr	r3, [pc, #44]	; (8001e48 <HAL_RCC_OscConfig+0x2a4>)
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	4a0a      	ldr	r2, [pc, #40]	; (8001e48 <HAL_RCC_OscConfig+0x2a4>)
 8001e1e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001e22:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	685b      	ldr	r3, [r3, #4]
 8001e28:	2b00      	cmp	r3, #0
 8001e2a:	d01c      	beq.n	8001e66 <HAL_RCC_OscConfig+0x2c2>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e2c:	f7ff fa5c 	bl	80012e8 <HAL_GetTick>
 8001e30:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001e32:	e011      	b.n	8001e58 <HAL_RCC_OscConfig+0x2b4>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001e34:	f7ff fa58 	bl	80012e8 <HAL_GetTick>
 8001e38:	4602      	mov	r2, r0
 8001e3a:	693b      	ldr	r3, [r7, #16]
 8001e3c:	1ad3      	subs	r3, r2, r3
 8001e3e:	2b64      	cmp	r3, #100	; 0x64
 8001e40:	d90a      	bls.n	8001e58 <HAL_RCC_OscConfig+0x2b4>
          {
            return HAL_TIMEOUT;
 8001e42:	2303      	movs	r3, #3
 8001e44:	e255      	b.n	80022f2 <HAL_RCC_OscConfig+0x74e>
 8001e46:	bf00      	nop
 8001e48:	40021000 	.word	0x40021000
 8001e4c:	08004ea4 	.word	0x08004ea4
 8001e50:	20000000 	.word	0x20000000
 8001e54:	20000004 	.word	0x20000004
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001e58:	4bae      	ldr	r3, [pc, #696]	; (8002114 <HAL_RCC_OscConfig+0x570>)
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e60:	2b00      	cmp	r3, #0
 8001e62:	d0e7      	beq.n	8001e34 <HAL_RCC_OscConfig+0x290>
 8001e64:	e014      	b.n	8001e90 <HAL_RCC_OscConfig+0x2ec>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e66:	f7ff fa3f 	bl	80012e8 <HAL_GetTick>
 8001e6a:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001e6c:	e008      	b.n	8001e80 <HAL_RCC_OscConfig+0x2dc>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001e6e:	f7ff fa3b 	bl	80012e8 <HAL_GetTick>
 8001e72:	4602      	mov	r2, r0
 8001e74:	693b      	ldr	r3, [r7, #16]
 8001e76:	1ad3      	subs	r3, r2, r3
 8001e78:	2b64      	cmp	r3, #100	; 0x64
 8001e7a:	d901      	bls.n	8001e80 <HAL_RCC_OscConfig+0x2dc>
          {
            return HAL_TIMEOUT;
 8001e7c:	2303      	movs	r3, #3
 8001e7e:	e238      	b.n	80022f2 <HAL_RCC_OscConfig+0x74e>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001e80:	4ba4      	ldr	r3, [pc, #656]	; (8002114 <HAL_RCC_OscConfig+0x570>)
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e88:	2b00      	cmp	r3, #0
 8001e8a:	d1f0      	bne.n	8001e6e <HAL_RCC_OscConfig+0x2ca>
 8001e8c:	e000      	b.n	8001e90 <HAL_RCC_OscConfig+0x2ec>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001e8e:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	f003 0302 	and.w	r3, r3, #2
 8001e98:	2b00      	cmp	r3, #0
 8001e9a:	d060      	beq.n	8001f5e <HAL_RCC_OscConfig+0x3ba>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8001e9c:	69bb      	ldr	r3, [r7, #24]
 8001e9e:	2b04      	cmp	r3, #4
 8001ea0:	d005      	beq.n	8001eae <HAL_RCC_OscConfig+0x30a>
 8001ea2:	69bb      	ldr	r3, [r7, #24]
 8001ea4:	2b0c      	cmp	r3, #12
 8001ea6:	d119      	bne.n	8001edc <HAL_RCC_OscConfig+0x338>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001ea8:	697b      	ldr	r3, [r7, #20]
 8001eaa:	2b02      	cmp	r3, #2
 8001eac:	d116      	bne.n	8001edc <HAL_RCC_OscConfig+0x338>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001eae:	4b99      	ldr	r3, [pc, #612]	; (8002114 <HAL_RCC_OscConfig+0x570>)
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001eb6:	2b00      	cmp	r3, #0
 8001eb8:	d005      	beq.n	8001ec6 <HAL_RCC_OscConfig+0x322>
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	68db      	ldr	r3, [r3, #12]
 8001ebe:	2b00      	cmp	r3, #0
 8001ec0:	d101      	bne.n	8001ec6 <HAL_RCC_OscConfig+0x322>
      {
        return HAL_ERROR;
 8001ec2:	2301      	movs	r3, #1
 8001ec4:	e215      	b.n	80022f2 <HAL_RCC_OscConfig+0x74e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001ec6:	4b93      	ldr	r3, [pc, #588]	; (8002114 <HAL_RCC_OscConfig+0x570>)
 8001ec8:	685b      	ldr	r3, [r3, #4]
 8001eca:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	691b      	ldr	r3, [r3, #16]
 8001ed2:	061b      	lsls	r3, r3, #24
 8001ed4:	498f      	ldr	r1, [pc, #572]	; (8002114 <HAL_RCC_OscConfig+0x570>)
 8001ed6:	4313      	orrs	r3, r2
 8001ed8:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001eda:	e040      	b.n	8001f5e <HAL_RCC_OscConfig+0x3ba>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	68db      	ldr	r3, [r3, #12]
 8001ee0:	2b00      	cmp	r3, #0
 8001ee2:	d023      	beq.n	8001f2c <HAL_RCC_OscConfig+0x388>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001ee4:	4b8b      	ldr	r3, [pc, #556]	; (8002114 <HAL_RCC_OscConfig+0x570>)
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	4a8a      	ldr	r2, [pc, #552]	; (8002114 <HAL_RCC_OscConfig+0x570>)
 8001eea:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001eee:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ef0:	f7ff f9fa 	bl	80012e8 <HAL_GetTick>
 8001ef4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001ef6:	e008      	b.n	8001f0a <HAL_RCC_OscConfig+0x366>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001ef8:	f7ff f9f6 	bl	80012e8 <HAL_GetTick>
 8001efc:	4602      	mov	r2, r0
 8001efe:	693b      	ldr	r3, [r7, #16]
 8001f00:	1ad3      	subs	r3, r2, r3
 8001f02:	2b02      	cmp	r3, #2
 8001f04:	d901      	bls.n	8001f0a <HAL_RCC_OscConfig+0x366>
          {
            return HAL_TIMEOUT;
 8001f06:	2303      	movs	r3, #3
 8001f08:	e1f3      	b.n	80022f2 <HAL_RCC_OscConfig+0x74e>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001f0a:	4b82      	ldr	r3, [pc, #520]	; (8002114 <HAL_RCC_OscConfig+0x570>)
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001f12:	2b00      	cmp	r3, #0
 8001f14:	d0f0      	beq.n	8001ef8 <HAL_RCC_OscConfig+0x354>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001f16:	4b7f      	ldr	r3, [pc, #508]	; (8002114 <HAL_RCC_OscConfig+0x570>)
 8001f18:	685b      	ldr	r3, [r3, #4]
 8001f1a:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	691b      	ldr	r3, [r3, #16]
 8001f22:	061b      	lsls	r3, r3, #24
 8001f24:	497b      	ldr	r1, [pc, #492]	; (8002114 <HAL_RCC_OscConfig+0x570>)
 8001f26:	4313      	orrs	r3, r2
 8001f28:	604b      	str	r3, [r1, #4]
 8001f2a:	e018      	b.n	8001f5e <HAL_RCC_OscConfig+0x3ba>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001f2c:	4b79      	ldr	r3, [pc, #484]	; (8002114 <HAL_RCC_OscConfig+0x570>)
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	4a78      	ldr	r2, [pc, #480]	; (8002114 <HAL_RCC_OscConfig+0x570>)
 8001f32:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001f36:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f38:	f7ff f9d6 	bl	80012e8 <HAL_GetTick>
 8001f3c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001f3e:	e008      	b.n	8001f52 <HAL_RCC_OscConfig+0x3ae>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001f40:	f7ff f9d2 	bl	80012e8 <HAL_GetTick>
 8001f44:	4602      	mov	r2, r0
 8001f46:	693b      	ldr	r3, [r7, #16]
 8001f48:	1ad3      	subs	r3, r2, r3
 8001f4a:	2b02      	cmp	r3, #2
 8001f4c:	d901      	bls.n	8001f52 <HAL_RCC_OscConfig+0x3ae>
          {
            return HAL_TIMEOUT;
 8001f4e:	2303      	movs	r3, #3
 8001f50:	e1cf      	b.n	80022f2 <HAL_RCC_OscConfig+0x74e>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001f52:	4b70      	ldr	r3, [pc, #448]	; (8002114 <HAL_RCC_OscConfig+0x570>)
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001f5a:	2b00      	cmp	r3, #0
 8001f5c:	d1f0      	bne.n	8001f40 <HAL_RCC_OscConfig+0x39c>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	f003 0308 	and.w	r3, r3, #8
 8001f66:	2b00      	cmp	r3, #0
 8001f68:	d03c      	beq.n	8001fe4 <HAL_RCC_OscConfig+0x440>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	695b      	ldr	r3, [r3, #20]
 8001f6e:	2b00      	cmp	r3, #0
 8001f70:	d01c      	beq.n	8001fac <HAL_RCC_OscConfig+0x408>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001f72:	4b68      	ldr	r3, [pc, #416]	; (8002114 <HAL_RCC_OscConfig+0x570>)
 8001f74:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001f78:	4a66      	ldr	r2, [pc, #408]	; (8002114 <HAL_RCC_OscConfig+0x570>)
 8001f7a:	f043 0301 	orr.w	r3, r3, #1
 8001f7e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001f82:	f7ff f9b1 	bl	80012e8 <HAL_GetTick>
 8001f86:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001f88:	e008      	b.n	8001f9c <HAL_RCC_OscConfig+0x3f8>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001f8a:	f7ff f9ad 	bl	80012e8 <HAL_GetTick>
 8001f8e:	4602      	mov	r2, r0
 8001f90:	693b      	ldr	r3, [r7, #16]
 8001f92:	1ad3      	subs	r3, r2, r3
 8001f94:	2b02      	cmp	r3, #2
 8001f96:	d901      	bls.n	8001f9c <HAL_RCC_OscConfig+0x3f8>
        {
          return HAL_TIMEOUT;
 8001f98:	2303      	movs	r3, #3
 8001f9a:	e1aa      	b.n	80022f2 <HAL_RCC_OscConfig+0x74e>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001f9c:	4b5d      	ldr	r3, [pc, #372]	; (8002114 <HAL_RCC_OscConfig+0x570>)
 8001f9e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001fa2:	f003 0302 	and.w	r3, r3, #2
 8001fa6:	2b00      	cmp	r3, #0
 8001fa8:	d0ef      	beq.n	8001f8a <HAL_RCC_OscConfig+0x3e6>
 8001faa:	e01b      	b.n	8001fe4 <HAL_RCC_OscConfig+0x440>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001fac:	4b59      	ldr	r3, [pc, #356]	; (8002114 <HAL_RCC_OscConfig+0x570>)
 8001fae:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001fb2:	4a58      	ldr	r2, [pc, #352]	; (8002114 <HAL_RCC_OscConfig+0x570>)
 8001fb4:	f023 0301 	bic.w	r3, r3, #1
 8001fb8:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001fbc:	f7ff f994 	bl	80012e8 <HAL_GetTick>
 8001fc0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001fc2:	e008      	b.n	8001fd6 <HAL_RCC_OscConfig+0x432>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001fc4:	f7ff f990 	bl	80012e8 <HAL_GetTick>
 8001fc8:	4602      	mov	r2, r0
 8001fca:	693b      	ldr	r3, [r7, #16]
 8001fcc:	1ad3      	subs	r3, r2, r3
 8001fce:	2b02      	cmp	r3, #2
 8001fd0:	d901      	bls.n	8001fd6 <HAL_RCC_OscConfig+0x432>
        {
          return HAL_TIMEOUT;
 8001fd2:	2303      	movs	r3, #3
 8001fd4:	e18d      	b.n	80022f2 <HAL_RCC_OscConfig+0x74e>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001fd6:	4b4f      	ldr	r3, [pc, #316]	; (8002114 <HAL_RCC_OscConfig+0x570>)
 8001fd8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001fdc:	f003 0302 	and.w	r3, r3, #2
 8001fe0:	2b00      	cmp	r3, #0
 8001fe2:	d1ef      	bne.n	8001fc4 <HAL_RCC_OscConfig+0x420>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	f003 0304 	and.w	r3, r3, #4
 8001fec:	2b00      	cmp	r3, #0
 8001fee:	f000 80a5 	beq.w	800213c <HAL_RCC_OscConfig+0x598>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001ff2:	2300      	movs	r3, #0
 8001ff4:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8001ff6:	4b47      	ldr	r3, [pc, #284]	; (8002114 <HAL_RCC_OscConfig+0x570>)
 8001ff8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ffa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ffe:	2b00      	cmp	r3, #0
 8002000:	d10d      	bne.n	800201e <HAL_RCC_OscConfig+0x47a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002002:	4b44      	ldr	r3, [pc, #272]	; (8002114 <HAL_RCC_OscConfig+0x570>)
 8002004:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002006:	4a43      	ldr	r2, [pc, #268]	; (8002114 <HAL_RCC_OscConfig+0x570>)
 8002008:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800200c:	6593      	str	r3, [r2, #88]	; 0x58
 800200e:	4b41      	ldr	r3, [pc, #260]	; (8002114 <HAL_RCC_OscConfig+0x570>)
 8002010:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002012:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002016:	60bb      	str	r3, [r7, #8]
 8002018:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800201a:	2301      	movs	r3, #1
 800201c:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800201e:	4b3e      	ldr	r3, [pc, #248]	; (8002118 <HAL_RCC_OscConfig+0x574>)
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002026:	2b00      	cmp	r3, #0
 8002028:	d118      	bne.n	800205c <HAL_RCC_OscConfig+0x4b8>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800202a:	4b3b      	ldr	r3, [pc, #236]	; (8002118 <HAL_RCC_OscConfig+0x574>)
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	4a3a      	ldr	r2, [pc, #232]	; (8002118 <HAL_RCC_OscConfig+0x574>)
 8002030:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002034:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002036:	f7ff f957 	bl	80012e8 <HAL_GetTick>
 800203a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800203c:	e008      	b.n	8002050 <HAL_RCC_OscConfig+0x4ac>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800203e:	f7ff f953 	bl	80012e8 <HAL_GetTick>
 8002042:	4602      	mov	r2, r0
 8002044:	693b      	ldr	r3, [r7, #16]
 8002046:	1ad3      	subs	r3, r2, r3
 8002048:	2b02      	cmp	r3, #2
 800204a:	d901      	bls.n	8002050 <HAL_RCC_OscConfig+0x4ac>
        {
          return HAL_TIMEOUT;
 800204c:	2303      	movs	r3, #3
 800204e:	e150      	b.n	80022f2 <HAL_RCC_OscConfig+0x74e>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002050:	4b31      	ldr	r3, [pc, #196]	; (8002118 <HAL_RCC_OscConfig+0x574>)
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002058:	2b00      	cmp	r3, #0
 800205a:	d0f0      	beq.n	800203e <HAL_RCC_OscConfig+0x49a>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	689b      	ldr	r3, [r3, #8]
 8002060:	2b01      	cmp	r3, #1
 8002062:	d108      	bne.n	8002076 <HAL_RCC_OscConfig+0x4d2>
 8002064:	4b2b      	ldr	r3, [pc, #172]	; (8002114 <HAL_RCC_OscConfig+0x570>)
 8002066:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800206a:	4a2a      	ldr	r2, [pc, #168]	; (8002114 <HAL_RCC_OscConfig+0x570>)
 800206c:	f043 0301 	orr.w	r3, r3, #1
 8002070:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002074:	e024      	b.n	80020c0 <HAL_RCC_OscConfig+0x51c>
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	689b      	ldr	r3, [r3, #8]
 800207a:	2b05      	cmp	r3, #5
 800207c:	d110      	bne.n	80020a0 <HAL_RCC_OscConfig+0x4fc>
 800207e:	4b25      	ldr	r3, [pc, #148]	; (8002114 <HAL_RCC_OscConfig+0x570>)
 8002080:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002084:	4a23      	ldr	r2, [pc, #140]	; (8002114 <HAL_RCC_OscConfig+0x570>)
 8002086:	f043 0304 	orr.w	r3, r3, #4
 800208a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800208e:	4b21      	ldr	r3, [pc, #132]	; (8002114 <HAL_RCC_OscConfig+0x570>)
 8002090:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002094:	4a1f      	ldr	r2, [pc, #124]	; (8002114 <HAL_RCC_OscConfig+0x570>)
 8002096:	f043 0301 	orr.w	r3, r3, #1
 800209a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800209e:	e00f      	b.n	80020c0 <HAL_RCC_OscConfig+0x51c>
 80020a0:	4b1c      	ldr	r3, [pc, #112]	; (8002114 <HAL_RCC_OscConfig+0x570>)
 80020a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80020a6:	4a1b      	ldr	r2, [pc, #108]	; (8002114 <HAL_RCC_OscConfig+0x570>)
 80020a8:	f023 0301 	bic.w	r3, r3, #1
 80020ac:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80020b0:	4b18      	ldr	r3, [pc, #96]	; (8002114 <HAL_RCC_OscConfig+0x570>)
 80020b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80020b6:	4a17      	ldr	r2, [pc, #92]	; (8002114 <HAL_RCC_OscConfig+0x570>)
 80020b8:	f023 0304 	bic.w	r3, r3, #4
 80020bc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	689b      	ldr	r3, [r3, #8]
 80020c4:	2b00      	cmp	r3, #0
 80020c6:	d016      	beq.n	80020f6 <HAL_RCC_OscConfig+0x552>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80020c8:	f7ff f90e 	bl	80012e8 <HAL_GetTick>
 80020cc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80020ce:	e00a      	b.n	80020e6 <HAL_RCC_OscConfig+0x542>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80020d0:	f7ff f90a 	bl	80012e8 <HAL_GetTick>
 80020d4:	4602      	mov	r2, r0
 80020d6:	693b      	ldr	r3, [r7, #16]
 80020d8:	1ad3      	subs	r3, r2, r3
 80020da:	f241 3288 	movw	r2, #5000	; 0x1388
 80020de:	4293      	cmp	r3, r2
 80020e0:	d901      	bls.n	80020e6 <HAL_RCC_OscConfig+0x542>
        {
          return HAL_TIMEOUT;
 80020e2:	2303      	movs	r3, #3
 80020e4:	e105      	b.n	80022f2 <HAL_RCC_OscConfig+0x74e>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80020e6:	4b0b      	ldr	r3, [pc, #44]	; (8002114 <HAL_RCC_OscConfig+0x570>)
 80020e8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80020ec:	f003 0302 	and.w	r3, r3, #2
 80020f0:	2b00      	cmp	r3, #0
 80020f2:	d0ed      	beq.n	80020d0 <HAL_RCC_OscConfig+0x52c>
 80020f4:	e019      	b.n	800212a <HAL_RCC_OscConfig+0x586>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80020f6:	f7ff f8f7 	bl	80012e8 <HAL_GetTick>
 80020fa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80020fc:	e00e      	b.n	800211c <HAL_RCC_OscConfig+0x578>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80020fe:	f7ff f8f3 	bl	80012e8 <HAL_GetTick>
 8002102:	4602      	mov	r2, r0
 8002104:	693b      	ldr	r3, [r7, #16]
 8002106:	1ad3      	subs	r3, r2, r3
 8002108:	f241 3288 	movw	r2, #5000	; 0x1388
 800210c:	4293      	cmp	r3, r2
 800210e:	d905      	bls.n	800211c <HAL_RCC_OscConfig+0x578>
        {
          return HAL_TIMEOUT;
 8002110:	2303      	movs	r3, #3
 8002112:	e0ee      	b.n	80022f2 <HAL_RCC_OscConfig+0x74e>
 8002114:	40021000 	.word	0x40021000
 8002118:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800211c:	4b77      	ldr	r3, [pc, #476]	; (80022fc <HAL_RCC_OscConfig+0x758>)
 800211e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002122:	f003 0302 	and.w	r3, r3, #2
 8002126:	2b00      	cmp	r3, #0
 8002128:	d1e9      	bne.n	80020fe <HAL_RCC_OscConfig+0x55a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800212a:	7ffb      	ldrb	r3, [r7, #31]
 800212c:	2b01      	cmp	r3, #1
 800212e:	d105      	bne.n	800213c <HAL_RCC_OscConfig+0x598>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002130:	4b72      	ldr	r3, [pc, #456]	; (80022fc <HAL_RCC_OscConfig+0x758>)
 8002132:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002134:	4a71      	ldr	r2, [pc, #452]	; (80022fc <HAL_RCC_OscConfig+0x758>)
 8002136:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800213a:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002140:	2b00      	cmp	r3, #0
 8002142:	f000 80d5 	beq.w	80022f0 <HAL_RCC_OscConfig+0x74c>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002146:	69bb      	ldr	r3, [r7, #24]
 8002148:	2b0c      	cmp	r3, #12
 800214a:	f000 808e 	beq.w	800226a <HAL_RCC_OscConfig+0x6c6>
    {
      if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002152:	2b02      	cmp	r3, #2
 8002154:	d15b      	bne.n	800220e <HAL_RCC_OscConfig+0x66a>
#endif /* RCC_PLLP_SUPPORT */
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002156:	4b69      	ldr	r3, [pc, #420]	; (80022fc <HAL_RCC_OscConfig+0x758>)
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	4a68      	ldr	r2, [pc, #416]	; (80022fc <HAL_RCC_OscConfig+0x758>)
 800215c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002160:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002162:	f7ff f8c1 	bl	80012e8 <HAL_GetTick>
 8002166:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002168:	e008      	b.n	800217c <HAL_RCC_OscConfig+0x5d8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800216a:	f7ff f8bd 	bl	80012e8 <HAL_GetTick>
 800216e:	4602      	mov	r2, r0
 8002170:	693b      	ldr	r3, [r7, #16]
 8002172:	1ad3      	subs	r3, r2, r3
 8002174:	2b02      	cmp	r3, #2
 8002176:	d901      	bls.n	800217c <HAL_RCC_OscConfig+0x5d8>
          {
            return HAL_TIMEOUT;
 8002178:	2303      	movs	r3, #3
 800217a:	e0ba      	b.n	80022f2 <HAL_RCC_OscConfig+0x74e>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800217c:	4b5f      	ldr	r3, [pc, #380]	; (80022fc <HAL_RCC_OscConfig+0x758>)
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002184:	2b00      	cmp	r3, #0
 8002186:	d1f0      	bne.n	800216a <HAL_RCC_OscConfig+0x5c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002188:	4b5c      	ldr	r3, [pc, #368]	; (80022fc <HAL_RCC_OscConfig+0x758>)
 800218a:	68da      	ldr	r2, [r3, #12]
 800218c:	4b5c      	ldr	r3, [pc, #368]	; (8002300 <HAL_RCC_OscConfig+0x75c>)
 800218e:	4013      	ands	r3, r2
 8002190:	687a      	ldr	r2, [r7, #4]
 8002192:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8002194:	687a      	ldr	r2, [r7, #4]
 8002196:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8002198:	3a01      	subs	r2, #1
 800219a:	0112      	lsls	r2, r2, #4
 800219c:	4311      	orrs	r1, r2
 800219e:	687a      	ldr	r2, [r7, #4]
 80021a0:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80021a2:	0212      	lsls	r2, r2, #8
 80021a4:	4311      	orrs	r1, r2
 80021a6:	687a      	ldr	r2, [r7, #4]
 80021a8:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80021aa:	0852      	lsrs	r2, r2, #1
 80021ac:	3a01      	subs	r2, #1
 80021ae:	0552      	lsls	r2, r2, #21
 80021b0:	4311      	orrs	r1, r2
 80021b2:	687a      	ldr	r2, [r7, #4]
 80021b4:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80021b6:	0852      	lsrs	r2, r2, #1
 80021b8:	3a01      	subs	r2, #1
 80021ba:	0652      	lsls	r2, r2, #25
 80021bc:	4311      	orrs	r1, r2
 80021be:	687a      	ldr	r2, [r7, #4]
 80021c0:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80021c2:	0912      	lsrs	r2, r2, #4
 80021c4:	0452      	lsls	r2, r2, #17
 80021c6:	430a      	orrs	r2, r1
 80021c8:	494c      	ldr	r1, [pc, #304]	; (80022fc <HAL_RCC_OscConfig+0x758>)
 80021ca:	4313      	orrs	r3, r2
 80021cc:	60cb      	str	r3, [r1, #12]
#endif
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80021ce:	4b4b      	ldr	r3, [pc, #300]	; (80022fc <HAL_RCC_OscConfig+0x758>)
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	4a4a      	ldr	r2, [pc, #296]	; (80022fc <HAL_RCC_OscConfig+0x758>)
 80021d4:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80021d8:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80021da:	4b48      	ldr	r3, [pc, #288]	; (80022fc <HAL_RCC_OscConfig+0x758>)
 80021dc:	68db      	ldr	r3, [r3, #12]
 80021de:	4a47      	ldr	r2, [pc, #284]	; (80022fc <HAL_RCC_OscConfig+0x758>)
 80021e0:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80021e4:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80021e6:	f7ff f87f 	bl	80012e8 <HAL_GetTick>
 80021ea:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80021ec:	e008      	b.n	8002200 <HAL_RCC_OscConfig+0x65c>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80021ee:	f7ff f87b 	bl	80012e8 <HAL_GetTick>
 80021f2:	4602      	mov	r2, r0
 80021f4:	693b      	ldr	r3, [r7, #16]
 80021f6:	1ad3      	subs	r3, r2, r3
 80021f8:	2b02      	cmp	r3, #2
 80021fa:	d901      	bls.n	8002200 <HAL_RCC_OscConfig+0x65c>
          {
            return HAL_TIMEOUT;
 80021fc:	2303      	movs	r3, #3
 80021fe:	e078      	b.n	80022f2 <HAL_RCC_OscConfig+0x74e>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002200:	4b3e      	ldr	r3, [pc, #248]	; (80022fc <HAL_RCC_OscConfig+0x758>)
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002208:	2b00      	cmp	r3, #0
 800220a:	d0f0      	beq.n	80021ee <HAL_RCC_OscConfig+0x64a>
 800220c:	e070      	b.n	80022f0 <HAL_RCC_OscConfig+0x74c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800220e:	4b3b      	ldr	r3, [pc, #236]	; (80022fc <HAL_RCC_OscConfig+0x758>)
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	4a3a      	ldr	r2, [pc, #232]	; (80022fc <HAL_RCC_OscConfig+0x758>)
 8002214:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002218:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 800221a:	4b38      	ldr	r3, [pc, #224]	; (80022fc <HAL_RCC_OscConfig+0x758>)
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 8002222:	2b00      	cmp	r3, #0
 8002224:	d105      	bne.n	8002232 <HAL_RCC_OscConfig+0x68e>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8002226:	4b35      	ldr	r3, [pc, #212]	; (80022fc <HAL_RCC_OscConfig+0x758>)
 8002228:	68db      	ldr	r3, [r3, #12]
 800222a:	4a34      	ldr	r2, [pc, #208]	; (80022fc <HAL_RCC_OscConfig+0x758>)
 800222c:	f023 0303 	bic.w	r3, r3, #3
 8002230:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8002232:	4b32      	ldr	r3, [pc, #200]	; (80022fc <HAL_RCC_OscConfig+0x758>)
 8002234:	68db      	ldr	r3, [r3, #12]
 8002236:	4a31      	ldr	r2, [pc, #196]	; (80022fc <HAL_RCC_OscConfig+0x758>)
 8002238:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 800223c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002240:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002242:	f7ff f851 	bl	80012e8 <HAL_GetTick>
 8002246:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002248:	e008      	b.n	800225c <HAL_RCC_OscConfig+0x6b8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800224a:	f7ff f84d 	bl	80012e8 <HAL_GetTick>
 800224e:	4602      	mov	r2, r0
 8002250:	693b      	ldr	r3, [r7, #16]
 8002252:	1ad3      	subs	r3, r2, r3
 8002254:	2b02      	cmp	r3, #2
 8002256:	d901      	bls.n	800225c <HAL_RCC_OscConfig+0x6b8>
          {
            return HAL_TIMEOUT;
 8002258:	2303      	movs	r3, #3
 800225a:	e04a      	b.n	80022f2 <HAL_RCC_OscConfig+0x74e>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800225c:	4b27      	ldr	r3, [pc, #156]	; (80022fc <HAL_RCC_OscConfig+0x758>)
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002264:	2b00      	cmp	r3, #0
 8002266:	d1f0      	bne.n	800224a <HAL_RCC_OscConfig+0x6a6>
 8002268:	e042      	b.n	80022f0 <HAL_RCC_OscConfig+0x74c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800226e:	2b01      	cmp	r3, #1
 8002270:	d101      	bne.n	8002276 <HAL_RCC_OscConfig+0x6d2>
      {
        return HAL_ERROR;
 8002272:	2301      	movs	r3, #1
 8002274:	e03d      	b.n	80022f2 <HAL_RCC_OscConfig+0x74e>
      }
      else
      {
        pll_config = RCC->PLLCFGR;
 8002276:	4b21      	ldr	r3, [pc, #132]	; (80022fc <HAL_RCC_OscConfig+0x758>)
 8002278:	68db      	ldr	r3, [r3, #12]
 800227a:	617b      	str	r3, [r7, #20]
        /* Do not return HAL_ERROR if request repeats the current configuration */
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800227c:	697b      	ldr	r3, [r7, #20]
 800227e:	f003 0203 	and.w	r2, r3, #3
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002286:	429a      	cmp	r2, r3
 8002288:	d130      	bne.n	80022ec <HAL_RCC_OscConfig+0x748>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800228a:	697b      	ldr	r3, [r7, #20]
 800228c:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002294:	3b01      	subs	r3, #1
 8002296:	011b      	lsls	r3, r3, #4
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002298:	429a      	cmp	r2, r3
 800229a:	d127      	bne.n	80022ec <HAL_RCC_OscConfig+0x748>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800229c:	697b      	ldr	r3, [r7, #20]
 800229e:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80022a6:	021b      	lsls	r3, r3, #8
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80022a8:	429a      	cmp	r2, r3
 80022aa:	d11f      	bne.n	80022ec <HAL_RCC_OscConfig+0x748>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80022ac:	697b      	ldr	r3, [r7, #20]
 80022ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80022b2:	687a      	ldr	r2, [r7, #4]
 80022b4:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80022b6:	2a07      	cmp	r2, #7
 80022b8:	bf14      	ite	ne
 80022ba:	2201      	movne	r2, #1
 80022bc:	2200      	moveq	r2, #0
 80022be:	b2d2      	uxtb	r2, r2
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80022c0:	4293      	cmp	r3, r2
 80022c2:	d113      	bne.n	80022ec <HAL_RCC_OscConfig+0x748>
#endif
#endif
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80022c4:	697b      	ldr	r3, [r7, #20]
 80022c6:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80022ce:	085b      	lsrs	r3, r3, #1
 80022d0:	3b01      	subs	r3, #1
 80022d2:	055b      	lsls	r3, r3, #21
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80022d4:	429a      	cmp	r2, r3
 80022d6:	d109      	bne.n	80022ec <HAL_RCC_OscConfig+0x748>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80022d8:	697b      	ldr	r3, [r7, #20]
 80022da:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022e2:	085b      	lsrs	r3, r3, #1
 80022e4:	3b01      	subs	r3, #1
 80022e6:	065b      	lsls	r3, r3, #25
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80022e8:	429a      	cmp	r2, r3
 80022ea:	d001      	beq.n	80022f0 <HAL_RCC_OscConfig+0x74c>
        {
          return HAL_ERROR;
 80022ec:	2301      	movs	r3, #1
 80022ee:	e000      	b.n	80022f2 <HAL_RCC_OscConfig+0x74e>
        }
      }
    }
  }
  return HAL_OK;
 80022f0:	2300      	movs	r3, #0
}
 80022f2:	4618      	mov	r0, r3
 80022f4:	3720      	adds	r7, #32
 80022f6:	46bd      	mov	sp, r7
 80022f8:	bd80      	pop	{r7, pc}
 80022fa:	bf00      	nop
 80022fc:	40021000 	.word	0x40021000
 8002300:	f99d808c 	.word	0xf99d808c

08002304 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002304:	b580      	push	{r7, lr}
 8002306:	b084      	sub	sp, #16
 8002308:	af00      	add	r7, sp, #0
 800230a:	6078      	str	r0, [r7, #4]
 800230c:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	2b00      	cmp	r3, #0
 8002312:	d101      	bne.n	8002318 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002314:	2301      	movs	r3, #1
 8002316:	e0c8      	b.n	80024aa <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002318:	4b66      	ldr	r3, [pc, #408]	; (80024b4 <HAL_RCC_ClockConfig+0x1b0>)
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	f003 0307 	and.w	r3, r3, #7
 8002320:	683a      	ldr	r2, [r7, #0]
 8002322:	429a      	cmp	r2, r3
 8002324:	d910      	bls.n	8002348 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002326:	4b63      	ldr	r3, [pc, #396]	; (80024b4 <HAL_RCC_ClockConfig+0x1b0>)
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	f023 0207 	bic.w	r2, r3, #7
 800232e:	4961      	ldr	r1, [pc, #388]	; (80024b4 <HAL_RCC_ClockConfig+0x1b0>)
 8002330:	683b      	ldr	r3, [r7, #0]
 8002332:	4313      	orrs	r3, r2
 8002334:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002336:	4b5f      	ldr	r3, [pc, #380]	; (80024b4 <HAL_RCC_ClockConfig+0x1b0>)
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	f003 0307 	and.w	r3, r3, #7
 800233e:	683a      	ldr	r2, [r7, #0]
 8002340:	429a      	cmp	r2, r3
 8002342:	d001      	beq.n	8002348 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002344:	2301      	movs	r3, #1
 8002346:	e0b0      	b.n	80024aa <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	f003 0301 	and.w	r3, r3, #1
 8002350:	2b00      	cmp	r3, #0
 8002352:	d04c      	beq.n	80023ee <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	685b      	ldr	r3, [r3, #4]
 8002358:	2b03      	cmp	r3, #3
 800235a:	d107      	bne.n	800236c <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800235c:	4b56      	ldr	r3, [pc, #344]	; (80024b8 <HAL_RCC_ClockConfig+0x1b4>)
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002364:	2b00      	cmp	r3, #0
 8002366:	d121      	bne.n	80023ac <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 8002368:	2301      	movs	r3, #1
 800236a:	e09e      	b.n	80024aa <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	685b      	ldr	r3, [r3, #4]
 8002370:	2b02      	cmp	r3, #2
 8002372:	d107      	bne.n	8002384 <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002374:	4b50      	ldr	r3, [pc, #320]	; (80024b8 <HAL_RCC_ClockConfig+0x1b4>)
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800237c:	2b00      	cmp	r3, #0
 800237e:	d115      	bne.n	80023ac <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8002380:	2301      	movs	r3, #1
 8002382:	e092      	b.n	80024aa <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	685b      	ldr	r3, [r3, #4]
 8002388:	2b00      	cmp	r3, #0
 800238a:	d107      	bne.n	800239c <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800238c:	4b4a      	ldr	r3, [pc, #296]	; (80024b8 <HAL_RCC_ClockConfig+0x1b4>)
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	f003 0302 	and.w	r3, r3, #2
 8002394:	2b00      	cmp	r3, #0
 8002396:	d109      	bne.n	80023ac <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8002398:	2301      	movs	r3, #1
 800239a:	e086      	b.n	80024aa <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800239c:	4b46      	ldr	r3, [pc, #280]	; (80024b8 <HAL_RCC_ClockConfig+0x1b4>)
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80023a4:	2b00      	cmp	r3, #0
 80023a6:	d101      	bne.n	80023ac <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 80023a8:	2301      	movs	r3, #1
 80023aa:	e07e      	b.n	80024aa <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80023ac:	4b42      	ldr	r3, [pc, #264]	; (80024b8 <HAL_RCC_ClockConfig+0x1b4>)
 80023ae:	689b      	ldr	r3, [r3, #8]
 80023b0:	f023 0203 	bic.w	r2, r3, #3
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	685b      	ldr	r3, [r3, #4]
 80023b8:	493f      	ldr	r1, [pc, #252]	; (80024b8 <HAL_RCC_ClockConfig+0x1b4>)
 80023ba:	4313      	orrs	r3, r2
 80023bc:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80023be:	f7fe ff93 	bl	80012e8 <HAL_GetTick>
 80023c2:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80023c4:	e00a      	b.n	80023dc <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80023c6:	f7fe ff8f 	bl	80012e8 <HAL_GetTick>
 80023ca:	4602      	mov	r2, r0
 80023cc:	68fb      	ldr	r3, [r7, #12]
 80023ce:	1ad3      	subs	r3, r2, r3
 80023d0:	f241 3288 	movw	r2, #5000	; 0x1388
 80023d4:	4293      	cmp	r3, r2
 80023d6:	d901      	bls.n	80023dc <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 80023d8:	2303      	movs	r3, #3
 80023da:	e066      	b.n	80024aa <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80023dc:	4b36      	ldr	r3, [pc, #216]	; (80024b8 <HAL_RCC_ClockConfig+0x1b4>)
 80023de:	689b      	ldr	r3, [r3, #8]
 80023e0:	f003 020c 	and.w	r2, r3, #12
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	685b      	ldr	r3, [r3, #4]
 80023e8:	009b      	lsls	r3, r3, #2
 80023ea:	429a      	cmp	r2, r3
 80023ec:	d1eb      	bne.n	80023c6 <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	f003 0302 	and.w	r3, r3, #2
 80023f6:	2b00      	cmp	r3, #0
 80023f8:	d008      	beq.n	800240c <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80023fa:	4b2f      	ldr	r3, [pc, #188]	; (80024b8 <HAL_RCC_ClockConfig+0x1b4>)
 80023fc:	689b      	ldr	r3, [r3, #8]
 80023fe:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	689b      	ldr	r3, [r3, #8]
 8002406:	492c      	ldr	r1, [pc, #176]	; (80024b8 <HAL_RCC_ClockConfig+0x1b4>)
 8002408:	4313      	orrs	r3, r2
 800240a:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800240c:	4b29      	ldr	r3, [pc, #164]	; (80024b4 <HAL_RCC_ClockConfig+0x1b0>)
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	f003 0307 	and.w	r3, r3, #7
 8002414:	683a      	ldr	r2, [r7, #0]
 8002416:	429a      	cmp	r2, r3
 8002418:	d210      	bcs.n	800243c <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800241a:	4b26      	ldr	r3, [pc, #152]	; (80024b4 <HAL_RCC_ClockConfig+0x1b0>)
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	f023 0207 	bic.w	r2, r3, #7
 8002422:	4924      	ldr	r1, [pc, #144]	; (80024b4 <HAL_RCC_ClockConfig+0x1b0>)
 8002424:	683b      	ldr	r3, [r7, #0]
 8002426:	4313      	orrs	r3, r2
 8002428:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800242a:	4b22      	ldr	r3, [pc, #136]	; (80024b4 <HAL_RCC_ClockConfig+0x1b0>)
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	f003 0307 	and.w	r3, r3, #7
 8002432:	683a      	ldr	r2, [r7, #0]
 8002434:	429a      	cmp	r2, r3
 8002436:	d001      	beq.n	800243c <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 8002438:	2301      	movs	r3, #1
 800243a:	e036      	b.n	80024aa <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	f003 0304 	and.w	r3, r3, #4
 8002444:	2b00      	cmp	r3, #0
 8002446:	d008      	beq.n	800245a <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002448:	4b1b      	ldr	r3, [pc, #108]	; (80024b8 <HAL_RCC_ClockConfig+0x1b4>)
 800244a:	689b      	ldr	r3, [r3, #8]
 800244c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	68db      	ldr	r3, [r3, #12]
 8002454:	4918      	ldr	r1, [pc, #96]	; (80024b8 <HAL_RCC_ClockConfig+0x1b4>)
 8002456:	4313      	orrs	r3, r2
 8002458:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	f003 0308 	and.w	r3, r3, #8
 8002462:	2b00      	cmp	r3, #0
 8002464:	d009      	beq.n	800247a <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002466:	4b14      	ldr	r3, [pc, #80]	; (80024b8 <HAL_RCC_ClockConfig+0x1b4>)
 8002468:	689b      	ldr	r3, [r3, #8]
 800246a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	691b      	ldr	r3, [r3, #16]
 8002472:	00db      	lsls	r3, r3, #3
 8002474:	4910      	ldr	r1, [pc, #64]	; (80024b8 <HAL_RCC_ClockConfig+0x1b4>)
 8002476:	4313      	orrs	r3, r2
 8002478:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800247a:	f000 f825 	bl	80024c8 <HAL_RCC_GetSysClockFreq>
 800247e:	4601      	mov	r1, r0
 8002480:	4b0d      	ldr	r3, [pc, #52]	; (80024b8 <HAL_RCC_ClockConfig+0x1b4>)
 8002482:	689b      	ldr	r3, [r3, #8]
 8002484:	091b      	lsrs	r3, r3, #4
 8002486:	f003 030f 	and.w	r3, r3, #15
 800248a:	4a0c      	ldr	r2, [pc, #48]	; (80024bc <HAL_RCC_ClockConfig+0x1b8>)
 800248c:	5cd3      	ldrb	r3, [r2, r3]
 800248e:	f003 031f 	and.w	r3, r3, #31
 8002492:	fa21 f303 	lsr.w	r3, r1, r3
 8002496:	4a0a      	ldr	r2, [pc, #40]	; (80024c0 <HAL_RCC_ClockConfig+0x1bc>)
 8002498:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 800249a:	4b0a      	ldr	r3, [pc, #40]	; (80024c4 <HAL_RCC_ClockConfig+0x1c0>)
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	4618      	mov	r0, r3
 80024a0:	f7fe fed6 	bl	8001250 <HAL_InitTick>
 80024a4:	4603      	mov	r3, r0
 80024a6:	72fb      	strb	r3, [r7, #11]

  return status;
 80024a8:	7afb      	ldrb	r3, [r7, #11]
}
 80024aa:	4618      	mov	r0, r3
 80024ac:	3710      	adds	r7, #16
 80024ae:	46bd      	mov	sp, r7
 80024b0:	bd80      	pop	{r7, pc}
 80024b2:	bf00      	nop
 80024b4:	40022000 	.word	0x40022000
 80024b8:	40021000 	.word	0x40021000
 80024bc:	08004ea4 	.word	0x08004ea4
 80024c0:	20000000 	.word	0x20000000
 80024c4:	20000004 	.word	0x20000004

080024c8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80024c8:	b480      	push	{r7}
 80024ca:	b089      	sub	sp, #36	; 0x24
 80024cc:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80024ce:	2300      	movs	r3, #0
 80024d0:	61fb      	str	r3, [r7, #28]
 80024d2:	2300      	movs	r3, #0
 80024d4:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80024d6:	4b3d      	ldr	r3, [pc, #244]	; (80025cc <HAL_RCC_GetSysClockFreq+0x104>)
 80024d8:	689b      	ldr	r3, [r3, #8]
 80024da:	f003 030c 	and.w	r3, r3, #12
 80024de:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80024e0:	4b3a      	ldr	r3, [pc, #232]	; (80025cc <HAL_RCC_GetSysClockFreq+0x104>)
 80024e2:	68db      	ldr	r3, [r3, #12]
 80024e4:	f003 0303 	and.w	r3, r3, #3
 80024e8:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80024ea:	693b      	ldr	r3, [r7, #16]
 80024ec:	2b00      	cmp	r3, #0
 80024ee:	d005      	beq.n	80024fc <HAL_RCC_GetSysClockFreq+0x34>
 80024f0:	693b      	ldr	r3, [r7, #16]
 80024f2:	2b0c      	cmp	r3, #12
 80024f4:	d121      	bne.n	800253a <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80024f6:	68fb      	ldr	r3, [r7, #12]
 80024f8:	2b01      	cmp	r3, #1
 80024fa:	d11e      	bne.n	800253a <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80024fc:	4b33      	ldr	r3, [pc, #204]	; (80025cc <HAL_RCC_GetSysClockFreq+0x104>)
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	f003 0308 	and.w	r3, r3, #8
 8002504:	2b00      	cmp	r3, #0
 8002506:	d107      	bne.n	8002518 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8002508:	4b30      	ldr	r3, [pc, #192]	; (80025cc <HAL_RCC_GetSysClockFreq+0x104>)
 800250a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800250e:	0a1b      	lsrs	r3, r3, #8
 8002510:	f003 030f 	and.w	r3, r3, #15
 8002514:	61fb      	str	r3, [r7, #28]
 8002516:	e005      	b.n	8002524 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8002518:	4b2c      	ldr	r3, [pc, #176]	; (80025cc <HAL_RCC_GetSysClockFreq+0x104>)
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	091b      	lsrs	r3, r3, #4
 800251e:	f003 030f 	and.w	r3, r3, #15
 8002522:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8002524:	4a2a      	ldr	r2, [pc, #168]	; (80025d0 <HAL_RCC_GetSysClockFreq+0x108>)
 8002526:	69fb      	ldr	r3, [r7, #28]
 8002528:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800252c:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800252e:	693b      	ldr	r3, [r7, #16]
 8002530:	2b00      	cmp	r3, #0
 8002532:	d10d      	bne.n	8002550 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8002534:	69fb      	ldr	r3, [r7, #28]
 8002536:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002538:	e00a      	b.n	8002550 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 800253a:	693b      	ldr	r3, [r7, #16]
 800253c:	2b04      	cmp	r3, #4
 800253e:	d102      	bne.n	8002546 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002540:	4b24      	ldr	r3, [pc, #144]	; (80025d4 <HAL_RCC_GetSysClockFreq+0x10c>)
 8002542:	61bb      	str	r3, [r7, #24]
 8002544:	e004      	b.n	8002550 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8002546:	693b      	ldr	r3, [r7, #16]
 8002548:	2b08      	cmp	r3, #8
 800254a:	d101      	bne.n	8002550 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800254c:	4b22      	ldr	r3, [pc, #136]	; (80025d8 <HAL_RCC_GetSysClockFreq+0x110>)
 800254e:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8002550:	693b      	ldr	r3, [r7, #16]
 8002552:	2b0c      	cmp	r3, #12
 8002554:	d133      	bne.n	80025be <HAL_RCC_GetSysClockFreq+0xf6>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002556:	4b1d      	ldr	r3, [pc, #116]	; (80025cc <HAL_RCC_GetSysClockFreq+0x104>)
 8002558:	68db      	ldr	r3, [r3, #12]
 800255a:	f003 0303 	and.w	r3, r3, #3
 800255e:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002560:	68bb      	ldr	r3, [r7, #8]
 8002562:	2b02      	cmp	r3, #2
 8002564:	d002      	beq.n	800256c <HAL_RCC_GetSysClockFreq+0xa4>
 8002566:	2b03      	cmp	r3, #3
 8002568:	d003      	beq.n	8002572 <HAL_RCC_GetSysClockFreq+0xaa>
 800256a:	e005      	b.n	8002578 <HAL_RCC_GetSysClockFreq+0xb0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 800256c:	4b19      	ldr	r3, [pc, #100]	; (80025d4 <HAL_RCC_GetSysClockFreq+0x10c>)
 800256e:	617b      	str	r3, [r7, #20]
      break;
 8002570:	e005      	b.n	800257e <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8002572:	4b19      	ldr	r3, [pc, #100]	; (80025d8 <HAL_RCC_GetSysClockFreq+0x110>)
 8002574:	617b      	str	r3, [r7, #20]
      break;
 8002576:	e002      	b.n	800257e <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8002578:	69fb      	ldr	r3, [r7, #28]
 800257a:	617b      	str	r3, [r7, #20]
      break;
 800257c:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800257e:	4b13      	ldr	r3, [pc, #76]	; (80025cc <HAL_RCC_GetSysClockFreq+0x104>)
 8002580:	68db      	ldr	r3, [r3, #12]
 8002582:	091b      	lsrs	r3, r3, #4
 8002584:	f003 0307 	and.w	r3, r3, #7
 8002588:	3301      	adds	r3, #1
 800258a:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800258c:	4b0f      	ldr	r3, [pc, #60]	; (80025cc <HAL_RCC_GetSysClockFreq+0x104>)
 800258e:	68db      	ldr	r3, [r3, #12]
 8002590:	0a1b      	lsrs	r3, r3, #8
 8002592:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002596:	697a      	ldr	r2, [r7, #20]
 8002598:	fb02 f203 	mul.w	r2, r2, r3
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	fbb2 f3f3 	udiv	r3, r2, r3
 80025a2:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80025a4:	4b09      	ldr	r3, [pc, #36]	; (80025cc <HAL_RCC_GetSysClockFreq+0x104>)
 80025a6:	68db      	ldr	r3, [r3, #12]
 80025a8:	0e5b      	lsrs	r3, r3, #25
 80025aa:	f003 0303 	and.w	r3, r3, #3
 80025ae:	3301      	adds	r3, #1
 80025b0:	005b      	lsls	r3, r3, #1
 80025b2:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80025b4:	697a      	ldr	r2, [r7, #20]
 80025b6:	683b      	ldr	r3, [r7, #0]
 80025b8:	fbb2 f3f3 	udiv	r3, r2, r3
 80025bc:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80025be:	69bb      	ldr	r3, [r7, #24]
}
 80025c0:	4618      	mov	r0, r3
 80025c2:	3724      	adds	r7, #36	; 0x24
 80025c4:	46bd      	mov	sp, r7
 80025c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ca:	4770      	bx	lr
 80025cc:	40021000 	.word	0x40021000
 80025d0:	08004ebc 	.word	0x08004ebc
 80025d4:	00f42400 	.word	0x00f42400
 80025d8:	007a1200 	.word	0x007a1200

080025dc <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80025dc:	b480      	push	{r7}
 80025de:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80025e0:	4b03      	ldr	r3, [pc, #12]	; (80025f0 <HAL_RCC_GetHCLKFreq+0x14>)
 80025e2:	681b      	ldr	r3, [r3, #0]
}
 80025e4:	4618      	mov	r0, r3
 80025e6:	46bd      	mov	sp, r7
 80025e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ec:	4770      	bx	lr
 80025ee:	bf00      	nop
 80025f0:	20000000 	.word	0x20000000

080025f4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80025f4:	b580      	push	{r7, lr}
 80025f6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80025f8:	f7ff fff0 	bl	80025dc <HAL_RCC_GetHCLKFreq>
 80025fc:	4601      	mov	r1, r0
 80025fe:	4b06      	ldr	r3, [pc, #24]	; (8002618 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002600:	689b      	ldr	r3, [r3, #8]
 8002602:	0a1b      	lsrs	r3, r3, #8
 8002604:	f003 0307 	and.w	r3, r3, #7
 8002608:	4a04      	ldr	r2, [pc, #16]	; (800261c <HAL_RCC_GetPCLK1Freq+0x28>)
 800260a:	5cd3      	ldrb	r3, [r2, r3]
 800260c:	f003 031f 	and.w	r3, r3, #31
 8002610:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002614:	4618      	mov	r0, r3
 8002616:	bd80      	pop	{r7, pc}
 8002618:	40021000 	.word	0x40021000
 800261c:	08004eb4 	.word	0x08004eb4

08002620 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002620:	b580      	push	{r7, lr}
 8002622:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8002624:	f7ff ffda 	bl	80025dc <HAL_RCC_GetHCLKFreq>
 8002628:	4601      	mov	r1, r0
 800262a:	4b06      	ldr	r3, [pc, #24]	; (8002644 <HAL_RCC_GetPCLK2Freq+0x24>)
 800262c:	689b      	ldr	r3, [r3, #8]
 800262e:	0adb      	lsrs	r3, r3, #11
 8002630:	f003 0307 	and.w	r3, r3, #7
 8002634:	4a04      	ldr	r2, [pc, #16]	; (8002648 <HAL_RCC_GetPCLK2Freq+0x28>)
 8002636:	5cd3      	ldrb	r3, [r2, r3]
 8002638:	f003 031f 	and.w	r3, r3, #31
 800263c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002640:	4618      	mov	r0, r3
 8002642:	bd80      	pop	{r7, pc}
 8002644:	40021000 	.word	0x40021000
 8002648:	08004eb4 	.word	0x08004eb4

0800264c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 800264c:	b580      	push	{r7, lr}
 800264e:	b086      	sub	sp, #24
 8002650:	af00      	add	r7, sp, #0
 8002652:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8002654:	2300      	movs	r3, #0
 8002656:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8002658:	4b2a      	ldr	r3, [pc, #168]	; (8002704 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800265a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800265c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002660:	2b00      	cmp	r3, #0
 8002662:	d003      	beq.n	800266c <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8002664:	f7ff fa3a 	bl	8001adc <HAL_PWREx_GetVoltageRange>
 8002668:	6178      	str	r0, [r7, #20]
 800266a:	e014      	b.n	8002696 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 800266c:	4b25      	ldr	r3, [pc, #148]	; (8002704 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800266e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002670:	4a24      	ldr	r2, [pc, #144]	; (8002704 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002672:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002676:	6593      	str	r3, [r2, #88]	; 0x58
 8002678:	4b22      	ldr	r3, [pc, #136]	; (8002704 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800267a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800267c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002680:	60fb      	str	r3, [r7, #12]
 8002682:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8002684:	f7ff fa2a 	bl	8001adc <HAL_PWREx_GetVoltageRange>
 8002688:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800268a:	4b1e      	ldr	r3, [pc, #120]	; (8002704 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800268c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800268e:	4a1d      	ldr	r2, [pc, #116]	; (8002704 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002690:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002694:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002696:	697b      	ldr	r3, [r7, #20]
 8002698:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800269c:	d10b      	bne.n	80026b6 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	2b80      	cmp	r3, #128	; 0x80
 80026a2:	d919      	bls.n	80026d8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	2ba0      	cmp	r3, #160	; 0xa0
 80026a8:	d902      	bls.n	80026b0 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80026aa:	2302      	movs	r3, #2
 80026ac:	613b      	str	r3, [r7, #16]
 80026ae:	e013      	b.n	80026d8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80026b0:	2301      	movs	r3, #1
 80026b2:	613b      	str	r3, [r7, #16]
 80026b4:	e010      	b.n	80026d8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	2b80      	cmp	r3, #128	; 0x80
 80026ba:	d902      	bls.n	80026c2 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 80026bc:	2303      	movs	r3, #3
 80026be:	613b      	str	r3, [r7, #16]
 80026c0:	e00a      	b.n	80026d8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	2b80      	cmp	r3, #128	; 0x80
 80026c6:	d102      	bne.n	80026ce <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80026c8:	2302      	movs	r3, #2
 80026ca:	613b      	str	r3, [r7, #16]
 80026cc:	e004      	b.n	80026d8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	2b70      	cmp	r3, #112	; 0x70
 80026d2:	d101      	bne.n	80026d8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80026d4:	2301      	movs	r3, #1
 80026d6:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80026d8:	4b0b      	ldr	r3, [pc, #44]	; (8002708 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	f023 0207 	bic.w	r2, r3, #7
 80026e0:	4909      	ldr	r1, [pc, #36]	; (8002708 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80026e2:	693b      	ldr	r3, [r7, #16]
 80026e4:	4313      	orrs	r3, r2
 80026e6:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80026e8:	4b07      	ldr	r3, [pc, #28]	; (8002708 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	f003 0307 	and.w	r3, r3, #7
 80026f0:	693a      	ldr	r2, [r7, #16]
 80026f2:	429a      	cmp	r2, r3
 80026f4:	d001      	beq.n	80026fa <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 80026f6:	2301      	movs	r3, #1
 80026f8:	e000      	b.n	80026fc <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 80026fa:	2300      	movs	r3, #0
}
 80026fc:	4618      	mov	r0, r3
 80026fe:	3718      	adds	r7, #24
 8002700:	46bd      	mov	sp, r7
 8002702:	bd80      	pop	{r7, pc}
 8002704:	40021000 	.word	0x40021000
 8002708:	40022000 	.word	0x40022000

0800270c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800270c:	b580      	push	{r7, lr}
 800270e:	b086      	sub	sp, #24
 8002710:	af00      	add	r7, sp, #0
 8002712:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002714:	2300      	movs	r3, #0
 8002716:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002718:	2300      	movs	r3, #0
 800271a:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002724:	2b00      	cmp	r3, #0
 8002726:	d03f      	beq.n	80027a8 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800272c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002730:	d01c      	beq.n	800276c <HAL_RCCEx_PeriphCLKConfig+0x60>
 8002732:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002736:	d802      	bhi.n	800273e <HAL_RCCEx_PeriphCLKConfig+0x32>
 8002738:	2b00      	cmp	r3, #0
 800273a:	d00e      	beq.n	800275a <HAL_RCCEx_PeriphCLKConfig+0x4e>
 800273c:	e01f      	b.n	800277e <HAL_RCCEx_PeriphCLKConfig+0x72>
 800273e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002742:	d003      	beq.n	800274c <HAL_RCCEx_PeriphCLKConfig+0x40>
 8002744:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8002748:	d01c      	beq.n	8002784 <HAL_RCCEx_PeriphCLKConfig+0x78>
 800274a:	e018      	b.n	800277e <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800274c:	4b85      	ldr	r3, [pc, #532]	; (8002964 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800274e:	68db      	ldr	r3, [r3, #12]
 8002750:	4a84      	ldr	r2, [pc, #528]	; (8002964 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002752:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002756:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002758:	e015      	b.n	8002786 <HAL_RCCEx_PeriphCLKConfig+0x7a>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	3304      	adds	r3, #4
 800275e:	2100      	movs	r1, #0
 8002760:	4618      	mov	r0, r3
 8002762:	f000 fab9 	bl	8002cd8 <RCCEx_PLLSAI1_Config>
 8002766:	4603      	mov	r3, r0
 8002768:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800276a:	e00c      	b.n	8002786 <HAL_RCCEx_PeriphCLKConfig+0x7a>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	3320      	adds	r3, #32
 8002770:	2100      	movs	r1, #0
 8002772:	4618      	mov	r0, r3
 8002774:	f000 fba0 	bl	8002eb8 <RCCEx_PLLSAI2_Config>
 8002778:	4603      	mov	r3, r0
 800277a:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800277c:	e003      	b.n	8002786 <HAL_RCCEx_PeriphCLKConfig+0x7a>
#endif /* STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800277e:	2301      	movs	r3, #1
 8002780:	74fb      	strb	r3, [r7, #19]
      break;
 8002782:	e000      	b.n	8002786 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      break;
 8002784:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002786:	7cfb      	ldrb	r3, [r7, #19]
 8002788:	2b00      	cmp	r3, #0
 800278a:	d10b      	bne.n	80027a4 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800278c:	4b75      	ldr	r3, [pc, #468]	; (8002964 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800278e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002792:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800279a:	4972      	ldr	r1, [pc, #456]	; (8002964 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800279c:	4313      	orrs	r3, r2
 800279e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80027a2:	e001      	b.n	80027a8 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80027a4:	7cfb      	ldrb	r3, [r7, #19]
 80027a6:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80027b0:	2b00      	cmp	r3, #0
 80027b2:	d03f      	beq.n	8002834 <HAL_RCCEx_PeriphCLKConfig+0x128>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80027b8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80027bc:	d01c      	beq.n	80027f8 <HAL_RCCEx_PeriphCLKConfig+0xec>
 80027be:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80027c2:	d802      	bhi.n	80027ca <HAL_RCCEx_PeriphCLKConfig+0xbe>
 80027c4:	2b00      	cmp	r3, #0
 80027c6:	d00e      	beq.n	80027e6 <HAL_RCCEx_PeriphCLKConfig+0xda>
 80027c8:	e01f      	b.n	800280a <HAL_RCCEx_PeriphCLKConfig+0xfe>
 80027ca:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80027ce:	d003      	beq.n	80027d8 <HAL_RCCEx_PeriphCLKConfig+0xcc>
 80027d0:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80027d4:	d01c      	beq.n	8002810 <HAL_RCCEx_PeriphCLKConfig+0x104>
 80027d6:	e018      	b.n	800280a <HAL_RCCEx_PeriphCLKConfig+0xfe>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80027d8:	4b62      	ldr	r3, [pc, #392]	; (8002964 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80027da:	68db      	ldr	r3, [r3, #12]
 80027dc:	4a61      	ldr	r2, [pc, #388]	; (8002964 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80027de:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80027e2:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80027e4:	e015      	b.n	8002812 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	3304      	adds	r3, #4
 80027ea:	2100      	movs	r1, #0
 80027ec:	4618      	mov	r0, r3
 80027ee:	f000 fa73 	bl	8002cd8 <RCCEx_PLLSAI1_Config>
 80027f2:	4603      	mov	r3, r0
 80027f4:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80027f6:	e00c      	b.n	8002812 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	3320      	adds	r3, #32
 80027fc:	2100      	movs	r1, #0
 80027fe:	4618      	mov	r0, r3
 8002800:	f000 fb5a 	bl	8002eb8 <RCCEx_PLLSAI2_Config>
 8002804:	4603      	mov	r3, r0
 8002806:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002808:	e003      	b.n	8002812 <HAL_RCCEx_PeriphCLKConfig+0x106>
#endif /* STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800280a:	2301      	movs	r3, #1
 800280c:	74fb      	strb	r3, [r7, #19]
      break;
 800280e:	e000      	b.n	8002812 <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 8002810:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002812:	7cfb      	ldrb	r3, [r7, #19]
 8002814:	2b00      	cmp	r3, #0
 8002816:	d10b      	bne.n	8002830 <HAL_RCCEx_PeriphCLKConfig+0x124>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8002818:	4b52      	ldr	r3, [pc, #328]	; (8002964 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800281a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800281e:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002826:	494f      	ldr	r1, [pc, #316]	; (8002964 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002828:	4313      	orrs	r3, r2
 800282a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800282e:	e001      	b.n	8002834 <HAL_RCCEx_PeriphCLKConfig+0x128>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002830:	7cfb      	ldrb	r3, [r7, #19]
 8002832:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800283c:	2b00      	cmp	r3, #0
 800283e:	f000 80a0 	beq.w	8002982 <HAL_RCCEx_PeriphCLKConfig+0x276>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002842:	2300      	movs	r3, #0
 8002844:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002846:	4b47      	ldr	r3, [pc, #284]	; (8002964 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002848:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800284a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800284e:	2b00      	cmp	r3, #0
 8002850:	d101      	bne.n	8002856 <HAL_RCCEx_PeriphCLKConfig+0x14a>
 8002852:	2301      	movs	r3, #1
 8002854:	e000      	b.n	8002858 <HAL_RCCEx_PeriphCLKConfig+0x14c>
 8002856:	2300      	movs	r3, #0
 8002858:	2b00      	cmp	r3, #0
 800285a:	d00d      	beq.n	8002878 <HAL_RCCEx_PeriphCLKConfig+0x16c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800285c:	4b41      	ldr	r3, [pc, #260]	; (8002964 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800285e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002860:	4a40      	ldr	r2, [pc, #256]	; (8002964 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002862:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002866:	6593      	str	r3, [r2, #88]	; 0x58
 8002868:	4b3e      	ldr	r3, [pc, #248]	; (8002964 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800286a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800286c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002870:	60bb      	str	r3, [r7, #8]
 8002872:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002874:	2301      	movs	r3, #1
 8002876:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002878:	4b3b      	ldr	r3, [pc, #236]	; (8002968 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	4a3a      	ldr	r2, [pc, #232]	; (8002968 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 800287e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002882:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002884:	f7fe fd30 	bl	80012e8 <HAL_GetTick>
 8002888:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800288a:	e009      	b.n	80028a0 <HAL_RCCEx_PeriphCLKConfig+0x194>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800288c:	f7fe fd2c 	bl	80012e8 <HAL_GetTick>
 8002890:	4602      	mov	r2, r0
 8002892:	68fb      	ldr	r3, [r7, #12]
 8002894:	1ad3      	subs	r3, r2, r3
 8002896:	2b02      	cmp	r3, #2
 8002898:	d902      	bls.n	80028a0 <HAL_RCCEx_PeriphCLKConfig+0x194>
      {
        ret = HAL_TIMEOUT;
 800289a:	2303      	movs	r3, #3
 800289c:	74fb      	strb	r3, [r7, #19]
        break;
 800289e:	e005      	b.n	80028ac <HAL_RCCEx_PeriphCLKConfig+0x1a0>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80028a0:	4b31      	ldr	r3, [pc, #196]	; (8002968 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80028a8:	2b00      	cmp	r3, #0
 80028aa:	d0ef      	beq.n	800288c <HAL_RCCEx_PeriphCLKConfig+0x180>
      }
    }

    if(ret == HAL_OK)
 80028ac:	7cfb      	ldrb	r3, [r7, #19]
 80028ae:	2b00      	cmp	r3, #0
 80028b0:	d15c      	bne.n	800296c <HAL_RCCEx_PeriphCLKConfig+0x260>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80028b2:	4b2c      	ldr	r3, [pc, #176]	; (8002964 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80028b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80028b8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80028bc:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80028be:	697b      	ldr	r3, [r7, #20]
 80028c0:	2b00      	cmp	r3, #0
 80028c2:	d01f      	beq.n	8002904 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80028ca:	697a      	ldr	r2, [r7, #20]
 80028cc:	429a      	cmp	r2, r3
 80028ce:	d019      	beq.n	8002904 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80028d0:	4b24      	ldr	r3, [pc, #144]	; (8002964 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80028d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80028d6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80028da:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80028dc:	4b21      	ldr	r3, [pc, #132]	; (8002964 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80028de:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80028e2:	4a20      	ldr	r2, [pc, #128]	; (8002964 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80028e4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80028e8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80028ec:	4b1d      	ldr	r3, [pc, #116]	; (8002964 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80028ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80028f2:	4a1c      	ldr	r2, [pc, #112]	; (8002964 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80028f4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80028f8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80028fc:	4a19      	ldr	r2, [pc, #100]	; (8002964 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80028fe:	697b      	ldr	r3, [r7, #20]
 8002900:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002904:	697b      	ldr	r3, [r7, #20]
 8002906:	f003 0301 	and.w	r3, r3, #1
 800290a:	2b00      	cmp	r3, #0
 800290c:	d016      	beq.n	800293c <HAL_RCCEx_PeriphCLKConfig+0x230>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800290e:	f7fe fceb 	bl	80012e8 <HAL_GetTick>
 8002912:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002914:	e00b      	b.n	800292e <HAL_RCCEx_PeriphCLKConfig+0x222>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002916:	f7fe fce7 	bl	80012e8 <HAL_GetTick>
 800291a:	4602      	mov	r2, r0
 800291c:	68fb      	ldr	r3, [r7, #12]
 800291e:	1ad3      	subs	r3, r2, r3
 8002920:	f241 3288 	movw	r2, #5000	; 0x1388
 8002924:	4293      	cmp	r3, r2
 8002926:	d902      	bls.n	800292e <HAL_RCCEx_PeriphCLKConfig+0x222>
          {
            ret = HAL_TIMEOUT;
 8002928:	2303      	movs	r3, #3
 800292a:	74fb      	strb	r3, [r7, #19]
            break;
 800292c:	e006      	b.n	800293c <HAL_RCCEx_PeriphCLKConfig+0x230>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800292e:	4b0d      	ldr	r3, [pc, #52]	; (8002964 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002930:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002934:	f003 0302 	and.w	r3, r3, #2
 8002938:	2b00      	cmp	r3, #0
 800293a:	d0ec      	beq.n	8002916 <HAL_RCCEx_PeriphCLKConfig+0x20a>
          }
        }
      }

      if(ret == HAL_OK)
 800293c:	7cfb      	ldrb	r3, [r7, #19]
 800293e:	2b00      	cmp	r3, #0
 8002940:	d10c      	bne.n	800295c <HAL_RCCEx_PeriphCLKConfig+0x250>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002942:	4b08      	ldr	r3, [pc, #32]	; (8002964 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002944:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002948:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002952:	4904      	ldr	r1, [pc, #16]	; (8002964 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002954:	4313      	orrs	r3, r2
 8002956:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 800295a:	e009      	b.n	8002970 <HAL_RCCEx_PeriphCLKConfig+0x264>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800295c:	7cfb      	ldrb	r3, [r7, #19]
 800295e:	74bb      	strb	r3, [r7, #18]
 8002960:	e006      	b.n	8002970 <HAL_RCCEx_PeriphCLKConfig+0x264>
 8002962:	bf00      	nop
 8002964:	40021000 	.word	0x40021000
 8002968:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800296c:	7cfb      	ldrb	r3, [r7, #19]
 800296e:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002970:	7c7b      	ldrb	r3, [r7, #17]
 8002972:	2b01      	cmp	r3, #1
 8002974:	d105      	bne.n	8002982 <HAL_RCCEx_PeriphCLKConfig+0x276>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002976:	4b9e      	ldr	r3, [pc, #632]	; (8002bf0 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002978:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800297a:	4a9d      	ldr	r2, [pc, #628]	; (8002bf0 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800297c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002980:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	f003 0301 	and.w	r3, r3, #1
 800298a:	2b00      	cmp	r3, #0
 800298c:	d00a      	beq.n	80029a4 <HAL_RCCEx_PeriphCLKConfig+0x298>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800298e:	4b98      	ldr	r3, [pc, #608]	; (8002bf0 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002990:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002994:	f023 0203 	bic.w	r2, r3, #3
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800299c:	4994      	ldr	r1, [pc, #592]	; (8002bf0 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800299e:	4313      	orrs	r3, r2
 80029a0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	f003 0302 	and.w	r3, r3, #2
 80029ac:	2b00      	cmp	r3, #0
 80029ae:	d00a      	beq.n	80029c6 <HAL_RCCEx_PeriphCLKConfig+0x2ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80029b0:	4b8f      	ldr	r3, [pc, #572]	; (8002bf0 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80029b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80029b6:	f023 020c 	bic.w	r2, r3, #12
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80029be:	498c      	ldr	r1, [pc, #560]	; (8002bf0 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80029c0:	4313      	orrs	r3, r2
 80029c2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	f003 0304 	and.w	r3, r3, #4
 80029ce:	2b00      	cmp	r3, #0
 80029d0:	d00a      	beq.n	80029e8 <HAL_RCCEx_PeriphCLKConfig+0x2dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80029d2:	4b87      	ldr	r3, [pc, #540]	; (8002bf0 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80029d4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80029d8:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029e0:	4983      	ldr	r1, [pc, #524]	; (8002bf0 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80029e2:	4313      	orrs	r3, r2
 80029e4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	f003 0308 	and.w	r3, r3, #8
 80029f0:	2b00      	cmp	r3, #0
 80029f2:	d00a      	beq.n	8002a0a <HAL_RCCEx_PeriphCLKConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80029f4:	4b7e      	ldr	r3, [pc, #504]	; (8002bf0 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80029f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80029fa:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a02:	497b      	ldr	r1, [pc, #492]	; (8002bf0 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002a04:	4313      	orrs	r3, r2
 8002a06:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	f003 0310 	and.w	r3, r3, #16
 8002a12:	2b00      	cmp	r3, #0
 8002a14:	d00a      	beq.n	8002a2c <HAL_RCCEx_PeriphCLKConfig+0x320>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002a16:	4b76      	ldr	r3, [pc, #472]	; (8002bf0 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002a18:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a1c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002a24:	4972      	ldr	r1, [pc, #456]	; (8002bf0 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002a26:	4313      	orrs	r3, r2
 8002a28:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	f003 0320 	and.w	r3, r3, #32
 8002a34:	2b00      	cmp	r3, #0
 8002a36:	d00a      	beq.n	8002a4e <HAL_RCCEx_PeriphCLKConfig+0x342>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002a38:	4b6d      	ldr	r3, [pc, #436]	; (8002bf0 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002a3a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a3e:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002a46:	496a      	ldr	r1, [pc, #424]	; (8002bf0 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002a48:	4313      	orrs	r3, r2
 8002a4a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002a56:	2b00      	cmp	r3, #0
 8002a58:	d00a      	beq.n	8002a70 <HAL_RCCEx_PeriphCLKConfig+0x364>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002a5a:	4b65      	ldr	r3, [pc, #404]	; (8002bf0 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002a5c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a60:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002a68:	4961      	ldr	r1, [pc, #388]	; (8002bf0 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002a6a:	4313      	orrs	r3, r2
 8002a6c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002a78:	2b00      	cmp	r3, #0
 8002a7a:	d00a      	beq.n	8002a92 <HAL_RCCEx_PeriphCLKConfig+0x386>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002a7c:	4b5c      	ldr	r3, [pc, #368]	; (8002bf0 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002a7e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a82:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002a8a:	4959      	ldr	r1, [pc, #356]	; (8002bf0 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002a8c:	4313      	orrs	r3, r2
 8002a8e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002a9a:	2b00      	cmp	r3, #0
 8002a9c:	d00a      	beq.n	8002ab4 <HAL_RCCEx_PeriphCLKConfig+0x3a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002a9e:	4b54      	ldr	r3, [pc, #336]	; (8002bf0 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002aa0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002aa4:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002aac:	4950      	ldr	r1, [pc, #320]	; (8002bf0 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002aae:	4313      	orrs	r3, r2
 8002ab0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002abc:	2b00      	cmp	r3, #0
 8002abe:	d00a      	beq.n	8002ad6 <HAL_RCCEx_PeriphCLKConfig+0x3ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002ac0:	4b4b      	ldr	r3, [pc, #300]	; (8002bf0 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002ac2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002ac6:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002ace:	4948      	ldr	r1, [pc, #288]	; (8002bf0 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002ad0:	4313      	orrs	r3, r2
 8002ad2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ade:	2b00      	cmp	r3, #0
 8002ae0:	d00a      	beq.n	8002af8 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002ae2:	4b43      	ldr	r3, [pc, #268]	; (8002bf0 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002ae4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002ae8:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002af0:	493f      	ldr	r1, [pc, #252]	; (8002bf0 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002af2:	4313      	orrs	r3, r2
 8002af4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002b00:	2b00      	cmp	r3, #0
 8002b02:	d028      	beq.n	8002b56 <HAL_RCCEx_PeriphCLKConfig+0x44a>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002b04:	4b3a      	ldr	r3, [pc, #232]	; (8002bf0 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002b06:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b0a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002b12:	4937      	ldr	r1, [pc, #220]	; (8002bf0 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002b14:	4313      	orrs	r3, r2
 8002b16:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002b1e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002b22:	d106      	bne.n	8002b32 <HAL_RCCEx_PeriphCLKConfig+0x426>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002b24:	4b32      	ldr	r3, [pc, #200]	; (8002bf0 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002b26:	68db      	ldr	r3, [r3, #12]
 8002b28:	4a31      	ldr	r2, [pc, #196]	; (8002bf0 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002b2a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002b2e:	60d3      	str	r3, [r2, #12]
 8002b30:	e011      	b.n	8002b56 <HAL_RCCEx_PeriphCLKConfig+0x44a>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002b36:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002b3a:	d10c      	bne.n	8002b56 <HAL_RCCEx_PeriphCLKConfig+0x44a>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	3304      	adds	r3, #4
 8002b40:	2101      	movs	r1, #1
 8002b42:	4618      	mov	r0, r3
 8002b44:	f000 f8c8 	bl	8002cd8 <RCCEx_PLLSAI1_Config>
 8002b48:	4603      	mov	r3, r0
 8002b4a:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8002b4c:	7cfb      	ldrb	r3, [r7, #19]
 8002b4e:	2b00      	cmp	r3, #0
 8002b50:	d001      	beq.n	8002b56 <HAL_RCCEx_PeriphCLKConfig+0x44a>
        {
          /* set overall return value */
          status = ret;
 8002b52:	7cfb      	ldrb	r3, [r7, #19]
 8002b54:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002b5e:	2b00      	cmp	r3, #0
 8002b60:	d028      	beq.n	8002bb4 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8002b62:	4b23      	ldr	r3, [pc, #140]	; (8002bf0 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002b64:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b68:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b70:	491f      	ldr	r1, [pc, #124]	; (8002bf0 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002b72:	4313      	orrs	r3, r2
 8002b74:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b7c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002b80:	d106      	bne.n	8002b90 <HAL_RCCEx_PeriphCLKConfig+0x484>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002b82:	4b1b      	ldr	r3, [pc, #108]	; (8002bf0 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002b84:	68db      	ldr	r3, [r3, #12]
 8002b86:	4a1a      	ldr	r2, [pc, #104]	; (8002bf0 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002b88:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002b8c:	60d3      	str	r3, [r2, #12]
 8002b8e:	e011      	b.n	8002bb4 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b94:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002b98:	d10c      	bne.n	8002bb4 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	3304      	adds	r3, #4
 8002b9e:	2101      	movs	r1, #1
 8002ba0:	4618      	mov	r0, r3
 8002ba2:	f000 f899 	bl	8002cd8 <RCCEx_PLLSAI1_Config>
 8002ba6:	4603      	mov	r3, r0
 8002ba8:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002baa:	7cfb      	ldrb	r3, [r7, #19]
 8002bac:	2b00      	cmp	r3, #0
 8002bae:	d001      	beq.n	8002bb4 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* set overall return value */
        status = ret;
 8002bb0:	7cfb      	ldrb	r3, [r7, #19]
 8002bb2:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002bbc:	2b00      	cmp	r3, #0
 8002bbe:	d02b      	beq.n	8002c18 <HAL_RCCEx_PeriphCLKConfig+0x50c>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002bc0:	4b0b      	ldr	r3, [pc, #44]	; (8002bf0 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002bc2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002bc6:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002bce:	4908      	ldr	r1, [pc, #32]	; (8002bf0 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002bd0:	4313      	orrs	r3, r2
 8002bd2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002bda:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002bde:	d109      	bne.n	8002bf4 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002be0:	4b03      	ldr	r3, [pc, #12]	; (8002bf0 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002be2:	68db      	ldr	r3, [r3, #12]
 8002be4:	4a02      	ldr	r2, [pc, #8]	; (8002bf0 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002be6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002bea:	60d3      	str	r3, [r2, #12]
 8002bec:	e014      	b.n	8002c18 <HAL_RCCEx_PeriphCLKConfig+0x50c>
 8002bee:	bf00      	nop
 8002bf0:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002bf8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002bfc:	d10c      	bne.n	8002c18 <HAL_RCCEx_PeriphCLKConfig+0x50c>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	3304      	adds	r3, #4
 8002c02:	2101      	movs	r1, #1
 8002c04:	4618      	mov	r0, r3
 8002c06:	f000 f867 	bl	8002cd8 <RCCEx_PLLSAI1_Config>
 8002c0a:	4603      	mov	r3, r0
 8002c0c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002c0e:	7cfb      	ldrb	r3, [r7, #19]
 8002c10:	2b00      	cmp	r3, #0
 8002c12:	d001      	beq.n	8002c18 <HAL_RCCEx_PeriphCLKConfig+0x50c>
      {
        /* set overall return value */
        status = ret;
 8002c14:	7cfb      	ldrb	r3, [r7, #19]
 8002c16:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002c20:	2b00      	cmp	r3, #0
 8002c22:	d02f      	beq.n	8002c84 <HAL_RCCEx_PeriphCLKConfig+0x578>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002c24:	4b2b      	ldr	r3, [pc, #172]	; (8002cd4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002c26:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002c2a:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002c32:	4928      	ldr	r1, [pc, #160]	; (8002cd4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002c34:	4313      	orrs	r3, r2
 8002c36:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002c3e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002c42:	d10d      	bne.n	8002c60 <HAL_RCCEx_PeriphCLKConfig+0x554>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	3304      	adds	r3, #4
 8002c48:	2102      	movs	r1, #2
 8002c4a:	4618      	mov	r0, r3
 8002c4c:	f000 f844 	bl	8002cd8 <RCCEx_PLLSAI1_Config>
 8002c50:	4603      	mov	r3, r0
 8002c52:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002c54:	7cfb      	ldrb	r3, [r7, #19]
 8002c56:	2b00      	cmp	r3, #0
 8002c58:	d014      	beq.n	8002c84 <HAL_RCCEx_PeriphCLKConfig+0x578>
      {
        /* set overall return value */
        status = ret;
 8002c5a:	7cfb      	ldrb	r3, [r7, #19]
 8002c5c:	74bb      	strb	r3, [r7, #18]
 8002c5e:	e011      	b.n	8002c84 <HAL_RCCEx_PeriphCLKConfig+0x578>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002c64:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002c68:	d10c      	bne.n	8002c84 <HAL_RCCEx_PeriphCLKConfig+0x578>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	3320      	adds	r3, #32
 8002c6e:	2102      	movs	r1, #2
 8002c70:	4618      	mov	r0, r3
 8002c72:	f000 f921 	bl	8002eb8 <RCCEx_PLLSAI2_Config>
 8002c76:	4603      	mov	r3, r0
 8002c78:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002c7a:	7cfb      	ldrb	r3, [r7, #19]
 8002c7c:	2b00      	cmp	r3, #0
 8002c7e:	d001      	beq.n	8002c84 <HAL_RCCEx_PeriphCLKConfig+0x578>
      {
        /* set overall return value */
        status = ret;
 8002c80:	7cfb      	ldrb	r3, [r7, #19]
 8002c82:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002c8c:	2b00      	cmp	r3, #0
 8002c8e:	d00a      	beq.n	8002ca6 <HAL_RCCEx_PeriphCLKConfig+0x59a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8002c90:	4b10      	ldr	r3, [pc, #64]	; (8002cd4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002c92:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002c96:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002c9e:	490d      	ldr	r1, [pc, #52]	; (8002cd4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002ca0:	4313      	orrs	r3, r2
 8002ca2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002cae:	2b00      	cmp	r3, #0
 8002cb0:	d00b      	beq.n	8002cca <HAL_RCCEx_PeriphCLKConfig+0x5be>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8002cb2:	4b08      	ldr	r3, [pc, #32]	; (8002cd4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002cb4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002cb8:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002cc2:	4904      	ldr	r1, [pc, #16]	; (8002cd4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002cc4:	4313      	orrs	r3, r2
 8002cc6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8002cca:	7cbb      	ldrb	r3, [r7, #18]
}
 8002ccc:	4618      	mov	r0, r3
 8002cce:	3718      	adds	r7, #24
 8002cd0:	46bd      	mov	sp, r7
 8002cd2:	bd80      	pop	{r7, pc}
 8002cd4:	40021000 	.word	0x40021000

08002cd8 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8002cd8:	b580      	push	{r7, lr}
 8002cda:	b084      	sub	sp, #16
 8002cdc:	af00      	add	r7, sp, #0
 8002cde:	6078      	str	r0, [r7, #4]
 8002ce0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002ce2:	2300      	movs	r3, #0
 8002ce4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002ce6:	4b73      	ldr	r3, [pc, #460]	; (8002eb4 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002ce8:	68db      	ldr	r3, [r3, #12]
 8002cea:	f003 0303 	and.w	r3, r3, #3
 8002cee:	2b00      	cmp	r3, #0
 8002cf0:	d018      	beq.n	8002d24 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8002cf2:	4b70      	ldr	r3, [pc, #448]	; (8002eb4 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002cf4:	68db      	ldr	r3, [r3, #12]
 8002cf6:	f003 0203 	and.w	r2, r3, #3
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	429a      	cmp	r2, r3
 8002d00:	d10d      	bne.n	8002d1e <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	681b      	ldr	r3, [r3, #0]
       ||
 8002d06:	2b00      	cmp	r3, #0
 8002d08:	d009      	beq.n	8002d1e <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8002d0a:	4b6a      	ldr	r3, [pc, #424]	; (8002eb4 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002d0c:	68db      	ldr	r3, [r3, #12]
 8002d0e:	091b      	lsrs	r3, r3, #4
 8002d10:	f003 0307 	and.w	r3, r3, #7
 8002d14:	1c5a      	adds	r2, r3, #1
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	685b      	ldr	r3, [r3, #4]
       ||
 8002d1a:	429a      	cmp	r2, r3
 8002d1c:	d044      	beq.n	8002da8 <RCCEx_PLLSAI1_Config+0xd0>
#endif
      )
    {
      status = HAL_ERROR;
 8002d1e:	2301      	movs	r3, #1
 8002d20:	73fb      	strb	r3, [r7, #15]
 8002d22:	e041      	b.n	8002da8 <RCCEx_PLLSAI1_Config+0xd0>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	2b02      	cmp	r3, #2
 8002d2a:	d00c      	beq.n	8002d46 <RCCEx_PLLSAI1_Config+0x6e>
 8002d2c:	2b03      	cmp	r3, #3
 8002d2e:	d013      	beq.n	8002d58 <RCCEx_PLLSAI1_Config+0x80>
 8002d30:	2b01      	cmp	r3, #1
 8002d32:	d120      	bne.n	8002d76 <RCCEx_PLLSAI1_Config+0x9e>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002d34:	4b5f      	ldr	r3, [pc, #380]	; (8002eb4 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	f003 0302 	and.w	r3, r3, #2
 8002d3c:	2b00      	cmp	r3, #0
 8002d3e:	d11d      	bne.n	8002d7c <RCCEx_PLLSAI1_Config+0xa4>
      {
        status = HAL_ERROR;
 8002d40:	2301      	movs	r3, #1
 8002d42:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002d44:	e01a      	b.n	8002d7c <RCCEx_PLLSAI1_Config+0xa4>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002d46:	4b5b      	ldr	r3, [pc, #364]	; (8002eb4 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002d4e:	2b00      	cmp	r3, #0
 8002d50:	d116      	bne.n	8002d80 <RCCEx_PLLSAI1_Config+0xa8>
      {
        status = HAL_ERROR;
 8002d52:	2301      	movs	r3, #1
 8002d54:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002d56:	e013      	b.n	8002d80 <RCCEx_PLLSAI1_Config+0xa8>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002d58:	4b56      	ldr	r3, [pc, #344]	; (8002eb4 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d60:	2b00      	cmp	r3, #0
 8002d62:	d10f      	bne.n	8002d84 <RCCEx_PLLSAI1_Config+0xac>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002d64:	4b53      	ldr	r3, [pc, #332]	; (8002eb4 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002d6c:	2b00      	cmp	r3, #0
 8002d6e:	d109      	bne.n	8002d84 <RCCEx_PLLSAI1_Config+0xac>
        {
          status = HAL_ERROR;
 8002d70:	2301      	movs	r3, #1
 8002d72:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8002d74:	e006      	b.n	8002d84 <RCCEx_PLLSAI1_Config+0xac>
    default:
      status = HAL_ERROR;
 8002d76:	2301      	movs	r3, #1
 8002d78:	73fb      	strb	r3, [r7, #15]
      break;
 8002d7a:	e004      	b.n	8002d86 <RCCEx_PLLSAI1_Config+0xae>
      break;
 8002d7c:	bf00      	nop
 8002d7e:	e002      	b.n	8002d86 <RCCEx_PLLSAI1_Config+0xae>
      break;
 8002d80:	bf00      	nop
 8002d82:	e000      	b.n	8002d86 <RCCEx_PLLSAI1_Config+0xae>
      break;
 8002d84:	bf00      	nop
    }

    if(status == HAL_OK)
 8002d86:	7bfb      	ldrb	r3, [r7, #15]
 8002d88:	2b00      	cmp	r3, #0
 8002d8a:	d10d      	bne.n	8002da8 <RCCEx_PLLSAI1_Config+0xd0>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8002d8c:	4b49      	ldr	r3, [pc, #292]	; (8002eb4 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002d8e:	68db      	ldr	r3, [r3, #12]
 8002d90:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	6819      	ldr	r1, [r3, #0]
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	685b      	ldr	r3, [r3, #4]
 8002d9c:	3b01      	subs	r3, #1
 8002d9e:	011b      	lsls	r3, r3, #4
 8002da0:	430b      	orrs	r3, r1
 8002da2:	4944      	ldr	r1, [pc, #272]	; (8002eb4 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002da4:	4313      	orrs	r3, r2
 8002da6:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8002da8:	7bfb      	ldrb	r3, [r7, #15]
 8002daa:	2b00      	cmp	r3, #0
 8002dac:	d17d      	bne.n	8002eaa <RCCEx_PLLSAI1_Config+0x1d2>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8002dae:	4b41      	ldr	r3, [pc, #260]	; (8002eb4 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	4a40      	ldr	r2, [pc, #256]	; (8002eb4 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002db4:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8002db8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002dba:	f7fe fa95 	bl	80012e8 <HAL_GetTick>
 8002dbe:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002dc0:	e009      	b.n	8002dd6 <RCCEx_PLLSAI1_Config+0xfe>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002dc2:	f7fe fa91 	bl	80012e8 <HAL_GetTick>
 8002dc6:	4602      	mov	r2, r0
 8002dc8:	68bb      	ldr	r3, [r7, #8]
 8002dca:	1ad3      	subs	r3, r2, r3
 8002dcc:	2b02      	cmp	r3, #2
 8002dce:	d902      	bls.n	8002dd6 <RCCEx_PLLSAI1_Config+0xfe>
      {
        status = HAL_TIMEOUT;
 8002dd0:	2303      	movs	r3, #3
 8002dd2:	73fb      	strb	r3, [r7, #15]
        break;
 8002dd4:	e005      	b.n	8002de2 <RCCEx_PLLSAI1_Config+0x10a>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002dd6:	4b37      	ldr	r3, [pc, #220]	; (8002eb4 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002dde:	2b00      	cmp	r3, #0
 8002de0:	d1ef      	bne.n	8002dc2 <RCCEx_PLLSAI1_Config+0xea>
      }
    }

    if(status == HAL_OK)
 8002de2:	7bfb      	ldrb	r3, [r7, #15]
 8002de4:	2b00      	cmp	r3, #0
 8002de6:	d160      	bne.n	8002eaa <RCCEx_PLLSAI1_Config+0x1d2>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8002de8:	683b      	ldr	r3, [r7, #0]
 8002dea:	2b00      	cmp	r3, #0
 8002dec:	d111      	bne.n	8002e12 <RCCEx_PLLSAI1_Config+0x13a>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002dee:	4b31      	ldr	r3, [pc, #196]	; (8002eb4 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002df0:	691b      	ldr	r3, [r3, #16]
 8002df2:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8002df6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002dfa:	687a      	ldr	r2, [r7, #4]
 8002dfc:	6892      	ldr	r2, [r2, #8]
 8002dfe:	0211      	lsls	r1, r2, #8
 8002e00:	687a      	ldr	r2, [r7, #4]
 8002e02:	68d2      	ldr	r2, [r2, #12]
 8002e04:	0912      	lsrs	r2, r2, #4
 8002e06:	0452      	lsls	r2, r2, #17
 8002e08:	430a      	orrs	r2, r1
 8002e0a:	492a      	ldr	r1, [pc, #168]	; (8002eb4 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002e0c:	4313      	orrs	r3, r2
 8002e0e:	610b      	str	r3, [r1, #16]
 8002e10:	e027      	b.n	8002e62 <RCCEx_PLLSAI1_Config+0x18a>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8002e12:	683b      	ldr	r3, [r7, #0]
 8002e14:	2b01      	cmp	r3, #1
 8002e16:	d112      	bne.n	8002e3e <RCCEx_PLLSAI1_Config+0x166>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002e18:	4b26      	ldr	r3, [pc, #152]	; (8002eb4 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002e1a:	691b      	ldr	r3, [r3, #16]
 8002e1c:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8002e20:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002e24:	687a      	ldr	r2, [r7, #4]
 8002e26:	6892      	ldr	r2, [r2, #8]
 8002e28:	0211      	lsls	r1, r2, #8
 8002e2a:	687a      	ldr	r2, [r7, #4]
 8002e2c:	6912      	ldr	r2, [r2, #16]
 8002e2e:	0852      	lsrs	r2, r2, #1
 8002e30:	3a01      	subs	r2, #1
 8002e32:	0552      	lsls	r2, r2, #21
 8002e34:	430a      	orrs	r2, r1
 8002e36:	491f      	ldr	r1, [pc, #124]	; (8002eb4 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002e38:	4313      	orrs	r3, r2
 8002e3a:	610b      	str	r3, [r1, #16]
 8002e3c:	e011      	b.n	8002e62 <RCCEx_PLLSAI1_Config+0x18a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002e3e:	4b1d      	ldr	r3, [pc, #116]	; (8002eb4 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002e40:	691b      	ldr	r3, [r3, #16]
 8002e42:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8002e46:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002e4a:	687a      	ldr	r2, [r7, #4]
 8002e4c:	6892      	ldr	r2, [r2, #8]
 8002e4e:	0211      	lsls	r1, r2, #8
 8002e50:	687a      	ldr	r2, [r7, #4]
 8002e52:	6952      	ldr	r2, [r2, #20]
 8002e54:	0852      	lsrs	r2, r2, #1
 8002e56:	3a01      	subs	r2, #1
 8002e58:	0652      	lsls	r2, r2, #25
 8002e5a:	430a      	orrs	r2, r1
 8002e5c:	4915      	ldr	r1, [pc, #84]	; (8002eb4 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002e5e:	4313      	orrs	r3, r2
 8002e60:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8002e62:	4b14      	ldr	r3, [pc, #80]	; (8002eb4 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	4a13      	ldr	r2, [pc, #76]	; (8002eb4 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002e68:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002e6c:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002e6e:	f7fe fa3b 	bl	80012e8 <HAL_GetTick>
 8002e72:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002e74:	e009      	b.n	8002e8a <RCCEx_PLLSAI1_Config+0x1b2>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002e76:	f7fe fa37 	bl	80012e8 <HAL_GetTick>
 8002e7a:	4602      	mov	r2, r0
 8002e7c:	68bb      	ldr	r3, [r7, #8]
 8002e7e:	1ad3      	subs	r3, r2, r3
 8002e80:	2b02      	cmp	r3, #2
 8002e82:	d902      	bls.n	8002e8a <RCCEx_PLLSAI1_Config+0x1b2>
        {
          status = HAL_TIMEOUT;
 8002e84:	2303      	movs	r3, #3
 8002e86:	73fb      	strb	r3, [r7, #15]
          break;
 8002e88:	e005      	b.n	8002e96 <RCCEx_PLLSAI1_Config+0x1be>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002e8a:	4b0a      	ldr	r3, [pc, #40]	; (8002eb4 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002e92:	2b00      	cmp	r3, #0
 8002e94:	d0ef      	beq.n	8002e76 <RCCEx_PLLSAI1_Config+0x19e>
        }
      }

      if(status == HAL_OK)
 8002e96:	7bfb      	ldrb	r3, [r7, #15]
 8002e98:	2b00      	cmp	r3, #0
 8002e9a:	d106      	bne.n	8002eaa <RCCEx_PLLSAI1_Config+0x1d2>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8002e9c:	4b05      	ldr	r3, [pc, #20]	; (8002eb4 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002e9e:	691a      	ldr	r2, [r3, #16]
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	699b      	ldr	r3, [r3, #24]
 8002ea4:	4903      	ldr	r1, [pc, #12]	; (8002eb4 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002ea6:	4313      	orrs	r3, r2
 8002ea8:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8002eaa:	7bfb      	ldrb	r3, [r7, #15]
}
 8002eac:	4618      	mov	r0, r3
 8002eae:	3710      	adds	r7, #16
 8002eb0:	46bd      	mov	sp, r7
 8002eb2:	bd80      	pop	{r7, pc}
 8002eb4:	40021000 	.word	0x40021000

08002eb8 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8002eb8:	b580      	push	{r7, lr}
 8002eba:	b084      	sub	sp, #16
 8002ebc:	af00      	add	r7, sp, #0
 8002ebe:	6078      	str	r0, [r7, #4]
 8002ec0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002ec2:	2300      	movs	r3, #0
 8002ec4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002ec6:	4b68      	ldr	r3, [pc, #416]	; (8003068 <RCCEx_PLLSAI2_Config+0x1b0>)
 8002ec8:	68db      	ldr	r3, [r3, #12]
 8002eca:	f003 0303 	and.w	r3, r3, #3
 8002ece:	2b00      	cmp	r3, #0
 8002ed0:	d018      	beq.n	8002f04 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8002ed2:	4b65      	ldr	r3, [pc, #404]	; (8003068 <RCCEx_PLLSAI2_Config+0x1b0>)
 8002ed4:	68db      	ldr	r3, [r3, #12]
 8002ed6:	f003 0203 	and.w	r2, r3, #3
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	429a      	cmp	r2, r3
 8002ee0:	d10d      	bne.n	8002efe <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	681b      	ldr	r3, [r3, #0]
       ||
 8002ee6:	2b00      	cmp	r3, #0
 8002ee8:	d009      	beq.n	8002efe <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8002eea:	4b5f      	ldr	r3, [pc, #380]	; (8003068 <RCCEx_PLLSAI2_Config+0x1b0>)
 8002eec:	68db      	ldr	r3, [r3, #12]
 8002eee:	091b      	lsrs	r3, r3, #4
 8002ef0:	f003 0307 	and.w	r3, r3, #7
 8002ef4:	1c5a      	adds	r2, r3, #1
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	685b      	ldr	r3, [r3, #4]
       ||
 8002efa:	429a      	cmp	r2, r3
 8002efc:	d044      	beq.n	8002f88 <RCCEx_PLLSAI2_Config+0xd0>
#endif
      )
    {
      status = HAL_ERROR;
 8002efe:	2301      	movs	r3, #1
 8002f00:	73fb      	strb	r3, [r7, #15]
 8002f02:	e041      	b.n	8002f88 <RCCEx_PLLSAI2_Config+0xd0>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	2b02      	cmp	r3, #2
 8002f0a:	d00c      	beq.n	8002f26 <RCCEx_PLLSAI2_Config+0x6e>
 8002f0c:	2b03      	cmp	r3, #3
 8002f0e:	d013      	beq.n	8002f38 <RCCEx_PLLSAI2_Config+0x80>
 8002f10:	2b01      	cmp	r3, #1
 8002f12:	d120      	bne.n	8002f56 <RCCEx_PLLSAI2_Config+0x9e>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002f14:	4b54      	ldr	r3, [pc, #336]	; (8003068 <RCCEx_PLLSAI2_Config+0x1b0>)
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	f003 0302 	and.w	r3, r3, #2
 8002f1c:	2b00      	cmp	r3, #0
 8002f1e:	d11d      	bne.n	8002f5c <RCCEx_PLLSAI2_Config+0xa4>
      {
        status = HAL_ERROR;
 8002f20:	2301      	movs	r3, #1
 8002f22:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002f24:	e01a      	b.n	8002f5c <RCCEx_PLLSAI2_Config+0xa4>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002f26:	4b50      	ldr	r3, [pc, #320]	; (8003068 <RCCEx_PLLSAI2_Config+0x1b0>)
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002f2e:	2b00      	cmp	r3, #0
 8002f30:	d116      	bne.n	8002f60 <RCCEx_PLLSAI2_Config+0xa8>
      {
        status = HAL_ERROR;
 8002f32:	2301      	movs	r3, #1
 8002f34:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002f36:	e013      	b.n	8002f60 <RCCEx_PLLSAI2_Config+0xa8>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002f38:	4b4b      	ldr	r3, [pc, #300]	; (8003068 <RCCEx_PLLSAI2_Config+0x1b0>)
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f40:	2b00      	cmp	r3, #0
 8002f42:	d10f      	bne.n	8002f64 <RCCEx_PLLSAI2_Config+0xac>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002f44:	4b48      	ldr	r3, [pc, #288]	; (8003068 <RCCEx_PLLSAI2_Config+0x1b0>)
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002f4c:	2b00      	cmp	r3, #0
 8002f4e:	d109      	bne.n	8002f64 <RCCEx_PLLSAI2_Config+0xac>
        {
          status = HAL_ERROR;
 8002f50:	2301      	movs	r3, #1
 8002f52:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8002f54:	e006      	b.n	8002f64 <RCCEx_PLLSAI2_Config+0xac>
    default:
      status = HAL_ERROR;
 8002f56:	2301      	movs	r3, #1
 8002f58:	73fb      	strb	r3, [r7, #15]
      break;
 8002f5a:	e004      	b.n	8002f66 <RCCEx_PLLSAI2_Config+0xae>
      break;
 8002f5c:	bf00      	nop
 8002f5e:	e002      	b.n	8002f66 <RCCEx_PLLSAI2_Config+0xae>
      break;
 8002f60:	bf00      	nop
 8002f62:	e000      	b.n	8002f66 <RCCEx_PLLSAI2_Config+0xae>
      break;
 8002f64:	bf00      	nop
    }

    if(status == HAL_OK)
 8002f66:	7bfb      	ldrb	r3, [r7, #15]
 8002f68:	2b00      	cmp	r3, #0
 8002f6a:	d10d      	bne.n	8002f88 <RCCEx_PLLSAI2_Config+0xd0>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8002f6c:	4b3e      	ldr	r3, [pc, #248]	; (8003068 <RCCEx_PLLSAI2_Config+0x1b0>)
 8002f6e:	68db      	ldr	r3, [r3, #12]
 8002f70:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	6819      	ldr	r1, [r3, #0]
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	685b      	ldr	r3, [r3, #4]
 8002f7c:	3b01      	subs	r3, #1
 8002f7e:	011b      	lsls	r3, r3, #4
 8002f80:	430b      	orrs	r3, r1
 8002f82:	4939      	ldr	r1, [pc, #228]	; (8003068 <RCCEx_PLLSAI2_Config+0x1b0>)
 8002f84:	4313      	orrs	r3, r2
 8002f86:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8002f88:	7bfb      	ldrb	r3, [r7, #15]
 8002f8a:	2b00      	cmp	r3, #0
 8002f8c:	d167      	bne.n	800305e <RCCEx_PLLSAI2_Config+0x1a6>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8002f8e:	4b36      	ldr	r3, [pc, #216]	; (8003068 <RCCEx_PLLSAI2_Config+0x1b0>)
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	4a35      	ldr	r2, [pc, #212]	; (8003068 <RCCEx_PLLSAI2_Config+0x1b0>)
 8002f94:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002f98:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002f9a:	f7fe f9a5 	bl	80012e8 <HAL_GetTick>
 8002f9e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8002fa0:	e009      	b.n	8002fb6 <RCCEx_PLLSAI2_Config+0xfe>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8002fa2:	f7fe f9a1 	bl	80012e8 <HAL_GetTick>
 8002fa6:	4602      	mov	r2, r0
 8002fa8:	68bb      	ldr	r3, [r7, #8]
 8002faa:	1ad3      	subs	r3, r2, r3
 8002fac:	2b02      	cmp	r3, #2
 8002fae:	d902      	bls.n	8002fb6 <RCCEx_PLLSAI2_Config+0xfe>
      {
        status = HAL_TIMEOUT;
 8002fb0:	2303      	movs	r3, #3
 8002fb2:	73fb      	strb	r3, [r7, #15]
        break;
 8002fb4:	e005      	b.n	8002fc2 <RCCEx_PLLSAI2_Config+0x10a>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8002fb6:	4b2c      	ldr	r3, [pc, #176]	; (8003068 <RCCEx_PLLSAI2_Config+0x1b0>)
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002fbe:	2b00      	cmp	r3, #0
 8002fc0:	d1ef      	bne.n	8002fa2 <RCCEx_PLLSAI2_Config+0xea>
      }
    }

    if(status == HAL_OK)
 8002fc2:	7bfb      	ldrb	r3, [r7, #15]
 8002fc4:	2b00      	cmp	r3, #0
 8002fc6:	d14a      	bne.n	800305e <RCCEx_PLLSAI2_Config+0x1a6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8002fc8:	683b      	ldr	r3, [r7, #0]
 8002fca:	2b00      	cmp	r3, #0
 8002fcc:	d111      	bne.n	8002ff2 <RCCEx_PLLSAI2_Config+0x13a>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8002fce:	4b26      	ldr	r3, [pc, #152]	; (8003068 <RCCEx_PLLSAI2_Config+0x1b0>)
 8002fd0:	695b      	ldr	r3, [r3, #20]
 8002fd2:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8002fd6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002fda:	687a      	ldr	r2, [r7, #4]
 8002fdc:	6892      	ldr	r2, [r2, #8]
 8002fde:	0211      	lsls	r1, r2, #8
 8002fe0:	687a      	ldr	r2, [r7, #4]
 8002fe2:	68d2      	ldr	r2, [r2, #12]
 8002fe4:	0912      	lsrs	r2, r2, #4
 8002fe6:	0452      	lsls	r2, r2, #17
 8002fe8:	430a      	orrs	r2, r1
 8002fea:	491f      	ldr	r1, [pc, #124]	; (8003068 <RCCEx_PLLSAI2_Config+0x1b0>)
 8002fec:	4313      	orrs	r3, r2
 8002fee:	614b      	str	r3, [r1, #20]
 8002ff0:	e011      	b.n	8003016 <RCCEx_PLLSAI2_Config+0x15e>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8002ff2:	4b1d      	ldr	r3, [pc, #116]	; (8003068 <RCCEx_PLLSAI2_Config+0x1b0>)
 8002ff4:	695b      	ldr	r3, [r3, #20]
 8002ff6:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8002ffa:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002ffe:	687a      	ldr	r2, [r7, #4]
 8003000:	6892      	ldr	r2, [r2, #8]
 8003002:	0211      	lsls	r1, r2, #8
 8003004:	687a      	ldr	r2, [r7, #4]
 8003006:	6912      	ldr	r2, [r2, #16]
 8003008:	0852      	lsrs	r2, r2, #1
 800300a:	3a01      	subs	r2, #1
 800300c:	0652      	lsls	r2, r2, #25
 800300e:	430a      	orrs	r2, r1
 8003010:	4915      	ldr	r1, [pc, #84]	; (8003068 <RCCEx_PLLSAI2_Config+0x1b0>)
 8003012:	4313      	orrs	r3, r2
 8003014:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8003016:	4b14      	ldr	r3, [pc, #80]	; (8003068 <RCCEx_PLLSAI2_Config+0x1b0>)
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	4a13      	ldr	r2, [pc, #76]	; (8003068 <RCCEx_PLLSAI2_Config+0x1b0>)
 800301c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003020:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003022:	f7fe f961 	bl	80012e8 <HAL_GetTick>
 8003026:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8003028:	e009      	b.n	800303e <RCCEx_PLLSAI2_Config+0x186>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 800302a:	f7fe f95d 	bl	80012e8 <HAL_GetTick>
 800302e:	4602      	mov	r2, r0
 8003030:	68bb      	ldr	r3, [r7, #8]
 8003032:	1ad3      	subs	r3, r2, r3
 8003034:	2b02      	cmp	r3, #2
 8003036:	d902      	bls.n	800303e <RCCEx_PLLSAI2_Config+0x186>
        {
          status = HAL_TIMEOUT;
 8003038:	2303      	movs	r3, #3
 800303a:	73fb      	strb	r3, [r7, #15]
          break;
 800303c:	e005      	b.n	800304a <RCCEx_PLLSAI2_Config+0x192>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800303e:	4b0a      	ldr	r3, [pc, #40]	; (8003068 <RCCEx_PLLSAI2_Config+0x1b0>)
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003046:	2b00      	cmp	r3, #0
 8003048:	d0ef      	beq.n	800302a <RCCEx_PLLSAI2_Config+0x172>
        }
      }

      if(status == HAL_OK)
 800304a:	7bfb      	ldrb	r3, [r7, #15]
 800304c:	2b00      	cmp	r3, #0
 800304e:	d106      	bne.n	800305e <RCCEx_PLLSAI2_Config+0x1a6>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8003050:	4b05      	ldr	r3, [pc, #20]	; (8003068 <RCCEx_PLLSAI2_Config+0x1b0>)
 8003052:	695a      	ldr	r2, [r3, #20]
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	695b      	ldr	r3, [r3, #20]
 8003058:	4903      	ldr	r1, [pc, #12]	; (8003068 <RCCEx_PLLSAI2_Config+0x1b0>)
 800305a:	4313      	orrs	r3, r2
 800305c:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 800305e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003060:	4618      	mov	r0, r3
 8003062:	3710      	adds	r7, #16
 8003064:	46bd      	mov	sp, r7
 8003066:	bd80      	pop	{r7, pc}
 8003068:	40021000 	.word	0x40021000

0800306c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800306c:	b580      	push	{r7, lr}
 800306e:	b084      	sub	sp, #16
 8003070:	af00      	add	r7, sp, #0
 8003072:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	2b00      	cmp	r3, #0
 8003078:	d101      	bne.n	800307e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800307a:	2301      	movs	r3, #1
 800307c:	e07c      	b.n	8003178 <HAL_SPI_Init+0x10c>
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	2200      	movs	r2, #0
 8003082:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800308a:	b2db      	uxtb	r3, r3
 800308c:	2b00      	cmp	r3, #0
 800308e:	d106      	bne.n	800309e <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	2200      	movs	r2, #0
 8003094:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003098:	6878      	ldr	r0, [r7, #4]
 800309a:	f7fd fd91 	bl	8000bc0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	2202      	movs	r2, #2
 80030a2:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	681a      	ldr	r2, [r3, #0]
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80030b4:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	68db      	ldr	r3, [r3, #12]
 80030ba:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80030be:	d902      	bls.n	80030c6 <HAL_SPI_Init+0x5a>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80030c0:	2300      	movs	r3, #0
 80030c2:	60fb      	str	r3, [r7, #12]
 80030c4:	e002      	b.n	80030cc <HAL_SPI_Init+0x60>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80030c6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80030ca:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	68db      	ldr	r3, [r3, #12]
 80030d0:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 80030d4:	d007      	beq.n	80030e6 <HAL_SPI_Init+0x7a>
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	68db      	ldr	r3, [r3, #12]
 80030da:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80030de:	d002      	beq.n	80030e6 <HAL_SPI_Init+0x7a>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	2200      	movs	r2, #0
 80030e4:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Align the CRC Length on the data size */
  if (hspi->Init.CRCLength == SPI_CRC_LENGTH_DATASIZE)
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030ea:	2b00      	cmp	r3, #0
 80030ec:	d10b      	bne.n	8003106 <HAL_SPI_Init+0x9a>
  {
    /* CRC Length aligned on the data size : value set by default */
    if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	68db      	ldr	r3, [r3, #12]
 80030f2:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80030f6:	d903      	bls.n	8003100 <HAL_SPI_Init+0x94>
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_16BIT;
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	2202      	movs	r2, #2
 80030fc:	631a      	str	r2, [r3, #48]	; 0x30
 80030fe:	e002      	b.n	8003106 <HAL_SPI_Init+0x9a>
    }
    else
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_8BIT;
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	2201      	movs	r2, #1
 8003104:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction |
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	685a      	ldr	r2, [r3, #4]
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	689b      	ldr	r3, [r3, #8]
 800310e:	431a      	orrs	r2, r3
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	691b      	ldr	r3, [r3, #16]
 8003114:	431a      	orrs	r2, r3
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	695b      	ldr	r3, [r3, #20]
 800311a:	431a      	orrs	r2, r3
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	699b      	ldr	r3, [r3, #24]
 8003120:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003124:	431a      	orrs	r2, r3
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	69db      	ldr	r3, [r3, #28]
 800312a:	431a      	orrs	r2, r3
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	6a1b      	ldr	r3, [r3, #32]
 8003130:	ea42 0103 	orr.w	r1, r2, r3
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	430a      	orrs	r2, r1
 800313e:	601a      	str	r2, [r3, #0]
    hspi->Instance->CR1 |= SPI_CR1_CRCL;
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode |
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	699b      	ldr	r3, [r3, #24]
 8003144:	0c1b      	lsrs	r3, r3, #16
 8003146:	f003 0204 	and.w	r2, r3, #4
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800314e:	431a      	orrs	r2, r3
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003154:	431a      	orrs	r2, r3
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	68db      	ldr	r3, [r3, #12]
 800315a:	ea42 0103 	orr.w	r1, r2, r3
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	68fa      	ldr	r2, [r7, #12]
 8003164:	430a      	orrs	r2, r1
 8003166:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	2200      	movs	r2, #0
 800316c:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	2201      	movs	r2, #1
 8003172:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8003176:	2300      	movs	r3, #0
}
 8003178:	4618      	mov	r0, r3
 800317a:	3710      	adds	r7, #16
 800317c:	46bd      	mov	sp, r7
 800317e:	bd80      	pop	{r7, pc}

08003180 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003180:	b580      	push	{r7, lr}
 8003182:	b088      	sub	sp, #32
 8003184:	af00      	add	r7, sp, #0
 8003186:	60f8      	str	r0, [r7, #12]
 8003188:	60b9      	str	r1, [r7, #8]
 800318a:	603b      	str	r3, [r7, #0]
 800318c:	4613      	mov	r3, r2
 800318e:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8003190:	2300      	movs	r3, #0
 8003192:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003194:	68fb      	ldr	r3, [r7, #12]
 8003196:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800319a:	2b01      	cmp	r3, #1
 800319c:	d101      	bne.n	80031a2 <HAL_SPI_Transmit+0x22>
 800319e:	2302      	movs	r3, #2
 80031a0:	e150      	b.n	8003444 <HAL_SPI_Transmit+0x2c4>
 80031a2:	68fb      	ldr	r3, [r7, #12]
 80031a4:	2201      	movs	r2, #1
 80031a6:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80031aa:	f7fe f89d 	bl	80012e8 <HAL_GetTick>
 80031ae:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 80031b0:	88fb      	ldrh	r3, [r7, #6]
 80031b2:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 80031b4:	68fb      	ldr	r3, [r7, #12]
 80031b6:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80031ba:	b2db      	uxtb	r3, r3
 80031bc:	2b01      	cmp	r3, #1
 80031be:	d002      	beq.n	80031c6 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 80031c0:	2302      	movs	r3, #2
 80031c2:	77fb      	strb	r3, [r7, #31]
    goto error;
 80031c4:	e135      	b.n	8003432 <HAL_SPI_Transmit+0x2b2>
  }

  if ((pData == NULL) || (Size == 0U))
 80031c6:	68bb      	ldr	r3, [r7, #8]
 80031c8:	2b00      	cmp	r3, #0
 80031ca:	d002      	beq.n	80031d2 <HAL_SPI_Transmit+0x52>
 80031cc:	88fb      	ldrh	r3, [r7, #6]
 80031ce:	2b00      	cmp	r3, #0
 80031d0:	d102      	bne.n	80031d8 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 80031d2:	2301      	movs	r3, #1
 80031d4:	77fb      	strb	r3, [r7, #31]
    goto error;
 80031d6:	e12c      	b.n	8003432 <HAL_SPI_Transmit+0x2b2>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80031d8:	68fb      	ldr	r3, [r7, #12]
 80031da:	2203      	movs	r2, #3
 80031dc:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80031e0:	68fb      	ldr	r3, [r7, #12]
 80031e2:	2200      	movs	r2, #0
 80031e4:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80031e6:	68fb      	ldr	r3, [r7, #12]
 80031e8:	68ba      	ldr	r2, [r7, #8]
 80031ea:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 80031ec:	68fb      	ldr	r3, [r7, #12]
 80031ee:	88fa      	ldrh	r2, [r7, #6]
 80031f0:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 80031f2:	68fb      	ldr	r3, [r7, #12]
 80031f4:	88fa      	ldrh	r2, [r7, #6]
 80031f6:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80031f8:	68fb      	ldr	r3, [r7, #12]
 80031fa:	2200      	movs	r2, #0
 80031fc:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 80031fe:	68fb      	ldr	r3, [r7, #12]
 8003200:	2200      	movs	r2, #0
 8003202:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 8003206:	68fb      	ldr	r3, [r7, #12]
 8003208:	2200      	movs	r2, #0
 800320a:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 800320e:	68fb      	ldr	r3, [r7, #12]
 8003210:	2200      	movs	r2, #0
 8003212:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 8003214:	68fb      	ldr	r3, [r7, #12]
 8003216:	2200      	movs	r2, #0
 8003218:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800321a:	68fb      	ldr	r3, [r7, #12]
 800321c:	689b      	ldr	r3, [r3, #8]
 800321e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003222:	d107      	bne.n	8003234 <HAL_SPI_Transmit+0xb4>
  {
    SPI_1LINE_TX(hspi);
 8003224:	68fb      	ldr	r3, [r7, #12]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	681a      	ldr	r2, [r3, #0]
 800322a:	68fb      	ldr	r3, [r7, #12]
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003232:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003234:	68fb      	ldr	r3, [r7, #12]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800323e:	2b40      	cmp	r3, #64	; 0x40
 8003240:	d007      	beq.n	8003252 <HAL_SPI_Transmit+0xd2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003242:	68fb      	ldr	r3, [r7, #12]
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	681a      	ldr	r2, [r3, #0]
 8003248:	68fb      	ldr	r3, [r7, #12]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003250:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003252:	68fb      	ldr	r3, [r7, #12]
 8003254:	68db      	ldr	r3, [r3, #12]
 8003256:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800325a:	d94b      	bls.n	80032f4 <HAL_SPI_Transmit+0x174>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800325c:	68fb      	ldr	r3, [r7, #12]
 800325e:	685b      	ldr	r3, [r3, #4]
 8003260:	2b00      	cmp	r3, #0
 8003262:	d002      	beq.n	800326a <HAL_SPI_Transmit+0xea>
 8003264:	8afb      	ldrh	r3, [r7, #22]
 8003266:	2b01      	cmp	r3, #1
 8003268:	d13e      	bne.n	80032e8 <HAL_SPI_Transmit+0x168>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800326a:	68fb      	ldr	r3, [r7, #12]
 800326c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800326e:	881a      	ldrh	r2, [r3, #0]
 8003270:	68fb      	ldr	r3, [r7, #12]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003276:	68fb      	ldr	r3, [r7, #12]
 8003278:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800327a:	1c9a      	adds	r2, r3, #2
 800327c:	68fb      	ldr	r3, [r7, #12]
 800327e:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8003280:	68fb      	ldr	r3, [r7, #12]
 8003282:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003284:	b29b      	uxth	r3, r3
 8003286:	3b01      	subs	r3, #1
 8003288:	b29a      	uxth	r2, r3
 800328a:	68fb      	ldr	r3, [r7, #12]
 800328c:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800328e:	e02b      	b.n	80032e8 <HAL_SPI_Transmit+0x168>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003290:	68fb      	ldr	r3, [r7, #12]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	689b      	ldr	r3, [r3, #8]
 8003296:	f003 0302 	and.w	r3, r3, #2
 800329a:	2b02      	cmp	r3, #2
 800329c:	d112      	bne.n	80032c4 <HAL_SPI_Transmit+0x144>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800329e:	68fb      	ldr	r3, [r7, #12]
 80032a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80032a2:	881a      	ldrh	r2, [r3, #0]
 80032a4:	68fb      	ldr	r3, [r7, #12]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80032aa:	68fb      	ldr	r3, [r7, #12]
 80032ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80032ae:	1c9a      	adds	r2, r3, #2
 80032b0:	68fb      	ldr	r3, [r7, #12]
 80032b2:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80032b4:	68fb      	ldr	r3, [r7, #12]
 80032b6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80032b8:	b29b      	uxth	r3, r3
 80032ba:	3b01      	subs	r3, #1
 80032bc:	b29a      	uxth	r2, r3
 80032be:	68fb      	ldr	r3, [r7, #12]
 80032c0:	87da      	strh	r2, [r3, #62]	; 0x3e
 80032c2:	e011      	b.n	80032e8 <HAL_SPI_Transmit+0x168>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80032c4:	f7fe f810 	bl	80012e8 <HAL_GetTick>
 80032c8:	4602      	mov	r2, r0
 80032ca:	69bb      	ldr	r3, [r7, #24]
 80032cc:	1ad3      	subs	r3, r2, r3
 80032ce:	683a      	ldr	r2, [r7, #0]
 80032d0:	429a      	cmp	r2, r3
 80032d2:	d803      	bhi.n	80032dc <HAL_SPI_Transmit+0x15c>
 80032d4:	683b      	ldr	r3, [r7, #0]
 80032d6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80032da:	d102      	bne.n	80032e2 <HAL_SPI_Transmit+0x162>
 80032dc:	683b      	ldr	r3, [r7, #0]
 80032de:	2b00      	cmp	r3, #0
 80032e0:	d102      	bne.n	80032e8 <HAL_SPI_Transmit+0x168>
        {
          errorcode = HAL_TIMEOUT;
 80032e2:	2303      	movs	r3, #3
 80032e4:	77fb      	strb	r3, [r7, #31]
          goto error;
 80032e6:	e0a4      	b.n	8003432 <HAL_SPI_Transmit+0x2b2>
    while (hspi->TxXferCount > 0U)
 80032e8:	68fb      	ldr	r3, [r7, #12]
 80032ea:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80032ec:	b29b      	uxth	r3, r3
 80032ee:	2b00      	cmp	r3, #0
 80032f0:	d1ce      	bne.n	8003290 <HAL_SPI_Transmit+0x110>
 80032f2:	e07c      	b.n	80033ee <HAL_SPI_Transmit+0x26e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80032f4:	68fb      	ldr	r3, [r7, #12]
 80032f6:	685b      	ldr	r3, [r3, #4]
 80032f8:	2b00      	cmp	r3, #0
 80032fa:	d002      	beq.n	8003302 <HAL_SPI_Transmit+0x182>
 80032fc:	8afb      	ldrh	r3, [r7, #22]
 80032fe:	2b01      	cmp	r3, #1
 8003300:	d170      	bne.n	80033e4 <HAL_SPI_Transmit+0x264>
    {
      if (hspi->TxXferCount > 1U)
 8003302:	68fb      	ldr	r3, [r7, #12]
 8003304:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003306:	b29b      	uxth	r3, r3
 8003308:	2b01      	cmp	r3, #1
 800330a:	d912      	bls.n	8003332 <HAL_SPI_Transmit+0x1b2>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800330c:	68fb      	ldr	r3, [r7, #12]
 800330e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003310:	881a      	ldrh	r2, [r3, #0]
 8003312:	68fb      	ldr	r3, [r7, #12]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003318:	68fb      	ldr	r3, [r7, #12]
 800331a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800331c:	1c9a      	adds	r2, r3, #2
 800331e:	68fb      	ldr	r3, [r7, #12]
 8003320:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8003322:	68fb      	ldr	r3, [r7, #12]
 8003324:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003326:	b29b      	uxth	r3, r3
 8003328:	3b02      	subs	r3, #2
 800332a:	b29a      	uxth	r2, r3
 800332c:	68fb      	ldr	r3, [r7, #12]
 800332e:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003330:	e058      	b.n	80033e4 <HAL_SPI_Transmit+0x264>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003332:	68fb      	ldr	r3, [r7, #12]
 8003334:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003336:	68fb      	ldr	r3, [r7, #12]
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	330c      	adds	r3, #12
 800333c:	7812      	ldrb	r2, [r2, #0]
 800333e:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8003340:	68fb      	ldr	r3, [r7, #12]
 8003342:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003344:	1c5a      	adds	r2, r3, #1
 8003346:	68fb      	ldr	r3, [r7, #12]
 8003348:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800334a:	68fb      	ldr	r3, [r7, #12]
 800334c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800334e:	b29b      	uxth	r3, r3
 8003350:	3b01      	subs	r3, #1
 8003352:	b29a      	uxth	r2, r3
 8003354:	68fb      	ldr	r3, [r7, #12]
 8003356:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8003358:	e044      	b.n	80033e4 <HAL_SPI_Transmit+0x264>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800335a:	68fb      	ldr	r3, [r7, #12]
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	689b      	ldr	r3, [r3, #8]
 8003360:	f003 0302 	and.w	r3, r3, #2
 8003364:	2b02      	cmp	r3, #2
 8003366:	d12b      	bne.n	80033c0 <HAL_SPI_Transmit+0x240>
      {
        if (hspi->TxXferCount > 1U)
 8003368:	68fb      	ldr	r3, [r7, #12]
 800336a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800336c:	b29b      	uxth	r3, r3
 800336e:	2b01      	cmp	r3, #1
 8003370:	d912      	bls.n	8003398 <HAL_SPI_Transmit+0x218>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003372:	68fb      	ldr	r3, [r7, #12]
 8003374:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003376:	881a      	ldrh	r2, [r3, #0]
 8003378:	68fb      	ldr	r3, [r7, #12]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800337e:	68fb      	ldr	r3, [r7, #12]
 8003380:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003382:	1c9a      	adds	r2, r3, #2
 8003384:	68fb      	ldr	r3, [r7, #12]
 8003386:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8003388:	68fb      	ldr	r3, [r7, #12]
 800338a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800338c:	b29b      	uxth	r3, r3
 800338e:	3b02      	subs	r3, #2
 8003390:	b29a      	uxth	r2, r3
 8003392:	68fb      	ldr	r3, [r7, #12]
 8003394:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003396:	e025      	b.n	80033e4 <HAL_SPI_Transmit+0x264>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003398:	68fb      	ldr	r3, [r7, #12]
 800339a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800339c:	68fb      	ldr	r3, [r7, #12]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	330c      	adds	r3, #12
 80033a2:	7812      	ldrb	r2, [r2, #0]
 80033a4:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 80033a6:	68fb      	ldr	r3, [r7, #12]
 80033a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80033aa:	1c5a      	adds	r2, r3, #1
 80033ac:	68fb      	ldr	r3, [r7, #12]
 80033ae:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 80033b0:	68fb      	ldr	r3, [r7, #12]
 80033b2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80033b4:	b29b      	uxth	r3, r3
 80033b6:	3b01      	subs	r3, #1
 80033b8:	b29a      	uxth	r2, r3
 80033ba:	68fb      	ldr	r3, [r7, #12]
 80033bc:	87da      	strh	r2, [r3, #62]	; 0x3e
 80033be:	e011      	b.n	80033e4 <HAL_SPI_Transmit+0x264>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80033c0:	f7fd ff92 	bl	80012e8 <HAL_GetTick>
 80033c4:	4602      	mov	r2, r0
 80033c6:	69bb      	ldr	r3, [r7, #24]
 80033c8:	1ad3      	subs	r3, r2, r3
 80033ca:	683a      	ldr	r2, [r7, #0]
 80033cc:	429a      	cmp	r2, r3
 80033ce:	d803      	bhi.n	80033d8 <HAL_SPI_Transmit+0x258>
 80033d0:	683b      	ldr	r3, [r7, #0]
 80033d2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80033d6:	d102      	bne.n	80033de <HAL_SPI_Transmit+0x25e>
 80033d8:	683b      	ldr	r3, [r7, #0]
 80033da:	2b00      	cmp	r3, #0
 80033dc:	d102      	bne.n	80033e4 <HAL_SPI_Transmit+0x264>
        {
          errorcode = HAL_TIMEOUT;
 80033de:	2303      	movs	r3, #3
 80033e0:	77fb      	strb	r3, [r7, #31]
          goto error;
 80033e2:	e026      	b.n	8003432 <HAL_SPI_Transmit+0x2b2>
    while (hspi->TxXferCount > 0U)
 80033e4:	68fb      	ldr	r3, [r7, #12]
 80033e6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80033e8:	b29b      	uxth	r3, r3
 80033ea:	2b00      	cmp	r3, #0
 80033ec:	d1b5      	bne.n	800335a <HAL_SPI_Transmit+0x1da>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80033ee:	69ba      	ldr	r2, [r7, #24]
 80033f0:	6839      	ldr	r1, [r7, #0]
 80033f2:	68f8      	ldr	r0, [r7, #12]
 80033f4:	f000 f901 	bl	80035fa <SPI_EndRxTxTransaction>
 80033f8:	4603      	mov	r3, r0
 80033fa:	2b00      	cmp	r3, #0
 80033fc:	d002      	beq.n	8003404 <HAL_SPI_Transmit+0x284>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80033fe:	68fb      	ldr	r3, [r7, #12]
 8003400:	2220      	movs	r2, #32
 8003402:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003404:	68fb      	ldr	r3, [r7, #12]
 8003406:	689b      	ldr	r3, [r3, #8]
 8003408:	2b00      	cmp	r3, #0
 800340a:	d10a      	bne.n	8003422 <HAL_SPI_Transmit+0x2a2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800340c:	2300      	movs	r3, #0
 800340e:	613b      	str	r3, [r7, #16]
 8003410:	68fb      	ldr	r3, [r7, #12]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	68db      	ldr	r3, [r3, #12]
 8003416:	613b      	str	r3, [r7, #16]
 8003418:	68fb      	ldr	r3, [r7, #12]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	689b      	ldr	r3, [r3, #8]
 800341e:	613b      	str	r3, [r7, #16]
 8003420:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003422:	68fb      	ldr	r3, [r7, #12]
 8003424:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003426:	2b00      	cmp	r3, #0
 8003428:	d002      	beq.n	8003430 <HAL_SPI_Transmit+0x2b0>
  {
    errorcode = HAL_ERROR;
 800342a:	2301      	movs	r3, #1
 800342c:	77fb      	strb	r3, [r7, #31]
 800342e:	e000      	b.n	8003432 <HAL_SPI_Transmit+0x2b2>
  }

error:
 8003430:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8003432:	68fb      	ldr	r3, [r7, #12]
 8003434:	2201      	movs	r2, #1
 8003436:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800343a:	68fb      	ldr	r3, [r7, #12]
 800343c:	2200      	movs	r2, #0
 800343e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8003442:	7ffb      	ldrb	r3, [r7, #31]
}
 8003444:	4618      	mov	r0, r3
 8003446:	3720      	adds	r7, #32
 8003448:	46bd      	mov	sp, r7
 800344a:	bd80      	pop	{r7, pc}

0800344c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800344c:	b580      	push	{r7, lr}
 800344e:	b084      	sub	sp, #16
 8003450:	af00      	add	r7, sp, #0
 8003452:	60f8      	str	r0, [r7, #12]
 8003454:	60b9      	str	r1, [r7, #8]
 8003456:	603b      	str	r3, [r7, #0]
 8003458:	4613      	mov	r3, r2
 800345a:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800345c:	e04c      	b.n	80034f8 <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 800345e:	683b      	ldr	r3, [r7, #0]
 8003460:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003464:	d048      	beq.n	80034f8 <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 8003466:	f7fd ff3f 	bl	80012e8 <HAL_GetTick>
 800346a:	4602      	mov	r2, r0
 800346c:	69bb      	ldr	r3, [r7, #24]
 800346e:	1ad3      	subs	r3, r2, r3
 8003470:	683a      	ldr	r2, [r7, #0]
 8003472:	429a      	cmp	r2, r3
 8003474:	d902      	bls.n	800347c <SPI_WaitFlagStateUntilTimeout+0x30>
 8003476:	683b      	ldr	r3, [r7, #0]
 8003478:	2b00      	cmp	r3, #0
 800347a:	d13d      	bne.n	80034f8 <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800347c:	68fb      	ldr	r3, [r7, #12]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	685a      	ldr	r2, [r3, #4]
 8003482:	68fb      	ldr	r3, [r7, #12]
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800348a:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800348c:	68fb      	ldr	r3, [r7, #12]
 800348e:	685b      	ldr	r3, [r3, #4]
 8003490:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003494:	d111      	bne.n	80034ba <SPI_WaitFlagStateUntilTimeout+0x6e>
 8003496:	68fb      	ldr	r3, [r7, #12]
 8003498:	689b      	ldr	r3, [r3, #8]
 800349a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800349e:	d004      	beq.n	80034aa <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80034a0:	68fb      	ldr	r3, [r7, #12]
 80034a2:	689b      	ldr	r3, [r3, #8]
 80034a4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80034a8:	d107      	bne.n	80034ba <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80034aa:	68fb      	ldr	r3, [r7, #12]
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	681a      	ldr	r2, [r3, #0]
 80034b0:	68fb      	ldr	r3, [r7, #12]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80034b8:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80034ba:	68fb      	ldr	r3, [r7, #12]
 80034bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80034be:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80034c2:	d10f      	bne.n	80034e4 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 80034c4:	68fb      	ldr	r3, [r7, #12]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	681a      	ldr	r2, [r3, #0]
 80034ca:	68fb      	ldr	r3, [r7, #12]
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80034d2:	601a      	str	r2, [r3, #0]
 80034d4:	68fb      	ldr	r3, [r7, #12]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	681a      	ldr	r2, [r3, #0]
 80034da:	68fb      	ldr	r3, [r7, #12]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80034e2:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80034e4:	68fb      	ldr	r3, [r7, #12]
 80034e6:	2201      	movs	r2, #1
 80034e8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80034ec:	68fb      	ldr	r3, [r7, #12]
 80034ee:	2200      	movs	r2, #0
 80034f0:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 80034f4:	2303      	movs	r3, #3
 80034f6:	e00f      	b.n	8003518 <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80034f8:	68fb      	ldr	r3, [r7, #12]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	689a      	ldr	r2, [r3, #8]
 80034fe:	68bb      	ldr	r3, [r7, #8]
 8003500:	4013      	ands	r3, r2
 8003502:	68ba      	ldr	r2, [r7, #8]
 8003504:	429a      	cmp	r2, r3
 8003506:	bf0c      	ite	eq
 8003508:	2301      	moveq	r3, #1
 800350a:	2300      	movne	r3, #0
 800350c:	b2db      	uxtb	r3, r3
 800350e:	461a      	mov	r2, r3
 8003510:	79fb      	ldrb	r3, [r7, #7]
 8003512:	429a      	cmp	r2, r3
 8003514:	d1a3      	bne.n	800345e <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 8003516:	2300      	movs	r3, #0
}
 8003518:	4618      	mov	r0, r3
 800351a:	3710      	adds	r7, #16
 800351c:	46bd      	mov	sp, r7
 800351e:	bd80      	pop	{r7, pc}

08003520 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003520:	b580      	push	{r7, lr}
 8003522:	b084      	sub	sp, #16
 8003524:	af00      	add	r7, sp, #0
 8003526:	60f8      	str	r0, [r7, #12]
 8003528:	60b9      	str	r1, [r7, #8]
 800352a:	607a      	str	r2, [r7, #4]
 800352c:	603b      	str	r3, [r7, #0]
  while ((hspi->Instance->SR & Fifo) != State)
 800352e:	e057      	b.n	80035e0 <SPI_WaitFifoStateUntilTimeout+0xc0>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8003530:	68bb      	ldr	r3, [r7, #8]
 8003532:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8003536:	d106      	bne.n	8003546 <SPI_WaitFifoStateUntilTimeout+0x26>
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	2b00      	cmp	r3, #0
 800353c:	d103      	bne.n	8003546 <SPI_WaitFifoStateUntilTimeout+0x26>
    {
      /* Read 8bit CRC to flush Data Register */
      READ_REG(*((__IO uint8_t *)&hspi->Instance->DR));
 800353e:	68fb      	ldr	r3, [r7, #12]
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	330c      	adds	r3, #12
 8003544:	781b      	ldrb	r3, [r3, #0]
    }

    if (Timeout != HAL_MAX_DELAY)
 8003546:	683b      	ldr	r3, [r7, #0]
 8003548:	f1b3 3fff 	cmp.w	r3, #4294967295
 800354c:	d048      	beq.n	80035e0 <SPI_WaitFifoStateUntilTimeout+0xc0>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 800354e:	f7fd fecb 	bl	80012e8 <HAL_GetTick>
 8003552:	4602      	mov	r2, r0
 8003554:	69bb      	ldr	r3, [r7, #24]
 8003556:	1ad3      	subs	r3, r2, r3
 8003558:	683a      	ldr	r2, [r7, #0]
 800355a:	429a      	cmp	r2, r3
 800355c:	d902      	bls.n	8003564 <SPI_WaitFifoStateUntilTimeout+0x44>
 800355e:	683b      	ldr	r3, [r7, #0]
 8003560:	2b00      	cmp	r3, #0
 8003562:	d13d      	bne.n	80035e0 <SPI_WaitFifoStateUntilTimeout+0xc0>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003564:	68fb      	ldr	r3, [r7, #12]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	685a      	ldr	r2, [r3, #4]
 800356a:	68fb      	ldr	r3, [r7, #12]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8003572:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003574:	68fb      	ldr	r3, [r7, #12]
 8003576:	685b      	ldr	r3, [r3, #4]
 8003578:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800357c:	d111      	bne.n	80035a2 <SPI_WaitFifoStateUntilTimeout+0x82>
 800357e:	68fb      	ldr	r3, [r7, #12]
 8003580:	689b      	ldr	r3, [r3, #8]
 8003582:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003586:	d004      	beq.n	8003592 <SPI_WaitFifoStateUntilTimeout+0x72>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003588:	68fb      	ldr	r3, [r7, #12]
 800358a:	689b      	ldr	r3, [r3, #8]
 800358c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003590:	d107      	bne.n	80035a2 <SPI_WaitFifoStateUntilTimeout+0x82>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003592:	68fb      	ldr	r3, [r7, #12]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	681a      	ldr	r2, [r3, #0]
 8003598:	68fb      	ldr	r3, [r7, #12]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80035a0:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80035a2:	68fb      	ldr	r3, [r7, #12]
 80035a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80035a6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80035aa:	d10f      	bne.n	80035cc <SPI_WaitFifoStateUntilTimeout+0xac>
        {
          SPI_RESET_CRC(hspi);
 80035ac:	68fb      	ldr	r3, [r7, #12]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	681a      	ldr	r2, [r3, #0]
 80035b2:	68fb      	ldr	r3, [r7, #12]
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80035ba:	601a      	str	r2, [r3, #0]
 80035bc:	68fb      	ldr	r3, [r7, #12]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	681a      	ldr	r2, [r3, #0]
 80035c2:	68fb      	ldr	r3, [r7, #12]
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80035ca:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80035cc:	68fb      	ldr	r3, [r7, #12]
 80035ce:	2201      	movs	r2, #1
 80035d0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80035d4:	68fb      	ldr	r3, [r7, #12]
 80035d6:	2200      	movs	r2, #0
 80035d8:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 80035dc:	2303      	movs	r3, #3
 80035de:	e008      	b.n	80035f2 <SPI_WaitFifoStateUntilTimeout+0xd2>
  while ((hspi->Instance->SR & Fifo) != State)
 80035e0:	68fb      	ldr	r3, [r7, #12]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	689a      	ldr	r2, [r3, #8]
 80035e6:	68bb      	ldr	r3, [r7, #8]
 80035e8:	4013      	ands	r3, r2
 80035ea:	687a      	ldr	r2, [r7, #4]
 80035ec:	429a      	cmp	r2, r3
 80035ee:	d19f      	bne.n	8003530 <SPI_WaitFifoStateUntilTimeout+0x10>
      }
    }
  }

  return HAL_OK;
 80035f0:	2300      	movs	r3, #0
}
 80035f2:	4618      	mov	r0, r3
 80035f4:	3710      	adds	r7, #16
 80035f6:	46bd      	mov	sp, r7
 80035f8:	bd80      	pop	{r7, pc}

080035fa <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80035fa:	b580      	push	{r7, lr}
 80035fc:	b086      	sub	sp, #24
 80035fe:	af02      	add	r7, sp, #8
 8003600:	60f8      	str	r0, [r7, #12]
 8003602:	60b9      	str	r1, [r7, #8]
 8003604:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	9300      	str	r3, [sp, #0]
 800360a:	68bb      	ldr	r3, [r7, #8]
 800360c:	2200      	movs	r2, #0
 800360e:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8003612:	68f8      	ldr	r0, [r7, #12]
 8003614:	f7ff ff84 	bl	8003520 <SPI_WaitFifoStateUntilTimeout>
 8003618:	4603      	mov	r3, r0
 800361a:	2b00      	cmp	r3, #0
 800361c:	d007      	beq.n	800362e <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800361e:	68fb      	ldr	r3, [r7, #12]
 8003620:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003622:	f043 0220 	orr.w	r2, r3, #32
 8003626:	68fb      	ldr	r3, [r7, #12]
 8003628:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800362a:	2303      	movs	r3, #3
 800362c:	e027      	b.n	800367e <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	9300      	str	r3, [sp, #0]
 8003632:	68bb      	ldr	r3, [r7, #8]
 8003634:	2200      	movs	r2, #0
 8003636:	2180      	movs	r1, #128	; 0x80
 8003638:	68f8      	ldr	r0, [r7, #12]
 800363a:	f7ff ff07 	bl	800344c <SPI_WaitFlagStateUntilTimeout>
 800363e:	4603      	mov	r3, r0
 8003640:	2b00      	cmp	r3, #0
 8003642:	d007      	beq.n	8003654 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003644:	68fb      	ldr	r3, [r7, #12]
 8003646:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003648:	f043 0220 	orr.w	r2, r3, #32
 800364c:	68fb      	ldr	r3, [r7, #12]
 800364e:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8003650:	2303      	movs	r3, #3
 8003652:	e014      	b.n	800367e <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	9300      	str	r3, [sp, #0]
 8003658:	68bb      	ldr	r3, [r7, #8]
 800365a:	2200      	movs	r2, #0
 800365c:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8003660:	68f8      	ldr	r0, [r7, #12]
 8003662:	f7ff ff5d 	bl	8003520 <SPI_WaitFifoStateUntilTimeout>
 8003666:	4603      	mov	r3, r0
 8003668:	2b00      	cmp	r3, #0
 800366a:	d007      	beq.n	800367c <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800366c:	68fb      	ldr	r3, [r7, #12]
 800366e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003670:	f043 0220 	orr.w	r2, r3, #32
 8003674:	68fb      	ldr	r3, [r7, #12]
 8003676:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8003678:	2303      	movs	r3, #3
 800367a:	e000      	b.n	800367e <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 800367c:	2300      	movs	r3, #0
}
 800367e:	4618      	mov	r0, r3
 8003680:	3710      	adds	r7, #16
 8003682:	46bd      	mov	sp, r7
 8003684:	bd80      	pop	{r7, pc}

08003686 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003686:	b580      	push	{r7, lr}
 8003688:	b082      	sub	sp, #8
 800368a:	af00      	add	r7, sp, #0
 800368c:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	2b00      	cmp	r3, #0
 8003692:	d101      	bne.n	8003698 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003694:	2301      	movs	r3, #1
 8003696:	e040      	b.n	800371a <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800369c:	2b00      	cmp	r3, #0
 800369e:	d106      	bne.n	80036ae <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	2200      	movs	r2, #0
 80036a4:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80036a8:	6878      	ldr	r0, [r7, #4]
 80036aa:	f7fd fcc3 	bl	8001034 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	2224      	movs	r2, #36	; 0x24
 80036b2:	675a      	str	r2, [r3, #116]	; 0x74

  __HAL_UART_DISABLE(huart);
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	681a      	ldr	r2, [r3, #0]
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	f022 0201 	bic.w	r2, r2, #1
 80036c2:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80036c4:	6878      	ldr	r0, [r7, #4]
 80036c6:	f000 f82d 	bl	8003724 <UART_SetConfig>
 80036ca:	4603      	mov	r3, r0
 80036cc:	2b01      	cmp	r3, #1
 80036ce:	d101      	bne.n	80036d4 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 80036d0:	2301      	movs	r3, #1
 80036d2:	e022      	b.n	800371a <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036d8:	2b00      	cmp	r3, #0
 80036da:	d002      	beq.n	80036e2 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80036dc:	6878      	ldr	r0, [r7, #4]
 80036de:	f000 fb69 	bl	8003db4 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	685a      	ldr	r2, [r3, #4]
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80036f0:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	689a      	ldr	r2, [r3, #8]
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003700:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	681a      	ldr	r2, [r3, #0]
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	f042 0201 	orr.w	r2, r2, #1
 8003710:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003712:	6878      	ldr	r0, [r7, #4]
 8003714:	f000 fbf0 	bl	8003ef8 <UART_CheckIdleState>
 8003718:	4603      	mov	r3, r0
}
 800371a:	4618      	mov	r0, r3
 800371c:	3708      	adds	r7, #8
 800371e:	46bd      	mov	sp, r7
 8003720:	bd80      	pop	{r7, pc}
	...

08003724 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003724:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 8003728:	b088      	sub	sp, #32
 800372a:	af00      	add	r7, sp, #0
 800372c:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 800372e:	2300      	movs	r3, #0
 8003730:	617b      	str	r3, [r7, #20]
  HAL_StatusTypeDef ret               = HAL_OK;
 8003732:	2300      	movs	r3, #0
 8003734:	74fb      	strb	r3, [r7, #19]
  uint32_t lpuart_ker_ck_pres         = 0x00000000U;
 8003736:	2300      	movs	r3, #0
 8003738:	60fb      	str	r3, [r7, #12]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	689a      	ldr	r2, [r3, #8]
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	691b      	ldr	r3, [r3, #16]
 8003742:	431a      	orrs	r2, r3
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	695b      	ldr	r3, [r3, #20]
 8003748:	431a      	orrs	r2, r3
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	69db      	ldr	r3, [r3, #28]
 800374e:	4313      	orrs	r3, r2
 8003750:	61fb      	str	r3, [r7, #28]
#if defined(USART_CR1_FIFOEN)
  tmpreg |= (uint32_t)huart->FifoMode;
#endif /* USART_CR1_FIFOEN */
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	681a      	ldr	r2, [r3, #0]
 8003758:	4bac      	ldr	r3, [pc, #688]	; (8003a0c <UART_SetConfig+0x2e8>)
 800375a:	4013      	ands	r3, r2
 800375c:	687a      	ldr	r2, [r7, #4]
 800375e:	6812      	ldr	r2, [r2, #0]
 8003760:	69f9      	ldr	r1, [r7, #28]
 8003762:	430b      	orrs	r3, r1
 8003764:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	685b      	ldr	r3, [r3, #4]
 800376c:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	68da      	ldr	r2, [r3, #12]
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	430a      	orrs	r2, r1
 800377a:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	699b      	ldr	r3, [r3, #24]
 8003780:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	4aa2      	ldr	r2, [pc, #648]	; (8003a10 <UART_SetConfig+0x2ec>)
 8003788:	4293      	cmp	r3, r2
 800378a:	d004      	beq.n	8003796 <UART_SetConfig+0x72>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	6a1b      	ldr	r3, [r3, #32]
 8003790:	69fa      	ldr	r2, [r7, #28]
 8003792:	4313      	orrs	r3, r2
 8003794:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	689b      	ldr	r3, [r3, #8]
 800379c:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	69fa      	ldr	r2, [r7, #28]
 80037a6:	430a      	orrs	r2, r1
 80037a8:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	4a99      	ldr	r2, [pc, #612]	; (8003a14 <UART_SetConfig+0x2f0>)
 80037b0:	4293      	cmp	r3, r2
 80037b2:	d121      	bne.n	80037f8 <UART_SetConfig+0xd4>
 80037b4:	4b98      	ldr	r3, [pc, #608]	; (8003a18 <UART_SetConfig+0x2f4>)
 80037b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80037ba:	f003 0303 	and.w	r3, r3, #3
 80037be:	2b03      	cmp	r3, #3
 80037c0:	d816      	bhi.n	80037f0 <UART_SetConfig+0xcc>
 80037c2:	a201      	add	r2, pc, #4	; (adr r2, 80037c8 <UART_SetConfig+0xa4>)
 80037c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80037c8:	080037d9 	.word	0x080037d9
 80037cc:	080037e5 	.word	0x080037e5
 80037d0:	080037df 	.word	0x080037df
 80037d4:	080037eb 	.word	0x080037eb
 80037d8:	2301      	movs	r3, #1
 80037da:	76fb      	strb	r3, [r7, #27]
 80037dc:	e0e8      	b.n	80039b0 <UART_SetConfig+0x28c>
 80037de:	2302      	movs	r3, #2
 80037e0:	76fb      	strb	r3, [r7, #27]
 80037e2:	e0e5      	b.n	80039b0 <UART_SetConfig+0x28c>
 80037e4:	2304      	movs	r3, #4
 80037e6:	76fb      	strb	r3, [r7, #27]
 80037e8:	e0e2      	b.n	80039b0 <UART_SetConfig+0x28c>
 80037ea:	2308      	movs	r3, #8
 80037ec:	76fb      	strb	r3, [r7, #27]
 80037ee:	e0df      	b.n	80039b0 <UART_SetConfig+0x28c>
 80037f0:	2310      	movs	r3, #16
 80037f2:	76fb      	strb	r3, [r7, #27]
 80037f4:	bf00      	nop
 80037f6:	e0db      	b.n	80039b0 <UART_SetConfig+0x28c>
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	4a87      	ldr	r2, [pc, #540]	; (8003a1c <UART_SetConfig+0x2f8>)
 80037fe:	4293      	cmp	r3, r2
 8003800:	d134      	bne.n	800386c <UART_SetConfig+0x148>
 8003802:	4b85      	ldr	r3, [pc, #532]	; (8003a18 <UART_SetConfig+0x2f4>)
 8003804:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003808:	f003 030c 	and.w	r3, r3, #12
 800380c:	2b0c      	cmp	r3, #12
 800380e:	d829      	bhi.n	8003864 <UART_SetConfig+0x140>
 8003810:	a201      	add	r2, pc, #4	; (adr r2, 8003818 <UART_SetConfig+0xf4>)
 8003812:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003816:	bf00      	nop
 8003818:	0800384d 	.word	0x0800384d
 800381c:	08003865 	.word	0x08003865
 8003820:	08003865 	.word	0x08003865
 8003824:	08003865 	.word	0x08003865
 8003828:	08003859 	.word	0x08003859
 800382c:	08003865 	.word	0x08003865
 8003830:	08003865 	.word	0x08003865
 8003834:	08003865 	.word	0x08003865
 8003838:	08003853 	.word	0x08003853
 800383c:	08003865 	.word	0x08003865
 8003840:	08003865 	.word	0x08003865
 8003844:	08003865 	.word	0x08003865
 8003848:	0800385f 	.word	0x0800385f
 800384c:	2300      	movs	r3, #0
 800384e:	76fb      	strb	r3, [r7, #27]
 8003850:	e0ae      	b.n	80039b0 <UART_SetConfig+0x28c>
 8003852:	2302      	movs	r3, #2
 8003854:	76fb      	strb	r3, [r7, #27]
 8003856:	e0ab      	b.n	80039b0 <UART_SetConfig+0x28c>
 8003858:	2304      	movs	r3, #4
 800385a:	76fb      	strb	r3, [r7, #27]
 800385c:	e0a8      	b.n	80039b0 <UART_SetConfig+0x28c>
 800385e:	2308      	movs	r3, #8
 8003860:	76fb      	strb	r3, [r7, #27]
 8003862:	e0a5      	b.n	80039b0 <UART_SetConfig+0x28c>
 8003864:	2310      	movs	r3, #16
 8003866:	76fb      	strb	r3, [r7, #27]
 8003868:	bf00      	nop
 800386a:	e0a1      	b.n	80039b0 <UART_SetConfig+0x28c>
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	4a6b      	ldr	r2, [pc, #428]	; (8003a20 <UART_SetConfig+0x2fc>)
 8003872:	4293      	cmp	r3, r2
 8003874:	d120      	bne.n	80038b8 <UART_SetConfig+0x194>
 8003876:	4b68      	ldr	r3, [pc, #416]	; (8003a18 <UART_SetConfig+0x2f4>)
 8003878:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800387c:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8003880:	2b10      	cmp	r3, #16
 8003882:	d00f      	beq.n	80038a4 <UART_SetConfig+0x180>
 8003884:	2b10      	cmp	r3, #16
 8003886:	d802      	bhi.n	800388e <UART_SetConfig+0x16a>
 8003888:	2b00      	cmp	r3, #0
 800388a:	d005      	beq.n	8003898 <UART_SetConfig+0x174>
 800388c:	e010      	b.n	80038b0 <UART_SetConfig+0x18c>
 800388e:	2b20      	cmp	r3, #32
 8003890:	d005      	beq.n	800389e <UART_SetConfig+0x17a>
 8003892:	2b30      	cmp	r3, #48	; 0x30
 8003894:	d009      	beq.n	80038aa <UART_SetConfig+0x186>
 8003896:	e00b      	b.n	80038b0 <UART_SetConfig+0x18c>
 8003898:	2300      	movs	r3, #0
 800389a:	76fb      	strb	r3, [r7, #27]
 800389c:	e088      	b.n	80039b0 <UART_SetConfig+0x28c>
 800389e:	2302      	movs	r3, #2
 80038a0:	76fb      	strb	r3, [r7, #27]
 80038a2:	e085      	b.n	80039b0 <UART_SetConfig+0x28c>
 80038a4:	2304      	movs	r3, #4
 80038a6:	76fb      	strb	r3, [r7, #27]
 80038a8:	e082      	b.n	80039b0 <UART_SetConfig+0x28c>
 80038aa:	2308      	movs	r3, #8
 80038ac:	76fb      	strb	r3, [r7, #27]
 80038ae:	e07f      	b.n	80039b0 <UART_SetConfig+0x28c>
 80038b0:	2310      	movs	r3, #16
 80038b2:	76fb      	strb	r3, [r7, #27]
 80038b4:	bf00      	nop
 80038b6:	e07b      	b.n	80039b0 <UART_SetConfig+0x28c>
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	4a59      	ldr	r2, [pc, #356]	; (8003a24 <UART_SetConfig+0x300>)
 80038be:	4293      	cmp	r3, r2
 80038c0:	d120      	bne.n	8003904 <UART_SetConfig+0x1e0>
 80038c2:	4b55      	ldr	r3, [pc, #340]	; (8003a18 <UART_SetConfig+0x2f4>)
 80038c4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80038c8:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80038cc:	2b40      	cmp	r3, #64	; 0x40
 80038ce:	d00f      	beq.n	80038f0 <UART_SetConfig+0x1cc>
 80038d0:	2b40      	cmp	r3, #64	; 0x40
 80038d2:	d802      	bhi.n	80038da <UART_SetConfig+0x1b6>
 80038d4:	2b00      	cmp	r3, #0
 80038d6:	d005      	beq.n	80038e4 <UART_SetConfig+0x1c0>
 80038d8:	e010      	b.n	80038fc <UART_SetConfig+0x1d8>
 80038da:	2b80      	cmp	r3, #128	; 0x80
 80038dc:	d005      	beq.n	80038ea <UART_SetConfig+0x1c6>
 80038de:	2bc0      	cmp	r3, #192	; 0xc0
 80038e0:	d009      	beq.n	80038f6 <UART_SetConfig+0x1d2>
 80038e2:	e00b      	b.n	80038fc <UART_SetConfig+0x1d8>
 80038e4:	2300      	movs	r3, #0
 80038e6:	76fb      	strb	r3, [r7, #27]
 80038e8:	e062      	b.n	80039b0 <UART_SetConfig+0x28c>
 80038ea:	2302      	movs	r3, #2
 80038ec:	76fb      	strb	r3, [r7, #27]
 80038ee:	e05f      	b.n	80039b0 <UART_SetConfig+0x28c>
 80038f0:	2304      	movs	r3, #4
 80038f2:	76fb      	strb	r3, [r7, #27]
 80038f4:	e05c      	b.n	80039b0 <UART_SetConfig+0x28c>
 80038f6:	2308      	movs	r3, #8
 80038f8:	76fb      	strb	r3, [r7, #27]
 80038fa:	e059      	b.n	80039b0 <UART_SetConfig+0x28c>
 80038fc:	2310      	movs	r3, #16
 80038fe:	76fb      	strb	r3, [r7, #27]
 8003900:	bf00      	nop
 8003902:	e055      	b.n	80039b0 <UART_SetConfig+0x28c>
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	4a47      	ldr	r2, [pc, #284]	; (8003a28 <UART_SetConfig+0x304>)
 800390a:	4293      	cmp	r3, r2
 800390c:	d124      	bne.n	8003958 <UART_SetConfig+0x234>
 800390e:	4b42      	ldr	r3, [pc, #264]	; (8003a18 <UART_SetConfig+0x2f4>)
 8003910:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003914:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003918:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800391c:	d012      	beq.n	8003944 <UART_SetConfig+0x220>
 800391e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003922:	d802      	bhi.n	800392a <UART_SetConfig+0x206>
 8003924:	2b00      	cmp	r3, #0
 8003926:	d007      	beq.n	8003938 <UART_SetConfig+0x214>
 8003928:	e012      	b.n	8003950 <UART_SetConfig+0x22c>
 800392a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800392e:	d006      	beq.n	800393e <UART_SetConfig+0x21a>
 8003930:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003934:	d009      	beq.n	800394a <UART_SetConfig+0x226>
 8003936:	e00b      	b.n	8003950 <UART_SetConfig+0x22c>
 8003938:	2300      	movs	r3, #0
 800393a:	76fb      	strb	r3, [r7, #27]
 800393c:	e038      	b.n	80039b0 <UART_SetConfig+0x28c>
 800393e:	2302      	movs	r3, #2
 8003940:	76fb      	strb	r3, [r7, #27]
 8003942:	e035      	b.n	80039b0 <UART_SetConfig+0x28c>
 8003944:	2304      	movs	r3, #4
 8003946:	76fb      	strb	r3, [r7, #27]
 8003948:	e032      	b.n	80039b0 <UART_SetConfig+0x28c>
 800394a:	2308      	movs	r3, #8
 800394c:	76fb      	strb	r3, [r7, #27]
 800394e:	e02f      	b.n	80039b0 <UART_SetConfig+0x28c>
 8003950:	2310      	movs	r3, #16
 8003952:	76fb      	strb	r3, [r7, #27]
 8003954:	bf00      	nop
 8003956:	e02b      	b.n	80039b0 <UART_SetConfig+0x28c>
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	4a2c      	ldr	r2, [pc, #176]	; (8003a10 <UART_SetConfig+0x2ec>)
 800395e:	4293      	cmp	r3, r2
 8003960:	d124      	bne.n	80039ac <UART_SetConfig+0x288>
 8003962:	4b2d      	ldr	r3, [pc, #180]	; (8003a18 <UART_SetConfig+0x2f4>)
 8003964:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003968:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800396c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003970:	d012      	beq.n	8003998 <UART_SetConfig+0x274>
 8003972:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003976:	d802      	bhi.n	800397e <UART_SetConfig+0x25a>
 8003978:	2b00      	cmp	r3, #0
 800397a:	d007      	beq.n	800398c <UART_SetConfig+0x268>
 800397c:	e012      	b.n	80039a4 <UART_SetConfig+0x280>
 800397e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003982:	d006      	beq.n	8003992 <UART_SetConfig+0x26e>
 8003984:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003988:	d009      	beq.n	800399e <UART_SetConfig+0x27a>
 800398a:	e00b      	b.n	80039a4 <UART_SetConfig+0x280>
 800398c:	2300      	movs	r3, #0
 800398e:	76fb      	strb	r3, [r7, #27]
 8003990:	e00e      	b.n	80039b0 <UART_SetConfig+0x28c>
 8003992:	2302      	movs	r3, #2
 8003994:	76fb      	strb	r3, [r7, #27]
 8003996:	e00b      	b.n	80039b0 <UART_SetConfig+0x28c>
 8003998:	2304      	movs	r3, #4
 800399a:	76fb      	strb	r3, [r7, #27]
 800399c:	e008      	b.n	80039b0 <UART_SetConfig+0x28c>
 800399e:	2308      	movs	r3, #8
 80039a0:	76fb      	strb	r3, [r7, #27]
 80039a2:	e005      	b.n	80039b0 <UART_SetConfig+0x28c>
 80039a4:	2310      	movs	r3, #16
 80039a6:	76fb      	strb	r3, [r7, #27]
 80039a8:	bf00      	nop
 80039aa:	e001      	b.n	80039b0 <UART_SetConfig+0x28c>
 80039ac:	2310      	movs	r3, #16
 80039ae:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	4a16      	ldr	r2, [pc, #88]	; (8003a10 <UART_SetConfig+0x2ec>)
 80039b6:	4293      	cmp	r3, r2
 80039b8:	f040 80fa 	bne.w	8003bb0 <UART_SetConfig+0x48c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80039bc:	7efb      	ldrb	r3, [r7, #27]
 80039be:	2b08      	cmp	r3, #8
 80039c0:	d836      	bhi.n	8003a30 <UART_SetConfig+0x30c>
 80039c2:	a201      	add	r2, pc, #4	; (adr r2, 80039c8 <UART_SetConfig+0x2a4>)
 80039c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80039c8:	080039ed 	.word	0x080039ed
 80039cc:	08003a31 	.word	0x08003a31
 80039d0:	080039f5 	.word	0x080039f5
 80039d4:	08003a31 	.word	0x08003a31
 80039d8:	080039fb 	.word	0x080039fb
 80039dc:	08003a31 	.word	0x08003a31
 80039e0:	08003a31 	.word	0x08003a31
 80039e4:	08003a31 	.word	0x08003a31
 80039e8:	08003a03 	.word	0x08003a03
    {
      case UART_CLOCKSOURCE_PCLK1:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = (HAL_RCC_GetPCLK1Freq() / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
#else
        lpuart_ker_ck_pres = HAL_RCC_GetPCLK1Freq();
 80039ec:	f7fe fe02 	bl	80025f4 <HAL_RCC_GetPCLK1Freq>
 80039f0:	60f8      	str	r0, [r7, #12]
#endif /* USART_PRESC_PRESCALER */
        break;
 80039f2:	e020      	b.n	8003a36 <UART_SetConfig+0x312>
      case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = ((uint32_t)HSI_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
#else
        lpuart_ker_ck_pres = (uint32_t)HSI_VALUE;
 80039f4:	4b0d      	ldr	r3, [pc, #52]	; (8003a2c <UART_SetConfig+0x308>)
 80039f6:	60fb      	str	r3, [r7, #12]
#endif /* USART_PRESC_PRESCALER */
        break;
 80039f8:	e01d      	b.n	8003a36 <UART_SetConfig+0x312>
      case UART_CLOCKSOURCE_SYSCLK:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = (HAL_RCC_GetSysClockFreq() / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
#else
        lpuart_ker_ck_pres = HAL_RCC_GetSysClockFreq();
 80039fa:	f7fe fd65 	bl	80024c8 <HAL_RCC_GetSysClockFreq>
 80039fe:	60f8      	str	r0, [r7, #12]
#endif /* USART_PRESC_PRESCALER */
        break;
 8003a00:	e019      	b.n	8003a36 <UART_SetConfig+0x312>
      case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = ((uint32_t)LSE_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
#else
        lpuart_ker_ck_pres = (uint32_t)LSE_VALUE;
 8003a02:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003a06:	60fb      	str	r3, [r7, #12]
#endif /* USART_PRESC_PRESCALER */
        break;
 8003a08:	e015      	b.n	8003a36 <UART_SetConfig+0x312>
 8003a0a:	bf00      	nop
 8003a0c:	efff69f3 	.word	0xefff69f3
 8003a10:	40008000 	.word	0x40008000
 8003a14:	40013800 	.word	0x40013800
 8003a18:	40021000 	.word	0x40021000
 8003a1c:	40004400 	.word	0x40004400
 8003a20:	40004800 	.word	0x40004800
 8003a24:	40004c00 	.word	0x40004c00
 8003a28:	40005000 	.word	0x40005000
 8003a2c:	00f42400 	.word	0x00f42400
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 8003a30:	2301      	movs	r3, #1
 8003a32:	74fb      	strb	r3, [r7, #19]
        break;
 8003a34:	bf00      	nop
    }

    /* if proper clock source reported */
    if (lpuart_ker_ck_pres != 0U)
 8003a36:	68fb      	ldr	r3, [r7, #12]
 8003a38:	2b00      	cmp	r3, #0
 8003a3a:	f000 81ac 	beq.w	8003d96 <UART_SetConfig+0x672>
    {
      /* ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	685a      	ldr	r2, [r3, #4]
 8003a42:	4613      	mov	r3, r2
 8003a44:	005b      	lsls	r3, r3, #1
 8003a46:	4413      	add	r3, r2
 8003a48:	68fa      	ldr	r2, [r7, #12]
 8003a4a:	429a      	cmp	r2, r3
 8003a4c:	d305      	bcc.n	8003a5a <UART_SetConfig+0x336>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	685b      	ldr	r3, [r3, #4]
 8003a52:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8003a54:	68fa      	ldr	r2, [r7, #12]
 8003a56:	429a      	cmp	r2, r3
 8003a58:	d902      	bls.n	8003a60 <UART_SetConfig+0x33c>
      {
        ret = HAL_ERROR;
 8003a5a:	2301      	movs	r3, #1
 8003a5c:	74fb      	strb	r3, [r7, #19]
 8003a5e:	e19a      	b.n	8003d96 <UART_SetConfig+0x672>
      }
      else
      {
        switch (clocksource)
 8003a60:	7efb      	ldrb	r3, [r7, #27]
 8003a62:	2b08      	cmp	r3, #8
 8003a64:	f200 8091 	bhi.w	8003b8a <UART_SetConfig+0x466>
 8003a68:	a201      	add	r2, pc, #4	; (adr r2, 8003a70 <UART_SetConfig+0x34c>)
 8003a6a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003a6e:	bf00      	nop
 8003a70:	08003a95 	.word	0x08003a95
 8003a74:	08003b8b 	.word	0x08003b8b
 8003a78:	08003ae1 	.word	0x08003ae1
 8003a7c:	08003b8b 	.word	0x08003b8b
 8003a80:	08003b15 	.word	0x08003b15
 8003a84:	08003b8b 	.word	0x08003b8b
 8003a88:	08003b8b 	.word	0x08003b8b
 8003a8c:	08003b8b 	.word	0x08003b8b
 8003a90:	08003b61 	.word	0x08003b61
        {
          case UART_CLOCKSOURCE_PCLK1:
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8003a94:	f7fe fdae 	bl	80025f4 <HAL_RCC_GetPCLK1Freq>
 8003a98:	4603      	mov	r3, r0
 8003a9a:	4619      	mov	r1, r3
 8003a9c:	f04f 0200 	mov.w	r2, #0
 8003aa0:	f04f 0300 	mov.w	r3, #0
 8003aa4:	f04f 0400 	mov.w	r4, #0
 8003aa8:	0214      	lsls	r4, r2, #8
 8003aaa:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 8003aae:	020b      	lsls	r3, r1, #8
 8003ab0:	687a      	ldr	r2, [r7, #4]
 8003ab2:	6852      	ldr	r2, [r2, #4]
 8003ab4:	0852      	lsrs	r2, r2, #1
 8003ab6:	4611      	mov	r1, r2
 8003ab8:	f04f 0200 	mov.w	r2, #0
 8003abc:	eb13 0b01 	adds.w	fp, r3, r1
 8003ac0:	eb44 0c02 	adc.w	ip, r4, r2
 8003ac4:	4658      	mov	r0, fp
 8003ac6:	4661      	mov	r1, ip
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	685b      	ldr	r3, [r3, #4]
 8003acc:	f04f 0400 	mov.w	r4, #0
 8003ad0:	461a      	mov	r2, r3
 8003ad2:	4623      	mov	r3, r4
 8003ad4:	f7fc fbdc 	bl	8000290 <__aeabi_uldivmod>
 8003ad8:	4603      	mov	r3, r0
 8003ada:	460c      	mov	r4, r1
 8003adc:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
            break;
 8003ade:	e057      	b.n	8003b90 <UART_SetConfig+0x46c>
          case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate));
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	685b      	ldr	r3, [r3, #4]
 8003ae4:	085b      	lsrs	r3, r3, #1
 8003ae6:	f04f 0400 	mov.w	r4, #0
 8003aea:	49b1      	ldr	r1, [pc, #708]	; (8003db0 <UART_SetConfig+0x68c>)
 8003aec:	f04f 0200 	mov.w	r2, #0
 8003af0:	eb13 0b01 	adds.w	fp, r3, r1
 8003af4:	eb44 0c02 	adc.w	ip, r4, r2
 8003af8:	4658      	mov	r0, fp
 8003afa:	4661      	mov	r1, ip
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	685b      	ldr	r3, [r3, #4]
 8003b00:	f04f 0400 	mov.w	r4, #0
 8003b04:	461a      	mov	r2, r3
 8003b06:	4623      	mov	r3, r4
 8003b08:	f7fc fbc2 	bl	8000290 <__aeabi_uldivmod>
 8003b0c:	4603      	mov	r3, r0
 8003b0e:	460c      	mov	r4, r1
 8003b10:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
            break;
 8003b12:	e03d      	b.n	8003b90 <UART_SetConfig+0x46c>
          case UART_CLOCKSOURCE_SYSCLK:
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8003b14:	f7fe fcd8 	bl	80024c8 <HAL_RCC_GetSysClockFreq>
 8003b18:	4603      	mov	r3, r0
 8003b1a:	4619      	mov	r1, r3
 8003b1c:	f04f 0200 	mov.w	r2, #0
 8003b20:	f04f 0300 	mov.w	r3, #0
 8003b24:	f04f 0400 	mov.w	r4, #0
 8003b28:	0214      	lsls	r4, r2, #8
 8003b2a:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 8003b2e:	020b      	lsls	r3, r1, #8
 8003b30:	687a      	ldr	r2, [r7, #4]
 8003b32:	6852      	ldr	r2, [r2, #4]
 8003b34:	0852      	lsrs	r2, r2, #1
 8003b36:	4611      	mov	r1, r2
 8003b38:	f04f 0200 	mov.w	r2, #0
 8003b3c:	eb13 0b01 	adds.w	fp, r3, r1
 8003b40:	eb44 0c02 	adc.w	ip, r4, r2
 8003b44:	4658      	mov	r0, fp
 8003b46:	4661      	mov	r1, ip
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	685b      	ldr	r3, [r3, #4]
 8003b4c:	f04f 0400 	mov.w	r4, #0
 8003b50:	461a      	mov	r2, r3
 8003b52:	4623      	mov	r3, r4
 8003b54:	f7fc fb9c 	bl	8000290 <__aeabi_uldivmod>
 8003b58:	4603      	mov	r3, r0
 8003b5a:	460c      	mov	r4, r1
 8003b5c:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
            break;
 8003b5e:	e017      	b.n	8003b90 <UART_SetConfig+0x46c>
          case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate));
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	685b      	ldr	r3, [r3, #4]
 8003b64:	085b      	lsrs	r3, r3, #1
 8003b66:	f04f 0400 	mov.w	r4, #0
 8003b6a:	f513 0000 	adds.w	r0, r3, #8388608	; 0x800000
 8003b6e:	f144 0100 	adc.w	r1, r4, #0
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	685b      	ldr	r3, [r3, #4]
 8003b76:	f04f 0400 	mov.w	r4, #0
 8003b7a:	461a      	mov	r2, r3
 8003b7c:	4623      	mov	r3, r4
 8003b7e:	f7fc fb87 	bl	8000290 <__aeabi_uldivmod>
 8003b82:	4603      	mov	r3, r0
 8003b84:	460c      	mov	r4, r1
 8003b86:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
            break;
 8003b88:	e002      	b.n	8003b90 <UART_SetConfig+0x46c>
          case UART_CLOCKSOURCE_UNDEFINED:
          default:
            ret = HAL_ERROR;
 8003b8a:	2301      	movs	r3, #1
 8003b8c:	74fb      	strb	r3, [r7, #19]
            break;
 8003b8e:	bf00      	nop
        }

        /* It is forbidden to write values lower than 0x300 in the LPUART_BRR register */
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8003b90:	697b      	ldr	r3, [r7, #20]
 8003b92:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003b96:	d308      	bcc.n	8003baa <UART_SetConfig+0x486>
 8003b98:	697b      	ldr	r3, [r7, #20]
 8003b9a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003b9e:	d204      	bcs.n	8003baa <UART_SetConfig+0x486>
        {
          huart->Instance->BRR = usartdiv;
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	697a      	ldr	r2, [r7, #20]
 8003ba6:	60da      	str	r2, [r3, #12]
 8003ba8:	e0f5      	b.n	8003d96 <UART_SetConfig+0x672>
        }
        else
        {
          ret = HAL_ERROR;
 8003baa:	2301      	movs	r3, #1
 8003bac:	74fb      	strb	r3, [r7, #19]
 8003bae:	e0f2      	b.n	8003d96 <UART_SetConfig+0x672>
        }
      } /*   if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) || (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (lpuart_ker_ck_pres != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	69db      	ldr	r3, [r3, #28]
 8003bb4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003bb8:	d17f      	bne.n	8003cba <UART_SetConfig+0x596>
  {
    switch (clocksource)
 8003bba:	7efb      	ldrb	r3, [r7, #27]
 8003bbc:	2b08      	cmp	r3, #8
 8003bbe:	d85c      	bhi.n	8003c7a <UART_SetConfig+0x556>
 8003bc0:	a201      	add	r2, pc, #4	; (adr r2, 8003bc8 <UART_SetConfig+0x4a4>)
 8003bc2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003bc6:	bf00      	nop
 8003bc8:	08003bed 	.word	0x08003bed
 8003bcc:	08003c0b 	.word	0x08003c0b
 8003bd0:	08003c29 	.word	0x08003c29
 8003bd4:	08003c7b 	.word	0x08003c7b
 8003bd8:	08003c45 	.word	0x08003c45
 8003bdc:	08003c7b 	.word	0x08003c7b
 8003be0:	08003c7b 	.word	0x08003c7b
 8003be4:	08003c7b 	.word	0x08003c7b
 8003be8:	08003c63 	.word	0x08003c63
    {
      case UART_CLOCKSOURCE_PCLK1:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8003bec:	f7fe fd02 	bl	80025f4 <HAL_RCC_GetPCLK1Freq>
 8003bf0:	4603      	mov	r3, r0
 8003bf2:	005a      	lsls	r2, r3, #1
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	685b      	ldr	r3, [r3, #4]
 8003bf8:	085b      	lsrs	r3, r3, #1
 8003bfa:	441a      	add	r2, r3
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	685b      	ldr	r3, [r3, #4]
 8003c00:	fbb2 f3f3 	udiv	r3, r2, r3
 8003c04:	b29b      	uxth	r3, r3
 8003c06:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 8003c08:	e03a      	b.n	8003c80 <UART_SetConfig+0x55c>
      case UART_CLOCKSOURCE_PCLK2:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 8003c0a:	f7fe fd09 	bl	8002620 <HAL_RCC_GetPCLK2Freq>
 8003c0e:	4603      	mov	r3, r0
 8003c10:	005a      	lsls	r2, r3, #1
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	685b      	ldr	r3, [r3, #4]
 8003c16:	085b      	lsrs	r3, r3, #1
 8003c18:	441a      	add	r2, r3
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	685b      	ldr	r3, [r3, #4]
 8003c1e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003c22:	b29b      	uxth	r3, r3
 8003c24:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 8003c26:	e02b      	b.n	8003c80 <UART_SetConfig+0x55c>
      case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	685b      	ldr	r3, [r3, #4]
 8003c2c:	085b      	lsrs	r3, r3, #1
 8003c2e:	f103 73f4 	add.w	r3, r3, #31981568	; 0x1e80000
 8003c32:	f503 4390 	add.w	r3, r3, #18432	; 0x4800
 8003c36:	687a      	ldr	r2, [r7, #4]
 8003c38:	6852      	ldr	r2, [r2, #4]
 8003c3a:	fbb3 f3f2 	udiv	r3, r3, r2
 8003c3e:	b29b      	uxth	r3, r3
 8003c40:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 8003c42:	e01d      	b.n	8003c80 <UART_SetConfig+0x55c>
      case UART_CLOCKSOURCE_SYSCLK:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8003c44:	f7fe fc40 	bl	80024c8 <HAL_RCC_GetSysClockFreq>
 8003c48:	4603      	mov	r3, r0
 8003c4a:	005a      	lsls	r2, r3, #1
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	685b      	ldr	r3, [r3, #4]
 8003c50:	085b      	lsrs	r3, r3, #1
 8003c52:	441a      	add	r2, r3
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	685b      	ldr	r3, [r3, #4]
 8003c58:	fbb2 f3f3 	udiv	r3, r2, r3
 8003c5c:	b29b      	uxth	r3, r3
 8003c5e:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 8003c60:	e00e      	b.n	8003c80 <UART_SetConfig+0x55c>
      case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	685b      	ldr	r3, [r3, #4]
 8003c66:	085b      	lsrs	r3, r3, #1
 8003c68:	f503 3280 	add.w	r2, r3, #65536	; 0x10000
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	685b      	ldr	r3, [r3, #4]
 8003c70:	fbb2 f3f3 	udiv	r3, r2, r3
 8003c74:	b29b      	uxth	r3, r3
 8003c76:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 8003c78:	e002      	b.n	8003c80 <UART_SetConfig+0x55c>
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 8003c7a:	2301      	movs	r3, #1
 8003c7c:	74fb      	strb	r3, [r7, #19]
        break;
 8003c7e:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003c80:	697b      	ldr	r3, [r7, #20]
 8003c82:	2b0f      	cmp	r3, #15
 8003c84:	d916      	bls.n	8003cb4 <UART_SetConfig+0x590>
 8003c86:	697b      	ldr	r3, [r7, #20]
 8003c88:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003c8c:	d212      	bcs.n	8003cb4 <UART_SetConfig+0x590>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003c8e:	697b      	ldr	r3, [r7, #20]
 8003c90:	b29b      	uxth	r3, r3
 8003c92:	f023 030f 	bic.w	r3, r3, #15
 8003c96:	817b      	strh	r3, [r7, #10]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003c98:	697b      	ldr	r3, [r7, #20]
 8003c9a:	085b      	lsrs	r3, r3, #1
 8003c9c:	b29b      	uxth	r3, r3
 8003c9e:	f003 0307 	and.w	r3, r3, #7
 8003ca2:	b29a      	uxth	r2, r3
 8003ca4:	897b      	ldrh	r3, [r7, #10]
 8003ca6:	4313      	orrs	r3, r2
 8003ca8:	817b      	strh	r3, [r7, #10]
      huart->Instance->BRR = brrtemp;
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	897a      	ldrh	r2, [r7, #10]
 8003cb0:	60da      	str	r2, [r3, #12]
 8003cb2:	e070      	b.n	8003d96 <UART_SetConfig+0x672>
    }
    else
    {
      ret = HAL_ERROR;
 8003cb4:	2301      	movs	r3, #1
 8003cb6:	74fb      	strb	r3, [r7, #19]
 8003cb8:	e06d      	b.n	8003d96 <UART_SetConfig+0x672>
    }
  }
  else
  {
    switch (clocksource)
 8003cba:	7efb      	ldrb	r3, [r7, #27]
 8003cbc:	2b08      	cmp	r3, #8
 8003cbe:	d859      	bhi.n	8003d74 <UART_SetConfig+0x650>
 8003cc0:	a201      	add	r2, pc, #4	; (adr r2, 8003cc8 <UART_SetConfig+0x5a4>)
 8003cc2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003cc6:	bf00      	nop
 8003cc8:	08003ced 	.word	0x08003ced
 8003ccc:	08003d09 	.word	0x08003d09
 8003cd0:	08003d25 	.word	0x08003d25
 8003cd4:	08003d75 	.word	0x08003d75
 8003cd8:	08003d41 	.word	0x08003d41
 8003cdc:	08003d75 	.word	0x08003d75
 8003ce0:	08003d75 	.word	0x08003d75
 8003ce4:	08003d75 	.word	0x08003d75
 8003ce8:	08003d5d 	.word	0x08003d5d
    {
      case UART_CLOCKSOURCE_PCLK1:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8003cec:	f7fe fc82 	bl	80025f4 <HAL_RCC_GetPCLK1Freq>
 8003cf0:	4602      	mov	r2, r0
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	685b      	ldr	r3, [r3, #4]
 8003cf6:	085b      	lsrs	r3, r3, #1
 8003cf8:	441a      	add	r2, r3
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	685b      	ldr	r3, [r3, #4]
 8003cfe:	fbb2 f3f3 	udiv	r3, r2, r3
 8003d02:	b29b      	uxth	r3, r3
 8003d04:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 8003d06:	e038      	b.n	8003d7a <UART_SetConfig+0x656>
      case UART_CLOCKSOURCE_PCLK2:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 8003d08:	f7fe fc8a 	bl	8002620 <HAL_RCC_GetPCLK2Freq>
 8003d0c:	4602      	mov	r2, r0
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	685b      	ldr	r3, [r3, #4]
 8003d12:	085b      	lsrs	r3, r3, #1
 8003d14:	441a      	add	r2, r3
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	685b      	ldr	r3, [r3, #4]
 8003d1a:	fbb2 f3f3 	udiv	r3, r2, r3
 8003d1e:	b29b      	uxth	r3, r3
 8003d20:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 8003d22:	e02a      	b.n	8003d7a <UART_SetConfig+0x656>
      case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	685b      	ldr	r3, [r3, #4]
 8003d28:	085b      	lsrs	r3, r3, #1
 8003d2a:	f503 0374 	add.w	r3, r3, #15990784	; 0xf40000
 8003d2e:	f503 5310 	add.w	r3, r3, #9216	; 0x2400
 8003d32:	687a      	ldr	r2, [r7, #4]
 8003d34:	6852      	ldr	r2, [r2, #4]
 8003d36:	fbb3 f3f2 	udiv	r3, r3, r2
 8003d3a:	b29b      	uxth	r3, r3
 8003d3c:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 8003d3e:	e01c      	b.n	8003d7a <UART_SetConfig+0x656>
      case UART_CLOCKSOURCE_SYSCLK:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8003d40:	f7fe fbc2 	bl	80024c8 <HAL_RCC_GetSysClockFreq>
 8003d44:	4602      	mov	r2, r0
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	685b      	ldr	r3, [r3, #4]
 8003d4a:	085b      	lsrs	r3, r3, #1
 8003d4c:	441a      	add	r2, r3
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	685b      	ldr	r3, [r3, #4]
 8003d52:	fbb2 f3f3 	udiv	r3, r2, r3
 8003d56:	b29b      	uxth	r3, r3
 8003d58:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 8003d5a:	e00e      	b.n	8003d7a <UART_SetConfig+0x656>
      case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	685b      	ldr	r3, [r3, #4]
 8003d60:	085b      	lsrs	r3, r3, #1
 8003d62:	f503 4200 	add.w	r2, r3, #32768	; 0x8000
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	685b      	ldr	r3, [r3, #4]
 8003d6a:	fbb2 f3f3 	udiv	r3, r2, r3
 8003d6e:	b29b      	uxth	r3, r3
 8003d70:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 8003d72:	e002      	b.n	8003d7a <UART_SetConfig+0x656>
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 8003d74:	2301      	movs	r3, #1
 8003d76:	74fb      	strb	r3, [r7, #19]
        break;
 8003d78:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003d7a:	697b      	ldr	r3, [r7, #20]
 8003d7c:	2b0f      	cmp	r3, #15
 8003d7e:	d908      	bls.n	8003d92 <UART_SetConfig+0x66e>
 8003d80:	697b      	ldr	r3, [r7, #20]
 8003d82:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003d86:	d204      	bcs.n	8003d92 <UART_SetConfig+0x66e>
    {
      huart->Instance->BRR = usartdiv;
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	697a      	ldr	r2, [r7, #20]
 8003d8e:	60da      	str	r2, [r3, #12]
 8003d90:	e001      	b.n	8003d96 <UART_SetConfig+0x672>
    }
    else
    {
      ret = HAL_ERROR;
 8003d92:	2301      	movs	r3, #1
 8003d94:	74fb      	strb	r3, [r7, #19]
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	2200      	movs	r2, #0
 8003d9a:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	2200      	movs	r2, #0
 8003da0:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 8003da2:	7cfb      	ldrb	r3, [r7, #19]
}
 8003da4:	4618      	mov	r0, r3
 8003da6:	3720      	adds	r7, #32
 8003da8:	46bd      	mov	sp, r7
 8003daa:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}
 8003dae:	bf00      	nop
 8003db0:	f4240000 	.word	0xf4240000

08003db4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003db4:	b480      	push	{r7}
 8003db6:	b083      	sub	sp, #12
 8003db8:	af00      	add	r7, sp, #0
 8003dba:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003dc0:	f003 0301 	and.w	r3, r3, #1
 8003dc4:	2b00      	cmp	r3, #0
 8003dc6:	d00a      	beq.n	8003dde <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	685b      	ldr	r3, [r3, #4]
 8003dce:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	430a      	orrs	r2, r1
 8003ddc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003de2:	f003 0302 	and.w	r3, r3, #2
 8003de6:	2b00      	cmp	r3, #0
 8003de8:	d00a      	beq.n	8003e00 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	685b      	ldr	r3, [r3, #4]
 8003df0:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	430a      	orrs	r2, r1
 8003dfe:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e04:	f003 0304 	and.w	r3, r3, #4
 8003e08:	2b00      	cmp	r3, #0
 8003e0a:	d00a      	beq.n	8003e22 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	685b      	ldr	r3, [r3, #4]
 8003e12:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	430a      	orrs	r2, r1
 8003e20:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e26:	f003 0308 	and.w	r3, r3, #8
 8003e2a:	2b00      	cmp	r3, #0
 8003e2c:	d00a      	beq.n	8003e44 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	685b      	ldr	r3, [r3, #4]
 8003e34:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	430a      	orrs	r2, r1
 8003e42:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e48:	f003 0310 	and.w	r3, r3, #16
 8003e4c:	2b00      	cmp	r3, #0
 8003e4e:	d00a      	beq.n	8003e66 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	689b      	ldr	r3, [r3, #8]
 8003e56:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	430a      	orrs	r2, r1
 8003e64:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e6a:	f003 0320 	and.w	r3, r3, #32
 8003e6e:	2b00      	cmp	r3, #0
 8003e70:	d00a      	beq.n	8003e88 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	689b      	ldr	r3, [r3, #8]
 8003e78:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	430a      	orrs	r2, r1
 8003e86:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e8c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003e90:	2b00      	cmp	r3, #0
 8003e92:	d01a      	beq.n	8003eca <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	685b      	ldr	r3, [r3, #4]
 8003e9a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	430a      	orrs	r2, r1
 8003ea8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003eae:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003eb2:	d10a      	bne.n	8003eca <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	685b      	ldr	r3, [r3, #4]
 8003eba:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	430a      	orrs	r2, r1
 8003ec8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ece:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003ed2:	2b00      	cmp	r3, #0
 8003ed4:	d00a      	beq.n	8003eec <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	685b      	ldr	r3, [r3, #4]
 8003edc:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	430a      	orrs	r2, r1
 8003eea:	605a      	str	r2, [r3, #4]
  }
}
 8003eec:	bf00      	nop
 8003eee:	370c      	adds	r7, #12
 8003ef0:	46bd      	mov	sp, r7
 8003ef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ef6:	4770      	bx	lr

08003ef8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003ef8:	b580      	push	{r7, lr}
 8003efa:	b086      	sub	sp, #24
 8003efc:	af02      	add	r7, sp, #8
 8003efe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	2200      	movs	r2, #0
 8003f04:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 8003f06:	f7fd f9ef 	bl	80012e8 <HAL_GetTick>
 8003f0a:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	f003 0308 	and.w	r3, r3, #8
 8003f16:	2b08      	cmp	r3, #8
 8003f18:	d10e      	bne.n	8003f38 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003f1a:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003f1e:	9300      	str	r3, [sp, #0]
 8003f20:	68fb      	ldr	r3, [r7, #12]
 8003f22:	2200      	movs	r2, #0
 8003f24:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8003f28:	6878      	ldr	r0, [r7, #4]
 8003f2a:	f000 f82a 	bl	8003f82 <UART_WaitOnFlagUntilTimeout>
 8003f2e:	4603      	mov	r3, r0
 8003f30:	2b00      	cmp	r3, #0
 8003f32:	d001      	beq.n	8003f38 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003f34:	2303      	movs	r3, #3
 8003f36:	e020      	b.n	8003f7a <UART_CheckIdleState+0x82>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	f003 0304 	and.w	r3, r3, #4
 8003f42:	2b04      	cmp	r3, #4
 8003f44:	d10e      	bne.n	8003f64 <UART_CheckIdleState+0x6c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003f46:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003f4a:	9300      	str	r3, [sp, #0]
 8003f4c:	68fb      	ldr	r3, [r7, #12]
 8003f4e:	2200      	movs	r2, #0
 8003f50:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8003f54:	6878      	ldr	r0, [r7, #4]
 8003f56:	f000 f814 	bl	8003f82 <UART_WaitOnFlagUntilTimeout>
 8003f5a:	4603      	mov	r3, r0
 8003f5c:	2b00      	cmp	r3, #0
 8003f5e:	d001      	beq.n	8003f64 <UART_CheckIdleState+0x6c>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003f60:	2303      	movs	r3, #3
 8003f62:	e00a      	b.n	8003f7a <UART_CheckIdleState+0x82>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	2220      	movs	r2, #32
 8003f68:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	2220      	movs	r2, #32
 8003f6e:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UNLOCK(huart);
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	2200      	movs	r2, #0
 8003f74:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 8003f78:	2300      	movs	r3, #0
}
 8003f7a:	4618      	mov	r0, r3
 8003f7c:	3710      	adds	r7, #16
 8003f7e:	46bd      	mov	sp, r7
 8003f80:	bd80      	pop	{r7, pc}

08003f82 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003f82:	b580      	push	{r7, lr}
 8003f84:	b084      	sub	sp, #16
 8003f86:	af00      	add	r7, sp, #0
 8003f88:	60f8      	str	r0, [r7, #12]
 8003f8a:	60b9      	str	r1, [r7, #8]
 8003f8c:	603b      	str	r3, [r7, #0]
 8003f8e:	4613      	mov	r3, r2
 8003f90:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003f92:	e02a      	b.n	8003fea <UART_WaitOnFlagUntilTimeout+0x68>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003f94:	69bb      	ldr	r3, [r7, #24]
 8003f96:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003f9a:	d026      	beq.n	8003fea <UART_WaitOnFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003f9c:	f7fd f9a4 	bl	80012e8 <HAL_GetTick>
 8003fa0:	4602      	mov	r2, r0
 8003fa2:	683b      	ldr	r3, [r7, #0]
 8003fa4:	1ad3      	subs	r3, r2, r3
 8003fa6:	69ba      	ldr	r2, [r7, #24]
 8003fa8:	429a      	cmp	r2, r3
 8003faa:	d302      	bcc.n	8003fb2 <UART_WaitOnFlagUntilTimeout+0x30>
 8003fac:	69bb      	ldr	r3, [r7, #24]
 8003fae:	2b00      	cmp	r3, #0
 8003fb0:	d11b      	bne.n	8003fea <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003fb2:	68fb      	ldr	r3, [r7, #12]
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	681a      	ldr	r2, [r3, #0]
 8003fb8:	68fb      	ldr	r3, [r7, #12]
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8003fc0:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003fc2:	68fb      	ldr	r3, [r7, #12]
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	689a      	ldr	r2, [r3, #8]
 8003fc8:	68fb      	ldr	r3, [r7, #12]
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	f022 0201 	bic.w	r2, r2, #1
 8003fd0:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8003fd2:	68fb      	ldr	r3, [r7, #12]
 8003fd4:	2220      	movs	r2, #32
 8003fd6:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 8003fd8:	68fb      	ldr	r3, [r7, #12]
 8003fda:	2220      	movs	r2, #32
 8003fdc:	679a      	str	r2, [r3, #120]	; 0x78

        __HAL_UNLOCK(huart);
 8003fde:	68fb      	ldr	r3, [r7, #12]
 8003fe0:	2200      	movs	r2, #0
 8003fe2:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        return HAL_TIMEOUT;
 8003fe6:	2303      	movs	r3, #3
 8003fe8:	e00f      	b.n	800400a <UART_WaitOnFlagUntilTimeout+0x88>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003fea:	68fb      	ldr	r3, [r7, #12]
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	69da      	ldr	r2, [r3, #28]
 8003ff0:	68bb      	ldr	r3, [r7, #8]
 8003ff2:	4013      	ands	r3, r2
 8003ff4:	68ba      	ldr	r2, [r7, #8]
 8003ff6:	429a      	cmp	r2, r3
 8003ff8:	bf0c      	ite	eq
 8003ffa:	2301      	moveq	r3, #1
 8003ffc:	2300      	movne	r3, #0
 8003ffe:	b2db      	uxtb	r3, r3
 8004000:	461a      	mov	r2, r3
 8004002:	79fb      	ldrb	r3, [r7, #7]
 8004004:	429a      	cmp	r2, r3
 8004006:	d0c5      	beq.n	8003f94 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004008:	2300      	movs	r3, #0
}
 800400a:	4618      	mov	r0, r3
 800400c:	3710      	adds	r7, #16
 800400e:	46bd      	mov	sp, r7
 8004010:	bd80      	pop	{r7, pc}
	...

08004014 <__errno>:
 8004014:	4b01      	ldr	r3, [pc, #4]	; (800401c <__errno+0x8>)
 8004016:	6818      	ldr	r0, [r3, #0]
 8004018:	4770      	bx	lr
 800401a:	bf00      	nop
 800401c:	2000000c 	.word	0x2000000c

08004020 <__libc_init_array>:
 8004020:	b570      	push	{r4, r5, r6, lr}
 8004022:	4e0d      	ldr	r6, [pc, #52]	; (8004058 <__libc_init_array+0x38>)
 8004024:	4c0d      	ldr	r4, [pc, #52]	; (800405c <__libc_init_array+0x3c>)
 8004026:	1ba4      	subs	r4, r4, r6
 8004028:	10a4      	asrs	r4, r4, #2
 800402a:	2500      	movs	r5, #0
 800402c:	42a5      	cmp	r5, r4
 800402e:	d109      	bne.n	8004044 <__libc_init_array+0x24>
 8004030:	4e0b      	ldr	r6, [pc, #44]	; (8004060 <__libc_init_array+0x40>)
 8004032:	4c0c      	ldr	r4, [pc, #48]	; (8004064 <__libc_init_array+0x44>)
 8004034:	f000 ff04 	bl	8004e40 <_init>
 8004038:	1ba4      	subs	r4, r4, r6
 800403a:	10a4      	asrs	r4, r4, #2
 800403c:	2500      	movs	r5, #0
 800403e:	42a5      	cmp	r5, r4
 8004040:	d105      	bne.n	800404e <__libc_init_array+0x2e>
 8004042:	bd70      	pop	{r4, r5, r6, pc}
 8004044:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8004048:	4798      	blx	r3
 800404a:	3501      	adds	r5, #1
 800404c:	e7ee      	b.n	800402c <__libc_init_array+0xc>
 800404e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8004052:	4798      	blx	r3
 8004054:	3501      	adds	r5, #1
 8004056:	e7f2      	b.n	800403e <__libc_init_array+0x1e>
 8004058:	08004f8c 	.word	0x08004f8c
 800405c:	08004f8c 	.word	0x08004f8c
 8004060:	08004f8c 	.word	0x08004f8c
 8004064:	08004f90 	.word	0x08004f90

08004068 <memset>:
 8004068:	4402      	add	r2, r0
 800406a:	4603      	mov	r3, r0
 800406c:	4293      	cmp	r3, r2
 800406e:	d100      	bne.n	8004072 <memset+0xa>
 8004070:	4770      	bx	lr
 8004072:	f803 1b01 	strb.w	r1, [r3], #1
 8004076:	e7f9      	b.n	800406c <memset+0x4>

08004078 <iprintf>:
 8004078:	b40f      	push	{r0, r1, r2, r3}
 800407a:	4b0a      	ldr	r3, [pc, #40]	; (80040a4 <iprintf+0x2c>)
 800407c:	b513      	push	{r0, r1, r4, lr}
 800407e:	681c      	ldr	r4, [r3, #0]
 8004080:	b124      	cbz	r4, 800408c <iprintf+0x14>
 8004082:	69a3      	ldr	r3, [r4, #24]
 8004084:	b913      	cbnz	r3, 800408c <iprintf+0x14>
 8004086:	4620      	mov	r0, r4
 8004088:	f000 f84e 	bl	8004128 <__sinit>
 800408c:	ab05      	add	r3, sp, #20
 800408e:	9a04      	ldr	r2, [sp, #16]
 8004090:	68a1      	ldr	r1, [r4, #8]
 8004092:	9301      	str	r3, [sp, #4]
 8004094:	4620      	mov	r0, r4
 8004096:	f000 f955 	bl	8004344 <_vfiprintf_r>
 800409a:	b002      	add	sp, #8
 800409c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80040a0:	b004      	add	sp, #16
 80040a2:	4770      	bx	lr
 80040a4:	2000000c 	.word	0x2000000c

080040a8 <std>:
 80040a8:	2300      	movs	r3, #0
 80040aa:	b510      	push	{r4, lr}
 80040ac:	4604      	mov	r4, r0
 80040ae:	e9c0 3300 	strd	r3, r3, [r0]
 80040b2:	6083      	str	r3, [r0, #8]
 80040b4:	8181      	strh	r1, [r0, #12]
 80040b6:	6643      	str	r3, [r0, #100]	; 0x64
 80040b8:	81c2      	strh	r2, [r0, #14]
 80040ba:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80040be:	6183      	str	r3, [r0, #24]
 80040c0:	4619      	mov	r1, r3
 80040c2:	2208      	movs	r2, #8
 80040c4:	305c      	adds	r0, #92	; 0x5c
 80040c6:	f7ff ffcf 	bl	8004068 <memset>
 80040ca:	4b05      	ldr	r3, [pc, #20]	; (80040e0 <std+0x38>)
 80040cc:	6263      	str	r3, [r4, #36]	; 0x24
 80040ce:	4b05      	ldr	r3, [pc, #20]	; (80040e4 <std+0x3c>)
 80040d0:	62a3      	str	r3, [r4, #40]	; 0x28
 80040d2:	4b05      	ldr	r3, [pc, #20]	; (80040e8 <std+0x40>)
 80040d4:	62e3      	str	r3, [r4, #44]	; 0x2c
 80040d6:	4b05      	ldr	r3, [pc, #20]	; (80040ec <std+0x44>)
 80040d8:	6224      	str	r4, [r4, #32]
 80040da:	6323      	str	r3, [r4, #48]	; 0x30
 80040dc:	bd10      	pop	{r4, pc}
 80040de:	bf00      	nop
 80040e0:	080048a1 	.word	0x080048a1
 80040e4:	080048c3 	.word	0x080048c3
 80040e8:	080048fb 	.word	0x080048fb
 80040ec:	0800491f 	.word	0x0800491f

080040f0 <_cleanup_r>:
 80040f0:	4901      	ldr	r1, [pc, #4]	; (80040f8 <_cleanup_r+0x8>)
 80040f2:	f000 b885 	b.w	8004200 <_fwalk_reent>
 80040f6:	bf00      	nop
 80040f8:	08004bf9 	.word	0x08004bf9

080040fc <__sfmoreglue>:
 80040fc:	b570      	push	{r4, r5, r6, lr}
 80040fe:	1e4a      	subs	r2, r1, #1
 8004100:	2568      	movs	r5, #104	; 0x68
 8004102:	4355      	muls	r5, r2
 8004104:	460e      	mov	r6, r1
 8004106:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800410a:	f000 f897 	bl	800423c <_malloc_r>
 800410e:	4604      	mov	r4, r0
 8004110:	b140      	cbz	r0, 8004124 <__sfmoreglue+0x28>
 8004112:	2100      	movs	r1, #0
 8004114:	e9c0 1600 	strd	r1, r6, [r0]
 8004118:	300c      	adds	r0, #12
 800411a:	60a0      	str	r0, [r4, #8]
 800411c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8004120:	f7ff ffa2 	bl	8004068 <memset>
 8004124:	4620      	mov	r0, r4
 8004126:	bd70      	pop	{r4, r5, r6, pc}

08004128 <__sinit>:
 8004128:	6983      	ldr	r3, [r0, #24]
 800412a:	b510      	push	{r4, lr}
 800412c:	4604      	mov	r4, r0
 800412e:	bb33      	cbnz	r3, 800417e <__sinit+0x56>
 8004130:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 8004134:	6503      	str	r3, [r0, #80]	; 0x50
 8004136:	4b12      	ldr	r3, [pc, #72]	; (8004180 <__sinit+0x58>)
 8004138:	4a12      	ldr	r2, [pc, #72]	; (8004184 <__sinit+0x5c>)
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	6282      	str	r2, [r0, #40]	; 0x28
 800413e:	4298      	cmp	r0, r3
 8004140:	bf04      	itt	eq
 8004142:	2301      	moveq	r3, #1
 8004144:	6183      	streq	r3, [r0, #24]
 8004146:	f000 f81f 	bl	8004188 <__sfp>
 800414a:	6060      	str	r0, [r4, #4]
 800414c:	4620      	mov	r0, r4
 800414e:	f000 f81b 	bl	8004188 <__sfp>
 8004152:	60a0      	str	r0, [r4, #8]
 8004154:	4620      	mov	r0, r4
 8004156:	f000 f817 	bl	8004188 <__sfp>
 800415a:	2200      	movs	r2, #0
 800415c:	60e0      	str	r0, [r4, #12]
 800415e:	2104      	movs	r1, #4
 8004160:	6860      	ldr	r0, [r4, #4]
 8004162:	f7ff ffa1 	bl	80040a8 <std>
 8004166:	2201      	movs	r2, #1
 8004168:	2109      	movs	r1, #9
 800416a:	68a0      	ldr	r0, [r4, #8]
 800416c:	f7ff ff9c 	bl	80040a8 <std>
 8004170:	2202      	movs	r2, #2
 8004172:	2112      	movs	r1, #18
 8004174:	68e0      	ldr	r0, [r4, #12]
 8004176:	f7ff ff97 	bl	80040a8 <std>
 800417a:	2301      	movs	r3, #1
 800417c:	61a3      	str	r3, [r4, #24]
 800417e:	bd10      	pop	{r4, pc}
 8004180:	08004eec 	.word	0x08004eec
 8004184:	080040f1 	.word	0x080040f1

08004188 <__sfp>:
 8004188:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800418a:	4b1b      	ldr	r3, [pc, #108]	; (80041f8 <__sfp+0x70>)
 800418c:	681e      	ldr	r6, [r3, #0]
 800418e:	69b3      	ldr	r3, [r6, #24]
 8004190:	4607      	mov	r7, r0
 8004192:	b913      	cbnz	r3, 800419a <__sfp+0x12>
 8004194:	4630      	mov	r0, r6
 8004196:	f7ff ffc7 	bl	8004128 <__sinit>
 800419a:	3648      	adds	r6, #72	; 0x48
 800419c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80041a0:	3b01      	subs	r3, #1
 80041a2:	d503      	bpl.n	80041ac <__sfp+0x24>
 80041a4:	6833      	ldr	r3, [r6, #0]
 80041a6:	b133      	cbz	r3, 80041b6 <__sfp+0x2e>
 80041a8:	6836      	ldr	r6, [r6, #0]
 80041aa:	e7f7      	b.n	800419c <__sfp+0x14>
 80041ac:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80041b0:	b16d      	cbz	r5, 80041ce <__sfp+0x46>
 80041b2:	3468      	adds	r4, #104	; 0x68
 80041b4:	e7f4      	b.n	80041a0 <__sfp+0x18>
 80041b6:	2104      	movs	r1, #4
 80041b8:	4638      	mov	r0, r7
 80041ba:	f7ff ff9f 	bl	80040fc <__sfmoreglue>
 80041be:	6030      	str	r0, [r6, #0]
 80041c0:	2800      	cmp	r0, #0
 80041c2:	d1f1      	bne.n	80041a8 <__sfp+0x20>
 80041c4:	230c      	movs	r3, #12
 80041c6:	603b      	str	r3, [r7, #0]
 80041c8:	4604      	mov	r4, r0
 80041ca:	4620      	mov	r0, r4
 80041cc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80041ce:	4b0b      	ldr	r3, [pc, #44]	; (80041fc <__sfp+0x74>)
 80041d0:	6665      	str	r5, [r4, #100]	; 0x64
 80041d2:	e9c4 5500 	strd	r5, r5, [r4]
 80041d6:	60a5      	str	r5, [r4, #8]
 80041d8:	e9c4 3503 	strd	r3, r5, [r4, #12]
 80041dc:	e9c4 5505 	strd	r5, r5, [r4, #20]
 80041e0:	2208      	movs	r2, #8
 80041e2:	4629      	mov	r1, r5
 80041e4:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80041e8:	f7ff ff3e 	bl	8004068 <memset>
 80041ec:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80041f0:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80041f4:	e7e9      	b.n	80041ca <__sfp+0x42>
 80041f6:	bf00      	nop
 80041f8:	08004eec 	.word	0x08004eec
 80041fc:	ffff0001 	.word	0xffff0001

08004200 <_fwalk_reent>:
 8004200:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004204:	4680      	mov	r8, r0
 8004206:	4689      	mov	r9, r1
 8004208:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800420c:	2600      	movs	r6, #0
 800420e:	b914      	cbnz	r4, 8004216 <_fwalk_reent+0x16>
 8004210:	4630      	mov	r0, r6
 8004212:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004216:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 800421a:	3f01      	subs	r7, #1
 800421c:	d501      	bpl.n	8004222 <_fwalk_reent+0x22>
 800421e:	6824      	ldr	r4, [r4, #0]
 8004220:	e7f5      	b.n	800420e <_fwalk_reent+0xe>
 8004222:	89ab      	ldrh	r3, [r5, #12]
 8004224:	2b01      	cmp	r3, #1
 8004226:	d907      	bls.n	8004238 <_fwalk_reent+0x38>
 8004228:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800422c:	3301      	adds	r3, #1
 800422e:	d003      	beq.n	8004238 <_fwalk_reent+0x38>
 8004230:	4629      	mov	r1, r5
 8004232:	4640      	mov	r0, r8
 8004234:	47c8      	blx	r9
 8004236:	4306      	orrs	r6, r0
 8004238:	3568      	adds	r5, #104	; 0x68
 800423a:	e7ee      	b.n	800421a <_fwalk_reent+0x1a>

0800423c <_malloc_r>:
 800423c:	b570      	push	{r4, r5, r6, lr}
 800423e:	1ccd      	adds	r5, r1, #3
 8004240:	f025 0503 	bic.w	r5, r5, #3
 8004244:	3508      	adds	r5, #8
 8004246:	2d0c      	cmp	r5, #12
 8004248:	bf38      	it	cc
 800424a:	250c      	movcc	r5, #12
 800424c:	2d00      	cmp	r5, #0
 800424e:	4606      	mov	r6, r0
 8004250:	db01      	blt.n	8004256 <_malloc_r+0x1a>
 8004252:	42a9      	cmp	r1, r5
 8004254:	d903      	bls.n	800425e <_malloc_r+0x22>
 8004256:	230c      	movs	r3, #12
 8004258:	6033      	str	r3, [r6, #0]
 800425a:	2000      	movs	r0, #0
 800425c:	bd70      	pop	{r4, r5, r6, pc}
 800425e:	f000 fd6b 	bl	8004d38 <__malloc_lock>
 8004262:	4a21      	ldr	r2, [pc, #132]	; (80042e8 <_malloc_r+0xac>)
 8004264:	6814      	ldr	r4, [r2, #0]
 8004266:	4621      	mov	r1, r4
 8004268:	b991      	cbnz	r1, 8004290 <_malloc_r+0x54>
 800426a:	4c20      	ldr	r4, [pc, #128]	; (80042ec <_malloc_r+0xb0>)
 800426c:	6823      	ldr	r3, [r4, #0]
 800426e:	b91b      	cbnz	r3, 8004278 <_malloc_r+0x3c>
 8004270:	4630      	mov	r0, r6
 8004272:	f000 fb05 	bl	8004880 <_sbrk_r>
 8004276:	6020      	str	r0, [r4, #0]
 8004278:	4629      	mov	r1, r5
 800427a:	4630      	mov	r0, r6
 800427c:	f000 fb00 	bl	8004880 <_sbrk_r>
 8004280:	1c43      	adds	r3, r0, #1
 8004282:	d124      	bne.n	80042ce <_malloc_r+0x92>
 8004284:	230c      	movs	r3, #12
 8004286:	6033      	str	r3, [r6, #0]
 8004288:	4630      	mov	r0, r6
 800428a:	f000 fd56 	bl	8004d3a <__malloc_unlock>
 800428e:	e7e4      	b.n	800425a <_malloc_r+0x1e>
 8004290:	680b      	ldr	r3, [r1, #0]
 8004292:	1b5b      	subs	r3, r3, r5
 8004294:	d418      	bmi.n	80042c8 <_malloc_r+0x8c>
 8004296:	2b0b      	cmp	r3, #11
 8004298:	d90f      	bls.n	80042ba <_malloc_r+0x7e>
 800429a:	600b      	str	r3, [r1, #0]
 800429c:	50cd      	str	r5, [r1, r3]
 800429e:	18cc      	adds	r4, r1, r3
 80042a0:	4630      	mov	r0, r6
 80042a2:	f000 fd4a 	bl	8004d3a <__malloc_unlock>
 80042a6:	f104 000b 	add.w	r0, r4, #11
 80042aa:	1d23      	adds	r3, r4, #4
 80042ac:	f020 0007 	bic.w	r0, r0, #7
 80042b0:	1ac3      	subs	r3, r0, r3
 80042b2:	d0d3      	beq.n	800425c <_malloc_r+0x20>
 80042b4:	425a      	negs	r2, r3
 80042b6:	50e2      	str	r2, [r4, r3]
 80042b8:	e7d0      	b.n	800425c <_malloc_r+0x20>
 80042ba:	428c      	cmp	r4, r1
 80042bc:	684b      	ldr	r3, [r1, #4]
 80042be:	bf16      	itet	ne
 80042c0:	6063      	strne	r3, [r4, #4]
 80042c2:	6013      	streq	r3, [r2, #0]
 80042c4:	460c      	movne	r4, r1
 80042c6:	e7eb      	b.n	80042a0 <_malloc_r+0x64>
 80042c8:	460c      	mov	r4, r1
 80042ca:	6849      	ldr	r1, [r1, #4]
 80042cc:	e7cc      	b.n	8004268 <_malloc_r+0x2c>
 80042ce:	1cc4      	adds	r4, r0, #3
 80042d0:	f024 0403 	bic.w	r4, r4, #3
 80042d4:	42a0      	cmp	r0, r4
 80042d6:	d005      	beq.n	80042e4 <_malloc_r+0xa8>
 80042d8:	1a21      	subs	r1, r4, r0
 80042da:	4630      	mov	r0, r6
 80042dc:	f000 fad0 	bl	8004880 <_sbrk_r>
 80042e0:	3001      	adds	r0, #1
 80042e2:	d0cf      	beq.n	8004284 <_malloc_r+0x48>
 80042e4:	6025      	str	r5, [r4, #0]
 80042e6:	e7db      	b.n	80042a0 <_malloc_r+0x64>
 80042e8:	20000090 	.word	0x20000090
 80042ec:	20000094 	.word	0x20000094

080042f0 <__sfputc_r>:
 80042f0:	6893      	ldr	r3, [r2, #8]
 80042f2:	3b01      	subs	r3, #1
 80042f4:	2b00      	cmp	r3, #0
 80042f6:	b410      	push	{r4}
 80042f8:	6093      	str	r3, [r2, #8]
 80042fa:	da08      	bge.n	800430e <__sfputc_r+0x1e>
 80042fc:	6994      	ldr	r4, [r2, #24]
 80042fe:	42a3      	cmp	r3, r4
 8004300:	db01      	blt.n	8004306 <__sfputc_r+0x16>
 8004302:	290a      	cmp	r1, #10
 8004304:	d103      	bne.n	800430e <__sfputc_r+0x1e>
 8004306:	f85d 4b04 	ldr.w	r4, [sp], #4
 800430a:	f000 bb0d 	b.w	8004928 <__swbuf_r>
 800430e:	6813      	ldr	r3, [r2, #0]
 8004310:	1c58      	adds	r0, r3, #1
 8004312:	6010      	str	r0, [r2, #0]
 8004314:	7019      	strb	r1, [r3, #0]
 8004316:	4608      	mov	r0, r1
 8004318:	f85d 4b04 	ldr.w	r4, [sp], #4
 800431c:	4770      	bx	lr

0800431e <__sfputs_r>:
 800431e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004320:	4606      	mov	r6, r0
 8004322:	460f      	mov	r7, r1
 8004324:	4614      	mov	r4, r2
 8004326:	18d5      	adds	r5, r2, r3
 8004328:	42ac      	cmp	r4, r5
 800432a:	d101      	bne.n	8004330 <__sfputs_r+0x12>
 800432c:	2000      	movs	r0, #0
 800432e:	e007      	b.n	8004340 <__sfputs_r+0x22>
 8004330:	463a      	mov	r2, r7
 8004332:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004336:	4630      	mov	r0, r6
 8004338:	f7ff ffda 	bl	80042f0 <__sfputc_r>
 800433c:	1c43      	adds	r3, r0, #1
 800433e:	d1f3      	bne.n	8004328 <__sfputs_r+0xa>
 8004340:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08004344 <_vfiprintf_r>:
 8004344:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004348:	460c      	mov	r4, r1
 800434a:	b09d      	sub	sp, #116	; 0x74
 800434c:	4617      	mov	r7, r2
 800434e:	461d      	mov	r5, r3
 8004350:	4606      	mov	r6, r0
 8004352:	b118      	cbz	r0, 800435c <_vfiprintf_r+0x18>
 8004354:	6983      	ldr	r3, [r0, #24]
 8004356:	b90b      	cbnz	r3, 800435c <_vfiprintf_r+0x18>
 8004358:	f7ff fee6 	bl	8004128 <__sinit>
 800435c:	4b7c      	ldr	r3, [pc, #496]	; (8004550 <_vfiprintf_r+0x20c>)
 800435e:	429c      	cmp	r4, r3
 8004360:	d158      	bne.n	8004414 <_vfiprintf_r+0xd0>
 8004362:	6874      	ldr	r4, [r6, #4]
 8004364:	89a3      	ldrh	r3, [r4, #12]
 8004366:	0718      	lsls	r0, r3, #28
 8004368:	d55e      	bpl.n	8004428 <_vfiprintf_r+0xe4>
 800436a:	6923      	ldr	r3, [r4, #16]
 800436c:	2b00      	cmp	r3, #0
 800436e:	d05b      	beq.n	8004428 <_vfiprintf_r+0xe4>
 8004370:	2300      	movs	r3, #0
 8004372:	9309      	str	r3, [sp, #36]	; 0x24
 8004374:	2320      	movs	r3, #32
 8004376:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800437a:	2330      	movs	r3, #48	; 0x30
 800437c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8004380:	9503      	str	r5, [sp, #12]
 8004382:	f04f 0b01 	mov.w	fp, #1
 8004386:	46b8      	mov	r8, r7
 8004388:	4645      	mov	r5, r8
 800438a:	f815 3b01 	ldrb.w	r3, [r5], #1
 800438e:	b10b      	cbz	r3, 8004394 <_vfiprintf_r+0x50>
 8004390:	2b25      	cmp	r3, #37	; 0x25
 8004392:	d154      	bne.n	800443e <_vfiprintf_r+0xfa>
 8004394:	ebb8 0a07 	subs.w	sl, r8, r7
 8004398:	d00b      	beq.n	80043b2 <_vfiprintf_r+0x6e>
 800439a:	4653      	mov	r3, sl
 800439c:	463a      	mov	r2, r7
 800439e:	4621      	mov	r1, r4
 80043a0:	4630      	mov	r0, r6
 80043a2:	f7ff ffbc 	bl	800431e <__sfputs_r>
 80043a6:	3001      	adds	r0, #1
 80043a8:	f000 80c2 	beq.w	8004530 <_vfiprintf_r+0x1ec>
 80043ac:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80043ae:	4453      	add	r3, sl
 80043b0:	9309      	str	r3, [sp, #36]	; 0x24
 80043b2:	f898 3000 	ldrb.w	r3, [r8]
 80043b6:	2b00      	cmp	r3, #0
 80043b8:	f000 80ba 	beq.w	8004530 <_vfiprintf_r+0x1ec>
 80043bc:	2300      	movs	r3, #0
 80043be:	f04f 32ff 	mov.w	r2, #4294967295
 80043c2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80043c6:	9304      	str	r3, [sp, #16]
 80043c8:	9307      	str	r3, [sp, #28]
 80043ca:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80043ce:	931a      	str	r3, [sp, #104]	; 0x68
 80043d0:	46a8      	mov	r8, r5
 80043d2:	2205      	movs	r2, #5
 80043d4:	f818 1b01 	ldrb.w	r1, [r8], #1
 80043d8:	485e      	ldr	r0, [pc, #376]	; (8004554 <_vfiprintf_r+0x210>)
 80043da:	f7fb ff09 	bl	80001f0 <memchr>
 80043de:	9b04      	ldr	r3, [sp, #16]
 80043e0:	bb78      	cbnz	r0, 8004442 <_vfiprintf_r+0xfe>
 80043e2:	06d9      	lsls	r1, r3, #27
 80043e4:	bf44      	itt	mi
 80043e6:	2220      	movmi	r2, #32
 80043e8:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80043ec:	071a      	lsls	r2, r3, #28
 80043ee:	bf44      	itt	mi
 80043f0:	222b      	movmi	r2, #43	; 0x2b
 80043f2:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80043f6:	782a      	ldrb	r2, [r5, #0]
 80043f8:	2a2a      	cmp	r2, #42	; 0x2a
 80043fa:	d02a      	beq.n	8004452 <_vfiprintf_r+0x10e>
 80043fc:	9a07      	ldr	r2, [sp, #28]
 80043fe:	46a8      	mov	r8, r5
 8004400:	2000      	movs	r0, #0
 8004402:	250a      	movs	r5, #10
 8004404:	4641      	mov	r1, r8
 8004406:	f811 3b01 	ldrb.w	r3, [r1], #1
 800440a:	3b30      	subs	r3, #48	; 0x30
 800440c:	2b09      	cmp	r3, #9
 800440e:	d969      	bls.n	80044e4 <_vfiprintf_r+0x1a0>
 8004410:	b360      	cbz	r0, 800446c <_vfiprintf_r+0x128>
 8004412:	e024      	b.n	800445e <_vfiprintf_r+0x11a>
 8004414:	4b50      	ldr	r3, [pc, #320]	; (8004558 <_vfiprintf_r+0x214>)
 8004416:	429c      	cmp	r4, r3
 8004418:	d101      	bne.n	800441e <_vfiprintf_r+0xda>
 800441a:	68b4      	ldr	r4, [r6, #8]
 800441c:	e7a2      	b.n	8004364 <_vfiprintf_r+0x20>
 800441e:	4b4f      	ldr	r3, [pc, #316]	; (800455c <_vfiprintf_r+0x218>)
 8004420:	429c      	cmp	r4, r3
 8004422:	bf08      	it	eq
 8004424:	68f4      	ldreq	r4, [r6, #12]
 8004426:	e79d      	b.n	8004364 <_vfiprintf_r+0x20>
 8004428:	4621      	mov	r1, r4
 800442a:	4630      	mov	r0, r6
 800442c:	f000 fae0 	bl	80049f0 <__swsetup_r>
 8004430:	2800      	cmp	r0, #0
 8004432:	d09d      	beq.n	8004370 <_vfiprintf_r+0x2c>
 8004434:	f04f 30ff 	mov.w	r0, #4294967295
 8004438:	b01d      	add	sp, #116	; 0x74
 800443a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800443e:	46a8      	mov	r8, r5
 8004440:	e7a2      	b.n	8004388 <_vfiprintf_r+0x44>
 8004442:	4a44      	ldr	r2, [pc, #272]	; (8004554 <_vfiprintf_r+0x210>)
 8004444:	1a80      	subs	r0, r0, r2
 8004446:	fa0b f000 	lsl.w	r0, fp, r0
 800444a:	4318      	orrs	r0, r3
 800444c:	9004      	str	r0, [sp, #16]
 800444e:	4645      	mov	r5, r8
 8004450:	e7be      	b.n	80043d0 <_vfiprintf_r+0x8c>
 8004452:	9a03      	ldr	r2, [sp, #12]
 8004454:	1d11      	adds	r1, r2, #4
 8004456:	6812      	ldr	r2, [r2, #0]
 8004458:	9103      	str	r1, [sp, #12]
 800445a:	2a00      	cmp	r2, #0
 800445c:	db01      	blt.n	8004462 <_vfiprintf_r+0x11e>
 800445e:	9207      	str	r2, [sp, #28]
 8004460:	e004      	b.n	800446c <_vfiprintf_r+0x128>
 8004462:	4252      	negs	r2, r2
 8004464:	f043 0302 	orr.w	r3, r3, #2
 8004468:	9207      	str	r2, [sp, #28]
 800446a:	9304      	str	r3, [sp, #16]
 800446c:	f898 3000 	ldrb.w	r3, [r8]
 8004470:	2b2e      	cmp	r3, #46	; 0x2e
 8004472:	d10e      	bne.n	8004492 <_vfiprintf_r+0x14e>
 8004474:	f898 3001 	ldrb.w	r3, [r8, #1]
 8004478:	2b2a      	cmp	r3, #42	; 0x2a
 800447a:	d138      	bne.n	80044ee <_vfiprintf_r+0x1aa>
 800447c:	9b03      	ldr	r3, [sp, #12]
 800447e:	1d1a      	adds	r2, r3, #4
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	9203      	str	r2, [sp, #12]
 8004484:	2b00      	cmp	r3, #0
 8004486:	bfb8      	it	lt
 8004488:	f04f 33ff 	movlt.w	r3, #4294967295
 800448c:	f108 0802 	add.w	r8, r8, #2
 8004490:	9305      	str	r3, [sp, #20]
 8004492:	4d33      	ldr	r5, [pc, #204]	; (8004560 <_vfiprintf_r+0x21c>)
 8004494:	f898 1000 	ldrb.w	r1, [r8]
 8004498:	2203      	movs	r2, #3
 800449a:	4628      	mov	r0, r5
 800449c:	f7fb fea8 	bl	80001f0 <memchr>
 80044a0:	b140      	cbz	r0, 80044b4 <_vfiprintf_r+0x170>
 80044a2:	2340      	movs	r3, #64	; 0x40
 80044a4:	1b40      	subs	r0, r0, r5
 80044a6:	fa03 f000 	lsl.w	r0, r3, r0
 80044aa:	9b04      	ldr	r3, [sp, #16]
 80044ac:	4303      	orrs	r3, r0
 80044ae:	f108 0801 	add.w	r8, r8, #1
 80044b2:	9304      	str	r3, [sp, #16]
 80044b4:	f898 1000 	ldrb.w	r1, [r8]
 80044b8:	482a      	ldr	r0, [pc, #168]	; (8004564 <_vfiprintf_r+0x220>)
 80044ba:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80044be:	2206      	movs	r2, #6
 80044c0:	f108 0701 	add.w	r7, r8, #1
 80044c4:	f7fb fe94 	bl	80001f0 <memchr>
 80044c8:	2800      	cmp	r0, #0
 80044ca:	d037      	beq.n	800453c <_vfiprintf_r+0x1f8>
 80044cc:	4b26      	ldr	r3, [pc, #152]	; (8004568 <_vfiprintf_r+0x224>)
 80044ce:	bb1b      	cbnz	r3, 8004518 <_vfiprintf_r+0x1d4>
 80044d0:	9b03      	ldr	r3, [sp, #12]
 80044d2:	3307      	adds	r3, #7
 80044d4:	f023 0307 	bic.w	r3, r3, #7
 80044d8:	3308      	adds	r3, #8
 80044da:	9303      	str	r3, [sp, #12]
 80044dc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80044de:	444b      	add	r3, r9
 80044e0:	9309      	str	r3, [sp, #36]	; 0x24
 80044e2:	e750      	b.n	8004386 <_vfiprintf_r+0x42>
 80044e4:	fb05 3202 	mla	r2, r5, r2, r3
 80044e8:	2001      	movs	r0, #1
 80044ea:	4688      	mov	r8, r1
 80044ec:	e78a      	b.n	8004404 <_vfiprintf_r+0xc0>
 80044ee:	2300      	movs	r3, #0
 80044f0:	f108 0801 	add.w	r8, r8, #1
 80044f4:	9305      	str	r3, [sp, #20]
 80044f6:	4619      	mov	r1, r3
 80044f8:	250a      	movs	r5, #10
 80044fa:	4640      	mov	r0, r8
 80044fc:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004500:	3a30      	subs	r2, #48	; 0x30
 8004502:	2a09      	cmp	r2, #9
 8004504:	d903      	bls.n	800450e <_vfiprintf_r+0x1ca>
 8004506:	2b00      	cmp	r3, #0
 8004508:	d0c3      	beq.n	8004492 <_vfiprintf_r+0x14e>
 800450a:	9105      	str	r1, [sp, #20]
 800450c:	e7c1      	b.n	8004492 <_vfiprintf_r+0x14e>
 800450e:	fb05 2101 	mla	r1, r5, r1, r2
 8004512:	2301      	movs	r3, #1
 8004514:	4680      	mov	r8, r0
 8004516:	e7f0      	b.n	80044fa <_vfiprintf_r+0x1b6>
 8004518:	ab03      	add	r3, sp, #12
 800451a:	9300      	str	r3, [sp, #0]
 800451c:	4622      	mov	r2, r4
 800451e:	4b13      	ldr	r3, [pc, #76]	; (800456c <_vfiprintf_r+0x228>)
 8004520:	a904      	add	r1, sp, #16
 8004522:	4630      	mov	r0, r6
 8004524:	f3af 8000 	nop.w
 8004528:	f1b0 3fff 	cmp.w	r0, #4294967295
 800452c:	4681      	mov	r9, r0
 800452e:	d1d5      	bne.n	80044dc <_vfiprintf_r+0x198>
 8004530:	89a3      	ldrh	r3, [r4, #12]
 8004532:	065b      	lsls	r3, r3, #25
 8004534:	f53f af7e 	bmi.w	8004434 <_vfiprintf_r+0xf0>
 8004538:	9809      	ldr	r0, [sp, #36]	; 0x24
 800453a:	e77d      	b.n	8004438 <_vfiprintf_r+0xf4>
 800453c:	ab03      	add	r3, sp, #12
 800453e:	9300      	str	r3, [sp, #0]
 8004540:	4622      	mov	r2, r4
 8004542:	4b0a      	ldr	r3, [pc, #40]	; (800456c <_vfiprintf_r+0x228>)
 8004544:	a904      	add	r1, sp, #16
 8004546:	4630      	mov	r0, r6
 8004548:	f000 f888 	bl	800465c <_printf_i>
 800454c:	e7ec      	b.n	8004528 <_vfiprintf_r+0x1e4>
 800454e:	bf00      	nop
 8004550:	08004f10 	.word	0x08004f10
 8004554:	08004f50 	.word	0x08004f50
 8004558:	08004f30 	.word	0x08004f30
 800455c:	08004ef0 	.word	0x08004ef0
 8004560:	08004f56 	.word	0x08004f56
 8004564:	08004f5a 	.word	0x08004f5a
 8004568:	00000000 	.word	0x00000000
 800456c:	0800431f 	.word	0x0800431f

08004570 <_printf_common>:
 8004570:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004574:	4691      	mov	r9, r2
 8004576:	461f      	mov	r7, r3
 8004578:	688a      	ldr	r2, [r1, #8]
 800457a:	690b      	ldr	r3, [r1, #16]
 800457c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004580:	4293      	cmp	r3, r2
 8004582:	bfb8      	it	lt
 8004584:	4613      	movlt	r3, r2
 8004586:	f8c9 3000 	str.w	r3, [r9]
 800458a:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800458e:	4606      	mov	r6, r0
 8004590:	460c      	mov	r4, r1
 8004592:	b112      	cbz	r2, 800459a <_printf_common+0x2a>
 8004594:	3301      	adds	r3, #1
 8004596:	f8c9 3000 	str.w	r3, [r9]
 800459a:	6823      	ldr	r3, [r4, #0]
 800459c:	0699      	lsls	r1, r3, #26
 800459e:	bf42      	ittt	mi
 80045a0:	f8d9 3000 	ldrmi.w	r3, [r9]
 80045a4:	3302      	addmi	r3, #2
 80045a6:	f8c9 3000 	strmi.w	r3, [r9]
 80045aa:	6825      	ldr	r5, [r4, #0]
 80045ac:	f015 0506 	ands.w	r5, r5, #6
 80045b0:	d107      	bne.n	80045c2 <_printf_common+0x52>
 80045b2:	f104 0a19 	add.w	sl, r4, #25
 80045b6:	68e3      	ldr	r3, [r4, #12]
 80045b8:	f8d9 2000 	ldr.w	r2, [r9]
 80045bc:	1a9b      	subs	r3, r3, r2
 80045be:	42ab      	cmp	r3, r5
 80045c0:	dc28      	bgt.n	8004614 <_printf_common+0xa4>
 80045c2:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 80045c6:	6822      	ldr	r2, [r4, #0]
 80045c8:	3300      	adds	r3, #0
 80045ca:	bf18      	it	ne
 80045cc:	2301      	movne	r3, #1
 80045ce:	0692      	lsls	r2, r2, #26
 80045d0:	d42d      	bmi.n	800462e <_printf_common+0xbe>
 80045d2:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80045d6:	4639      	mov	r1, r7
 80045d8:	4630      	mov	r0, r6
 80045da:	47c0      	blx	r8
 80045dc:	3001      	adds	r0, #1
 80045de:	d020      	beq.n	8004622 <_printf_common+0xb2>
 80045e0:	6823      	ldr	r3, [r4, #0]
 80045e2:	68e5      	ldr	r5, [r4, #12]
 80045e4:	f8d9 2000 	ldr.w	r2, [r9]
 80045e8:	f003 0306 	and.w	r3, r3, #6
 80045ec:	2b04      	cmp	r3, #4
 80045ee:	bf08      	it	eq
 80045f0:	1aad      	subeq	r5, r5, r2
 80045f2:	68a3      	ldr	r3, [r4, #8]
 80045f4:	6922      	ldr	r2, [r4, #16]
 80045f6:	bf0c      	ite	eq
 80045f8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80045fc:	2500      	movne	r5, #0
 80045fe:	4293      	cmp	r3, r2
 8004600:	bfc4      	itt	gt
 8004602:	1a9b      	subgt	r3, r3, r2
 8004604:	18ed      	addgt	r5, r5, r3
 8004606:	f04f 0900 	mov.w	r9, #0
 800460a:	341a      	adds	r4, #26
 800460c:	454d      	cmp	r5, r9
 800460e:	d11a      	bne.n	8004646 <_printf_common+0xd6>
 8004610:	2000      	movs	r0, #0
 8004612:	e008      	b.n	8004626 <_printf_common+0xb6>
 8004614:	2301      	movs	r3, #1
 8004616:	4652      	mov	r2, sl
 8004618:	4639      	mov	r1, r7
 800461a:	4630      	mov	r0, r6
 800461c:	47c0      	blx	r8
 800461e:	3001      	adds	r0, #1
 8004620:	d103      	bne.n	800462a <_printf_common+0xba>
 8004622:	f04f 30ff 	mov.w	r0, #4294967295
 8004626:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800462a:	3501      	adds	r5, #1
 800462c:	e7c3      	b.n	80045b6 <_printf_common+0x46>
 800462e:	18e1      	adds	r1, r4, r3
 8004630:	1c5a      	adds	r2, r3, #1
 8004632:	2030      	movs	r0, #48	; 0x30
 8004634:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004638:	4422      	add	r2, r4
 800463a:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800463e:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004642:	3302      	adds	r3, #2
 8004644:	e7c5      	b.n	80045d2 <_printf_common+0x62>
 8004646:	2301      	movs	r3, #1
 8004648:	4622      	mov	r2, r4
 800464a:	4639      	mov	r1, r7
 800464c:	4630      	mov	r0, r6
 800464e:	47c0      	blx	r8
 8004650:	3001      	adds	r0, #1
 8004652:	d0e6      	beq.n	8004622 <_printf_common+0xb2>
 8004654:	f109 0901 	add.w	r9, r9, #1
 8004658:	e7d8      	b.n	800460c <_printf_common+0x9c>
	...

0800465c <_printf_i>:
 800465c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8004660:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8004664:	460c      	mov	r4, r1
 8004666:	7e09      	ldrb	r1, [r1, #24]
 8004668:	b085      	sub	sp, #20
 800466a:	296e      	cmp	r1, #110	; 0x6e
 800466c:	4617      	mov	r7, r2
 800466e:	4606      	mov	r6, r0
 8004670:	4698      	mov	r8, r3
 8004672:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8004674:	f000 80b3 	beq.w	80047de <_printf_i+0x182>
 8004678:	d822      	bhi.n	80046c0 <_printf_i+0x64>
 800467a:	2963      	cmp	r1, #99	; 0x63
 800467c:	d036      	beq.n	80046ec <_printf_i+0x90>
 800467e:	d80a      	bhi.n	8004696 <_printf_i+0x3a>
 8004680:	2900      	cmp	r1, #0
 8004682:	f000 80b9 	beq.w	80047f8 <_printf_i+0x19c>
 8004686:	2958      	cmp	r1, #88	; 0x58
 8004688:	f000 8083 	beq.w	8004792 <_printf_i+0x136>
 800468c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004690:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8004694:	e032      	b.n	80046fc <_printf_i+0xa0>
 8004696:	2964      	cmp	r1, #100	; 0x64
 8004698:	d001      	beq.n	800469e <_printf_i+0x42>
 800469a:	2969      	cmp	r1, #105	; 0x69
 800469c:	d1f6      	bne.n	800468c <_printf_i+0x30>
 800469e:	6820      	ldr	r0, [r4, #0]
 80046a0:	6813      	ldr	r3, [r2, #0]
 80046a2:	0605      	lsls	r5, r0, #24
 80046a4:	f103 0104 	add.w	r1, r3, #4
 80046a8:	d52a      	bpl.n	8004700 <_printf_i+0xa4>
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	6011      	str	r1, [r2, #0]
 80046ae:	2b00      	cmp	r3, #0
 80046b0:	da03      	bge.n	80046ba <_printf_i+0x5e>
 80046b2:	222d      	movs	r2, #45	; 0x2d
 80046b4:	425b      	negs	r3, r3
 80046b6:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 80046ba:	486f      	ldr	r0, [pc, #444]	; (8004878 <_printf_i+0x21c>)
 80046bc:	220a      	movs	r2, #10
 80046be:	e039      	b.n	8004734 <_printf_i+0xd8>
 80046c0:	2973      	cmp	r1, #115	; 0x73
 80046c2:	f000 809d 	beq.w	8004800 <_printf_i+0x1a4>
 80046c6:	d808      	bhi.n	80046da <_printf_i+0x7e>
 80046c8:	296f      	cmp	r1, #111	; 0x6f
 80046ca:	d020      	beq.n	800470e <_printf_i+0xb2>
 80046cc:	2970      	cmp	r1, #112	; 0x70
 80046ce:	d1dd      	bne.n	800468c <_printf_i+0x30>
 80046d0:	6823      	ldr	r3, [r4, #0]
 80046d2:	f043 0320 	orr.w	r3, r3, #32
 80046d6:	6023      	str	r3, [r4, #0]
 80046d8:	e003      	b.n	80046e2 <_printf_i+0x86>
 80046da:	2975      	cmp	r1, #117	; 0x75
 80046dc:	d017      	beq.n	800470e <_printf_i+0xb2>
 80046de:	2978      	cmp	r1, #120	; 0x78
 80046e0:	d1d4      	bne.n	800468c <_printf_i+0x30>
 80046e2:	2378      	movs	r3, #120	; 0x78
 80046e4:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80046e8:	4864      	ldr	r0, [pc, #400]	; (800487c <_printf_i+0x220>)
 80046ea:	e055      	b.n	8004798 <_printf_i+0x13c>
 80046ec:	6813      	ldr	r3, [r2, #0]
 80046ee:	1d19      	adds	r1, r3, #4
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	6011      	str	r1, [r2, #0]
 80046f4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80046f8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80046fc:	2301      	movs	r3, #1
 80046fe:	e08c      	b.n	800481a <_printf_i+0x1be>
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	6011      	str	r1, [r2, #0]
 8004704:	f010 0f40 	tst.w	r0, #64	; 0x40
 8004708:	bf18      	it	ne
 800470a:	b21b      	sxthne	r3, r3
 800470c:	e7cf      	b.n	80046ae <_printf_i+0x52>
 800470e:	6813      	ldr	r3, [r2, #0]
 8004710:	6825      	ldr	r5, [r4, #0]
 8004712:	1d18      	adds	r0, r3, #4
 8004714:	6010      	str	r0, [r2, #0]
 8004716:	0628      	lsls	r0, r5, #24
 8004718:	d501      	bpl.n	800471e <_printf_i+0xc2>
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	e002      	b.n	8004724 <_printf_i+0xc8>
 800471e:	0668      	lsls	r0, r5, #25
 8004720:	d5fb      	bpl.n	800471a <_printf_i+0xbe>
 8004722:	881b      	ldrh	r3, [r3, #0]
 8004724:	4854      	ldr	r0, [pc, #336]	; (8004878 <_printf_i+0x21c>)
 8004726:	296f      	cmp	r1, #111	; 0x6f
 8004728:	bf14      	ite	ne
 800472a:	220a      	movne	r2, #10
 800472c:	2208      	moveq	r2, #8
 800472e:	2100      	movs	r1, #0
 8004730:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004734:	6865      	ldr	r5, [r4, #4]
 8004736:	60a5      	str	r5, [r4, #8]
 8004738:	2d00      	cmp	r5, #0
 800473a:	f2c0 8095 	blt.w	8004868 <_printf_i+0x20c>
 800473e:	6821      	ldr	r1, [r4, #0]
 8004740:	f021 0104 	bic.w	r1, r1, #4
 8004744:	6021      	str	r1, [r4, #0]
 8004746:	2b00      	cmp	r3, #0
 8004748:	d13d      	bne.n	80047c6 <_printf_i+0x16a>
 800474a:	2d00      	cmp	r5, #0
 800474c:	f040 808e 	bne.w	800486c <_printf_i+0x210>
 8004750:	4665      	mov	r5, ip
 8004752:	2a08      	cmp	r2, #8
 8004754:	d10b      	bne.n	800476e <_printf_i+0x112>
 8004756:	6823      	ldr	r3, [r4, #0]
 8004758:	07db      	lsls	r3, r3, #31
 800475a:	d508      	bpl.n	800476e <_printf_i+0x112>
 800475c:	6923      	ldr	r3, [r4, #16]
 800475e:	6862      	ldr	r2, [r4, #4]
 8004760:	429a      	cmp	r2, r3
 8004762:	bfde      	ittt	le
 8004764:	2330      	movle	r3, #48	; 0x30
 8004766:	f805 3c01 	strble.w	r3, [r5, #-1]
 800476a:	f105 35ff 	addle.w	r5, r5, #4294967295
 800476e:	ebac 0305 	sub.w	r3, ip, r5
 8004772:	6123      	str	r3, [r4, #16]
 8004774:	f8cd 8000 	str.w	r8, [sp]
 8004778:	463b      	mov	r3, r7
 800477a:	aa03      	add	r2, sp, #12
 800477c:	4621      	mov	r1, r4
 800477e:	4630      	mov	r0, r6
 8004780:	f7ff fef6 	bl	8004570 <_printf_common>
 8004784:	3001      	adds	r0, #1
 8004786:	d14d      	bne.n	8004824 <_printf_i+0x1c8>
 8004788:	f04f 30ff 	mov.w	r0, #4294967295
 800478c:	b005      	add	sp, #20
 800478e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8004792:	4839      	ldr	r0, [pc, #228]	; (8004878 <_printf_i+0x21c>)
 8004794:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8004798:	6813      	ldr	r3, [r2, #0]
 800479a:	6821      	ldr	r1, [r4, #0]
 800479c:	1d1d      	adds	r5, r3, #4
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	6015      	str	r5, [r2, #0]
 80047a2:	060a      	lsls	r2, r1, #24
 80047a4:	d50b      	bpl.n	80047be <_printf_i+0x162>
 80047a6:	07ca      	lsls	r2, r1, #31
 80047a8:	bf44      	itt	mi
 80047aa:	f041 0120 	orrmi.w	r1, r1, #32
 80047ae:	6021      	strmi	r1, [r4, #0]
 80047b0:	b91b      	cbnz	r3, 80047ba <_printf_i+0x15e>
 80047b2:	6822      	ldr	r2, [r4, #0]
 80047b4:	f022 0220 	bic.w	r2, r2, #32
 80047b8:	6022      	str	r2, [r4, #0]
 80047ba:	2210      	movs	r2, #16
 80047bc:	e7b7      	b.n	800472e <_printf_i+0xd2>
 80047be:	064d      	lsls	r5, r1, #25
 80047c0:	bf48      	it	mi
 80047c2:	b29b      	uxthmi	r3, r3
 80047c4:	e7ef      	b.n	80047a6 <_printf_i+0x14a>
 80047c6:	4665      	mov	r5, ip
 80047c8:	fbb3 f1f2 	udiv	r1, r3, r2
 80047cc:	fb02 3311 	mls	r3, r2, r1, r3
 80047d0:	5cc3      	ldrb	r3, [r0, r3]
 80047d2:	f805 3d01 	strb.w	r3, [r5, #-1]!
 80047d6:	460b      	mov	r3, r1
 80047d8:	2900      	cmp	r1, #0
 80047da:	d1f5      	bne.n	80047c8 <_printf_i+0x16c>
 80047dc:	e7b9      	b.n	8004752 <_printf_i+0xf6>
 80047de:	6813      	ldr	r3, [r2, #0]
 80047e0:	6825      	ldr	r5, [r4, #0]
 80047e2:	6961      	ldr	r1, [r4, #20]
 80047e4:	1d18      	adds	r0, r3, #4
 80047e6:	6010      	str	r0, [r2, #0]
 80047e8:	0628      	lsls	r0, r5, #24
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	d501      	bpl.n	80047f2 <_printf_i+0x196>
 80047ee:	6019      	str	r1, [r3, #0]
 80047f0:	e002      	b.n	80047f8 <_printf_i+0x19c>
 80047f2:	066a      	lsls	r2, r5, #25
 80047f4:	d5fb      	bpl.n	80047ee <_printf_i+0x192>
 80047f6:	8019      	strh	r1, [r3, #0]
 80047f8:	2300      	movs	r3, #0
 80047fa:	6123      	str	r3, [r4, #16]
 80047fc:	4665      	mov	r5, ip
 80047fe:	e7b9      	b.n	8004774 <_printf_i+0x118>
 8004800:	6813      	ldr	r3, [r2, #0]
 8004802:	1d19      	adds	r1, r3, #4
 8004804:	6011      	str	r1, [r2, #0]
 8004806:	681d      	ldr	r5, [r3, #0]
 8004808:	6862      	ldr	r2, [r4, #4]
 800480a:	2100      	movs	r1, #0
 800480c:	4628      	mov	r0, r5
 800480e:	f7fb fcef 	bl	80001f0 <memchr>
 8004812:	b108      	cbz	r0, 8004818 <_printf_i+0x1bc>
 8004814:	1b40      	subs	r0, r0, r5
 8004816:	6060      	str	r0, [r4, #4]
 8004818:	6863      	ldr	r3, [r4, #4]
 800481a:	6123      	str	r3, [r4, #16]
 800481c:	2300      	movs	r3, #0
 800481e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004822:	e7a7      	b.n	8004774 <_printf_i+0x118>
 8004824:	6923      	ldr	r3, [r4, #16]
 8004826:	462a      	mov	r2, r5
 8004828:	4639      	mov	r1, r7
 800482a:	4630      	mov	r0, r6
 800482c:	47c0      	blx	r8
 800482e:	3001      	adds	r0, #1
 8004830:	d0aa      	beq.n	8004788 <_printf_i+0x12c>
 8004832:	6823      	ldr	r3, [r4, #0]
 8004834:	079b      	lsls	r3, r3, #30
 8004836:	d413      	bmi.n	8004860 <_printf_i+0x204>
 8004838:	68e0      	ldr	r0, [r4, #12]
 800483a:	9b03      	ldr	r3, [sp, #12]
 800483c:	4298      	cmp	r0, r3
 800483e:	bfb8      	it	lt
 8004840:	4618      	movlt	r0, r3
 8004842:	e7a3      	b.n	800478c <_printf_i+0x130>
 8004844:	2301      	movs	r3, #1
 8004846:	464a      	mov	r2, r9
 8004848:	4639      	mov	r1, r7
 800484a:	4630      	mov	r0, r6
 800484c:	47c0      	blx	r8
 800484e:	3001      	adds	r0, #1
 8004850:	d09a      	beq.n	8004788 <_printf_i+0x12c>
 8004852:	3501      	adds	r5, #1
 8004854:	68e3      	ldr	r3, [r4, #12]
 8004856:	9a03      	ldr	r2, [sp, #12]
 8004858:	1a9b      	subs	r3, r3, r2
 800485a:	42ab      	cmp	r3, r5
 800485c:	dcf2      	bgt.n	8004844 <_printf_i+0x1e8>
 800485e:	e7eb      	b.n	8004838 <_printf_i+0x1dc>
 8004860:	2500      	movs	r5, #0
 8004862:	f104 0919 	add.w	r9, r4, #25
 8004866:	e7f5      	b.n	8004854 <_printf_i+0x1f8>
 8004868:	2b00      	cmp	r3, #0
 800486a:	d1ac      	bne.n	80047c6 <_printf_i+0x16a>
 800486c:	7803      	ldrb	r3, [r0, #0]
 800486e:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004872:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004876:	e76c      	b.n	8004752 <_printf_i+0xf6>
 8004878:	08004f61 	.word	0x08004f61
 800487c:	08004f72 	.word	0x08004f72

08004880 <_sbrk_r>:
 8004880:	b538      	push	{r3, r4, r5, lr}
 8004882:	4c06      	ldr	r4, [pc, #24]	; (800489c <_sbrk_r+0x1c>)
 8004884:	2300      	movs	r3, #0
 8004886:	4605      	mov	r5, r0
 8004888:	4608      	mov	r0, r1
 800488a:	6023      	str	r3, [r4, #0]
 800488c:	f7fc faba 	bl	8000e04 <_sbrk>
 8004890:	1c43      	adds	r3, r0, #1
 8004892:	d102      	bne.n	800489a <_sbrk_r+0x1a>
 8004894:	6823      	ldr	r3, [r4, #0]
 8004896:	b103      	cbz	r3, 800489a <_sbrk_r+0x1a>
 8004898:	602b      	str	r3, [r5, #0]
 800489a:	bd38      	pop	{r3, r4, r5, pc}
 800489c:	200002cc 	.word	0x200002cc

080048a0 <__sread>:
 80048a0:	b510      	push	{r4, lr}
 80048a2:	460c      	mov	r4, r1
 80048a4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80048a8:	f000 fa96 	bl	8004dd8 <_read_r>
 80048ac:	2800      	cmp	r0, #0
 80048ae:	bfab      	itete	ge
 80048b0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80048b2:	89a3      	ldrhlt	r3, [r4, #12]
 80048b4:	181b      	addge	r3, r3, r0
 80048b6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80048ba:	bfac      	ite	ge
 80048bc:	6563      	strge	r3, [r4, #84]	; 0x54
 80048be:	81a3      	strhlt	r3, [r4, #12]
 80048c0:	bd10      	pop	{r4, pc}

080048c2 <__swrite>:
 80048c2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80048c6:	461f      	mov	r7, r3
 80048c8:	898b      	ldrh	r3, [r1, #12]
 80048ca:	05db      	lsls	r3, r3, #23
 80048cc:	4605      	mov	r5, r0
 80048ce:	460c      	mov	r4, r1
 80048d0:	4616      	mov	r6, r2
 80048d2:	d505      	bpl.n	80048e0 <__swrite+0x1e>
 80048d4:	2302      	movs	r3, #2
 80048d6:	2200      	movs	r2, #0
 80048d8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80048dc:	f000 f9b6 	bl	8004c4c <_lseek_r>
 80048e0:	89a3      	ldrh	r3, [r4, #12]
 80048e2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80048e6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80048ea:	81a3      	strh	r3, [r4, #12]
 80048ec:	4632      	mov	r2, r6
 80048ee:	463b      	mov	r3, r7
 80048f0:	4628      	mov	r0, r5
 80048f2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80048f6:	f000 b869 	b.w	80049cc <_write_r>

080048fa <__sseek>:
 80048fa:	b510      	push	{r4, lr}
 80048fc:	460c      	mov	r4, r1
 80048fe:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004902:	f000 f9a3 	bl	8004c4c <_lseek_r>
 8004906:	1c43      	adds	r3, r0, #1
 8004908:	89a3      	ldrh	r3, [r4, #12]
 800490a:	bf15      	itete	ne
 800490c:	6560      	strne	r0, [r4, #84]	; 0x54
 800490e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8004912:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8004916:	81a3      	strheq	r3, [r4, #12]
 8004918:	bf18      	it	ne
 800491a:	81a3      	strhne	r3, [r4, #12]
 800491c:	bd10      	pop	{r4, pc}

0800491e <__sclose>:
 800491e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004922:	f000 b8d3 	b.w	8004acc <_close_r>
	...

08004928 <__swbuf_r>:
 8004928:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800492a:	460e      	mov	r6, r1
 800492c:	4614      	mov	r4, r2
 800492e:	4605      	mov	r5, r0
 8004930:	b118      	cbz	r0, 800493a <__swbuf_r+0x12>
 8004932:	6983      	ldr	r3, [r0, #24]
 8004934:	b90b      	cbnz	r3, 800493a <__swbuf_r+0x12>
 8004936:	f7ff fbf7 	bl	8004128 <__sinit>
 800493a:	4b21      	ldr	r3, [pc, #132]	; (80049c0 <__swbuf_r+0x98>)
 800493c:	429c      	cmp	r4, r3
 800493e:	d12a      	bne.n	8004996 <__swbuf_r+0x6e>
 8004940:	686c      	ldr	r4, [r5, #4]
 8004942:	69a3      	ldr	r3, [r4, #24]
 8004944:	60a3      	str	r3, [r4, #8]
 8004946:	89a3      	ldrh	r3, [r4, #12]
 8004948:	071a      	lsls	r2, r3, #28
 800494a:	d52e      	bpl.n	80049aa <__swbuf_r+0x82>
 800494c:	6923      	ldr	r3, [r4, #16]
 800494e:	b363      	cbz	r3, 80049aa <__swbuf_r+0x82>
 8004950:	6923      	ldr	r3, [r4, #16]
 8004952:	6820      	ldr	r0, [r4, #0]
 8004954:	1ac0      	subs	r0, r0, r3
 8004956:	6963      	ldr	r3, [r4, #20]
 8004958:	b2f6      	uxtb	r6, r6
 800495a:	4283      	cmp	r3, r0
 800495c:	4637      	mov	r7, r6
 800495e:	dc04      	bgt.n	800496a <__swbuf_r+0x42>
 8004960:	4621      	mov	r1, r4
 8004962:	4628      	mov	r0, r5
 8004964:	f000 f948 	bl	8004bf8 <_fflush_r>
 8004968:	bb28      	cbnz	r0, 80049b6 <__swbuf_r+0x8e>
 800496a:	68a3      	ldr	r3, [r4, #8]
 800496c:	3b01      	subs	r3, #1
 800496e:	60a3      	str	r3, [r4, #8]
 8004970:	6823      	ldr	r3, [r4, #0]
 8004972:	1c5a      	adds	r2, r3, #1
 8004974:	6022      	str	r2, [r4, #0]
 8004976:	701e      	strb	r6, [r3, #0]
 8004978:	6963      	ldr	r3, [r4, #20]
 800497a:	3001      	adds	r0, #1
 800497c:	4283      	cmp	r3, r0
 800497e:	d004      	beq.n	800498a <__swbuf_r+0x62>
 8004980:	89a3      	ldrh	r3, [r4, #12]
 8004982:	07db      	lsls	r3, r3, #31
 8004984:	d519      	bpl.n	80049ba <__swbuf_r+0x92>
 8004986:	2e0a      	cmp	r6, #10
 8004988:	d117      	bne.n	80049ba <__swbuf_r+0x92>
 800498a:	4621      	mov	r1, r4
 800498c:	4628      	mov	r0, r5
 800498e:	f000 f933 	bl	8004bf8 <_fflush_r>
 8004992:	b190      	cbz	r0, 80049ba <__swbuf_r+0x92>
 8004994:	e00f      	b.n	80049b6 <__swbuf_r+0x8e>
 8004996:	4b0b      	ldr	r3, [pc, #44]	; (80049c4 <__swbuf_r+0x9c>)
 8004998:	429c      	cmp	r4, r3
 800499a:	d101      	bne.n	80049a0 <__swbuf_r+0x78>
 800499c:	68ac      	ldr	r4, [r5, #8]
 800499e:	e7d0      	b.n	8004942 <__swbuf_r+0x1a>
 80049a0:	4b09      	ldr	r3, [pc, #36]	; (80049c8 <__swbuf_r+0xa0>)
 80049a2:	429c      	cmp	r4, r3
 80049a4:	bf08      	it	eq
 80049a6:	68ec      	ldreq	r4, [r5, #12]
 80049a8:	e7cb      	b.n	8004942 <__swbuf_r+0x1a>
 80049aa:	4621      	mov	r1, r4
 80049ac:	4628      	mov	r0, r5
 80049ae:	f000 f81f 	bl	80049f0 <__swsetup_r>
 80049b2:	2800      	cmp	r0, #0
 80049b4:	d0cc      	beq.n	8004950 <__swbuf_r+0x28>
 80049b6:	f04f 37ff 	mov.w	r7, #4294967295
 80049ba:	4638      	mov	r0, r7
 80049bc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80049be:	bf00      	nop
 80049c0:	08004f10 	.word	0x08004f10
 80049c4:	08004f30 	.word	0x08004f30
 80049c8:	08004ef0 	.word	0x08004ef0

080049cc <_write_r>:
 80049cc:	b538      	push	{r3, r4, r5, lr}
 80049ce:	4c07      	ldr	r4, [pc, #28]	; (80049ec <_write_r+0x20>)
 80049d0:	4605      	mov	r5, r0
 80049d2:	4608      	mov	r0, r1
 80049d4:	4611      	mov	r1, r2
 80049d6:	2200      	movs	r2, #0
 80049d8:	6022      	str	r2, [r4, #0]
 80049da:	461a      	mov	r2, r3
 80049dc:	f7fc f9c1 	bl	8000d62 <_write>
 80049e0:	1c43      	adds	r3, r0, #1
 80049e2:	d102      	bne.n	80049ea <_write_r+0x1e>
 80049e4:	6823      	ldr	r3, [r4, #0]
 80049e6:	b103      	cbz	r3, 80049ea <_write_r+0x1e>
 80049e8:	602b      	str	r3, [r5, #0]
 80049ea:	bd38      	pop	{r3, r4, r5, pc}
 80049ec:	200002cc 	.word	0x200002cc

080049f0 <__swsetup_r>:
 80049f0:	4b32      	ldr	r3, [pc, #200]	; (8004abc <__swsetup_r+0xcc>)
 80049f2:	b570      	push	{r4, r5, r6, lr}
 80049f4:	681d      	ldr	r5, [r3, #0]
 80049f6:	4606      	mov	r6, r0
 80049f8:	460c      	mov	r4, r1
 80049fa:	b125      	cbz	r5, 8004a06 <__swsetup_r+0x16>
 80049fc:	69ab      	ldr	r3, [r5, #24]
 80049fe:	b913      	cbnz	r3, 8004a06 <__swsetup_r+0x16>
 8004a00:	4628      	mov	r0, r5
 8004a02:	f7ff fb91 	bl	8004128 <__sinit>
 8004a06:	4b2e      	ldr	r3, [pc, #184]	; (8004ac0 <__swsetup_r+0xd0>)
 8004a08:	429c      	cmp	r4, r3
 8004a0a:	d10f      	bne.n	8004a2c <__swsetup_r+0x3c>
 8004a0c:	686c      	ldr	r4, [r5, #4]
 8004a0e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004a12:	b29a      	uxth	r2, r3
 8004a14:	0715      	lsls	r5, r2, #28
 8004a16:	d42c      	bmi.n	8004a72 <__swsetup_r+0x82>
 8004a18:	06d0      	lsls	r0, r2, #27
 8004a1a:	d411      	bmi.n	8004a40 <__swsetup_r+0x50>
 8004a1c:	2209      	movs	r2, #9
 8004a1e:	6032      	str	r2, [r6, #0]
 8004a20:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004a24:	81a3      	strh	r3, [r4, #12]
 8004a26:	f04f 30ff 	mov.w	r0, #4294967295
 8004a2a:	e03e      	b.n	8004aaa <__swsetup_r+0xba>
 8004a2c:	4b25      	ldr	r3, [pc, #148]	; (8004ac4 <__swsetup_r+0xd4>)
 8004a2e:	429c      	cmp	r4, r3
 8004a30:	d101      	bne.n	8004a36 <__swsetup_r+0x46>
 8004a32:	68ac      	ldr	r4, [r5, #8]
 8004a34:	e7eb      	b.n	8004a0e <__swsetup_r+0x1e>
 8004a36:	4b24      	ldr	r3, [pc, #144]	; (8004ac8 <__swsetup_r+0xd8>)
 8004a38:	429c      	cmp	r4, r3
 8004a3a:	bf08      	it	eq
 8004a3c:	68ec      	ldreq	r4, [r5, #12]
 8004a3e:	e7e6      	b.n	8004a0e <__swsetup_r+0x1e>
 8004a40:	0751      	lsls	r1, r2, #29
 8004a42:	d512      	bpl.n	8004a6a <__swsetup_r+0x7a>
 8004a44:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004a46:	b141      	cbz	r1, 8004a5a <__swsetup_r+0x6a>
 8004a48:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004a4c:	4299      	cmp	r1, r3
 8004a4e:	d002      	beq.n	8004a56 <__swsetup_r+0x66>
 8004a50:	4630      	mov	r0, r6
 8004a52:	f000 f973 	bl	8004d3c <_free_r>
 8004a56:	2300      	movs	r3, #0
 8004a58:	6363      	str	r3, [r4, #52]	; 0x34
 8004a5a:	89a3      	ldrh	r3, [r4, #12]
 8004a5c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8004a60:	81a3      	strh	r3, [r4, #12]
 8004a62:	2300      	movs	r3, #0
 8004a64:	6063      	str	r3, [r4, #4]
 8004a66:	6923      	ldr	r3, [r4, #16]
 8004a68:	6023      	str	r3, [r4, #0]
 8004a6a:	89a3      	ldrh	r3, [r4, #12]
 8004a6c:	f043 0308 	orr.w	r3, r3, #8
 8004a70:	81a3      	strh	r3, [r4, #12]
 8004a72:	6923      	ldr	r3, [r4, #16]
 8004a74:	b94b      	cbnz	r3, 8004a8a <__swsetup_r+0x9a>
 8004a76:	89a3      	ldrh	r3, [r4, #12]
 8004a78:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8004a7c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004a80:	d003      	beq.n	8004a8a <__swsetup_r+0x9a>
 8004a82:	4621      	mov	r1, r4
 8004a84:	4630      	mov	r0, r6
 8004a86:	f000 f917 	bl	8004cb8 <__smakebuf_r>
 8004a8a:	89a2      	ldrh	r2, [r4, #12]
 8004a8c:	f012 0301 	ands.w	r3, r2, #1
 8004a90:	d00c      	beq.n	8004aac <__swsetup_r+0xbc>
 8004a92:	2300      	movs	r3, #0
 8004a94:	60a3      	str	r3, [r4, #8]
 8004a96:	6963      	ldr	r3, [r4, #20]
 8004a98:	425b      	negs	r3, r3
 8004a9a:	61a3      	str	r3, [r4, #24]
 8004a9c:	6923      	ldr	r3, [r4, #16]
 8004a9e:	b953      	cbnz	r3, 8004ab6 <__swsetup_r+0xc6>
 8004aa0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004aa4:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 8004aa8:	d1ba      	bne.n	8004a20 <__swsetup_r+0x30>
 8004aaa:	bd70      	pop	{r4, r5, r6, pc}
 8004aac:	0792      	lsls	r2, r2, #30
 8004aae:	bf58      	it	pl
 8004ab0:	6963      	ldrpl	r3, [r4, #20]
 8004ab2:	60a3      	str	r3, [r4, #8]
 8004ab4:	e7f2      	b.n	8004a9c <__swsetup_r+0xac>
 8004ab6:	2000      	movs	r0, #0
 8004ab8:	e7f7      	b.n	8004aaa <__swsetup_r+0xba>
 8004aba:	bf00      	nop
 8004abc:	2000000c 	.word	0x2000000c
 8004ac0:	08004f10 	.word	0x08004f10
 8004ac4:	08004f30 	.word	0x08004f30
 8004ac8:	08004ef0 	.word	0x08004ef0

08004acc <_close_r>:
 8004acc:	b538      	push	{r3, r4, r5, lr}
 8004ace:	4c06      	ldr	r4, [pc, #24]	; (8004ae8 <_close_r+0x1c>)
 8004ad0:	2300      	movs	r3, #0
 8004ad2:	4605      	mov	r5, r0
 8004ad4:	4608      	mov	r0, r1
 8004ad6:	6023      	str	r3, [r4, #0]
 8004ad8:	f7fc f95f 	bl	8000d9a <_close>
 8004adc:	1c43      	adds	r3, r0, #1
 8004ade:	d102      	bne.n	8004ae6 <_close_r+0x1a>
 8004ae0:	6823      	ldr	r3, [r4, #0]
 8004ae2:	b103      	cbz	r3, 8004ae6 <_close_r+0x1a>
 8004ae4:	602b      	str	r3, [r5, #0]
 8004ae6:	bd38      	pop	{r3, r4, r5, pc}
 8004ae8:	200002cc 	.word	0x200002cc

08004aec <__sflush_r>:
 8004aec:	898a      	ldrh	r2, [r1, #12]
 8004aee:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004af2:	4605      	mov	r5, r0
 8004af4:	0710      	lsls	r0, r2, #28
 8004af6:	460c      	mov	r4, r1
 8004af8:	d458      	bmi.n	8004bac <__sflush_r+0xc0>
 8004afa:	684b      	ldr	r3, [r1, #4]
 8004afc:	2b00      	cmp	r3, #0
 8004afe:	dc05      	bgt.n	8004b0c <__sflush_r+0x20>
 8004b00:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8004b02:	2b00      	cmp	r3, #0
 8004b04:	dc02      	bgt.n	8004b0c <__sflush_r+0x20>
 8004b06:	2000      	movs	r0, #0
 8004b08:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004b0c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8004b0e:	2e00      	cmp	r6, #0
 8004b10:	d0f9      	beq.n	8004b06 <__sflush_r+0x1a>
 8004b12:	2300      	movs	r3, #0
 8004b14:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8004b18:	682f      	ldr	r7, [r5, #0]
 8004b1a:	6a21      	ldr	r1, [r4, #32]
 8004b1c:	602b      	str	r3, [r5, #0]
 8004b1e:	d032      	beq.n	8004b86 <__sflush_r+0x9a>
 8004b20:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8004b22:	89a3      	ldrh	r3, [r4, #12]
 8004b24:	075a      	lsls	r2, r3, #29
 8004b26:	d505      	bpl.n	8004b34 <__sflush_r+0x48>
 8004b28:	6863      	ldr	r3, [r4, #4]
 8004b2a:	1ac0      	subs	r0, r0, r3
 8004b2c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8004b2e:	b10b      	cbz	r3, 8004b34 <__sflush_r+0x48>
 8004b30:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8004b32:	1ac0      	subs	r0, r0, r3
 8004b34:	2300      	movs	r3, #0
 8004b36:	4602      	mov	r2, r0
 8004b38:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8004b3a:	6a21      	ldr	r1, [r4, #32]
 8004b3c:	4628      	mov	r0, r5
 8004b3e:	47b0      	blx	r6
 8004b40:	1c43      	adds	r3, r0, #1
 8004b42:	89a3      	ldrh	r3, [r4, #12]
 8004b44:	d106      	bne.n	8004b54 <__sflush_r+0x68>
 8004b46:	6829      	ldr	r1, [r5, #0]
 8004b48:	291d      	cmp	r1, #29
 8004b4a:	d848      	bhi.n	8004bde <__sflush_r+0xf2>
 8004b4c:	4a29      	ldr	r2, [pc, #164]	; (8004bf4 <__sflush_r+0x108>)
 8004b4e:	40ca      	lsrs	r2, r1
 8004b50:	07d6      	lsls	r6, r2, #31
 8004b52:	d544      	bpl.n	8004bde <__sflush_r+0xf2>
 8004b54:	2200      	movs	r2, #0
 8004b56:	6062      	str	r2, [r4, #4]
 8004b58:	04d9      	lsls	r1, r3, #19
 8004b5a:	6922      	ldr	r2, [r4, #16]
 8004b5c:	6022      	str	r2, [r4, #0]
 8004b5e:	d504      	bpl.n	8004b6a <__sflush_r+0x7e>
 8004b60:	1c42      	adds	r2, r0, #1
 8004b62:	d101      	bne.n	8004b68 <__sflush_r+0x7c>
 8004b64:	682b      	ldr	r3, [r5, #0]
 8004b66:	b903      	cbnz	r3, 8004b6a <__sflush_r+0x7e>
 8004b68:	6560      	str	r0, [r4, #84]	; 0x54
 8004b6a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004b6c:	602f      	str	r7, [r5, #0]
 8004b6e:	2900      	cmp	r1, #0
 8004b70:	d0c9      	beq.n	8004b06 <__sflush_r+0x1a>
 8004b72:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004b76:	4299      	cmp	r1, r3
 8004b78:	d002      	beq.n	8004b80 <__sflush_r+0x94>
 8004b7a:	4628      	mov	r0, r5
 8004b7c:	f000 f8de 	bl	8004d3c <_free_r>
 8004b80:	2000      	movs	r0, #0
 8004b82:	6360      	str	r0, [r4, #52]	; 0x34
 8004b84:	e7c0      	b.n	8004b08 <__sflush_r+0x1c>
 8004b86:	2301      	movs	r3, #1
 8004b88:	4628      	mov	r0, r5
 8004b8a:	47b0      	blx	r6
 8004b8c:	1c41      	adds	r1, r0, #1
 8004b8e:	d1c8      	bne.n	8004b22 <__sflush_r+0x36>
 8004b90:	682b      	ldr	r3, [r5, #0]
 8004b92:	2b00      	cmp	r3, #0
 8004b94:	d0c5      	beq.n	8004b22 <__sflush_r+0x36>
 8004b96:	2b1d      	cmp	r3, #29
 8004b98:	d001      	beq.n	8004b9e <__sflush_r+0xb2>
 8004b9a:	2b16      	cmp	r3, #22
 8004b9c:	d101      	bne.n	8004ba2 <__sflush_r+0xb6>
 8004b9e:	602f      	str	r7, [r5, #0]
 8004ba0:	e7b1      	b.n	8004b06 <__sflush_r+0x1a>
 8004ba2:	89a3      	ldrh	r3, [r4, #12]
 8004ba4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004ba8:	81a3      	strh	r3, [r4, #12]
 8004baa:	e7ad      	b.n	8004b08 <__sflush_r+0x1c>
 8004bac:	690f      	ldr	r7, [r1, #16]
 8004bae:	2f00      	cmp	r7, #0
 8004bb0:	d0a9      	beq.n	8004b06 <__sflush_r+0x1a>
 8004bb2:	0793      	lsls	r3, r2, #30
 8004bb4:	680e      	ldr	r6, [r1, #0]
 8004bb6:	bf08      	it	eq
 8004bb8:	694b      	ldreq	r3, [r1, #20]
 8004bba:	600f      	str	r7, [r1, #0]
 8004bbc:	bf18      	it	ne
 8004bbe:	2300      	movne	r3, #0
 8004bc0:	eba6 0807 	sub.w	r8, r6, r7
 8004bc4:	608b      	str	r3, [r1, #8]
 8004bc6:	f1b8 0f00 	cmp.w	r8, #0
 8004bca:	dd9c      	ble.n	8004b06 <__sflush_r+0x1a>
 8004bcc:	4643      	mov	r3, r8
 8004bce:	463a      	mov	r2, r7
 8004bd0:	6a21      	ldr	r1, [r4, #32]
 8004bd2:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8004bd4:	4628      	mov	r0, r5
 8004bd6:	47b0      	blx	r6
 8004bd8:	2800      	cmp	r0, #0
 8004bda:	dc06      	bgt.n	8004bea <__sflush_r+0xfe>
 8004bdc:	89a3      	ldrh	r3, [r4, #12]
 8004bde:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004be2:	81a3      	strh	r3, [r4, #12]
 8004be4:	f04f 30ff 	mov.w	r0, #4294967295
 8004be8:	e78e      	b.n	8004b08 <__sflush_r+0x1c>
 8004bea:	4407      	add	r7, r0
 8004bec:	eba8 0800 	sub.w	r8, r8, r0
 8004bf0:	e7e9      	b.n	8004bc6 <__sflush_r+0xda>
 8004bf2:	bf00      	nop
 8004bf4:	20400001 	.word	0x20400001

08004bf8 <_fflush_r>:
 8004bf8:	b538      	push	{r3, r4, r5, lr}
 8004bfa:	690b      	ldr	r3, [r1, #16]
 8004bfc:	4605      	mov	r5, r0
 8004bfe:	460c      	mov	r4, r1
 8004c00:	b1db      	cbz	r3, 8004c3a <_fflush_r+0x42>
 8004c02:	b118      	cbz	r0, 8004c0c <_fflush_r+0x14>
 8004c04:	6983      	ldr	r3, [r0, #24]
 8004c06:	b90b      	cbnz	r3, 8004c0c <_fflush_r+0x14>
 8004c08:	f7ff fa8e 	bl	8004128 <__sinit>
 8004c0c:	4b0c      	ldr	r3, [pc, #48]	; (8004c40 <_fflush_r+0x48>)
 8004c0e:	429c      	cmp	r4, r3
 8004c10:	d109      	bne.n	8004c26 <_fflush_r+0x2e>
 8004c12:	686c      	ldr	r4, [r5, #4]
 8004c14:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004c18:	b17b      	cbz	r3, 8004c3a <_fflush_r+0x42>
 8004c1a:	4621      	mov	r1, r4
 8004c1c:	4628      	mov	r0, r5
 8004c1e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004c22:	f7ff bf63 	b.w	8004aec <__sflush_r>
 8004c26:	4b07      	ldr	r3, [pc, #28]	; (8004c44 <_fflush_r+0x4c>)
 8004c28:	429c      	cmp	r4, r3
 8004c2a:	d101      	bne.n	8004c30 <_fflush_r+0x38>
 8004c2c:	68ac      	ldr	r4, [r5, #8]
 8004c2e:	e7f1      	b.n	8004c14 <_fflush_r+0x1c>
 8004c30:	4b05      	ldr	r3, [pc, #20]	; (8004c48 <_fflush_r+0x50>)
 8004c32:	429c      	cmp	r4, r3
 8004c34:	bf08      	it	eq
 8004c36:	68ec      	ldreq	r4, [r5, #12]
 8004c38:	e7ec      	b.n	8004c14 <_fflush_r+0x1c>
 8004c3a:	2000      	movs	r0, #0
 8004c3c:	bd38      	pop	{r3, r4, r5, pc}
 8004c3e:	bf00      	nop
 8004c40:	08004f10 	.word	0x08004f10
 8004c44:	08004f30 	.word	0x08004f30
 8004c48:	08004ef0 	.word	0x08004ef0

08004c4c <_lseek_r>:
 8004c4c:	b538      	push	{r3, r4, r5, lr}
 8004c4e:	4c07      	ldr	r4, [pc, #28]	; (8004c6c <_lseek_r+0x20>)
 8004c50:	4605      	mov	r5, r0
 8004c52:	4608      	mov	r0, r1
 8004c54:	4611      	mov	r1, r2
 8004c56:	2200      	movs	r2, #0
 8004c58:	6022      	str	r2, [r4, #0]
 8004c5a:	461a      	mov	r2, r3
 8004c5c:	f7fc f8c4 	bl	8000de8 <_lseek>
 8004c60:	1c43      	adds	r3, r0, #1
 8004c62:	d102      	bne.n	8004c6a <_lseek_r+0x1e>
 8004c64:	6823      	ldr	r3, [r4, #0]
 8004c66:	b103      	cbz	r3, 8004c6a <_lseek_r+0x1e>
 8004c68:	602b      	str	r3, [r5, #0]
 8004c6a:	bd38      	pop	{r3, r4, r5, pc}
 8004c6c:	200002cc 	.word	0x200002cc

08004c70 <__swhatbuf_r>:
 8004c70:	b570      	push	{r4, r5, r6, lr}
 8004c72:	460e      	mov	r6, r1
 8004c74:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004c78:	2900      	cmp	r1, #0
 8004c7a:	b096      	sub	sp, #88	; 0x58
 8004c7c:	4614      	mov	r4, r2
 8004c7e:	461d      	mov	r5, r3
 8004c80:	da07      	bge.n	8004c92 <__swhatbuf_r+0x22>
 8004c82:	2300      	movs	r3, #0
 8004c84:	602b      	str	r3, [r5, #0]
 8004c86:	89b3      	ldrh	r3, [r6, #12]
 8004c88:	061a      	lsls	r2, r3, #24
 8004c8a:	d410      	bmi.n	8004cae <__swhatbuf_r+0x3e>
 8004c8c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004c90:	e00e      	b.n	8004cb0 <__swhatbuf_r+0x40>
 8004c92:	466a      	mov	r2, sp
 8004c94:	f000 f8b2 	bl	8004dfc <_fstat_r>
 8004c98:	2800      	cmp	r0, #0
 8004c9a:	dbf2      	blt.n	8004c82 <__swhatbuf_r+0x12>
 8004c9c:	9a01      	ldr	r2, [sp, #4]
 8004c9e:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8004ca2:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8004ca6:	425a      	negs	r2, r3
 8004ca8:	415a      	adcs	r2, r3
 8004caa:	602a      	str	r2, [r5, #0]
 8004cac:	e7ee      	b.n	8004c8c <__swhatbuf_r+0x1c>
 8004cae:	2340      	movs	r3, #64	; 0x40
 8004cb0:	2000      	movs	r0, #0
 8004cb2:	6023      	str	r3, [r4, #0]
 8004cb4:	b016      	add	sp, #88	; 0x58
 8004cb6:	bd70      	pop	{r4, r5, r6, pc}

08004cb8 <__smakebuf_r>:
 8004cb8:	898b      	ldrh	r3, [r1, #12]
 8004cba:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8004cbc:	079d      	lsls	r5, r3, #30
 8004cbe:	4606      	mov	r6, r0
 8004cc0:	460c      	mov	r4, r1
 8004cc2:	d507      	bpl.n	8004cd4 <__smakebuf_r+0x1c>
 8004cc4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8004cc8:	6023      	str	r3, [r4, #0]
 8004cca:	6123      	str	r3, [r4, #16]
 8004ccc:	2301      	movs	r3, #1
 8004cce:	6163      	str	r3, [r4, #20]
 8004cd0:	b002      	add	sp, #8
 8004cd2:	bd70      	pop	{r4, r5, r6, pc}
 8004cd4:	ab01      	add	r3, sp, #4
 8004cd6:	466a      	mov	r2, sp
 8004cd8:	f7ff ffca 	bl	8004c70 <__swhatbuf_r>
 8004cdc:	9900      	ldr	r1, [sp, #0]
 8004cde:	4605      	mov	r5, r0
 8004ce0:	4630      	mov	r0, r6
 8004ce2:	f7ff faab 	bl	800423c <_malloc_r>
 8004ce6:	b948      	cbnz	r0, 8004cfc <__smakebuf_r+0x44>
 8004ce8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004cec:	059a      	lsls	r2, r3, #22
 8004cee:	d4ef      	bmi.n	8004cd0 <__smakebuf_r+0x18>
 8004cf0:	f023 0303 	bic.w	r3, r3, #3
 8004cf4:	f043 0302 	orr.w	r3, r3, #2
 8004cf8:	81a3      	strh	r3, [r4, #12]
 8004cfa:	e7e3      	b.n	8004cc4 <__smakebuf_r+0xc>
 8004cfc:	4b0d      	ldr	r3, [pc, #52]	; (8004d34 <__smakebuf_r+0x7c>)
 8004cfe:	62b3      	str	r3, [r6, #40]	; 0x28
 8004d00:	89a3      	ldrh	r3, [r4, #12]
 8004d02:	6020      	str	r0, [r4, #0]
 8004d04:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004d08:	81a3      	strh	r3, [r4, #12]
 8004d0a:	9b00      	ldr	r3, [sp, #0]
 8004d0c:	6163      	str	r3, [r4, #20]
 8004d0e:	9b01      	ldr	r3, [sp, #4]
 8004d10:	6120      	str	r0, [r4, #16]
 8004d12:	b15b      	cbz	r3, 8004d2c <__smakebuf_r+0x74>
 8004d14:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004d18:	4630      	mov	r0, r6
 8004d1a:	f000 f881 	bl	8004e20 <_isatty_r>
 8004d1e:	b128      	cbz	r0, 8004d2c <__smakebuf_r+0x74>
 8004d20:	89a3      	ldrh	r3, [r4, #12]
 8004d22:	f023 0303 	bic.w	r3, r3, #3
 8004d26:	f043 0301 	orr.w	r3, r3, #1
 8004d2a:	81a3      	strh	r3, [r4, #12]
 8004d2c:	89a3      	ldrh	r3, [r4, #12]
 8004d2e:	431d      	orrs	r5, r3
 8004d30:	81a5      	strh	r5, [r4, #12]
 8004d32:	e7cd      	b.n	8004cd0 <__smakebuf_r+0x18>
 8004d34:	080040f1 	.word	0x080040f1

08004d38 <__malloc_lock>:
 8004d38:	4770      	bx	lr

08004d3a <__malloc_unlock>:
 8004d3a:	4770      	bx	lr

08004d3c <_free_r>:
 8004d3c:	b538      	push	{r3, r4, r5, lr}
 8004d3e:	4605      	mov	r5, r0
 8004d40:	2900      	cmp	r1, #0
 8004d42:	d045      	beq.n	8004dd0 <_free_r+0x94>
 8004d44:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004d48:	1f0c      	subs	r4, r1, #4
 8004d4a:	2b00      	cmp	r3, #0
 8004d4c:	bfb8      	it	lt
 8004d4e:	18e4      	addlt	r4, r4, r3
 8004d50:	f7ff fff2 	bl	8004d38 <__malloc_lock>
 8004d54:	4a1f      	ldr	r2, [pc, #124]	; (8004dd4 <_free_r+0x98>)
 8004d56:	6813      	ldr	r3, [r2, #0]
 8004d58:	4610      	mov	r0, r2
 8004d5a:	b933      	cbnz	r3, 8004d6a <_free_r+0x2e>
 8004d5c:	6063      	str	r3, [r4, #4]
 8004d5e:	6014      	str	r4, [r2, #0]
 8004d60:	4628      	mov	r0, r5
 8004d62:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004d66:	f7ff bfe8 	b.w	8004d3a <__malloc_unlock>
 8004d6a:	42a3      	cmp	r3, r4
 8004d6c:	d90c      	bls.n	8004d88 <_free_r+0x4c>
 8004d6e:	6821      	ldr	r1, [r4, #0]
 8004d70:	1862      	adds	r2, r4, r1
 8004d72:	4293      	cmp	r3, r2
 8004d74:	bf04      	itt	eq
 8004d76:	681a      	ldreq	r2, [r3, #0]
 8004d78:	685b      	ldreq	r3, [r3, #4]
 8004d7a:	6063      	str	r3, [r4, #4]
 8004d7c:	bf04      	itt	eq
 8004d7e:	1852      	addeq	r2, r2, r1
 8004d80:	6022      	streq	r2, [r4, #0]
 8004d82:	6004      	str	r4, [r0, #0]
 8004d84:	e7ec      	b.n	8004d60 <_free_r+0x24>
 8004d86:	4613      	mov	r3, r2
 8004d88:	685a      	ldr	r2, [r3, #4]
 8004d8a:	b10a      	cbz	r2, 8004d90 <_free_r+0x54>
 8004d8c:	42a2      	cmp	r2, r4
 8004d8e:	d9fa      	bls.n	8004d86 <_free_r+0x4a>
 8004d90:	6819      	ldr	r1, [r3, #0]
 8004d92:	1858      	adds	r0, r3, r1
 8004d94:	42a0      	cmp	r0, r4
 8004d96:	d10b      	bne.n	8004db0 <_free_r+0x74>
 8004d98:	6820      	ldr	r0, [r4, #0]
 8004d9a:	4401      	add	r1, r0
 8004d9c:	1858      	adds	r0, r3, r1
 8004d9e:	4282      	cmp	r2, r0
 8004da0:	6019      	str	r1, [r3, #0]
 8004da2:	d1dd      	bne.n	8004d60 <_free_r+0x24>
 8004da4:	6810      	ldr	r0, [r2, #0]
 8004da6:	6852      	ldr	r2, [r2, #4]
 8004da8:	605a      	str	r2, [r3, #4]
 8004daa:	4401      	add	r1, r0
 8004dac:	6019      	str	r1, [r3, #0]
 8004dae:	e7d7      	b.n	8004d60 <_free_r+0x24>
 8004db0:	d902      	bls.n	8004db8 <_free_r+0x7c>
 8004db2:	230c      	movs	r3, #12
 8004db4:	602b      	str	r3, [r5, #0]
 8004db6:	e7d3      	b.n	8004d60 <_free_r+0x24>
 8004db8:	6820      	ldr	r0, [r4, #0]
 8004dba:	1821      	adds	r1, r4, r0
 8004dbc:	428a      	cmp	r2, r1
 8004dbe:	bf04      	itt	eq
 8004dc0:	6811      	ldreq	r1, [r2, #0]
 8004dc2:	6852      	ldreq	r2, [r2, #4]
 8004dc4:	6062      	str	r2, [r4, #4]
 8004dc6:	bf04      	itt	eq
 8004dc8:	1809      	addeq	r1, r1, r0
 8004dca:	6021      	streq	r1, [r4, #0]
 8004dcc:	605c      	str	r4, [r3, #4]
 8004dce:	e7c7      	b.n	8004d60 <_free_r+0x24>
 8004dd0:	bd38      	pop	{r3, r4, r5, pc}
 8004dd2:	bf00      	nop
 8004dd4:	20000090 	.word	0x20000090

08004dd8 <_read_r>:
 8004dd8:	b538      	push	{r3, r4, r5, lr}
 8004dda:	4c07      	ldr	r4, [pc, #28]	; (8004df8 <_read_r+0x20>)
 8004ddc:	4605      	mov	r5, r0
 8004dde:	4608      	mov	r0, r1
 8004de0:	4611      	mov	r1, r2
 8004de2:	2200      	movs	r2, #0
 8004de4:	6022      	str	r2, [r4, #0]
 8004de6:	461a      	mov	r2, r3
 8004de8:	f7fb ff9e 	bl	8000d28 <_read>
 8004dec:	1c43      	adds	r3, r0, #1
 8004dee:	d102      	bne.n	8004df6 <_read_r+0x1e>
 8004df0:	6823      	ldr	r3, [r4, #0]
 8004df2:	b103      	cbz	r3, 8004df6 <_read_r+0x1e>
 8004df4:	602b      	str	r3, [r5, #0]
 8004df6:	bd38      	pop	{r3, r4, r5, pc}
 8004df8:	200002cc 	.word	0x200002cc

08004dfc <_fstat_r>:
 8004dfc:	b538      	push	{r3, r4, r5, lr}
 8004dfe:	4c07      	ldr	r4, [pc, #28]	; (8004e1c <_fstat_r+0x20>)
 8004e00:	2300      	movs	r3, #0
 8004e02:	4605      	mov	r5, r0
 8004e04:	4608      	mov	r0, r1
 8004e06:	4611      	mov	r1, r2
 8004e08:	6023      	str	r3, [r4, #0]
 8004e0a:	f7fb ffd2 	bl	8000db2 <_fstat>
 8004e0e:	1c43      	adds	r3, r0, #1
 8004e10:	d102      	bne.n	8004e18 <_fstat_r+0x1c>
 8004e12:	6823      	ldr	r3, [r4, #0]
 8004e14:	b103      	cbz	r3, 8004e18 <_fstat_r+0x1c>
 8004e16:	602b      	str	r3, [r5, #0]
 8004e18:	bd38      	pop	{r3, r4, r5, pc}
 8004e1a:	bf00      	nop
 8004e1c:	200002cc 	.word	0x200002cc

08004e20 <_isatty_r>:
 8004e20:	b538      	push	{r3, r4, r5, lr}
 8004e22:	4c06      	ldr	r4, [pc, #24]	; (8004e3c <_isatty_r+0x1c>)
 8004e24:	2300      	movs	r3, #0
 8004e26:	4605      	mov	r5, r0
 8004e28:	4608      	mov	r0, r1
 8004e2a:	6023      	str	r3, [r4, #0]
 8004e2c:	f7fb ffd1 	bl	8000dd2 <_isatty>
 8004e30:	1c43      	adds	r3, r0, #1
 8004e32:	d102      	bne.n	8004e3a <_isatty_r+0x1a>
 8004e34:	6823      	ldr	r3, [r4, #0]
 8004e36:	b103      	cbz	r3, 8004e3a <_isatty_r+0x1a>
 8004e38:	602b      	str	r3, [r5, #0]
 8004e3a:	bd38      	pop	{r3, r4, r5, pc}
 8004e3c:	200002cc 	.word	0x200002cc

08004e40 <_init>:
 8004e40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004e42:	bf00      	nop
 8004e44:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004e46:	bc08      	pop	{r3}
 8004e48:	469e      	mov	lr, r3
 8004e4a:	4770      	bx	lr

08004e4c <_fini>:
 8004e4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004e4e:	bf00      	nop
 8004e50:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004e52:	bc08      	pop	{r3}
 8004e54:	469e      	mov	lr, r3
 8004e56:	4770      	bx	lr
