
FreeRTOS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006664  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000a0  080067f4  080067f4  000167f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006894  08006894  00020010  2**0
                  CONTENTS
  4 .ARM          00000008  08006894  08006894  00016894  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800689c  0800689c  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800689c  0800689c  0001689c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080068a0  080068a0  000168a0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  080068a4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000019f8  20000010  080068b4  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001a08  080068b4  00021a08  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001ab29  00000000  00000000  00020040  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000329e  00000000  00000000  0003ab69  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001570  00000000  00000000  0003de08  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000013e8  00000000  00000000  0003f378  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000283b2  00000000  00000000  00040760  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00011a7a  00000000  00000000  00068b12  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000fa859  00000000  00000000  0007a58c  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00174de5  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005914  00000000  00000000  00174e60  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000010 	.word	0x20000010
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080067dc 	.word	0x080067dc

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000014 	.word	0x20000014
 80001cc:	080067dc 	.word	0x080067dc

080001d0 <__aeabi_uldivmod>:
 80001d0:	b953      	cbnz	r3, 80001e8 <__aeabi_uldivmod+0x18>
 80001d2:	b94a      	cbnz	r2, 80001e8 <__aeabi_uldivmod+0x18>
 80001d4:	2900      	cmp	r1, #0
 80001d6:	bf08      	it	eq
 80001d8:	2800      	cmpeq	r0, #0
 80001da:	bf1c      	itt	ne
 80001dc:	f04f 31ff 	movne.w	r1, #4294967295
 80001e0:	f04f 30ff 	movne.w	r0, #4294967295
 80001e4:	f000 b972 	b.w	80004cc <__aeabi_idiv0>
 80001e8:	f1ad 0c08 	sub.w	ip, sp, #8
 80001ec:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f0:	f000 f806 	bl	8000200 <__udivmoddi4>
 80001f4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001fc:	b004      	add	sp, #16
 80001fe:	4770      	bx	lr

08000200 <__udivmoddi4>:
 8000200:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000204:	9e08      	ldr	r6, [sp, #32]
 8000206:	4604      	mov	r4, r0
 8000208:	4688      	mov	r8, r1
 800020a:	2b00      	cmp	r3, #0
 800020c:	d14b      	bne.n	80002a6 <__udivmoddi4+0xa6>
 800020e:	428a      	cmp	r2, r1
 8000210:	4615      	mov	r5, r2
 8000212:	d967      	bls.n	80002e4 <__udivmoddi4+0xe4>
 8000214:	fab2 f282 	clz	r2, r2
 8000218:	b14a      	cbz	r2, 800022e <__udivmoddi4+0x2e>
 800021a:	f1c2 0720 	rsb	r7, r2, #32
 800021e:	fa01 f302 	lsl.w	r3, r1, r2
 8000222:	fa20 f707 	lsr.w	r7, r0, r7
 8000226:	4095      	lsls	r5, r2
 8000228:	ea47 0803 	orr.w	r8, r7, r3
 800022c:	4094      	lsls	r4, r2
 800022e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000232:	0c23      	lsrs	r3, r4, #16
 8000234:	fbb8 f7fe 	udiv	r7, r8, lr
 8000238:	fa1f fc85 	uxth.w	ip, r5
 800023c:	fb0e 8817 	mls	r8, lr, r7, r8
 8000240:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000244:	fb07 f10c 	mul.w	r1, r7, ip
 8000248:	4299      	cmp	r1, r3
 800024a:	d909      	bls.n	8000260 <__udivmoddi4+0x60>
 800024c:	18eb      	adds	r3, r5, r3
 800024e:	f107 30ff 	add.w	r0, r7, #4294967295
 8000252:	f080 811b 	bcs.w	800048c <__udivmoddi4+0x28c>
 8000256:	4299      	cmp	r1, r3
 8000258:	f240 8118 	bls.w	800048c <__udivmoddi4+0x28c>
 800025c:	3f02      	subs	r7, #2
 800025e:	442b      	add	r3, r5
 8000260:	1a5b      	subs	r3, r3, r1
 8000262:	b2a4      	uxth	r4, r4
 8000264:	fbb3 f0fe 	udiv	r0, r3, lr
 8000268:	fb0e 3310 	mls	r3, lr, r0, r3
 800026c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000270:	fb00 fc0c 	mul.w	ip, r0, ip
 8000274:	45a4      	cmp	ip, r4
 8000276:	d909      	bls.n	800028c <__udivmoddi4+0x8c>
 8000278:	192c      	adds	r4, r5, r4
 800027a:	f100 33ff 	add.w	r3, r0, #4294967295
 800027e:	f080 8107 	bcs.w	8000490 <__udivmoddi4+0x290>
 8000282:	45a4      	cmp	ip, r4
 8000284:	f240 8104 	bls.w	8000490 <__udivmoddi4+0x290>
 8000288:	3802      	subs	r0, #2
 800028a:	442c      	add	r4, r5
 800028c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000290:	eba4 040c 	sub.w	r4, r4, ip
 8000294:	2700      	movs	r7, #0
 8000296:	b11e      	cbz	r6, 80002a0 <__udivmoddi4+0xa0>
 8000298:	40d4      	lsrs	r4, r2
 800029a:	2300      	movs	r3, #0
 800029c:	e9c6 4300 	strd	r4, r3, [r6]
 80002a0:	4639      	mov	r1, r7
 80002a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002a6:	428b      	cmp	r3, r1
 80002a8:	d909      	bls.n	80002be <__udivmoddi4+0xbe>
 80002aa:	2e00      	cmp	r6, #0
 80002ac:	f000 80eb 	beq.w	8000486 <__udivmoddi4+0x286>
 80002b0:	2700      	movs	r7, #0
 80002b2:	e9c6 0100 	strd	r0, r1, [r6]
 80002b6:	4638      	mov	r0, r7
 80002b8:	4639      	mov	r1, r7
 80002ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002be:	fab3 f783 	clz	r7, r3
 80002c2:	2f00      	cmp	r7, #0
 80002c4:	d147      	bne.n	8000356 <__udivmoddi4+0x156>
 80002c6:	428b      	cmp	r3, r1
 80002c8:	d302      	bcc.n	80002d0 <__udivmoddi4+0xd0>
 80002ca:	4282      	cmp	r2, r0
 80002cc:	f200 80fa 	bhi.w	80004c4 <__udivmoddi4+0x2c4>
 80002d0:	1a84      	subs	r4, r0, r2
 80002d2:	eb61 0303 	sbc.w	r3, r1, r3
 80002d6:	2001      	movs	r0, #1
 80002d8:	4698      	mov	r8, r3
 80002da:	2e00      	cmp	r6, #0
 80002dc:	d0e0      	beq.n	80002a0 <__udivmoddi4+0xa0>
 80002de:	e9c6 4800 	strd	r4, r8, [r6]
 80002e2:	e7dd      	b.n	80002a0 <__udivmoddi4+0xa0>
 80002e4:	b902      	cbnz	r2, 80002e8 <__udivmoddi4+0xe8>
 80002e6:	deff      	udf	#255	; 0xff
 80002e8:	fab2 f282 	clz	r2, r2
 80002ec:	2a00      	cmp	r2, #0
 80002ee:	f040 808f 	bne.w	8000410 <__udivmoddi4+0x210>
 80002f2:	1b49      	subs	r1, r1, r5
 80002f4:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80002f8:	fa1f f885 	uxth.w	r8, r5
 80002fc:	2701      	movs	r7, #1
 80002fe:	fbb1 fcfe 	udiv	ip, r1, lr
 8000302:	0c23      	lsrs	r3, r4, #16
 8000304:	fb0e 111c 	mls	r1, lr, ip, r1
 8000308:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800030c:	fb08 f10c 	mul.w	r1, r8, ip
 8000310:	4299      	cmp	r1, r3
 8000312:	d907      	bls.n	8000324 <__udivmoddi4+0x124>
 8000314:	18eb      	adds	r3, r5, r3
 8000316:	f10c 30ff 	add.w	r0, ip, #4294967295
 800031a:	d202      	bcs.n	8000322 <__udivmoddi4+0x122>
 800031c:	4299      	cmp	r1, r3
 800031e:	f200 80cd 	bhi.w	80004bc <__udivmoddi4+0x2bc>
 8000322:	4684      	mov	ip, r0
 8000324:	1a59      	subs	r1, r3, r1
 8000326:	b2a3      	uxth	r3, r4
 8000328:	fbb1 f0fe 	udiv	r0, r1, lr
 800032c:	fb0e 1410 	mls	r4, lr, r0, r1
 8000330:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000334:	fb08 f800 	mul.w	r8, r8, r0
 8000338:	45a0      	cmp	r8, r4
 800033a:	d907      	bls.n	800034c <__udivmoddi4+0x14c>
 800033c:	192c      	adds	r4, r5, r4
 800033e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000342:	d202      	bcs.n	800034a <__udivmoddi4+0x14a>
 8000344:	45a0      	cmp	r8, r4
 8000346:	f200 80b6 	bhi.w	80004b6 <__udivmoddi4+0x2b6>
 800034a:	4618      	mov	r0, r3
 800034c:	eba4 0408 	sub.w	r4, r4, r8
 8000350:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000354:	e79f      	b.n	8000296 <__udivmoddi4+0x96>
 8000356:	f1c7 0c20 	rsb	ip, r7, #32
 800035a:	40bb      	lsls	r3, r7
 800035c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000360:	ea4e 0e03 	orr.w	lr, lr, r3
 8000364:	fa01 f407 	lsl.w	r4, r1, r7
 8000368:	fa20 f50c 	lsr.w	r5, r0, ip
 800036c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000370:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000374:	4325      	orrs	r5, r4
 8000376:	fbb3 f9f8 	udiv	r9, r3, r8
 800037a:	0c2c      	lsrs	r4, r5, #16
 800037c:	fb08 3319 	mls	r3, r8, r9, r3
 8000380:	fa1f fa8e 	uxth.w	sl, lr
 8000384:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000388:	fb09 f40a 	mul.w	r4, r9, sl
 800038c:	429c      	cmp	r4, r3
 800038e:	fa02 f207 	lsl.w	r2, r2, r7
 8000392:	fa00 f107 	lsl.w	r1, r0, r7
 8000396:	d90b      	bls.n	80003b0 <__udivmoddi4+0x1b0>
 8000398:	eb1e 0303 	adds.w	r3, lr, r3
 800039c:	f109 30ff 	add.w	r0, r9, #4294967295
 80003a0:	f080 8087 	bcs.w	80004b2 <__udivmoddi4+0x2b2>
 80003a4:	429c      	cmp	r4, r3
 80003a6:	f240 8084 	bls.w	80004b2 <__udivmoddi4+0x2b2>
 80003aa:	f1a9 0902 	sub.w	r9, r9, #2
 80003ae:	4473      	add	r3, lr
 80003b0:	1b1b      	subs	r3, r3, r4
 80003b2:	b2ad      	uxth	r5, r5
 80003b4:	fbb3 f0f8 	udiv	r0, r3, r8
 80003b8:	fb08 3310 	mls	r3, r8, r0, r3
 80003bc:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80003c0:	fb00 fa0a 	mul.w	sl, r0, sl
 80003c4:	45a2      	cmp	sl, r4
 80003c6:	d908      	bls.n	80003da <__udivmoddi4+0x1da>
 80003c8:	eb1e 0404 	adds.w	r4, lr, r4
 80003cc:	f100 33ff 	add.w	r3, r0, #4294967295
 80003d0:	d26b      	bcs.n	80004aa <__udivmoddi4+0x2aa>
 80003d2:	45a2      	cmp	sl, r4
 80003d4:	d969      	bls.n	80004aa <__udivmoddi4+0x2aa>
 80003d6:	3802      	subs	r0, #2
 80003d8:	4474      	add	r4, lr
 80003da:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80003de:	fba0 8902 	umull	r8, r9, r0, r2
 80003e2:	eba4 040a 	sub.w	r4, r4, sl
 80003e6:	454c      	cmp	r4, r9
 80003e8:	46c2      	mov	sl, r8
 80003ea:	464b      	mov	r3, r9
 80003ec:	d354      	bcc.n	8000498 <__udivmoddi4+0x298>
 80003ee:	d051      	beq.n	8000494 <__udivmoddi4+0x294>
 80003f0:	2e00      	cmp	r6, #0
 80003f2:	d069      	beq.n	80004c8 <__udivmoddi4+0x2c8>
 80003f4:	ebb1 050a 	subs.w	r5, r1, sl
 80003f8:	eb64 0403 	sbc.w	r4, r4, r3
 80003fc:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000400:	40fd      	lsrs	r5, r7
 8000402:	40fc      	lsrs	r4, r7
 8000404:	ea4c 0505 	orr.w	r5, ip, r5
 8000408:	e9c6 5400 	strd	r5, r4, [r6]
 800040c:	2700      	movs	r7, #0
 800040e:	e747      	b.n	80002a0 <__udivmoddi4+0xa0>
 8000410:	f1c2 0320 	rsb	r3, r2, #32
 8000414:	fa20 f703 	lsr.w	r7, r0, r3
 8000418:	4095      	lsls	r5, r2
 800041a:	fa01 f002 	lsl.w	r0, r1, r2
 800041e:	fa21 f303 	lsr.w	r3, r1, r3
 8000422:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000426:	4338      	orrs	r0, r7
 8000428:	0c01      	lsrs	r1, r0, #16
 800042a:	fbb3 f7fe 	udiv	r7, r3, lr
 800042e:	fa1f f885 	uxth.w	r8, r5
 8000432:	fb0e 3317 	mls	r3, lr, r7, r3
 8000436:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800043a:	fb07 f308 	mul.w	r3, r7, r8
 800043e:	428b      	cmp	r3, r1
 8000440:	fa04 f402 	lsl.w	r4, r4, r2
 8000444:	d907      	bls.n	8000456 <__udivmoddi4+0x256>
 8000446:	1869      	adds	r1, r5, r1
 8000448:	f107 3cff 	add.w	ip, r7, #4294967295
 800044c:	d22f      	bcs.n	80004ae <__udivmoddi4+0x2ae>
 800044e:	428b      	cmp	r3, r1
 8000450:	d92d      	bls.n	80004ae <__udivmoddi4+0x2ae>
 8000452:	3f02      	subs	r7, #2
 8000454:	4429      	add	r1, r5
 8000456:	1acb      	subs	r3, r1, r3
 8000458:	b281      	uxth	r1, r0
 800045a:	fbb3 f0fe 	udiv	r0, r3, lr
 800045e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000462:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000466:	fb00 f308 	mul.w	r3, r0, r8
 800046a:	428b      	cmp	r3, r1
 800046c:	d907      	bls.n	800047e <__udivmoddi4+0x27e>
 800046e:	1869      	adds	r1, r5, r1
 8000470:	f100 3cff 	add.w	ip, r0, #4294967295
 8000474:	d217      	bcs.n	80004a6 <__udivmoddi4+0x2a6>
 8000476:	428b      	cmp	r3, r1
 8000478:	d915      	bls.n	80004a6 <__udivmoddi4+0x2a6>
 800047a:	3802      	subs	r0, #2
 800047c:	4429      	add	r1, r5
 800047e:	1ac9      	subs	r1, r1, r3
 8000480:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000484:	e73b      	b.n	80002fe <__udivmoddi4+0xfe>
 8000486:	4637      	mov	r7, r6
 8000488:	4630      	mov	r0, r6
 800048a:	e709      	b.n	80002a0 <__udivmoddi4+0xa0>
 800048c:	4607      	mov	r7, r0
 800048e:	e6e7      	b.n	8000260 <__udivmoddi4+0x60>
 8000490:	4618      	mov	r0, r3
 8000492:	e6fb      	b.n	800028c <__udivmoddi4+0x8c>
 8000494:	4541      	cmp	r1, r8
 8000496:	d2ab      	bcs.n	80003f0 <__udivmoddi4+0x1f0>
 8000498:	ebb8 0a02 	subs.w	sl, r8, r2
 800049c:	eb69 020e 	sbc.w	r2, r9, lr
 80004a0:	3801      	subs	r0, #1
 80004a2:	4613      	mov	r3, r2
 80004a4:	e7a4      	b.n	80003f0 <__udivmoddi4+0x1f0>
 80004a6:	4660      	mov	r0, ip
 80004a8:	e7e9      	b.n	800047e <__udivmoddi4+0x27e>
 80004aa:	4618      	mov	r0, r3
 80004ac:	e795      	b.n	80003da <__udivmoddi4+0x1da>
 80004ae:	4667      	mov	r7, ip
 80004b0:	e7d1      	b.n	8000456 <__udivmoddi4+0x256>
 80004b2:	4681      	mov	r9, r0
 80004b4:	e77c      	b.n	80003b0 <__udivmoddi4+0x1b0>
 80004b6:	3802      	subs	r0, #2
 80004b8:	442c      	add	r4, r5
 80004ba:	e747      	b.n	800034c <__udivmoddi4+0x14c>
 80004bc:	f1ac 0c02 	sub.w	ip, ip, #2
 80004c0:	442b      	add	r3, r5
 80004c2:	e72f      	b.n	8000324 <__udivmoddi4+0x124>
 80004c4:	4638      	mov	r0, r7
 80004c6:	e708      	b.n	80002da <__udivmoddi4+0xda>
 80004c8:	4637      	mov	r7, r6
 80004ca:	e6e9      	b.n	80002a0 <__udivmoddi4+0xa0>

080004cc <__aeabi_idiv0>:
 80004cc:	4770      	bx	lr
 80004ce:	bf00      	nop

080004d0 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 80004d0:	b580      	push	{r7, lr}
 80004d2:	b0ae      	sub	sp, #184	; 0xb8
 80004d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Init */
       
  /* USER CODE END Init */
osKernelInitialize();
 80004d6:	f003 f933 	bl	8003740 <osKernelInitialize>

  /* USER CODE BEGIN RTOS_MUTEX */
  /* add mutexes, ... */
  xSemaphore = xSemaphoreCreateMutex();
 80004da:	2001      	movs	r0, #1
 80004dc:	f003 fcac 	bl	8003e38 <xQueueCreateMutex>
 80004e0:	4602      	mov	r2, r0
 80004e2:	4b3e      	ldr	r3, [pc, #248]	; (80005dc <MX_FREERTOS_Init+0x10c>)
 80004e4:	601a      	str	r2, [r3, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  const osThreadAttr_t defaultTask_attributes = {
 80004e6:	f107 0394 	add.w	r3, r7, #148	; 0x94
 80004ea:	2224      	movs	r2, #36	; 0x24
 80004ec:	2100      	movs	r1, #0
 80004ee:	4618      	mov	r0, r3
 80004f0:	f006 f96b 	bl	80067ca <memset>
 80004f4:	4b3a      	ldr	r3, [pc, #232]	; (80005e0 <MX_FREERTOS_Init+0x110>)
 80004f6:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80004fa:	2380      	movs	r3, #128	; 0x80
 80004fc:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8000500:	2308      	movs	r3, #8
 8000502:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    .name = "defaultTask",
    .priority = (osPriority_t) osPriorityLow,
    .stack_size = 128
  };
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8000506:	f107 0394 	add.w	r3, r7, #148	; 0x94
 800050a:	461a      	mov	r2, r3
 800050c:	2100      	movs	r1, #0
 800050e:	4835      	ldr	r0, [pc, #212]	; (80005e4 <MX_FREERTOS_Init+0x114>)
 8000510:	f003 f97e 	bl	8003810 <osThreadNew>
 8000514:	4602      	mov	r2, r0
 8000516:	4b34      	ldr	r3, [pc, #208]	; (80005e8 <MX_FREERTOS_Init+0x118>)
 8000518:	601a      	str	r2, [r3, #0]

  /* definition and creation of Blink1Task */
  const osThreadAttr_t Blink1Task_attributes = {
 800051a:	f107 0370 	add.w	r3, r7, #112	; 0x70
 800051e:	2224      	movs	r2, #36	; 0x24
 8000520:	2100      	movs	r1, #0
 8000522:	4618      	mov	r0, r3
 8000524:	f006 f951 	bl	80067ca <memset>
 8000528:	4b30      	ldr	r3, [pc, #192]	; (80005ec <MX_FREERTOS_Init+0x11c>)
 800052a:	673b      	str	r3, [r7, #112]	; 0x70
 800052c:	2380      	movs	r3, #128	; 0x80
 800052e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8000532:	2318      	movs	r3, #24
 8000534:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    .name = "Blink1Task",
    .priority = (osPriority_t) osPriorityNormal,
    .stack_size = 128
  };
  Blink1TaskHandle = osThreadNew(Blink1, NULL, &Blink1Task_attributes);
 8000538:	f107 0370 	add.w	r3, r7, #112	; 0x70
 800053c:	461a      	mov	r2, r3
 800053e:	2100      	movs	r1, #0
 8000540:	482b      	ldr	r0, [pc, #172]	; (80005f0 <MX_FREERTOS_Init+0x120>)
 8000542:	f003 f965 	bl	8003810 <osThreadNew>
 8000546:	4602      	mov	r2, r0
 8000548:	4b2a      	ldr	r3, [pc, #168]	; (80005f4 <MX_FREERTOS_Init+0x124>)
 800054a:	601a      	str	r2, [r3, #0]

  /* definition and creation of Blink2Task */
  const osThreadAttr_t Blink2Task_attributes = {
 800054c:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8000550:	2224      	movs	r2, #36	; 0x24
 8000552:	2100      	movs	r1, #0
 8000554:	4618      	mov	r0, r3
 8000556:	f006 f938 	bl	80067ca <memset>
 800055a:	4b27      	ldr	r3, [pc, #156]	; (80005f8 <MX_FREERTOS_Init+0x128>)
 800055c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800055e:	2380      	movs	r3, #128	; 0x80
 8000560:	663b      	str	r3, [r7, #96]	; 0x60
 8000562:	231e      	movs	r3, #30
 8000564:	667b      	str	r3, [r7, #100]	; 0x64
    .name = "Blink2Task",
    .priority = (osPriority_t) osPriorityNormal6,
    .stack_size = 128
  };
  Blink2TaskHandle = osThreadNew(Blink2, NULL, &Blink2Task_attributes);
 8000566:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800056a:	461a      	mov	r2, r3
 800056c:	2100      	movs	r1, #0
 800056e:	4823      	ldr	r0, [pc, #140]	; (80005fc <MX_FREERTOS_Init+0x12c>)
 8000570:	f003 f94e 	bl	8003810 <osThreadNew>
 8000574:	4602      	mov	r2, r0
 8000576:	4b22      	ldr	r3, [pc, #136]	; (8000600 <MX_FREERTOS_Init+0x130>)
 8000578:	601a      	str	r2, [r3, #0]

  /* definition and creation of TriggTask */
  const osThreadAttr_t TriggTask_attributes = {
 800057a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800057e:	2224      	movs	r2, #36	; 0x24
 8000580:	2100      	movs	r1, #0
 8000582:	4618      	mov	r0, r3
 8000584:	f006 f921 	bl	80067ca <memset>
 8000588:	4b1e      	ldr	r3, [pc, #120]	; (8000604 <MX_FREERTOS_Init+0x134>)
 800058a:	62bb      	str	r3, [r7, #40]	; 0x28
 800058c:	2380      	movs	r3, #128	; 0x80
 800058e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8000590:	2328      	movs	r3, #40	; 0x28
 8000592:	643b      	str	r3, [r7, #64]	; 0x40
    .name = "TriggTask",
    .priority = (osPriority_t) osPriorityHigh,
    .stack_size = 128
  };
  TriggTaskHandle = osThreadNew(Trigg, NULL, &TriggTask_attributes);
 8000594:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000598:	461a      	mov	r2, r3
 800059a:	2100      	movs	r1, #0
 800059c:	481a      	ldr	r0, [pc, #104]	; (8000608 <MX_FREERTOS_Init+0x138>)
 800059e:	f003 f937 	bl	8003810 <osThreadNew>
 80005a2:	4602      	mov	r2, r0
 80005a4:	4b19      	ldr	r3, [pc, #100]	; (800060c <MX_FREERTOS_Init+0x13c>)
 80005a6:	601a      	str	r2, [r3, #0]

  /* definition and creation of UserbuttonTask */
  const osThreadAttr_t UserbuttonTask_attributes = {
 80005a8:	1d3b      	adds	r3, r7, #4
 80005aa:	2224      	movs	r2, #36	; 0x24
 80005ac:	2100      	movs	r1, #0
 80005ae:	4618      	mov	r0, r3
 80005b0:	f006 f90b 	bl	80067ca <memset>
 80005b4:	4b16      	ldr	r3, [pc, #88]	; (8000610 <MX_FREERTOS_Init+0x140>)
 80005b6:	607b      	str	r3, [r7, #4]
 80005b8:	2380      	movs	r3, #128	; 0x80
 80005ba:	61bb      	str	r3, [r7, #24]
 80005bc:	2328      	movs	r3, #40	; 0x28
 80005be:	61fb      	str	r3, [r7, #28]
    .name = "UserbuttonTask",
    .priority = (osPriority_t) osPriorityHigh,
    .stack_size = 128
  };
  UserbuttonTaskHandle = osThreadNew(Userbutton, NULL, &UserbuttonTask_attributes);
 80005c0:	1d3b      	adds	r3, r7, #4
 80005c2:	461a      	mov	r2, r3
 80005c4:	2100      	movs	r1, #0
 80005c6:	4813      	ldr	r0, [pc, #76]	; (8000614 <MX_FREERTOS_Init+0x144>)
 80005c8:	f003 f922 	bl	8003810 <osThreadNew>
 80005cc:	4602      	mov	r2, r0
 80005ce:	4b12      	ldr	r3, [pc, #72]	; (8000618 <MX_FREERTOS_Init+0x148>)
 80005d0:	601a      	str	r2, [r3, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

}
 80005d2:	bf00      	nop
 80005d4:	37b8      	adds	r7, #184	; 0xb8
 80005d6:	46bd      	mov	sp, r7
 80005d8:	bd80      	pop	{r7, pc}
 80005da:	bf00      	nop
 80005dc:	2000002c 	.word	0x2000002c
 80005e0:	080067f4 	.word	0x080067f4
 80005e4:	0800061d 	.word	0x0800061d
 80005e8:	200018f0 	.word	0x200018f0
 80005ec:	08006800 	.word	0x08006800
 80005f0:	0800062d 	.word	0x0800062d
 80005f4:	200018fc 	.word	0x200018fc
 80005f8:	0800680c 	.word	0x0800680c
 80005fc:	0800068d 	.word	0x0800068d
 8000600:	200018f4 	.word	0x200018f4
 8000604:	08006818 	.word	0x08006818
 8000608:	080006d9 	.word	0x080006d9
 800060c:	200018f8 	.word	0x200018f8
 8000610:	08006824 	.word	0x08006824
 8000614:	08000709 	.word	0x08000709
 8000618:	20001900 	.word	0x20001900

0800061c <StartDefaultTask>:
  * @param  argument: Not used 
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 800061c:	b580      	push	{r7, lr}
 800061e:	b082      	sub	sp, #8
 8000620:	af00      	add	r7, sp, #0
 8000622:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartDefaultTask */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000624:	2001      	movs	r0, #1
 8000626:	f003 f99d 	bl	8003964 <osDelay>
 800062a:	e7fb      	b.n	8000624 <StartDefaultTask+0x8>

0800062c <Blink1>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Blink1 */
void Blink1(void *argument)
{
 800062c:	b580      	push	{r7, lr}
 800062e:	b086      	sub	sp, #24
 8000630:	af00      	add	r7, sp, #0
 8000632:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN Blink1 */

	uint16_t varv,antalvarv=5000;
 8000634:	f241 3388 	movw	r3, #5000	; 0x1388
 8000638:	82fb      	strh	r3, [r7, #22]
	TickType_t xLastWakeTime;
	const TickType_t xPeriod = pdMS_TO_TICKS(100) ; // ms to ticks
 800063a:	2364      	movs	r3, #100	; 0x64
 800063c:	613b      	str	r3, [r7, #16]
	// Initialise the xLastWakeTime variable with the current time.
	xLastWakeTime = xTaskGetTickCount();
 800063e:	f004 fc59 	bl	8004ef4 <xTaskGetTickCount>
 8000642:	4603      	mov	r3, r0
 8000644:	60fb      	str	r3, [r7, #12]

	for(;;) {
	 if( xSemaphore != NULL ) {
 8000646:	4b10      	ldr	r3, [pc, #64]	; (8000688 <Blink1+0x5c>)
 8000648:	681b      	ldr	r3, [r3, #0]
 800064a:	2b00      	cmp	r3, #0
 800064c:	d014      	beq.n	8000678 <Blink1+0x4c>
		 /* See if the mutex can be obtained. If the mutex is not available
		 wait 10 ticks to see if it becomes free. */
		 if( xSemaphoreTake( xSemaphore, 10 ) == pdTRUE ) {
 800064e:	4b0e      	ldr	r3, [pc, #56]	; (8000688 <Blink1+0x5c>)
 8000650:	681b      	ldr	r3, [r3, #0]
 8000652:	210a      	movs	r1, #10
 8000654:	4618      	mov	r0, r3
 8000656:	f003 fe71 	bl	800433c <xQueueSemaphoreTake>
 800065a:	4603      	mov	r3, r0
 800065c:	2b01      	cmp	r3, #1
 800065e:	d10b      	bne.n	8000678 <Blink1+0x4c>
			 /* The mutex was successfully obtained so the shared resource can be
			 accessed safely. */
			 /* ... */
			 /* Access to the shared resource is complete, so the mutex is
			 returned. */
			 HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin); // Blink PC10
 8000660:	2120      	movs	r1, #32
 8000662:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000666:	f000 fe31 	bl	80012cc <HAL_GPIO_TogglePin>
			 xSemaphoreGive( xSemaphore );
 800066a:	4b07      	ldr	r3, [pc, #28]	; (8000688 <Blink1+0x5c>)
 800066c:	6818      	ldr	r0, [r3, #0]
 800066e:	2300      	movs	r3, #0
 8000670:	2200      	movs	r2, #0
 8000672:	2100      	movs	r1, #0
 8000674:	f003 fbf8 	bl	8003e68 <xQueueGenericSend>
		 } else {
			 /* The mutex could not be obtained even after waiting 10 ticks, so
			 the shared resource cannot be accessed. */
		 }
	 }
	 vTaskDelayUntil( &xLastWakeTime, xPeriod );
 8000678:	f107 030c 	add.w	r3, r7, #12
 800067c:	6939      	ldr	r1, [r7, #16]
 800067e:	4618      	mov	r0, r3
 8000680:	f004 fa7c 	bl	8004b7c <vTaskDelayUntil>
	 if( xSemaphore != NULL ) {
 8000684:	e7df      	b.n	8000646 <Blink1+0x1a>
 8000686:	bf00      	nop
 8000688:	2000002c 	.word	0x2000002c

0800068c <Blink2>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Blink2 */
void Blink2(void *argument)
{
 800068c:	b580      	push	{r7, lr}
 800068e:	b086      	sub	sp, #24
 8000690:	af00      	add	r7, sp, #0
 8000692:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN Blink1 */
	uint16_t varv,antalvarv=10000;
 8000694:	f242 7310 	movw	r3, #10000	; 0x2710
 8000698:	82bb      	strh	r3, [r7, #20]
	TickType_t xLastWakeTime;
	const TickType_t xPeriod = pdMS_TO_TICKS(20) ; // ms to ticks
 800069a:	2314      	movs	r3, #20
 800069c:	613b      	str	r3, [r7, #16]
	// Initialise the xLastWakeTime variable with the current time.
	xLastWakeTime = xTaskGetTickCount();
 800069e:	f004 fc29 	bl	8004ef4 <xTaskGetTickCount>
 80006a2:	4603      	mov	r3, r0
 80006a4:	60fb      	str	r3, [r7, #12]
	/* Infinite loop */
	for(;;)
	{
	for (varv=1; varv<= antalvarv; varv++){
 80006a6:	2301      	movs	r3, #1
 80006a8:	82fb      	strh	r3, [r7, #22]
 80006aa:	e007      	b.n	80006bc <Blink2+0x30>
	HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_10); // Blink PC10
 80006ac:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80006b0:	4808      	ldr	r0, [pc, #32]	; (80006d4 <Blink2+0x48>)
 80006b2:	f000 fe0b 	bl	80012cc <HAL_GPIO_TogglePin>
	for (varv=1; varv<= antalvarv; varv++){
 80006b6:	8afb      	ldrh	r3, [r7, #22]
 80006b8:	3301      	adds	r3, #1
 80006ba:	82fb      	strh	r3, [r7, #22]
 80006bc:	8afa      	ldrh	r2, [r7, #22]
 80006be:	8abb      	ldrh	r3, [r7, #20]
 80006c0:	429a      	cmp	r2, r3
 80006c2:	d9f3      	bls.n	80006ac <Blink2+0x20>
	}
	vTaskDelayUntil( &xLastWakeTime, xPeriod );
 80006c4:	f107 030c 	add.w	r3, r7, #12
 80006c8:	6939      	ldr	r1, [r7, #16]
 80006ca:	4618      	mov	r0, r3
 80006cc:	f004 fa56 	bl	8004b7c <vTaskDelayUntil>
	for (varv=1; varv<= antalvarv; varv++){
 80006d0:	e7e9      	b.n	80006a6 <Blink2+0x1a>
 80006d2:	bf00      	nop
 80006d4:	48000800 	.word	0x48000800

080006d8 <Trigg>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Trigg */
void Trigg(void *argument)
{
 80006d8:	b580      	push	{r7, lr}
 80006da:	b084      	sub	sp, #16
 80006dc:	af00      	add	r7, sp, #0
 80006de:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Trigg */
	TickType_t xLastWakeTime;
	const TickType_t xPeriod = pdMS_TO_TICKS(10); // ms to ticks
 80006e0:	230a      	movs	r3, #10
 80006e2:	60fb      	str	r3, [r7, #12]
	// Initialise the xLastWakeTime variable with the current time.
	xLastWakeTime = xTaskGetTickCount();
 80006e4:	f004 fc06 	bl	8004ef4 <xTaskGetTickCount>
 80006e8:	4603      	mov	r3, r0
 80006ea:	60bb      	str	r3, [r7, #8]
	/* Infinite loop */
	for(;;) {
		HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_2); // Blink PD2
 80006ec:	2104      	movs	r1, #4
 80006ee:	4805      	ldr	r0, [pc, #20]	; (8000704 <Trigg+0x2c>)
 80006f0:	f000 fdec 	bl	80012cc <HAL_GPIO_TogglePin>
		vTaskDelayUntil( &xLastWakeTime, xPeriod );
 80006f4:	f107 0308 	add.w	r3, r7, #8
 80006f8:	68f9      	ldr	r1, [r7, #12]
 80006fa:	4618      	mov	r0, r3
 80006fc:	f004 fa3e 	bl	8004b7c <vTaskDelayUntil>
		HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_2); // Blink PD2
 8000700:	e7f4      	b.n	80006ec <Trigg+0x14>
 8000702:	bf00      	nop
 8000704:	48000c00 	.word	0x48000c00

08000708 <Userbutton>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Userbutton */
void Userbutton(void *argument)
{
 8000708:	b580      	push	{r7, lr}
 800070a:	b086      	sub	sp, #24
 800070c:	af00      	add	r7, sp, #0
 800070e:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN Userbutton */
	uint16_t varv,antalvarv=12000;
 8000710:	f642 63e0 	movw	r3, #12000	; 0x2ee0
 8000714:	82fb      	strh	r3, [r7, #22]
	TickType_t xLastWakeTime;
	const TickType_t xPeriod = pdMS_TO_TICKS(20);
 8000716:	2314      	movs	r3, #20
 8000718:	613b      	str	r3, [r7, #16]
	// Initialise the xLastWakeTime variable with the current time.
	xLastWakeTime = xTaskGetTickCount();
 800071a:	f004 fbeb 	bl	8004ef4 <xTaskGetTickCount>
 800071e:	4603      	mov	r3, r0
 8000720:	60fb      	str	r3, [r7, #12]
	/* Infinite loop */


	 for( ;; ) {
		 /* ... Do other things. */
		 if( xSemaphore != NULL ) {
 8000722:	4b14      	ldr	r3, [pc, #80]	; (8000774 <Userbutton+0x6c>)
 8000724:	681b      	ldr	r3, [r3, #0]
 8000726:	2b00      	cmp	r3, #0
 8000728:	d01d      	beq.n	8000766 <Userbutton+0x5e>
			 /* See if the mutex can be obtained. If the mutex is not available
			 wait 10 ticks to see if it becomes free. */
			 if( HAL_GPIO_ReadPin(B1_GPIO_Port, B1_Pin)==GPIO_PIN_RESET && HAL_GPIO_ReadPin(LD2_GPIO_Port, LD2_Pin)==GPIO_PIN_RESET) {
 800072a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800072e:	4812      	ldr	r0, [pc, #72]	; (8000778 <Userbutton+0x70>)
 8000730:	f000 fd9c 	bl	800126c <HAL_GPIO_ReadPin>
 8000734:	4603      	mov	r3, r0
 8000736:	2b00      	cmp	r3, #0
 8000738:	d10e      	bne.n	8000758 <Userbutton+0x50>
 800073a:	2120      	movs	r1, #32
 800073c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000740:	f000 fd94 	bl	800126c <HAL_GPIO_ReadPin>
 8000744:	4603      	mov	r3, r0
 8000746:	2b00      	cmp	r3, #0
 8000748:	d106      	bne.n	8000758 <Userbutton+0x50>
				 /* The mutex was successfully obtained so the shared resource can be
				 accessed safely. */
				 /* ... */
				 /* Access to the shared resource is complete, so the mutex is
				 returned. */
				 xSemaphoreTake( xSemaphore, 10 );
 800074a:	4b0a      	ldr	r3, [pc, #40]	; (8000774 <Userbutton+0x6c>)
 800074c:	681b      	ldr	r3, [r3, #0]
 800074e:	210a      	movs	r1, #10
 8000750:	4618      	mov	r0, r3
 8000752:	f003 fdf3 	bl	800433c <xQueueSemaphoreTake>
 8000756:	e006      	b.n	8000766 <Userbutton+0x5e>
			 } else {
				 /* The mutex could not be obtained even after waiting 10 ticks, so
				 the shared resource cannot be accessed. */
				 xSemaphoreGive( xSemaphore );
 8000758:	4b06      	ldr	r3, [pc, #24]	; (8000774 <Userbutton+0x6c>)
 800075a:	6818      	ldr	r0, [r3, #0]
 800075c:	2300      	movs	r3, #0
 800075e:	2200      	movs	r2, #0
 8000760:	2100      	movs	r1, #0
 8000762:	f003 fb81 	bl	8003e68 <xQueueGenericSend>
			 }
		 }
		 vTaskDelayUntil( &xLastWakeTime, xPeriod );
 8000766:	f107 030c 	add.w	r3, r7, #12
 800076a:	6939      	ldr	r1, [r7, #16]
 800076c:	4618      	mov	r0, r3
 800076e:	f004 fa05 	bl	8004b7c <vTaskDelayUntil>
		 if( xSemaphore != NULL ) {
 8000772:	e7d6      	b.n	8000722 <Userbutton+0x1a>
 8000774:	2000002c 	.word	0x2000002c
 8000778:	48000800 	.word	0x48000800

0800077c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 800077c:	b580      	push	{r7, lr}
 800077e:	b08a      	sub	sp, #40	; 0x28
 8000780:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000782:	f107 0314 	add.w	r3, r7, #20
 8000786:	2200      	movs	r2, #0
 8000788:	601a      	str	r2, [r3, #0]
 800078a:	605a      	str	r2, [r3, #4]
 800078c:	609a      	str	r2, [r3, #8]
 800078e:	60da      	str	r2, [r3, #12]
 8000790:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000792:	4b45      	ldr	r3, [pc, #276]	; (80008a8 <MX_GPIO_Init+0x12c>)
 8000794:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000796:	4a44      	ldr	r2, [pc, #272]	; (80008a8 <MX_GPIO_Init+0x12c>)
 8000798:	f043 0304 	orr.w	r3, r3, #4
 800079c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800079e:	4b42      	ldr	r3, [pc, #264]	; (80008a8 <MX_GPIO_Init+0x12c>)
 80007a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007a2:	f003 0304 	and.w	r3, r3, #4
 80007a6:	613b      	str	r3, [r7, #16]
 80007a8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80007aa:	4b3f      	ldr	r3, [pc, #252]	; (80008a8 <MX_GPIO_Init+0x12c>)
 80007ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007ae:	4a3e      	ldr	r2, [pc, #248]	; (80008a8 <MX_GPIO_Init+0x12c>)
 80007b0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80007b4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80007b6:	4b3c      	ldr	r3, [pc, #240]	; (80008a8 <MX_GPIO_Init+0x12c>)
 80007b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007ba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80007be:	60fb      	str	r3, [r7, #12]
 80007c0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80007c2:	4b39      	ldr	r3, [pc, #228]	; (80008a8 <MX_GPIO_Init+0x12c>)
 80007c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007c6:	4a38      	ldr	r2, [pc, #224]	; (80008a8 <MX_GPIO_Init+0x12c>)
 80007c8:	f043 0301 	orr.w	r3, r3, #1
 80007cc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80007ce:	4b36      	ldr	r3, [pc, #216]	; (80008a8 <MX_GPIO_Init+0x12c>)
 80007d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007d2:	f003 0301 	and.w	r3, r3, #1
 80007d6:	60bb      	str	r3, [r7, #8]
 80007d8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80007da:	4b33      	ldr	r3, [pc, #204]	; (80008a8 <MX_GPIO_Init+0x12c>)
 80007dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007de:	4a32      	ldr	r2, [pc, #200]	; (80008a8 <MX_GPIO_Init+0x12c>)
 80007e0:	f043 0308 	orr.w	r3, r3, #8
 80007e4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80007e6:	4b30      	ldr	r3, [pc, #192]	; (80008a8 <MX_GPIO_Init+0x12c>)
 80007e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007ea:	f003 0308 	and.w	r3, r3, #8
 80007ee:	607b      	str	r3, [r7, #4]
 80007f0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80007f2:	4b2d      	ldr	r3, [pc, #180]	; (80008a8 <MX_GPIO_Init+0x12c>)
 80007f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007f6:	4a2c      	ldr	r2, [pc, #176]	; (80008a8 <MX_GPIO_Init+0x12c>)
 80007f8:	f043 0302 	orr.w	r3, r3, #2
 80007fc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80007fe:	4b2a      	ldr	r3, [pc, #168]	; (80008a8 <MX_GPIO_Init+0x12c>)
 8000800:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000802:	f003 0302 	and.w	r3, r3, #2
 8000806:	603b      	str	r3, [r7, #0]
 8000808:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800080a:	2200      	movs	r2, #0
 800080c:	2120      	movs	r1, #32
 800080e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000812:	f000 fd43 	bl	800129c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12, GPIO_PIN_RESET);
 8000816:	2200      	movs	r2, #0
 8000818:	f44f 51e0 	mov.w	r1, #7168	; 0x1c00
 800081c:	4823      	ldr	r0, [pc, #140]	; (80008ac <MX_GPIO_Init+0x130>)
 800081e:	f000 fd3d 	bl	800129c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_2, GPIO_PIN_RESET);
 8000822:	2200      	movs	r2, #0
 8000824:	2104      	movs	r1, #4
 8000826:	4822      	ldr	r0, [pc, #136]	; (80008b0 <MX_GPIO_Init+0x134>)
 8000828:	f000 fd38 	bl	800129c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 800082c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000830:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000832:	4b20      	ldr	r3, [pc, #128]	; (80008b4 <MX_GPIO_Init+0x138>)
 8000834:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000836:	2300      	movs	r3, #0
 8000838:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800083a:	f107 0314 	add.w	r3, r7, #20
 800083e:	4619      	mov	r1, r3
 8000840:	481a      	ldr	r0, [pc, #104]	; (80008ac <MX_GPIO_Init+0x130>)
 8000842:	f000 fb6b 	bl	8000f1c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000846:	2320      	movs	r3, #32
 8000848:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800084a:	2301      	movs	r3, #1
 800084c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800084e:	2300      	movs	r3, #0
 8000850:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000852:	2300      	movs	r3, #0
 8000854:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000856:	f107 0314 	add.w	r3, r7, #20
 800085a:	4619      	mov	r1, r3
 800085c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000860:	f000 fb5c 	bl	8000f1c <HAL_GPIO_Init>

  /*Configure GPIO pins : PC10 PC11 PC12 */
  GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 8000864:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8000868:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800086a:	2301      	movs	r3, #1
 800086c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800086e:	2300      	movs	r3, #0
 8000870:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000872:	2300      	movs	r3, #0
 8000874:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000876:	f107 0314 	add.w	r3, r7, #20
 800087a:	4619      	mov	r1, r3
 800087c:	480b      	ldr	r0, [pc, #44]	; (80008ac <MX_GPIO_Init+0x130>)
 800087e:	f000 fb4d 	bl	8000f1c <HAL_GPIO_Init>

  /*Configure GPIO pin : PD2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000882:	2304      	movs	r3, #4
 8000884:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000886:	2301      	movs	r3, #1
 8000888:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800088a:	2300      	movs	r3, #0
 800088c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800088e:	2300      	movs	r3, #0
 8000890:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000892:	f107 0314 	add.w	r3, r7, #20
 8000896:	4619      	mov	r1, r3
 8000898:	4805      	ldr	r0, [pc, #20]	; (80008b0 <MX_GPIO_Init+0x134>)
 800089a:	f000 fb3f 	bl	8000f1c <HAL_GPIO_Init>

}
 800089e:	bf00      	nop
 80008a0:	3728      	adds	r7, #40	; 0x28
 80008a2:	46bd      	mov	sp, r7
 80008a4:	bd80      	pop	{r7, pc}
 80008a6:	bf00      	nop
 80008a8:	40021000 	.word	0x40021000
 80008ac:	48000800 	.word	0x48000800
 80008b0:	48000c00 	.word	0x48000c00
 80008b4:	10210000 	.word	0x10210000

080008b8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80008b8:	b580      	push	{r7, lr}
 80008ba:	af00      	add	r7, sp, #0
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80008bc:	f000 fa0e 	bl	8000cdc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80008c0:	f000 f809 	bl	80008d6 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80008c4:	f7ff ff5a 	bl	800077c <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80008c8:	f000 f96c 	bl	8000ba4 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Call init function for freertos objects (in freertos.c) */
  MX_FREERTOS_Init(); 
 80008cc:	f7ff fe00 	bl	80004d0 <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 80008d0:	f002 ff6a 	bl	80037a8 <osKernelStart>
  
  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80008d4:	e7fe      	b.n	80008d4 <main+0x1c>

080008d6 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80008d6:	b580      	push	{r7, lr}
 80008d8:	b0b8      	sub	sp, #224	; 0xe0
 80008da:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80008dc:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80008e0:	2244      	movs	r2, #68	; 0x44
 80008e2:	2100      	movs	r1, #0
 80008e4:	4618      	mov	r0, r3
 80008e6:	f005 ff70 	bl	80067ca <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80008ea:	f107 0388 	add.w	r3, r7, #136	; 0x88
 80008ee:	2200      	movs	r2, #0
 80008f0:	601a      	str	r2, [r3, #0]
 80008f2:	605a      	str	r2, [r3, #4]
 80008f4:	609a      	str	r2, [r3, #8]
 80008f6:	60da      	str	r2, [r3, #12]
 80008f8:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80008fa:	463b      	mov	r3, r7
 80008fc:	2288      	movs	r2, #136	; 0x88
 80008fe:	2100      	movs	r1, #0
 8000900:	4618      	mov	r0, r3
 8000902:	f005 ff62 	bl	80067ca <memset>

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000906:	2302      	movs	r3, #2
 8000908:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800090c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000910:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000914:	2310      	movs	r3, #16
 8000916:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800091a:	2302      	movs	r3, #2
 800091c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000920:	2302      	movs	r3, #2
 8000922:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000926:	2301      	movs	r3, #1
 8000928:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_OscInitStruct.PLL.PLLN = 10;
 800092c:	230a      	movs	r3, #10
 800092e:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000932:	2307      	movs	r3, #7
 8000934:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000938:	2302      	movs	r3, #2
 800093a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800093e:	2302      	movs	r3, #2
 8000940:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000944:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000948:	4618      	mov	r0, r3
 800094a:	f000 fd3d 	bl	80013c8 <HAL_RCC_OscConfig>
 800094e:	4603      	mov	r3, r0
 8000950:	2b00      	cmp	r3, #0
 8000952:	d001      	beq.n	8000958 <SystemClock_Config+0x82>
  {
    Error_Handler();
 8000954:	f000 f846 	bl	80009e4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000958:	230f      	movs	r3, #15
 800095a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800095e:	2303      	movs	r3, #3
 8000960:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000964:	2300      	movs	r3, #0
 8000966:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800096a:	2300      	movs	r3, #0
 800096c:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000970:	2300      	movs	r3, #0
 8000972:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000976:	f107 0388 	add.w	r3, r7, #136	; 0x88
 800097a:	2104      	movs	r1, #4
 800097c:	4618      	mov	r0, r3
 800097e:	f001 f8d3 	bl	8001b28 <HAL_RCC_ClockConfig>
 8000982:	4603      	mov	r3, r0
 8000984:	2b00      	cmp	r3, #0
 8000986:	d001      	beq.n	800098c <SystemClock_Config+0xb6>
  {
    Error_Handler();
 8000988:	f000 f82c 	bl	80009e4 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 800098c:	2302      	movs	r3, #2
 800098e:	603b      	str	r3, [r7, #0]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000990:	2300      	movs	r3, #0
 8000992:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000994:	463b      	mov	r3, r7
 8000996:	4618      	mov	r0, r3
 8000998:	f001 fafc 	bl	8001f94 <HAL_RCCEx_PeriphCLKConfig>
 800099c:	4603      	mov	r3, r0
 800099e:	2b00      	cmp	r3, #0
 80009a0:	d001      	beq.n	80009a6 <SystemClock_Config+0xd0>
  {
    Error_Handler();
 80009a2:	f000 f81f 	bl	80009e4 <Error_Handler>
  }
  /** Configure the main internal regulator output voltage 
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80009a6:	f44f 7000 	mov.w	r0, #512	; 0x200
 80009aa:	f000 fcb7 	bl	800131c <HAL_PWREx_ControlVoltageScaling>
 80009ae:	4603      	mov	r3, r0
 80009b0:	2b00      	cmp	r3, #0
 80009b2:	d001      	beq.n	80009b8 <SystemClock_Config+0xe2>
  {
    Error_Handler();
 80009b4:	f000 f816 	bl	80009e4 <Error_Handler>
  }
}
 80009b8:	bf00      	nop
 80009ba:	37e0      	adds	r7, #224	; 0xe0
 80009bc:	46bd      	mov	sp, r7
 80009be:	bd80      	pop	{r7, pc}

080009c0 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80009c0:	b580      	push	{r7, lr}
 80009c2:	b082      	sub	sp, #8
 80009c4:	af00      	add	r7, sp, #0
 80009c6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 80009c8:	687b      	ldr	r3, [r7, #4]
 80009ca:	681b      	ldr	r3, [r3, #0]
 80009cc:	4a04      	ldr	r2, [pc, #16]	; (80009e0 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80009ce:	4293      	cmp	r3, r2
 80009d0:	d101      	bne.n	80009d6 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80009d2:	f000 f9a3 	bl	8000d1c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80009d6:	bf00      	nop
 80009d8:	3708      	adds	r7, #8
 80009da:	46bd      	mov	sp, r7
 80009dc:	bd80      	pop	{r7, pc}
 80009de:	bf00      	nop
 80009e0:	40012c00 	.word	0x40012c00

080009e4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80009e4:	b480      	push	{r7}
 80009e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80009e8:	bf00      	nop
 80009ea:	46bd      	mov	sp, r7
 80009ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009f0:	4770      	bx	lr
	...

080009f4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80009f4:	b580      	push	{r7, lr}
 80009f6:	b082      	sub	sp, #8
 80009f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80009fa:	4b11      	ldr	r3, [pc, #68]	; (8000a40 <HAL_MspInit+0x4c>)
 80009fc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80009fe:	4a10      	ldr	r2, [pc, #64]	; (8000a40 <HAL_MspInit+0x4c>)
 8000a00:	f043 0301 	orr.w	r3, r3, #1
 8000a04:	6613      	str	r3, [r2, #96]	; 0x60
 8000a06:	4b0e      	ldr	r3, [pc, #56]	; (8000a40 <HAL_MspInit+0x4c>)
 8000a08:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000a0a:	f003 0301 	and.w	r3, r3, #1
 8000a0e:	607b      	str	r3, [r7, #4]
 8000a10:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a12:	4b0b      	ldr	r3, [pc, #44]	; (8000a40 <HAL_MspInit+0x4c>)
 8000a14:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000a16:	4a0a      	ldr	r2, [pc, #40]	; (8000a40 <HAL_MspInit+0x4c>)
 8000a18:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000a1c:	6593      	str	r3, [r2, #88]	; 0x58
 8000a1e:	4b08      	ldr	r3, [pc, #32]	; (8000a40 <HAL_MspInit+0x4c>)
 8000a20:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000a22:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a26:	603b      	str	r3, [r7, #0]
 8000a28:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000a2a:	2200      	movs	r2, #0
 8000a2c:	210f      	movs	r1, #15
 8000a2e:	f06f 0001 	mvn.w	r0, #1
 8000a32:	f000 fa49 	bl	8000ec8 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a36:	bf00      	nop
 8000a38:	3708      	adds	r7, #8
 8000a3a:	46bd      	mov	sp, r7
 8000a3c:	bd80      	pop	{r7, pc}
 8000a3e:	bf00      	nop
 8000a40:	40021000 	.word	0x40021000

08000a44 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig(). 
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000a44:	b580      	push	{r7, lr}
 8000a46:	b08c      	sub	sp, #48	; 0x30
 8000a48:	af00      	add	r7, sp, #0
 8000a4a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8000a4c:	2300      	movs	r3, #0
 8000a4e:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8000a50:	2300      	movs	r3, #0
 8000a52:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  
  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, TickPriority ,0); 
 8000a54:	2200      	movs	r2, #0
 8000a56:	6879      	ldr	r1, [r7, #4]
 8000a58:	2019      	movs	r0, #25
 8000a5a:	f000 fa35 	bl	8000ec8 <HAL_NVIC_SetPriority>
  
  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn); 
 8000a5e:	2019      	movs	r0, #25
 8000a60:	f000 fa4e 	bl	8000f00 <HAL_NVIC_EnableIRQ>
  
  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8000a64:	4b1e      	ldr	r3, [pc, #120]	; (8000ae0 <HAL_InitTick+0x9c>)
 8000a66:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000a68:	4a1d      	ldr	r2, [pc, #116]	; (8000ae0 <HAL_InitTick+0x9c>)
 8000a6a:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000a6e:	6613      	str	r3, [r2, #96]	; 0x60
 8000a70:	4b1b      	ldr	r3, [pc, #108]	; (8000ae0 <HAL_InitTick+0x9c>)
 8000a72:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000a74:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000a78:	60fb      	str	r3, [r7, #12]
 8000a7a:	68fb      	ldr	r3, [r7, #12]
  
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000a7c:	f107 0210 	add.w	r2, r7, #16
 8000a80:	f107 0314 	add.w	r3, r7, #20
 8000a84:	4611      	mov	r1, r2
 8000a86:	4618      	mov	r0, r3
 8000a88:	f001 f9f2 	bl	8001e70 <HAL_RCC_GetClockConfig>
  
  /* Compute TIM1 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 8000a8c:	f001 f9da 	bl	8001e44 <HAL_RCC_GetPCLK2Freq>
 8000a90:	62f8      	str	r0, [r7, #44]	; 0x2c
   
  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 8000a92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000a94:	4a13      	ldr	r2, [pc, #76]	; (8000ae4 <HAL_InitTick+0xa0>)
 8000a96:	fba2 2303 	umull	r2, r3, r2, r3
 8000a9a:	0c9b      	lsrs	r3, r3, #18
 8000a9c:	3b01      	subs	r3, #1
 8000a9e:	62bb      	str	r3, [r7, #40]	; 0x28
  
  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8000aa0:	4b11      	ldr	r3, [pc, #68]	; (8000ae8 <HAL_InitTick+0xa4>)
 8000aa2:	4a12      	ldr	r2, [pc, #72]	; (8000aec <HAL_InitTick+0xa8>)
 8000aa4:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000 / 1000) - 1;
 8000aa6:	4b10      	ldr	r3, [pc, #64]	; (8000ae8 <HAL_InitTick+0xa4>)
 8000aa8:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000aac:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8000aae:	4a0e      	ldr	r2, [pc, #56]	; (8000ae8 <HAL_InitTick+0xa4>)
 8000ab0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000ab2:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8000ab4:	4b0c      	ldr	r3, [pc, #48]	; (8000ae8 <HAL_InitTick+0xa4>)
 8000ab6:	2200      	movs	r2, #0
 8000ab8:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000aba:	4b0b      	ldr	r3, [pc, #44]	; (8000ae8 <HAL_InitTick+0xa4>)
 8000abc:	2200      	movs	r2, #0
 8000abe:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 8000ac0:	4809      	ldr	r0, [pc, #36]	; (8000ae8 <HAL_InitTick+0xa4>)
 8000ac2:	f001 ff17 	bl	80028f4 <HAL_TIM_Base_Init>
 8000ac6:	4603      	mov	r3, r0
 8000ac8:	2b00      	cmp	r3, #0
 8000aca:	d104      	bne.n	8000ad6 <HAL_InitTick+0x92>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 8000acc:	4806      	ldr	r0, [pc, #24]	; (8000ae8 <HAL_InitTick+0xa4>)
 8000ace:	f001 ff47 	bl	8002960 <HAL_TIM_Base_Start_IT>
 8000ad2:	4603      	mov	r3, r0
 8000ad4:	e000      	b.n	8000ad8 <HAL_InitTick+0x94>
  }
  
  /* Return function status */
  return HAL_ERROR;
 8000ad6:	2301      	movs	r3, #1
}
 8000ad8:	4618      	mov	r0, r3
 8000ada:	3730      	adds	r7, #48	; 0x30
 8000adc:	46bd      	mov	sp, r7
 8000ade:	bd80      	pop	{r7, pc}
 8000ae0:	40021000 	.word	0x40021000
 8000ae4:	431bde83 	.word	0x431bde83
 8000ae8:	20001904 	.word	0x20001904
 8000aec:	40012c00 	.word	0x40012c00

08000af0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000af0:	b480      	push	{r7}
 8000af2:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000af4:	bf00      	nop
 8000af6:	46bd      	mov	sp, r7
 8000af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000afc:	4770      	bx	lr

08000afe <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000afe:	b480      	push	{r7}
 8000b00:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b02:	e7fe      	b.n	8000b02 <HardFault_Handler+0x4>

08000b04 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000b04:	b480      	push	{r7}
 8000b06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000b08:	e7fe      	b.n	8000b08 <MemManage_Handler+0x4>

08000b0a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000b0a:	b480      	push	{r7}
 8000b0c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000b0e:	e7fe      	b.n	8000b0e <BusFault_Handler+0x4>

08000b10 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000b10:	b480      	push	{r7}
 8000b12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000b14:	e7fe      	b.n	8000b14 <UsageFault_Handler+0x4>

08000b16 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000b16:	b480      	push	{r7}
 8000b18:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000b1a:	bf00      	nop
 8000b1c:	46bd      	mov	sp, r7
 8000b1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b22:	4770      	bx	lr

08000b24 <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 8000b24:	b580      	push	{r7, lr}
 8000b26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000b28:	4802      	ldr	r0, [pc, #8]	; (8000b34 <TIM1_UP_TIM16_IRQHandler+0x10>)
 8000b2a:	f001 ff43 	bl	80029b4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 8000b2e:	bf00      	nop
 8000b30:	bd80      	pop	{r7, pc}
 8000b32:	bf00      	nop
 8000b34:	20001904 	.word	0x20001904

08000b38 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8000b38:	b480      	push	{r7}
 8000b3a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000b3c:	4b17      	ldr	r3, [pc, #92]	; (8000b9c <SystemInit+0x64>)
 8000b3e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000b42:	4a16      	ldr	r2, [pc, #88]	; (8000b9c <SystemInit+0x64>)
 8000b44:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000b48:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8000b4c:	4b14      	ldr	r3, [pc, #80]	; (8000ba0 <SystemInit+0x68>)
 8000b4e:	681b      	ldr	r3, [r3, #0]
 8000b50:	4a13      	ldr	r2, [pc, #76]	; (8000ba0 <SystemInit+0x68>)
 8000b52:	f043 0301 	orr.w	r3, r3, #1
 8000b56:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 8000b58:	4b11      	ldr	r3, [pc, #68]	; (8000ba0 <SystemInit+0x68>)
 8000b5a:	2200      	movs	r2, #0
 8000b5c:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 8000b5e:	4b10      	ldr	r3, [pc, #64]	; (8000ba0 <SystemInit+0x68>)
 8000b60:	681b      	ldr	r3, [r3, #0]
 8000b62:	4a0f      	ldr	r2, [pc, #60]	; (8000ba0 <SystemInit+0x68>)
 8000b64:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 8000b68:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 8000b6c:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 8000b6e:	4b0c      	ldr	r3, [pc, #48]	; (8000ba0 <SystemInit+0x68>)
 8000b70:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000b74:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000b76:	4b0a      	ldr	r3, [pc, #40]	; (8000ba0 <SystemInit+0x68>)
 8000b78:	681b      	ldr	r3, [r3, #0]
 8000b7a:	4a09      	ldr	r2, [pc, #36]	; (8000ba0 <SystemInit+0x68>)
 8000b7c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000b80:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 8000b82:	4b07      	ldr	r3, [pc, #28]	; (8000ba0 <SystemInit+0x68>)
 8000b84:	2200      	movs	r2, #0
 8000b86:	619a      	str	r2, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000b88:	4b04      	ldr	r3, [pc, #16]	; (8000b9c <SystemInit+0x64>)
 8000b8a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000b8e:	609a      	str	r2, [r3, #8]
#endif
}
 8000b90:	bf00      	nop
 8000b92:	46bd      	mov	sp, r7
 8000b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b98:	4770      	bx	lr
 8000b9a:	bf00      	nop
 8000b9c:	e000ed00 	.word	0xe000ed00
 8000ba0:	40021000 	.word	0x40021000

08000ba4 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8000ba4:	b580      	push	{r7, lr}
 8000ba6:	af00      	add	r7, sp, #0

  huart2.Instance = USART2;
 8000ba8:	4b14      	ldr	r3, [pc, #80]	; (8000bfc <MX_USART2_UART_Init+0x58>)
 8000baa:	4a15      	ldr	r2, [pc, #84]	; (8000c00 <MX_USART2_UART_Init+0x5c>)
 8000bac:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000bae:	4b13      	ldr	r3, [pc, #76]	; (8000bfc <MX_USART2_UART_Init+0x58>)
 8000bb0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000bb4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000bb6:	4b11      	ldr	r3, [pc, #68]	; (8000bfc <MX_USART2_UART_Init+0x58>)
 8000bb8:	2200      	movs	r2, #0
 8000bba:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000bbc:	4b0f      	ldr	r3, [pc, #60]	; (8000bfc <MX_USART2_UART_Init+0x58>)
 8000bbe:	2200      	movs	r2, #0
 8000bc0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000bc2:	4b0e      	ldr	r3, [pc, #56]	; (8000bfc <MX_USART2_UART_Init+0x58>)
 8000bc4:	2200      	movs	r2, #0
 8000bc6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000bc8:	4b0c      	ldr	r3, [pc, #48]	; (8000bfc <MX_USART2_UART_Init+0x58>)
 8000bca:	220c      	movs	r2, #12
 8000bcc:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000bce:	4b0b      	ldr	r3, [pc, #44]	; (8000bfc <MX_USART2_UART_Init+0x58>)
 8000bd0:	2200      	movs	r2, #0
 8000bd2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000bd4:	4b09      	ldr	r3, [pc, #36]	; (8000bfc <MX_USART2_UART_Init+0x58>)
 8000bd6:	2200      	movs	r2, #0
 8000bd8:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000bda:	4b08      	ldr	r3, [pc, #32]	; (8000bfc <MX_USART2_UART_Init+0x58>)
 8000bdc:	2200      	movs	r2, #0
 8000bde:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000be0:	4b06      	ldr	r3, [pc, #24]	; (8000bfc <MX_USART2_UART_Init+0x58>)
 8000be2:	2200      	movs	r2, #0
 8000be4:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000be6:	4805      	ldr	r0, [pc, #20]	; (8000bfc <MX_USART2_UART_Init+0x58>)
 8000be8:	f002 f8e4 	bl	8002db4 <HAL_UART_Init>
 8000bec:	4603      	mov	r3, r0
 8000bee:	2b00      	cmp	r3, #0
 8000bf0:	d001      	beq.n	8000bf6 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000bf2:	f7ff fef7 	bl	80009e4 <Error_Handler>
  }

}
 8000bf6:	bf00      	nop
 8000bf8:	bd80      	pop	{r7, pc}
 8000bfa:	bf00      	nop
 8000bfc:	20001944 	.word	0x20001944
 8000c00:	40004400 	.word	0x40004400

08000c04 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000c04:	b580      	push	{r7, lr}
 8000c06:	b08a      	sub	sp, #40	; 0x28
 8000c08:	af00      	add	r7, sp, #0
 8000c0a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c0c:	f107 0314 	add.w	r3, r7, #20
 8000c10:	2200      	movs	r2, #0
 8000c12:	601a      	str	r2, [r3, #0]
 8000c14:	605a      	str	r2, [r3, #4]
 8000c16:	609a      	str	r2, [r3, #8]
 8000c18:	60da      	str	r2, [r3, #12]
 8000c1a:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 8000c1c:	687b      	ldr	r3, [r7, #4]
 8000c1e:	681b      	ldr	r3, [r3, #0]
 8000c20:	4a17      	ldr	r2, [pc, #92]	; (8000c80 <HAL_UART_MspInit+0x7c>)
 8000c22:	4293      	cmp	r3, r2
 8000c24:	d128      	bne.n	8000c78 <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000c26:	4b17      	ldr	r3, [pc, #92]	; (8000c84 <HAL_UART_MspInit+0x80>)
 8000c28:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000c2a:	4a16      	ldr	r2, [pc, #88]	; (8000c84 <HAL_UART_MspInit+0x80>)
 8000c2c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000c30:	6593      	str	r3, [r2, #88]	; 0x58
 8000c32:	4b14      	ldr	r3, [pc, #80]	; (8000c84 <HAL_UART_MspInit+0x80>)
 8000c34:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000c36:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000c3a:	613b      	str	r3, [r7, #16]
 8000c3c:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c3e:	4b11      	ldr	r3, [pc, #68]	; (8000c84 <HAL_UART_MspInit+0x80>)
 8000c40:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c42:	4a10      	ldr	r2, [pc, #64]	; (8000c84 <HAL_UART_MspInit+0x80>)
 8000c44:	f043 0301 	orr.w	r3, r3, #1
 8000c48:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000c4a:	4b0e      	ldr	r3, [pc, #56]	; (8000c84 <HAL_UART_MspInit+0x80>)
 8000c4c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c4e:	f003 0301 	and.w	r3, r3, #1
 8000c52:	60fb      	str	r3, [r7, #12]
 8000c54:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration    
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX 
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000c56:	230c      	movs	r3, #12
 8000c58:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c5a:	2302      	movs	r3, #2
 8000c5c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c5e:	2300      	movs	r3, #0
 8000c60:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c62:	2303      	movs	r3, #3
 8000c64:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000c66:	2307      	movs	r3, #7
 8000c68:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c6a:	f107 0314 	add.w	r3, r7, #20
 8000c6e:	4619      	mov	r1, r3
 8000c70:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000c74:	f000 f952 	bl	8000f1c <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8000c78:	bf00      	nop
 8000c7a:	3728      	adds	r7, #40	; 0x28
 8000c7c:	46bd      	mov	sp, r7
 8000c7e:	bd80      	pop	{r7, pc}
 8000c80:	40004400 	.word	0x40004400
 8000c84:	40021000 	.word	0x40021000

08000c88 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000c88:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000cc0 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8000c8c:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8000c8e:	e003      	b.n	8000c98 <LoopCopyDataInit>

08000c90 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8000c90:	4b0c      	ldr	r3, [pc, #48]	; (8000cc4 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8000c92:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8000c94:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8000c96:	3104      	adds	r1, #4

08000c98 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8000c98:	480b      	ldr	r0, [pc, #44]	; (8000cc8 <LoopForever+0xa>)
	ldr	r3, =_edata
 8000c9a:	4b0c      	ldr	r3, [pc, #48]	; (8000ccc <LoopForever+0xe>)
	adds	r2, r0, r1
 8000c9c:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8000c9e:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8000ca0:	d3f6      	bcc.n	8000c90 <CopyDataInit>
	ldr	r2, =_sbss
 8000ca2:	4a0b      	ldr	r2, [pc, #44]	; (8000cd0 <LoopForever+0x12>)
	b	LoopFillZerobss
 8000ca4:	e002      	b.n	8000cac <LoopFillZerobss>

08000ca6 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8000ca6:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8000ca8:	f842 3b04 	str.w	r3, [r2], #4

08000cac <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8000cac:	4b09      	ldr	r3, [pc, #36]	; (8000cd4 <LoopForever+0x16>)
	cmp	r2, r3
 8000cae:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8000cb0:	d3f9      	bcc.n	8000ca6 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000cb2:	f7ff ff41 	bl	8000b38 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000cb6:	f005 fd59 	bl	800676c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000cba:	f7ff fdfd 	bl	80008b8 <main>

08000cbe <LoopForever>:

LoopForever:
    b LoopForever
 8000cbe:	e7fe      	b.n	8000cbe <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000cc0:	20018000 	.word	0x20018000
	ldr	r3, =_sidata
 8000cc4:	080068a4 	.word	0x080068a4
	ldr	r0, =_sdata
 8000cc8:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8000ccc:	20000010 	.word	0x20000010
	ldr	r2, =_sbss
 8000cd0:	20000010 	.word	0x20000010
	ldr	r3, = _ebss
 8000cd4:	20001a08 	.word	0x20001a08

08000cd8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000cd8:	e7fe      	b.n	8000cd8 <ADC1_2_IRQHandler>
	...

08000cdc <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000cdc:	b580      	push	{r7, lr}
 8000cde:	b082      	sub	sp, #8
 8000ce0:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000ce2:	2300      	movs	r3, #0
 8000ce4:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000ce6:	4b0c      	ldr	r3, [pc, #48]	; (8000d18 <HAL_Init+0x3c>)
 8000ce8:	681b      	ldr	r3, [r3, #0]
 8000cea:	4a0b      	ldr	r2, [pc, #44]	; (8000d18 <HAL_Init+0x3c>)
 8000cec:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000cf0:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000cf2:	2003      	movs	r0, #3
 8000cf4:	f000 f8dd 	bl	8000eb2 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000cf8:	2000      	movs	r0, #0
 8000cfa:	f7ff fea3 	bl	8000a44 <HAL_InitTick>
 8000cfe:	4603      	mov	r3, r0
 8000d00:	2b00      	cmp	r3, #0
 8000d02:	d002      	beq.n	8000d0a <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8000d04:	2301      	movs	r3, #1
 8000d06:	71fb      	strb	r3, [r7, #7]
 8000d08:	e001      	b.n	8000d0e <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000d0a:	f7ff fe73 	bl	80009f4 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000d0e:	79fb      	ldrb	r3, [r7, #7]
}
 8000d10:	4618      	mov	r0, r3
 8000d12:	3708      	adds	r7, #8
 8000d14:	46bd      	mov	sp, r7
 8000d16:	bd80      	pop	{r7, pc}
 8000d18:	40022000 	.word	0x40022000

08000d1c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000d1c:	b480      	push	{r7}
 8000d1e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000d20:	4b05      	ldr	r3, [pc, #20]	; (8000d38 <HAL_IncTick+0x1c>)
 8000d22:	681a      	ldr	r2, [r3, #0]
 8000d24:	4b05      	ldr	r3, [pc, #20]	; (8000d3c <HAL_IncTick+0x20>)
 8000d26:	681b      	ldr	r3, [r3, #0]
 8000d28:	4413      	add	r3, r2
 8000d2a:	4a03      	ldr	r2, [pc, #12]	; (8000d38 <HAL_IncTick+0x1c>)
 8000d2c:	6013      	str	r3, [r2, #0]
}
 8000d2e:	bf00      	nop
 8000d30:	46bd      	mov	sp, r7
 8000d32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d36:	4770      	bx	lr
 8000d38:	200019c4 	.word	0x200019c4
 8000d3c:	20000008 	.word	0x20000008

08000d40 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000d40:	b480      	push	{r7}
 8000d42:	af00      	add	r7, sp, #0
  return uwTick;
 8000d44:	4b03      	ldr	r3, [pc, #12]	; (8000d54 <HAL_GetTick+0x14>)
 8000d46:	681b      	ldr	r3, [r3, #0]
}
 8000d48:	4618      	mov	r0, r3
 8000d4a:	46bd      	mov	sp, r7
 8000d4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d50:	4770      	bx	lr
 8000d52:	bf00      	nop
 8000d54:	200019c4 	.word	0x200019c4

08000d58 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d58:	b480      	push	{r7}
 8000d5a:	b085      	sub	sp, #20
 8000d5c:	af00      	add	r7, sp, #0
 8000d5e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000d60:	687b      	ldr	r3, [r7, #4]
 8000d62:	f003 0307 	and.w	r3, r3, #7
 8000d66:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000d68:	4b0c      	ldr	r3, [pc, #48]	; (8000d9c <__NVIC_SetPriorityGrouping+0x44>)
 8000d6a:	68db      	ldr	r3, [r3, #12]
 8000d6c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000d6e:	68ba      	ldr	r2, [r7, #8]
 8000d70:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000d74:	4013      	ands	r3, r2
 8000d76:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000d78:	68fb      	ldr	r3, [r7, #12]
 8000d7a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000d7c:	68bb      	ldr	r3, [r7, #8]
 8000d7e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000d80:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000d84:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000d88:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000d8a:	4a04      	ldr	r2, [pc, #16]	; (8000d9c <__NVIC_SetPriorityGrouping+0x44>)
 8000d8c:	68bb      	ldr	r3, [r7, #8]
 8000d8e:	60d3      	str	r3, [r2, #12]
}
 8000d90:	bf00      	nop
 8000d92:	3714      	adds	r7, #20
 8000d94:	46bd      	mov	sp, r7
 8000d96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d9a:	4770      	bx	lr
 8000d9c:	e000ed00 	.word	0xe000ed00

08000da0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000da0:	b480      	push	{r7}
 8000da2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000da4:	4b04      	ldr	r3, [pc, #16]	; (8000db8 <__NVIC_GetPriorityGrouping+0x18>)
 8000da6:	68db      	ldr	r3, [r3, #12]
 8000da8:	0a1b      	lsrs	r3, r3, #8
 8000daa:	f003 0307 	and.w	r3, r3, #7
}
 8000dae:	4618      	mov	r0, r3
 8000db0:	46bd      	mov	sp, r7
 8000db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000db6:	4770      	bx	lr
 8000db8:	e000ed00 	.word	0xe000ed00

08000dbc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000dbc:	b480      	push	{r7}
 8000dbe:	b083      	sub	sp, #12
 8000dc0:	af00      	add	r7, sp, #0
 8000dc2:	4603      	mov	r3, r0
 8000dc4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000dc6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dca:	2b00      	cmp	r3, #0
 8000dcc:	db0b      	blt.n	8000de6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000dce:	79fb      	ldrb	r3, [r7, #7]
 8000dd0:	f003 021f 	and.w	r2, r3, #31
 8000dd4:	4907      	ldr	r1, [pc, #28]	; (8000df4 <__NVIC_EnableIRQ+0x38>)
 8000dd6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dda:	095b      	lsrs	r3, r3, #5
 8000ddc:	2001      	movs	r0, #1
 8000dde:	fa00 f202 	lsl.w	r2, r0, r2
 8000de2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000de6:	bf00      	nop
 8000de8:	370c      	adds	r7, #12
 8000dea:	46bd      	mov	sp, r7
 8000dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000df0:	4770      	bx	lr
 8000df2:	bf00      	nop
 8000df4:	e000e100 	.word	0xe000e100

08000df8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000df8:	b480      	push	{r7}
 8000dfa:	b083      	sub	sp, #12
 8000dfc:	af00      	add	r7, sp, #0
 8000dfe:	4603      	mov	r3, r0
 8000e00:	6039      	str	r1, [r7, #0]
 8000e02:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e04:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e08:	2b00      	cmp	r3, #0
 8000e0a:	db0a      	blt.n	8000e22 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e0c:	683b      	ldr	r3, [r7, #0]
 8000e0e:	b2da      	uxtb	r2, r3
 8000e10:	490c      	ldr	r1, [pc, #48]	; (8000e44 <__NVIC_SetPriority+0x4c>)
 8000e12:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e16:	0112      	lsls	r2, r2, #4
 8000e18:	b2d2      	uxtb	r2, r2
 8000e1a:	440b      	add	r3, r1
 8000e1c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000e20:	e00a      	b.n	8000e38 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e22:	683b      	ldr	r3, [r7, #0]
 8000e24:	b2da      	uxtb	r2, r3
 8000e26:	4908      	ldr	r1, [pc, #32]	; (8000e48 <__NVIC_SetPriority+0x50>)
 8000e28:	79fb      	ldrb	r3, [r7, #7]
 8000e2a:	f003 030f 	and.w	r3, r3, #15
 8000e2e:	3b04      	subs	r3, #4
 8000e30:	0112      	lsls	r2, r2, #4
 8000e32:	b2d2      	uxtb	r2, r2
 8000e34:	440b      	add	r3, r1
 8000e36:	761a      	strb	r2, [r3, #24]
}
 8000e38:	bf00      	nop
 8000e3a:	370c      	adds	r7, #12
 8000e3c:	46bd      	mov	sp, r7
 8000e3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e42:	4770      	bx	lr
 8000e44:	e000e100 	.word	0xe000e100
 8000e48:	e000ed00 	.word	0xe000ed00

08000e4c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000e4c:	b480      	push	{r7}
 8000e4e:	b089      	sub	sp, #36	; 0x24
 8000e50:	af00      	add	r7, sp, #0
 8000e52:	60f8      	str	r0, [r7, #12]
 8000e54:	60b9      	str	r1, [r7, #8]
 8000e56:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000e58:	68fb      	ldr	r3, [r7, #12]
 8000e5a:	f003 0307 	and.w	r3, r3, #7
 8000e5e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000e60:	69fb      	ldr	r3, [r7, #28]
 8000e62:	f1c3 0307 	rsb	r3, r3, #7
 8000e66:	2b04      	cmp	r3, #4
 8000e68:	bf28      	it	cs
 8000e6a:	2304      	movcs	r3, #4
 8000e6c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000e6e:	69fb      	ldr	r3, [r7, #28]
 8000e70:	3304      	adds	r3, #4
 8000e72:	2b06      	cmp	r3, #6
 8000e74:	d902      	bls.n	8000e7c <NVIC_EncodePriority+0x30>
 8000e76:	69fb      	ldr	r3, [r7, #28]
 8000e78:	3b03      	subs	r3, #3
 8000e7a:	e000      	b.n	8000e7e <NVIC_EncodePriority+0x32>
 8000e7c:	2300      	movs	r3, #0
 8000e7e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e80:	f04f 32ff 	mov.w	r2, #4294967295
 8000e84:	69bb      	ldr	r3, [r7, #24]
 8000e86:	fa02 f303 	lsl.w	r3, r2, r3
 8000e8a:	43da      	mvns	r2, r3
 8000e8c:	68bb      	ldr	r3, [r7, #8]
 8000e8e:	401a      	ands	r2, r3
 8000e90:	697b      	ldr	r3, [r7, #20]
 8000e92:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000e94:	f04f 31ff 	mov.w	r1, #4294967295
 8000e98:	697b      	ldr	r3, [r7, #20]
 8000e9a:	fa01 f303 	lsl.w	r3, r1, r3
 8000e9e:	43d9      	mvns	r1, r3
 8000ea0:	687b      	ldr	r3, [r7, #4]
 8000ea2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ea4:	4313      	orrs	r3, r2
         );
}
 8000ea6:	4618      	mov	r0, r3
 8000ea8:	3724      	adds	r7, #36	; 0x24
 8000eaa:	46bd      	mov	sp, r7
 8000eac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eb0:	4770      	bx	lr

08000eb2 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000eb2:	b580      	push	{r7, lr}
 8000eb4:	b082      	sub	sp, #8
 8000eb6:	af00      	add	r7, sp, #0
 8000eb8:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000eba:	6878      	ldr	r0, [r7, #4]
 8000ebc:	f7ff ff4c 	bl	8000d58 <__NVIC_SetPriorityGrouping>
}
 8000ec0:	bf00      	nop
 8000ec2:	3708      	adds	r7, #8
 8000ec4:	46bd      	mov	sp, r7
 8000ec6:	bd80      	pop	{r7, pc}

08000ec8 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000ec8:	b580      	push	{r7, lr}
 8000eca:	b086      	sub	sp, #24
 8000ecc:	af00      	add	r7, sp, #0
 8000ece:	4603      	mov	r3, r0
 8000ed0:	60b9      	str	r1, [r7, #8]
 8000ed2:	607a      	str	r2, [r7, #4]
 8000ed4:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000ed6:	2300      	movs	r3, #0
 8000ed8:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000eda:	f7ff ff61 	bl	8000da0 <__NVIC_GetPriorityGrouping>
 8000ede:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000ee0:	687a      	ldr	r2, [r7, #4]
 8000ee2:	68b9      	ldr	r1, [r7, #8]
 8000ee4:	6978      	ldr	r0, [r7, #20]
 8000ee6:	f7ff ffb1 	bl	8000e4c <NVIC_EncodePriority>
 8000eea:	4602      	mov	r2, r0
 8000eec:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000ef0:	4611      	mov	r1, r2
 8000ef2:	4618      	mov	r0, r3
 8000ef4:	f7ff ff80 	bl	8000df8 <__NVIC_SetPriority>
}
 8000ef8:	bf00      	nop
 8000efa:	3718      	adds	r7, #24
 8000efc:	46bd      	mov	sp, r7
 8000efe:	bd80      	pop	{r7, pc}

08000f00 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000f00:	b580      	push	{r7, lr}
 8000f02:	b082      	sub	sp, #8
 8000f04:	af00      	add	r7, sp, #0
 8000f06:	4603      	mov	r3, r0
 8000f08:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000f0a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f0e:	4618      	mov	r0, r3
 8000f10:	f7ff ff54 	bl	8000dbc <__NVIC_EnableIRQ>
}
 8000f14:	bf00      	nop
 8000f16:	3708      	adds	r7, #8
 8000f18:	46bd      	mov	sp, r7
 8000f1a:	bd80      	pop	{r7, pc}

08000f1c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000f1c:	b480      	push	{r7}
 8000f1e:	b087      	sub	sp, #28
 8000f20:	af00      	add	r7, sp, #0
 8000f22:	6078      	str	r0, [r7, #4]
 8000f24:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000f26:	2300      	movs	r3, #0
 8000f28:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000f2a:	e17f      	b.n	800122c <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000f2c:	683b      	ldr	r3, [r7, #0]
 8000f2e:	681a      	ldr	r2, [r3, #0]
 8000f30:	2101      	movs	r1, #1
 8000f32:	697b      	ldr	r3, [r7, #20]
 8000f34:	fa01 f303 	lsl.w	r3, r1, r3
 8000f38:	4013      	ands	r3, r2
 8000f3a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000f3c:	68fb      	ldr	r3, [r7, #12]
 8000f3e:	2b00      	cmp	r3, #0
 8000f40:	f000 8171 	beq.w	8001226 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000f44:	683b      	ldr	r3, [r7, #0]
 8000f46:	685b      	ldr	r3, [r3, #4]
 8000f48:	2b02      	cmp	r3, #2
 8000f4a:	d003      	beq.n	8000f54 <HAL_GPIO_Init+0x38>
 8000f4c:	683b      	ldr	r3, [r7, #0]
 8000f4e:	685b      	ldr	r3, [r3, #4]
 8000f50:	2b12      	cmp	r3, #18
 8000f52:	d123      	bne.n	8000f9c <HAL_GPIO_Init+0x80>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000f54:	697b      	ldr	r3, [r7, #20]
 8000f56:	08da      	lsrs	r2, r3, #3
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	3208      	adds	r2, #8
 8000f5c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000f60:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000f62:	697b      	ldr	r3, [r7, #20]
 8000f64:	f003 0307 	and.w	r3, r3, #7
 8000f68:	009b      	lsls	r3, r3, #2
 8000f6a:	220f      	movs	r2, #15
 8000f6c:	fa02 f303 	lsl.w	r3, r2, r3
 8000f70:	43db      	mvns	r3, r3
 8000f72:	693a      	ldr	r2, [r7, #16]
 8000f74:	4013      	ands	r3, r2
 8000f76:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000f78:	683b      	ldr	r3, [r7, #0]
 8000f7a:	691a      	ldr	r2, [r3, #16]
 8000f7c:	697b      	ldr	r3, [r7, #20]
 8000f7e:	f003 0307 	and.w	r3, r3, #7
 8000f82:	009b      	lsls	r3, r3, #2
 8000f84:	fa02 f303 	lsl.w	r3, r2, r3
 8000f88:	693a      	ldr	r2, [r7, #16]
 8000f8a:	4313      	orrs	r3, r2
 8000f8c:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000f8e:	697b      	ldr	r3, [r7, #20]
 8000f90:	08da      	lsrs	r2, r3, #3
 8000f92:	687b      	ldr	r3, [r7, #4]
 8000f94:	3208      	adds	r2, #8
 8000f96:	6939      	ldr	r1, [r7, #16]
 8000f98:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	681b      	ldr	r3, [r3, #0]
 8000fa0:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8000fa2:	697b      	ldr	r3, [r7, #20]
 8000fa4:	005b      	lsls	r3, r3, #1
 8000fa6:	2203      	movs	r2, #3
 8000fa8:	fa02 f303 	lsl.w	r3, r2, r3
 8000fac:	43db      	mvns	r3, r3
 8000fae:	693a      	ldr	r2, [r7, #16]
 8000fb0:	4013      	ands	r3, r2
 8000fb2:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000fb4:	683b      	ldr	r3, [r7, #0]
 8000fb6:	685b      	ldr	r3, [r3, #4]
 8000fb8:	f003 0203 	and.w	r2, r3, #3
 8000fbc:	697b      	ldr	r3, [r7, #20]
 8000fbe:	005b      	lsls	r3, r3, #1
 8000fc0:	fa02 f303 	lsl.w	r3, r2, r3
 8000fc4:	693a      	ldr	r2, [r7, #16]
 8000fc6:	4313      	orrs	r3, r2
 8000fc8:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	693a      	ldr	r2, [r7, #16]
 8000fce:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000fd0:	683b      	ldr	r3, [r7, #0]
 8000fd2:	685b      	ldr	r3, [r3, #4]
 8000fd4:	2b01      	cmp	r3, #1
 8000fd6:	d00b      	beq.n	8000ff0 <HAL_GPIO_Init+0xd4>
 8000fd8:	683b      	ldr	r3, [r7, #0]
 8000fda:	685b      	ldr	r3, [r3, #4]
 8000fdc:	2b02      	cmp	r3, #2
 8000fde:	d007      	beq.n	8000ff0 <HAL_GPIO_Init+0xd4>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000fe0:	683b      	ldr	r3, [r7, #0]
 8000fe2:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000fe4:	2b11      	cmp	r3, #17
 8000fe6:	d003      	beq.n	8000ff0 <HAL_GPIO_Init+0xd4>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000fe8:	683b      	ldr	r3, [r7, #0]
 8000fea:	685b      	ldr	r3, [r3, #4]
 8000fec:	2b12      	cmp	r3, #18
 8000fee:	d130      	bne.n	8001052 <HAL_GPIO_Init+0x136>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	689b      	ldr	r3, [r3, #8]
 8000ff4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8000ff6:	697b      	ldr	r3, [r7, #20]
 8000ff8:	005b      	lsls	r3, r3, #1
 8000ffa:	2203      	movs	r2, #3
 8000ffc:	fa02 f303 	lsl.w	r3, r2, r3
 8001000:	43db      	mvns	r3, r3
 8001002:	693a      	ldr	r2, [r7, #16]
 8001004:	4013      	ands	r3, r2
 8001006:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001008:	683b      	ldr	r3, [r7, #0]
 800100a:	68da      	ldr	r2, [r3, #12]
 800100c:	697b      	ldr	r3, [r7, #20]
 800100e:	005b      	lsls	r3, r3, #1
 8001010:	fa02 f303 	lsl.w	r3, r2, r3
 8001014:	693a      	ldr	r2, [r7, #16]
 8001016:	4313      	orrs	r3, r2
 8001018:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	693a      	ldr	r2, [r7, #16]
 800101e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	685b      	ldr	r3, [r3, #4]
 8001024:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001026:	2201      	movs	r2, #1
 8001028:	697b      	ldr	r3, [r7, #20]
 800102a:	fa02 f303 	lsl.w	r3, r2, r3
 800102e:	43db      	mvns	r3, r3
 8001030:	693a      	ldr	r2, [r7, #16]
 8001032:	4013      	ands	r3, r2
 8001034:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8001036:	683b      	ldr	r3, [r7, #0]
 8001038:	685b      	ldr	r3, [r3, #4]
 800103a:	091b      	lsrs	r3, r3, #4
 800103c:	f003 0201 	and.w	r2, r3, #1
 8001040:	697b      	ldr	r3, [r7, #20]
 8001042:	fa02 f303 	lsl.w	r3, r2, r3
 8001046:	693a      	ldr	r2, [r7, #16]
 8001048:	4313      	orrs	r3, r2
 800104a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	693a      	ldr	r2, [r7, #16]
 8001050:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8001052:	683b      	ldr	r3, [r7, #0]
 8001054:	685b      	ldr	r3, [r3, #4]
 8001056:	f003 0303 	and.w	r3, r3, #3
 800105a:	2b03      	cmp	r3, #3
 800105c:	d118      	bne.n	8001090 <HAL_GPIO_Init+0x174>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001062:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8001064:	2201      	movs	r2, #1
 8001066:	697b      	ldr	r3, [r7, #20]
 8001068:	fa02 f303 	lsl.w	r3, r2, r3
 800106c:	43db      	mvns	r3, r3
 800106e:	693a      	ldr	r2, [r7, #16]
 8001070:	4013      	ands	r3, r2
 8001072:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & ANALOG_MODE) >> 3) << position);
 8001074:	683b      	ldr	r3, [r7, #0]
 8001076:	685b      	ldr	r3, [r3, #4]
 8001078:	08db      	lsrs	r3, r3, #3
 800107a:	f003 0201 	and.w	r2, r3, #1
 800107e:	697b      	ldr	r3, [r7, #20]
 8001080:	fa02 f303 	lsl.w	r3, r2, r3
 8001084:	693a      	ldr	r2, [r7, #16]
 8001086:	4313      	orrs	r3, r2
 8001088:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	693a      	ldr	r2, [r7, #16]
 800108e:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	68db      	ldr	r3, [r3, #12]
 8001094:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8001096:	697b      	ldr	r3, [r7, #20]
 8001098:	005b      	lsls	r3, r3, #1
 800109a:	2203      	movs	r2, #3
 800109c:	fa02 f303 	lsl.w	r3, r2, r3
 80010a0:	43db      	mvns	r3, r3
 80010a2:	693a      	ldr	r2, [r7, #16]
 80010a4:	4013      	ands	r3, r2
 80010a6:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 80010a8:	683b      	ldr	r3, [r7, #0]
 80010aa:	689a      	ldr	r2, [r3, #8]
 80010ac:	697b      	ldr	r3, [r7, #20]
 80010ae:	005b      	lsls	r3, r3, #1
 80010b0:	fa02 f303 	lsl.w	r3, r2, r3
 80010b4:	693a      	ldr	r2, [r7, #16]
 80010b6:	4313      	orrs	r3, r2
 80010b8:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	693a      	ldr	r2, [r7, #16]
 80010be:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80010c0:	683b      	ldr	r3, [r7, #0]
 80010c2:	685b      	ldr	r3, [r3, #4]
 80010c4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80010c8:	2b00      	cmp	r3, #0
 80010ca:	f000 80ac 	beq.w	8001226 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80010ce:	4b5e      	ldr	r3, [pc, #376]	; (8001248 <HAL_GPIO_Init+0x32c>)
 80010d0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80010d2:	4a5d      	ldr	r2, [pc, #372]	; (8001248 <HAL_GPIO_Init+0x32c>)
 80010d4:	f043 0301 	orr.w	r3, r3, #1
 80010d8:	6613      	str	r3, [r2, #96]	; 0x60
 80010da:	4b5b      	ldr	r3, [pc, #364]	; (8001248 <HAL_GPIO_Init+0x32c>)
 80010dc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80010de:	f003 0301 	and.w	r3, r3, #1
 80010e2:	60bb      	str	r3, [r7, #8]
 80010e4:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80010e6:	4a59      	ldr	r2, [pc, #356]	; (800124c <HAL_GPIO_Init+0x330>)
 80010e8:	697b      	ldr	r3, [r7, #20]
 80010ea:	089b      	lsrs	r3, r3, #2
 80010ec:	3302      	adds	r3, #2
 80010ee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80010f2:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80010f4:	697b      	ldr	r3, [r7, #20]
 80010f6:	f003 0303 	and.w	r3, r3, #3
 80010fa:	009b      	lsls	r3, r3, #2
 80010fc:	220f      	movs	r2, #15
 80010fe:	fa02 f303 	lsl.w	r3, r2, r3
 8001102:	43db      	mvns	r3, r3
 8001104:	693a      	ldr	r2, [r7, #16]
 8001106:	4013      	ands	r3, r2
 8001108:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001110:	d025      	beq.n	800115e <HAL_GPIO_Init+0x242>
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	4a4e      	ldr	r2, [pc, #312]	; (8001250 <HAL_GPIO_Init+0x334>)
 8001116:	4293      	cmp	r3, r2
 8001118:	d01f      	beq.n	800115a <HAL_GPIO_Init+0x23e>
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	4a4d      	ldr	r2, [pc, #308]	; (8001254 <HAL_GPIO_Init+0x338>)
 800111e:	4293      	cmp	r3, r2
 8001120:	d019      	beq.n	8001156 <HAL_GPIO_Init+0x23a>
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	4a4c      	ldr	r2, [pc, #304]	; (8001258 <HAL_GPIO_Init+0x33c>)
 8001126:	4293      	cmp	r3, r2
 8001128:	d013      	beq.n	8001152 <HAL_GPIO_Init+0x236>
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	4a4b      	ldr	r2, [pc, #300]	; (800125c <HAL_GPIO_Init+0x340>)
 800112e:	4293      	cmp	r3, r2
 8001130:	d00d      	beq.n	800114e <HAL_GPIO_Init+0x232>
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	4a4a      	ldr	r2, [pc, #296]	; (8001260 <HAL_GPIO_Init+0x344>)
 8001136:	4293      	cmp	r3, r2
 8001138:	d007      	beq.n	800114a <HAL_GPIO_Init+0x22e>
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	4a49      	ldr	r2, [pc, #292]	; (8001264 <HAL_GPIO_Init+0x348>)
 800113e:	4293      	cmp	r3, r2
 8001140:	d101      	bne.n	8001146 <HAL_GPIO_Init+0x22a>
 8001142:	2306      	movs	r3, #6
 8001144:	e00c      	b.n	8001160 <HAL_GPIO_Init+0x244>
 8001146:	2307      	movs	r3, #7
 8001148:	e00a      	b.n	8001160 <HAL_GPIO_Init+0x244>
 800114a:	2305      	movs	r3, #5
 800114c:	e008      	b.n	8001160 <HAL_GPIO_Init+0x244>
 800114e:	2304      	movs	r3, #4
 8001150:	e006      	b.n	8001160 <HAL_GPIO_Init+0x244>
 8001152:	2303      	movs	r3, #3
 8001154:	e004      	b.n	8001160 <HAL_GPIO_Init+0x244>
 8001156:	2302      	movs	r3, #2
 8001158:	e002      	b.n	8001160 <HAL_GPIO_Init+0x244>
 800115a:	2301      	movs	r3, #1
 800115c:	e000      	b.n	8001160 <HAL_GPIO_Init+0x244>
 800115e:	2300      	movs	r3, #0
 8001160:	697a      	ldr	r2, [r7, #20]
 8001162:	f002 0203 	and.w	r2, r2, #3
 8001166:	0092      	lsls	r2, r2, #2
 8001168:	4093      	lsls	r3, r2
 800116a:	693a      	ldr	r2, [r7, #16]
 800116c:	4313      	orrs	r3, r2
 800116e:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001170:	4936      	ldr	r1, [pc, #216]	; (800124c <HAL_GPIO_Init+0x330>)
 8001172:	697b      	ldr	r3, [r7, #20]
 8001174:	089b      	lsrs	r3, r3, #2
 8001176:	3302      	adds	r3, #2
 8001178:	693a      	ldr	r2, [r7, #16]
 800117a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 800117e:	4b3a      	ldr	r3, [pc, #232]	; (8001268 <HAL_GPIO_Init+0x34c>)
 8001180:	681b      	ldr	r3, [r3, #0]
 8001182:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001184:	68fb      	ldr	r3, [r7, #12]
 8001186:	43db      	mvns	r3, r3
 8001188:	693a      	ldr	r2, [r7, #16]
 800118a:	4013      	ands	r3, r2
 800118c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800118e:	683b      	ldr	r3, [r7, #0]
 8001190:	685b      	ldr	r3, [r3, #4]
 8001192:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001196:	2b00      	cmp	r3, #0
 8001198:	d003      	beq.n	80011a2 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 800119a:	693a      	ldr	r2, [r7, #16]
 800119c:	68fb      	ldr	r3, [r7, #12]
 800119e:	4313      	orrs	r3, r2
 80011a0:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80011a2:	4a31      	ldr	r2, [pc, #196]	; (8001268 <HAL_GPIO_Init+0x34c>)
 80011a4:	693b      	ldr	r3, [r7, #16]
 80011a6:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 80011a8:	4b2f      	ldr	r3, [pc, #188]	; (8001268 <HAL_GPIO_Init+0x34c>)
 80011aa:	685b      	ldr	r3, [r3, #4]
 80011ac:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80011ae:	68fb      	ldr	r3, [r7, #12]
 80011b0:	43db      	mvns	r3, r3
 80011b2:	693a      	ldr	r2, [r7, #16]
 80011b4:	4013      	ands	r3, r2
 80011b6:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80011b8:	683b      	ldr	r3, [r7, #0]
 80011ba:	685b      	ldr	r3, [r3, #4]
 80011bc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80011c0:	2b00      	cmp	r3, #0
 80011c2:	d003      	beq.n	80011cc <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 80011c4:	693a      	ldr	r2, [r7, #16]
 80011c6:	68fb      	ldr	r3, [r7, #12]
 80011c8:	4313      	orrs	r3, r2
 80011ca:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80011cc:	4a26      	ldr	r2, [pc, #152]	; (8001268 <HAL_GPIO_Init+0x34c>)
 80011ce:	693b      	ldr	r3, [r7, #16]
 80011d0:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80011d2:	4b25      	ldr	r3, [pc, #148]	; (8001268 <HAL_GPIO_Init+0x34c>)
 80011d4:	689b      	ldr	r3, [r3, #8]
 80011d6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80011d8:	68fb      	ldr	r3, [r7, #12]
 80011da:	43db      	mvns	r3, r3
 80011dc:	693a      	ldr	r2, [r7, #16]
 80011de:	4013      	ands	r3, r2
 80011e0:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80011e2:	683b      	ldr	r3, [r7, #0]
 80011e4:	685b      	ldr	r3, [r3, #4]
 80011e6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80011ea:	2b00      	cmp	r3, #0
 80011ec:	d003      	beq.n	80011f6 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 80011ee:	693a      	ldr	r2, [r7, #16]
 80011f0:	68fb      	ldr	r3, [r7, #12]
 80011f2:	4313      	orrs	r3, r2
 80011f4:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80011f6:	4a1c      	ldr	r2, [pc, #112]	; (8001268 <HAL_GPIO_Init+0x34c>)
 80011f8:	693b      	ldr	r3, [r7, #16]
 80011fa:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80011fc:	4b1a      	ldr	r3, [pc, #104]	; (8001268 <HAL_GPIO_Init+0x34c>)
 80011fe:	68db      	ldr	r3, [r3, #12]
 8001200:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001202:	68fb      	ldr	r3, [r7, #12]
 8001204:	43db      	mvns	r3, r3
 8001206:	693a      	ldr	r2, [r7, #16]
 8001208:	4013      	ands	r3, r2
 800120a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800120c:	683b      	ldr	r3, [r7, #0]
 800120e:	685b      	ldr	r3, [r3, #4]
 8001210:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001214:	2b00      	cmp	r3, #0
 8001216:	d003      	beq.n	8001220 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8001218:	693a      	ldr	r2, [r7, #16]
 800121a:	68fb      	ldr	r3, [r7, #12]
 800121c:	4313      	orrs	r3, r2
 800121e:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001220:	4a11      	ldr	r2, [pc, #68]	; (8001268 <HAL_GPIO_Init+0x34c>)
 8001222:	693b      	ldr	r3, [r7, #16]
 8001224:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8001226:	697b      	ldr	r3, [r7, #20]
 8001228:	3301      	adds	r3, #1
 800122a:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800122c:	683b      	ldr	r3, [r7, #0]
 800122e:	681a      	ldr	r2, [r3, #0]
 8001230:	697b      	ldr	r3, [r7, #20]
 8001232:	fa22 f303 	lsr.w	r3, r2, r3
 8001236:	2b00      	cmp	r3, #0
 8001238:	f47f ae78 	bne.w	8000f2c <HAL_GPIO_Init+0x10>
  }
}
 800123c:	bf00      	nop
 800123e:	371c      	adds	r7, #28
 8001240:	46bd      	mov	sp, r7
 8001242:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001246:	4770      	bx	lr
 8001248:	40021000 	.word	0x40021000
 800124c:	40010000 	.word	0x40010000
 8001250:	48000400 	.word	0x48000400
 8001254:	48000800 	.word	0x48000800
 8001258:	48000c00 	.word	0x48000c00
 800125c:	48001000 	.word	0x48001000
 8001260:	48001400 	.word	0x48001400
 8001264:	48001800 	.word	0x48001800
 8001268:	40010400 	.word	0x40010400

0800126c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800126c:	b480      	push	{r7}
 800126e:	b085      	sub	sp, #20
 8001270:	af00      	add	r7, sp, #0
 8001272:	6078      	str	r0, [r7, #4]
 8001274:	460b      	mov	r3, r1
 8001276:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	691a      	ldr	r2, [r3, #16]
 800127c:	887b      	ldrh	r3, [r7, #2]
 800127e:	4013      	ands	r3, r2
 8001280:	2b00      	cmp	r3, #0
 8001282:	d002      	beq.n	800128a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001284:	2301      	movs	r3, #1
 8001286:	73fb      	strb	r3, [r7, #15]
 8001288:	e001      	b.n	800128e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800128a:	2300      	movs	r3, #0
 800128c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800128e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001290:	4618      	mov	r0, r3
 8001292:	3714      	adds	r7, #20
 8001294:	46bd      	mov	sp, r7
 8001296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800129a:	4770      	bx	lr

0800129c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800129c:	b480      	push	{r7}
 800129e:	b083      	sub	sp, #12
 80012a0:	af00      	add	r7, sp, #0
 80012a2:	6078      	str	r0, [r7, #4]
 80012a4:	460b      	mov	r3, r1
 80012a6:	807b      	strh	r3, [r7, #2]
 80012a8:	4613      	mov	r3, r2
 80012aa:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80012ac:	787b      	ldrb	r3, [r7, #1]
 80012ae:	2b00      	cmp	r3, #0
 80012b0:	d003      	beq.n	80012ba <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80012b2:	887a      	ldrh	r2, [r7, #2]
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80012b8:	e002      	b.n	80012c0 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80012ba:	887a      	ldrh	r2, [r7, #2]
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	629a      	str	r2, [r3, #40]	; 0x28
}
 80012c0:	bf00      	nop
 80012c2:	370c      	adds	r7, #12
 80012c4:	46bd      	mov	sp, r7
 80012c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ca:	4770      	bx	lr

080012cc <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80012cc:	b480      	push	{r7}
 80012ce:	b083      	sub	sp, #12
 80012d0:	af00      	add	r7, sp, #0
 80012d2:	6078      	str	r0, [r7, #4]
 80012d4:	460b      	mov	r3, r1
 80012d6:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) != 0x00u)
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	695a      	ldr	r2, [r3, #20]
 80012dc:	887b      	ldrh	r3, [r7, #2]
 80012de:	4013      	ands	r3, r2
 80012e0:	2b00      	cmp	r3, #0
 80012e2:	d003      	beq.n	80012ec <HAL_GPIO_TogglePin+0x20>
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80012e4:	887a      	ldrh	r2, [r7, #2]
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	629a      	str	r2, [r3, #40]	; 0x28
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
  }
}
 80012ea:	e002      	b.n	80012f2 <HAL_GPIO_TogglePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80012ec:	887a      	ldrh	r2, [r7, #2]
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	619a      	str	r2, [r3, #24]
}
 80012f2:	bf00      	nop
 80012f4:	370c      	adds	r7, #12
 80012f6:	46bd      	mov	sp, r7
 80012f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012fc:	4770      	bx	lr
	...

08001300 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_RANGE1 or PWR_REGULATOR_VOLTAGE_RANGE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8001300:	b480      	push	{r7}
 8001302:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8001304:	4b04      	ldr	r3, [pc, #16]	; (8001318 <HAL_PWREx_GetVoltageRange+0x18>)
 8001306:	681b      	ldr	r3, [r3, #0]
 8001308:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 800130c:	4618      	mov	r0, r3
 800130e:	46bd      	mov	sp, r7
 8001310:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001314:	4770      	bx	lr
 8001316:	bf00      	nop
 8001318:	40007000 	.word	0x40007000

0800131c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800131c:	b480      	push	{r7}
 800131e:	b085      	sub	sp, #20
 8001320:	af00      	add	r7, sp, #0
 8001322:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800132a:	d130      	bne.n	800138e <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 800132c:	4b23      	ldr	r3, [pc, #140]	; (80013bc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800132e:	681b      	ldr	r3, [r3, #0]
 8001330:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001334:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001338:	d038      	beq.n	80013ac <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800133a:	4b20      	ldr	r3, [pc, #128]	; (80013bc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800133c:	681b      	ldr	r3, [r3, #0]
 800133e:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001342:	4a1e      	ldr	r2, [pc, #120]	; (80013bc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001344:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001348:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800134a:	4b1d      	ldr	r3, [pc, #116]	; (80013c0 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 800134c:	681b      	ldr	r3, [r3, #0]
 800134e:	2232      	movs	r2, #50	; 0x32
 8001350:	fb02 f303 	mul.w	r3, r2, r3
 8001354:	4a1b      	ldr	r2, [pc, #108]	; (80013c4 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8001356:	fba2 2303 	umull	r2, r3, r2, r3
 800135a:	0c9b      	lsrs	r3, r3, #18
 800135c:	3301      	adds	r3, #1
 800135e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001360:	e002      	b.n	8001368 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8001362:	68fb      	ldr	r3, [r7, #12]
 8001364:	3b01      	subs	r3, #1
 8001366:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001368:	4b14      	ldr	r3, [pc, #80]	; (80013bc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800136a:	695b      	ldr	r3, [r3, #20]
 800136c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001370:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001374:	d102      	bne.n	800137c <HAL_PWREx_ControlVoltageScaling+0x60>
 8001376:	68fb      	ldr	r3, [r7, #12]
 8001378:	2b00      	cmp	r3, #0
 800137a:	d1f2      	bne.n	8001362 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800137c:	4b0f      	ldr	r3, [pc, #60]	; (80013bc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800137e:	695b      	ldr	r3, [r3, #20]
 8001380:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001384:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001388:	d110      	bne.n	80013ac <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 800138a:	2303      	movs	r3, #3
 800138c:	e00f      	b.n	80013ae <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 800138e:	4b0b      	ldr	r3, [pc, #44]	; (80013bc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001390:	681b      	ldr	r3, [r3, #0]
 8001392:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001396:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800139a:	d007      	beq.n	80013ac <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800139c:	4b07      	ldr	r3, [pc, #28]	; (80013bc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800139e:	681b      	ldr	r3, [r3, #0]
 80013a0:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80013a4:	4a05      	ldr	r2, [pc, #20]	; (80013bc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80013a6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80013aa:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80013ac:	2300      	movs	r3, #0
}
 80013ae:	4618      	mov	r0, r3
 80013b0:	3714      	adds	r7, #20
 80013b2:	46bd      	mov	sp, r7
 80013b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013b8:	4770      	bx	lr
 80013ba:	bf00      	nop
 80013bc:	40007000 	.word	0x40007000
 80013c0:	20000000 	.word	0x20000000
 80013c4:	431bde83 	.word	0x431bde83

080013c8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80013c8:	b580      	push	{r7, lr}
 80013ca:	b088      	sub	sp, #32
 80013cc:	af00      	add	r7, sp, #0
 80013ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	2b00      	cmp	r3, #0
 80013d4:	d101      	bne.n	80013da <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80013d6:	2301      	movs	r3, #1
 80013d8:	e39d      	b.n	8001b16 <HAL_RCC_OscConfig+0x74e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80013da:	4ba4      	ldr	r3, [pc, #656]	; (800166c <HAL_RCC_OscConfig+0x2a4>)
 80013dc:	689b      	ldr	r3, [r3, #8]
 80013de:	f003 030c 	and.w	r3, r3, #12
 80013e2:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80013e4:	4ba1      	ldr	r3, [pc, #644]	; (800166c <HAL_RCC_OscConfig+0x2a4>)
 80013e6:	68db      	ldr	r3, [r3, #12]
 80013e8:	f003 0303 	and.w	r3, r3, #3
 80013ec:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	681b      	ldr	r3, [r3, #0]
 80013f2:	f003 0310 	and.w	r3, r3, #16
 80013f6:	2b00      	cmp	r3, #0
 80013f8:	f000 80e1 	beq.w	80015be <HAL_RCC_OscConfig+0x1f6>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80013fc:	69bb      	ldr	r3, [r7, #24]
 80013fe:	2b00      	cmp	r3, #0
 8001400:	d007      	beq.n	8001412 <HAL_RCC_OscConfig+0x4a>
 8001402:	69bb      	ldr	r3, [r7, #24]
 8001404:	2b0c      	cmp	r3, #12
 8001406:	f040 8088 	bne.w	800151a <HAL_RCC_OscConfig+0x152>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 800140a:	697b      	ldr	r3, [r7, #20]
 800140c:	2b01      	cmp	r3, #1
 800140e:	f040 8084 	bne.w	800151a <HAL_RCC_OscConfig+0x152>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001412:	4b96      	ldr	r3, [pc, #600]	; (800166c <HAL_RCC_OscConfig+0x2a4>)
 8001414:	681b      	ldr	r3, [r3, #0]
 8001416:	f003 0302 	and.w	r3, r3, #2
 800141a:	2b00      	cmp	r3, #0
 800141c:	d005      	beq.n	800142a <HAL_RCC_OscConfig+0x62>
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	699b      	ldr	r3, [r3, #24]
 8001422:	2b00      	cmp	r3, #0
 8001424:	d101      	bne.n	800142a <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8001426:	2301      	movs	r3, #1
 8001428:	e375      	b.n	8001b16 <HAL_RCC_OscConfig+0x74e>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	6a1a      	ldr	r2, [r3, #32]
 800142e:	4b8f      	ldr	r3, [pc, #572]	; (800166c <HAL_RCC_OscConfig+0x2a4>)
 8001430:	681b      	ldr	r3, [r3, #0]
 8001432:	f003 0308 	and.w	r3, r3, #8
 8001436:	2b00      	cmp	r3, #0
 8001438:	d004      	beq.n	8001444 <HAL_RCC_OscConfig+0x7c>
 800143a:	4b8c      	ldr	r3, [pc, #560]	; (800166c <HAL_RCC_OscConfig+0x2a4>)
 800143c:	681b      	ldr	r3, [r3, #0]
 800143e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001442:	e005      	b.n	8001450 <HAL_RCC_OscConfig+0x88>
 8001444:	4b89      	ldr	r3, [pc, #548]	; (800166c <HAL_RCC_OscConfig+0x2a4>)
 8001446:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800144a:	091b      	lsrs	r3, r3, #4
 800144c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001450:	4293      	cmp	r3, r2
 8001452:	d223      	bcs.n	800149c <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	6a1b      	ldr	r3, [r3, #32]
 8001458:	4618      	mov	r0, r3
 800145a:	f000 fd3b 	bl	8001ed4 <RCC_SetFlashLatencyFromMSIRange>
 800145e:	4603      	mov	r3, r0
 8001460:	2b00      	cmp	r3, #0
 8001462:	d001      	beq.n	8001468 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8001464:	2301      	movs	r3, #1
 8001466:	e356      	b.n	8001b16 <HAL_RCC_OscConfig+0x74e>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001468:	4b80      	ldr	r3, [pc, #512]	; (800166c <HAL_RCC_OscConfig+0x2a4>)
 800146a:	681b      	ldr	r3, [r3, #0]
 800146c:	4a7f      	ldr	r2, [pc, #508]	; (800166c <HAL_RCC_OscConfig+0x2a4>)
 800146e:	f043 0308 	orr.w	r3, r3, #8
 8001472:	6013      	str	r3, [r2, #0]
 8001474:	4b7d      	ldr	r3, [pc, #500]	; (800166c <HAL_RCC_OscConfig+0x2a4>)
 8001476:	681b      	ldr	r3, [r3, #0]
 8001478:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	6a1b      	ldr	r3, [r3, #32]
 8001480:	497a      	ldr	r1, [pc, #488]	; (800166c <HAL_RCC_OscConfig+0x2a4>)
 8001482:	4313      	orrs	r3, r2
 8001484:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001486:	4b79      	ldr	r3, [pc, #484]	; (800166c <HAL_RCC_OscConfig+0x2a4>)
 8001488:	685b      	ldr	r3, [r3, #4]
 800148a:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	69db      	ldr	r3, [r3, #28]
 8001492:	021b      	lsls	r3, r3, #8
 8001494:	4975      	ldr	r1, [pc, #468]	; (800166c <HAL_RCC_OscConfig+0x2a4>)
 8001496:	4313      	orrs	r3, r2
 8001498:	604b      	str	r3, [r1, #4]
 800149a:	e022      	b.n	80014e2 <HAL_RCC_OscConfig+0x11a>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800149c:	4b73      	ldr	r3, [pc, #460]	; (800166c <HAL_RCC_OscConfig+0x2a4>)
 800149e:	681b      	ldr	r3, [r3, #0]
 80014a0:	4a72      	ldr	r2, [pc, #456]	; (800166c <HAL_RCC_OscConfig+0x2a4>)
 80014a2:	f043 0308 	orr.w	r3, r3, #8
 80014a6:	6013      	str	r3, [r2, #0]
 80014a8:	4b70      	ldr	r3, [pc, #448]	; (800166c <HAL_RCC_OscConfig+0x2a4>)
 80014aa:	681b      	ldr	r3, [r3, #0]
 80014ac:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	6a1b      	ldr	r3, [r3, #32]
 80014b4:	496d      	ldr	r1, [pc, #436]	; (800166c <HAL_RCC_OscConfig+0x2a4>)
 80014b6:	4313      	orrs	r3, r2
 80014b8:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80014ba:	4b6c      	ldr	r3, [pc, #432]	; (800166c <HAL_RCC_OscConfig+0x2a4>)
 80014bc:	685b      	ldr	r3, [r3, #4]
 80014be:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	69db      	ldr	r3, [r3, #28]
 80014c6:	021b      	lsls	r3, r3, #8
 80014c8:	4968      	ldr	r1, [pc, #416]	; (800166c <HAL_RCC_OscConfig+0x2a4>)
 80014ca:	4313      	orrs	r3, r2
 80014cc:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	6a1b      	ldr	r3, [r3, #32]
 80014d2:	4618      	mov	r0, r3
 80014d4:	f000 fcfe 	bl	8001ed4 <RCC_SetFlashLatencyFromMSIRange>
 80014d8:	4603      	mov	r3, r0
 80014da:	2b00      	cmp	r3, #0
 80014dc:	d001      	beq.n	80014e2 <HAL_RCC_OscConfig+0x11a>
          {
            return HAL_ERROR;
 80014de:	2301      	movs	r3, #1
 80014e0:	e319      	b.n	8001b16 <HAL_RCC_OscConfig+0x74e>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80014e2:	f000 fc03 	bl	8001cec <HAL_RCC_GetSysClockFreq>
 80014e6:	4601      	mov	r1, r0
 80014e8:	4b60      	ldr	r3, [pc, #384]	; (800166c <HAL_RCC_OscConfig+0x2a4>)
 80014ea:	689b      	ldr	r3, [r3, #8]
 80014ec:	091b      	lsrs	r3, r3, #4
 80014ee:	f003 030f 	and.w	r3, r3, #15
 80014f2:	4a5f      	ldr	r2, [pc, #380]	; (8001670 <HAL_RCC_OscConfig+0x2a8>)
 80014f4:	5cd3      	ldrb	r3, [r2, r3]
 80014f6:	f003 031f 	and.w	r3, r3, #31
 80014fa:	fa21 f303 	lsr.w	r3, r1, r3
 80014fe:	4a5d      	ldr	r2, [pc, #372]	; (8001674 <HAL_RCC_OscConfig+0x2ac>)
 8001500:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8001502:	4b5d      	ldr	r3, [pc, #372]	; (8001678 <HAL_RCC_OscConfig+0x2b0>)
 8001504:	681b      	ldr	r3, [r3, #0]
 8001506:	4618      	mov	r0, r3
 8001508:	f7ff fa9c 	bl	8000a44 <HAL_InitTick>
 800150c:	4603      	mov	r3, r0
 800150e:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8001510:	7bfb      	ldrb	r3, [r7, #15]
 8001512:	2b00      	cmp	r3, #0
 8001514:	d052      	beq.n	80015bc <HAL_RCC_OscConfig+0x1f4>
        {
          return status;
 8001516:	7bfb      	ldrb	r3, [r7, #15]
 8001518:	e2fd      	b.n	8001b16 <HAL_RCC_OscConfig+0x74e>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	699b      	ldr	r3, [r3, #24]
 800151e:	2b00      	cmp	r3, #0
 8001520:	d032      	beq.n	8001588 <HAL_RCC_OscConfig+0x1c0>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001522:	4b52      	ldr	r3, [pc, #328]	; (800166c <HAL_RCC_OscConfig+0x2a4>)
 8001524:	681b      	ldr	r3, [r3, #0]
 8001526:	4a51      	ldr	r2, [pc, #324]	; (800166c <HAL_RCC_OscConfig+0x2a4>)
 8001528:	f043 0301 	orr.w	r3, r3, #1
 800152c:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800152e:	f7ff fc07 	bl	8000d40 <HAL_GetTick>
 8001532:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001534:	e008      	b.n	8001548 <HAL_RCC_OscConfig+0x180>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001536:	f7ff fc03 	bl	8000d40 <HAL_GetTick>
 800153a:	4602      	mov	r2, r0
 800153c:	693b      	ldr	r3, [r7, #16]
 800153e:	1ad3      	subs	r3, r2, r3
 8001540:	2b02      	cmp	r3, #2
 8001542:	d901      	bls.n	8001548 <HAL_RCC_OscConfig+0x180>
          {
            return HAL_TIMEOUT;
 8001544:	2303      	movs	r3, #3
 8001546:	e2e6      	b.n	8001b16 <HAL_RCC_OscConfig+0x74e>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001548:	4b48      	ldr	r3, [pc, #288]	; (800166c <HAL_RCC_OscConfig+0x2a4>)
 800154a:	681b      	ldr	r3, [r3, #0]
 800154c:	f003 0302 	and.w	r3, r3, #2
 8001550:	2b00      	cmp	r3, #0
 8001552:	d0f0      	beq.n	8001536 <HAL_RCC_OscConfig+0x16e>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001554:	4b45      	ldr	r3, [pc, #276]	; (800166c <HAL_RCC_OscConfig+0x2a4>)
 8001556:	681b      	ldr	r3, [r3, #0]
 8001558:	4a44      	ldr	r2, [pc, #272]	; (800166c <HAL_RCC_OscConfig+0x2a4>)
 800155a:	f043 0308 	orr.w	r3, r3, #8
 800155e:	6013      	str	r3, [r2, #0]
 8001560:	4b42      	ldr	r3, [pc, #264]	; (800166c <HAL_RCC_OscConfig+0x2a4>)
 8001562:	681b      	ldr	r3, [r3, #0]
 8001564:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	6a1b      	ldr	r3, [r3, #32]
 800156c:	493f      	ldr	r1, [pc, #252]	; (800166c <HAL_RCC_OscConfig+0x2a4>)
 800156e:	4313      	orrs	r3, r2
 8001570:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001572:	4b3e      	ldr	r3, [pc, #248]	; (800166c <HAL_RCC_OscConfig+0x2a4>)
 8001574:	685b      	ldr	r3, [r3, #4]
 8001576:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	69db      	ldr	r3, [r3, #28]
 800157e:	021b      	lsls	r3, r3, #8
 8001580:	493a      	ldr	r1, [pc, #232]	; (800166c <HAL_RCC_OscConfig+0x2a4>)
 8001582:	4313      	orrs	r3, r2
 8001584:	604b      	str	r3, [r1, #4]
 8001586:	e01a      	b.n	80015be <HAL_RCC_OscConfig+0x1f6>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001588:	4b38      	ldr	r3, [pc, #224]	; (800166c <HAL_RCC_OscConfig+0x2a4>)
 800158a:	681b      	ldr	r3, [r3, #0]
 800158c:	4a37      	ldr	r2, [pc, #220]	; (800166c <HAL_RCC_OscConfig+0x2a4>)
 800158e:	f023 0301 	bic.w	r3, r3, #1
 8001592:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001594:	f7ff fbd4 	bl	8000d40 <HAL_GetTick>
 8001598:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800159a:	e008      	b.n	80015ae <HAL_RCC_OscConfig+0x1e6>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800159c:	f7ff fbd0 	bl	8000d40 <HAL_GetTick>
 80015a0:	4602      	mov	r2, r0
 80015a2:	693b      	ldr	r3, [r7, #16]
 80015a4:	1ad3      	subs	r3, r2, r3
 80015a6:	2b02      	cmp	r3, #2
 80015a8:	d901      	bls.n	80015ae <HAL_RCC_OscConfig+0x1e6>
          {
            return HAL_TIMEOUT;
 80015aa:	2303      	movs	r3, #3
 80015ac:	e2b3      	b.n	8001b16 <HAL_RCC_OscConfig+0x74e>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80015ae:	4b2f      	ldr	r3, [pc, #188]	; (800166c <HAL_RCC_OscConfig+0x2a4>)
 80015b0:	681b      	ldr	r3, [r3, #0]
 80015b2:	f003 0302 	and.w	r3, r3, #2
 80015b6:	2b00      	cmp	r3, #0
 80015b8:	d1f0      	bne.n	800159c <HAL_RCC_OscConfig+0x1d4>
 80015ba:	e000      	b.n	80015be <HAL_RCC_OscConfig+0x1f6>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80015bc:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	681b      	ldr	r3, [r3, #0]
 80015c2:	f003 0301 	and.w	r3, r3, #1
 80015c6:	2b00      	cmp	r3, #0
 80015c8:	d074      	beq.n	80016b4 <HAL_RCC_OscConfig+0x2ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80015ca:	69bb      	ldr	r3, [r7, #24]
 80015cc:	2b08      	cmp	r3, #8
 80015ce:	d005      	beq.n	80015dc <HAL_RCC_OscConfig+0x214>
 80015d0:	69bb      	ldr	r3, [r7, #24]
 80015d2:	2b0c      	cmp	r3, #12
 80015d4:	d10e      	bne.n	80015f4 <HAL_RCC_OscConfig+0x22c>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80015d6:	697b      	ldr	r3, [r7, #20]
 80015d8:	2b03      	cmp	r3, #3
 80015da:	d10b      	bne.n	80015f4 <HAL_RCC_OscConfig+0x22c>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80015dc:	4b23      	ldr	r3, [pc, #140]	; (800166c <HAL_RCC_OscConfig+0x2a4>)
 80015de:	681b      	ldr	r3, [r3, #0]
 80015e0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80015e4:	2b00      	cmp	r3, #0
 80015e6:	d064      	beq.n	80016b2 <HAL_RCC_OscConfig+0x2ea>
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	685b      	ldr	r3, [r3, #4]
 80015ec:	2b00      	cmp	r3, #0
 80015ee:	d160      	bne.n	80016b2 <HAL_RCC_OscConfig+0x2ea>
      {
        return HAL_ERROR;
 80015f0:	2301      	movs	r3, #1
 80015f2:	e290      	b.n	8001b16 <HAL_RCC_OscConfig+0x74e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	685b      	ldr	r3, [r3, #4]
 80015f8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80015fc:	d106      	bne.n	800160c <HAL_RCC_OscConfig+0x244>
 80015fe:	4b1b      	ldr	r3, [pc, #108]	; (800166c <HAL_RCC_OscConfig+0x2a4>)
 8001600:	681b      	ldr	r3, [r3, #0]
 8001602:	4a1a      	ldr	r2, [pc, #104]	; (800166c <HAL_RCC_OscConfig+0x2a4>)
 8001604:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001608:	6013      	str	r3, [r2, #0]
 800160a:	e01d      	b.n	8001648 <HAL_RCC_OscConfig+0x280>
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	685b      	ldr	r3, [r3, #4]
 8001610:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001614:	d10c      	bne.n	8001630 <HAL_RCC_OscConfig+0x268>
 8001616:	4b15      	ldr	r3, [pc, #84]	; (800166c <HAL_RCC_OscConfig+0x2a4>)
 8001618:	681b      	ldr	r3, [r3, #0]
 800161a:	4a14      	ldr	r2, [pc, #80]	; (800166c <HAL_RCC_OscConfig+0x2a4>)
 800161c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001620:	6013      	str	r3, [r2, #0]
 8001622:	4b12      	ldr	r3, [pc, #72]	; (800166c <HAL_RCC_OscConfig+0x2a4>)
 8001624:	681b      	ldr	r3, [r3, #0]
 8001626:	4a11      	ldr	r2, [pc, #68]	; (800166c <HAL_RCC_OscConfig+0x2a4>)
 8001628:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800162c:	6013      	str	r3, [r2, #0]
 800162e:	e00b      	b.n	8001648 <HAL_RCC_OscConfig+0x280>
 8001630:	4b0e      	ldr	r3, [pc, #56]	; (800166c <HAL_RCC_OscConfig+0x2a4>)
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	4a0d      	ldr	r2, [pc, #52]	; (800166c <HAL_RCC_OscConfig+0x2a4>)
 8001636:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800163a:	6013      	str	r3, [r2, #0]
 800163c:	4b0b      	ldr	r3, [pc, #44]	; (800166c <HAL_RCC_OscConfig+0x2a4>)
 800163e:	681b      	ldr	r3, [r3, #0]
 8001640:	4a0a      	ldr	r2, [pc, #40]	; (800166c <HAL_RCC_OscConfig+0x2a4>)
 8001642:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001646:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	685b      	ldr	r3, [r3, #4]
 800164c:	2b00      	cmp	r3, #0
 800164e:	d01c      	beq.n	800168a <HAL_RCC_OscConfig+0x2c2>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001650:	f7ff fb76 	bl	8000d40 <HAL_GetTick>
 8001654:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001656:	e011      	b.n	800167c <HAL_RCC_OscConfig+0x2b4>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001658:	f7ff fb72 	bl	8000d40 <HAL_GetTick>
 800165c:	4602      	mov	r2, r0
 800165e:	693b      	ldr	r3, [r7, #16]
 8001660:	1ad3      	subs	r3, r2, r3
 8001662:	2b64      	cmp	r3, #100	; 0x64
 8001664:	d90a      	bls.n	800167c <HAL_RCC_OscConfig+0x2b4>
          {
            return HAL_TIMEOUT;
 8001666:	2303      	movs	r3, #3
 8001668:	e255      	b.n	8001b16 <HAL_RCC_OscConfig+0x74e>
 800166a:	bf00      	nop
 800166c:	40021000 	.word	0x40021000
 8001670:	0800684c 	.word	0x0800684c
 8001674:	20000000 	.word	0x20000000
 8001678:	20000004 	.word	0x20000004
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800167c:	4bae      	ldr	r3, [pc, #696]	; (8001938 <HAL_RCC_OscConfig+0x570>)
 800167e:	681b      	ldr	r3, [r3, #0]
 8001680:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001684:	2b00      	cmp	r3, #0
 8001686:	d0e7      	beq.n	8001658 <HAL_RCC_OscConfig+0x290>
 8001688:	e014      	b.n	80016b4 <HAL_RCC_OscConfig+0x2ec>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800168a:	f7ff fb59 	bl	8000d40 <HAL_GetTick>
 800168e:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001690:	e008      	b.n	80016a4 <HAL_RCC_OscConfig+0x2dc>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001692:	f7ff fb55 	bl	8000d40 <HAL_GetTick>
 8001696:	4602      	mov	r2, r0
 8001698:	693b      	ldr	r3, [r7, #16]
 800169a:	1ad3      	subs	r3, r2, r3
 800169c:	2b64      	cmp	r3, #100	; 0x64
 800169e:	d901      	bls.n	80016a4 <HAL_RCC_OscConfig+0x2dc>
          {
            return HAL_TIMEOUT;
 80016a0:	2303      	movs	r3, #3
 80016a2:	e238      	b.n	8001b16 <HAL_RCC_OscConfig+0x74e>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80016a4:	4ba4      	ldr	r3, [pc, #656]	; (8001938 <HAL_RCC_OscConfig+0x570>)
 80016a6:	681b      	ldr	r3, [r3, #0]
 80016a8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80016ac:	2b00      	cmp	r3, #0
 80016ae:	d1f0      	bne.n	8001692 <HAL_RCC_OscConfig+0x2ca>
 80016b0:	e000      	b.n	80016b4 <HAL_RCC_OscConfig+0x2ec>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80016b2:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	681b      	ldr	r3, [r3, #0]
 80016b8:	f003 0302 	and.w	r3, r3, #2
 80016bc:	2b00      	cmp	r3, #0
 80016be:	d060      	beq.n	8001782 <HAL_RCC_OscConfig+0x3ba>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80016c0:	69bb      	ldr	r3, [r7, #24]
 80016c2:	2b04      	cmp	r3, #4
 80016c4:	d005      	beq.n	80016d2 <HAL_RCC_OscConfig+0x30a>
 80016c6:	69bb      	ldr	r3, [r7, #24]
 80016c8:	2b0c      	cmp	r3, #12
 80016ca:	d119      	bne.n	8001700 <HAL_RCC_OscConfig+0x338>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80016cc:	697b      	ldr	r3, [r7, #20]
 80016ce:	2b02      	cmp	r3, #2
 80016d0:	d116      	bne.n	8001700 <HAL_RCC_OscConfig+0x338>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80016d2:	4b99      	ldr	r3, [pc, #612]	; (8001938 <HAL_RCC_OscConfig+0x570>)
 80016d4:	681b      	ldr	r3, [r3, #0]
 80016d6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80016da:	2b00      	cmp	r3, #0
 80016dc:	d005      	beq.n	80016ea <HAL_RCC_OscConfig+0x322>
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	68db      	ldr	r3, [r3, #12]
 80016e2:	2b00      	cmp	r3, #0
 80016e4:	d101      	bne.n	80016ea <HAL_RCC_OscConfig+0x322>
      {
        return HAL_ERROR;
 80016e6:	2301      	movs	r3, #1
 80016e8:	e215      	b.n	8001b16 <HAL_RCC_OscConfig+0x74e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80016ea:	4b93      	ldr	r3, [pc, #588]	; (8001938 <HAL_RCC_OscConfig+0x570>)
 80016ec:	685b      	ldr	r3, [r3, #4]
 80016ee:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	691b      	ldr	r3, [r3, #16]
 80016f6:	061b      	lsls	r3, r3, #24
 80016f8:	498f      	ldr	r1, [pc, #572]	; (8001938 <HAL_RCC_OscConfig+0x570>)
 80016fa:	4313      	orrs	r3, r2
 80016fc:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80016fe:	e040      	b.n	8001782 <HAL_RCC_OscConfig+0x3ba>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	68db      	ldr	r3, [r3, #12]
 8001704:	2b00      	cmp	r3, #0
 8001706:	d023      	beq.n	8001750 <HAL_RCC_OscConfig+0x388>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001708:	4b8b      	ldr	r3, [pc, #556]	; (8001938 <HAL_RCC_OscConfig+0x570>)
 800170a:	681b      	ldr	r3, [r3, #0]
 800170c:	4a8a      	ldr	r2, [pc, #552]	; (8001938 <HAL_RCC_OscConfig+0x570>)
 800170e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001712:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001714:	f7ff fb14 	bl	8000d40 <HAL_GetTick>
 8001718:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800171a:	e008      	b.n	800172e <HAL_RCC_OscConfig+0x366>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800171c:	f7ff fb10 	bl	8000d40 <HAL_GetTick>
 8001720:	4602      	mov	r2, r0
 8001722:	693b      	ldr	r3, [r7, #16]
 8001724:	1ad3      	subs	r3, r2, r3
 8001726:	2b02      	cmp	r3, #2
 8001728:	d901      	bls.n	800172e <HAL_RCC_OscConfig+0x366>
          {
            return HAL_TIMEOUT;
 800172a:	2303      	movs	r3, #3
 800172c:	e1f3      	b.n	8001b16 <HAL_RCC_OscConfig+0x74e>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800172e:	4b82      	ldr	r3, [pc, #520]	; (8001938 <HAL_RCC_OscConfig+0x570>)
 8001730:	681b      	ldr	r3, [r3, #0]
 8001732:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001736:	2b00      	cmp	r3, #0
 8001738:	d0f0      	beq.n	800171c <HAL_RCC_OscConfig+0x354>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800173a:	4b7f      	ldr	r3, [pc, #508]	; (8001938 <HAL_RCC_OscConfig+0x570>)
 800173c:	685b      	ldr	r3, [r3, #4]
 800173e:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	691b      	ldr	r3, [r3, #16]
 8001746:	061b      	lsls	r3, r3, #24
 8001748:	497b      	ldr	r1, [pc, #492]	; (8001938 <HAL_RCC_OscConfig+0x570>)
 800174a:	4313      	orrs	r3, r2
 800174c:	604b      	str	r3, [r1, #4]
 800174e:	e018      	b.n	8001782 <HAL_RCC_OscConfig+0x3ba>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001750:	4b79      	ldr	r3, [pc, #484]	; (8001938 <HAL_RCC_OscConfig+0x570>)
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	4a78      	ldr	r2, [pc, #480]	; (8001938 <HAL_RCC_OscConfig+0x570>)
 8001756:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800175a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800175c:	f7ff faf0 	bl	8000d40 <HAL_GetTick>
 8001760:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001762:	e008      	b.n	8001776 <HAL_RCC_OscConfig+0x3ae>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001764:	f7ff faec 	bl	8000d40 <HAL_GetTick>
 8001768:	4602      	mov	r2, r0
 800176a:	693b      	ldr	r3, [r7, #16]
 800176c:	1ad3      	subs	r3, r2, r3
 800176e:	2b02      	cmp	r3, #2
 8001770:	d901      	bls.n	8001776 <HAL_RCC_OscConfig+0x3ae>
          {
            return HAL_TIMEOUT;
 8001772:	2303      	movs	r3, #3
 8001774:	e1cf      	b.n	8001b16 <HAL_RCC_OscConfig+0x74e>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001776:	4b70      	ldr	r3, [pc, #448]	; (8001938 <HAL_RCC_OscConfig+0x570>)
 8001778:	681b      	ldr	r3, [r3, #0]
 800177a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800177e:	2b00      	cmp	r3, #0
 8001780:	d1f0      	bne.n	8001764 <HAL_RCC_OscConfig+0x39c>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	681b      	ldr	r3, [r3, #0]
 8001786:	f003 0308 	and.w	r3, r3, #8
 800178a:	2b00      	cmp	r3, #0
 800178c:	d03c      	beq.n	8001808 <HAL_RCC_OscConfig+0x440>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	695b      	ldr	r3, [r3, #20]
 8001792:	2b00      	cmp	r3, #0
 8001794:	d01c      	beq.n	80017d0 <HAL_RCC_OscConfig+0x408>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001796:	4b68      	ldr	r3, [pc, #416]	; (8001938 <HAL_RCC_OscConfig+0x570>)
 8001798:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800179c:	4a66      	ldr	r2, [pc, #408]	; (8001938 <HAL_RCC_OscConfig+0x570>)
 800179e:	f043 0301 	orr.w	r3, r3, #1
 80017a2:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80017a6:	f7ff facb 	bl	8000d40 <HAL_GetTick>
 80017aa:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80017ac:	e008      	b.n	80017c0 <HAL_RCC_OscConfig+0x3f8>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80017ae:	f7ff fac7 	bl	8000d40 <HAL_GetTick>
 80017b2:	4602      	mov	r2, r0
 80017b4:	693b      	ldr	r3, [r7, #16]
 80017b6:	1ad3      	subs	r3, r2, r3
 80017b8:	2b02      	cmp	r3, #2
 80017ba:	d901      	bls.n	80017c0 <HAL_RCC_OscConfig+0x3f8>
        {
          return HAL_TIMEOUT;
 80017bc:	2303      	movs	r3, #3
 80017be:	e1aa      	b.n	8001b16 <HAL_RCC_OscConfig+0x74e>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80017c0:	4b5d      	ldr	r3, [pc, #372]	; (8001938 <HAL_RCC_OscConfig+0x570>)
 80017c2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80017c6:	f003 0302 	and.w	r3, r3, #2
 80017ca:	2b00      	cmp	r3, #0
 80017cc:	d0ef      	beq.n	80017ae <HAL_RCC_OscConfig+0x3e6>
 80017ce:	e01b      	b.n	8001808 <HAL_RCC_OscConfig+0x440>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80017d0:	4b59      	ldr	r3, [pc, #356]	; (8001938 <HAL_RCC_OscConfig+0x570>)
 80017d2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80017d6:	4a58      	ldr	r2, [pc, #352]	; (8001938 <HAL_RCC_OscConfig+0x570>)
 80017d8:	f023 0301 	bic.w	r3, r3, #1
 80017dc:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80017e0:	f7ff faae 	bl	8000d40 <HAL_GetTick>
 80017e4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80017e6:	e008      	b.n	80017fa <HAL_RCC_OscConfig+0x432>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80017e8:	f7ff faaa 	bl	8000d40 <HAL_GetTick>
 80017ec:	4602      	mov	r2, r0
 80017ee:	693b      	ldr	r3, [r7, #16]
 80017f0:	1ad3      	subs	r3, r2, r3
 80017f2:	2b02      	cmp	r3, #2
 80017f4:	d901      	bls.n	80017fa <HAL_RCC_OscConfig+0x432>
        {
          return HAL_TIMEOUT;
 80017f6:	2303      	movs	r3, #3
 80017f8:	e18d      	b.n	8001b16 <HAL_RCC_OscConfig+0x74e>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80017fa:	4b4f      	ldr	r3, [pc, #316]	; (8001938 <HAL_RCC_OscConfig+0x570>)
 80017fc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001800:	f003 0302 	and.w	r3, r3, #2
 8001804:	2b00      	cmp	r3, #0
 8001806:	d1ef      	bne.n	80017e8 <HAL_RCC_OscConfig+0x420>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	f003 0304 	and.w	r3, r3, #4
 8001810:	2b00      	cmp	r3, #0
 8001812:	f000 80a5 	beq.w	8001960 <HAL_RCC_OscConfig+0x598>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001816:	2300      	movs	r3, #0
 8001818:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 800181a:	4b47      	ldr	r3, [pc, #284]	; (8001938 <HAL_RCC_OscConfig+0x570>)
 800181c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800181e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001822:	2b00      	cmp	r3, #0
 8001824:	d10d      	bne.n	8001842 <HAL_RCC_OscConfig+0x47a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001826:	4b44      	ldr	r3, [pc, #272]	; (8001938 <HAL_RCC_OscConfig+0x570>)
 8001828:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800182a:	4a43      	ldr	r2, [pc, #268]	; (8001938 <HAL_RCC_OscConfig+0x570>)
 800182c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001830:	6593      	str	r3, [r2, #88]	; 0x58
 8001832:	4b41      	ldr	r3, [pc, #260]	; (8001938 <HAL_RCC_OscConfig+0x570>)
 8001834:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001836:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800183a:	60bb      	str	r3, [r7, #8]
 800183c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800183e:	2301      	movs	r3, #1
 8001840:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001842:	4b3e      	ldr	r3, [pc, #248]	; (800193c <HAL_RCC_OscConfig+0x574>)
 8001844:	681b      	ldr	r3, [r3, #0]
 8001846:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800184a:	2b00      	cmp	r3, #0
 800184c:	d118      	bne.n	8001880 <HAL_RCC_OscConfig+0x4b8>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800184e:	4b3b      	ldr	r3, [pc, #236]	; (800193c <HAL_RCC_OscConfig+0x574>)
 8001850:	681b      	ldr	r3, [r3, #0]
 8001852:	4a3a      	ldr	r2, [pc, #232]	; (800193c <HAL_RCC_OscConfig+0x574>)
 8001854:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001858:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800185a:	f7ff fa71 	bl	8000d40 <HAL_GetTick>
 800185e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001860:	e008      	b.n	8001874 <HAL_RCC_OscConfig+0x4ac>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001862:	f7ff fa6d 	bl	8000d40 <HAL_GetTick>
 8001866:	4602      	mov	r2, r0
 8001868:	693b      	ldr	r3, [r7, #16]
 800186a:	1ad3      	subs	r3, r2, r3
 800186c:	2b02      	cmp	r3, #2
 800186e:	d901      	bls.n	8001874 <HAL_RCC_OscConfig+0x4ac>
        {
          return HAL_TIMEOUT;
 8001870:	2303      	movs	r3, #3
 8001872:	e150      	b.n	8001b16 <HAL_RCC_OscConfig+0x74e>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001874:	4b31      	ldr	r3, [pc, #196]	; (800193c <HAL_RCC_OscConfig+0x574>)
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800187c:	2b00      	cmp	r3, #0
 800187e:	d0f0      	beq.n	8001862 <HAL_RCC_OscConfig+0x49a>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	689b      	ldr	r3, [r3, #8]
 8001884:	2b01      	cmp	r3, #1
 8001886:	d108      	bne.n	800189a <HAL_RCC_OscConfig+0x4d2>
 8001888:	4b2b      	ldr	r3, [pc, #172]	; (8001938 <HAL_RCC_OscConfig+0x570>)
 800188a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800188e:	4a2a      	ldr	r2, [pc, #168]	; (8001938 <HAL_RCC_OscConfig+0x570>)
 8001890:	f043 0301 	orr.w	r3, r3, #1
 8001894:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001898:	e024      	b.n	80018e4 <HAL_RCC_OscConfig+0x51c>
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	689b      	ldr	r3, [r3, #8]
 800189e:	2b05      	cmp	r3, #5
 80018a0:	d110      	bne.n	80018c4 <HAL_RCC_OscConfig+0x4fc>
 80018a2:	4b25      	ldr	r3, [pc, #148]	; (8001938 <HAL_RCC_OscConfig+0x570>)
 80018a4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80018a8:	4a23      	ldr	r2, [pc, #140]	; (8001938 <HAL_RCC_OscConfig+0x570>)
 80018aa:	f043 0304 	orr.w	r3, r3, #4
 80018ae:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80018b2:	4b21      	ldr	r3, [pc, #132]	; (8001938 <HAL_RCC_OscConfig+0x570>)
 80018b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80018b8:	4a1f      	ldr	r2, [pc, #124]	; (8001938 <HAL_RCC_OscConfig+0x570>)
 80018ba:	f043 0301 	orr.w	r3, r3, #1
 80018be:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80018c2:	e00f      	b.n	80018e4 <HAL_RCC_OscConfig+0x51c>
 80018c4:	4b1c      	ldr	r3, [pc, #112]	; (8001938 <HAL_RCC_OscConfig+0x570>)
 80018c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80018ca:	4a1b      	ldr	r2, [pc, #108]	; (8001938 <HAL_RCC_OscConfig+0x570>)
 80018cc:	f023 0301 	bic.w	r3, r3, #1
 80018d0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80018d4:	4b18      	ldr	r3, [pc, #96]	; (8001938 <HAL_RCC_OscConfig+0x570>)
 80018d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80018da:	4a17      	ldr	r2, [pc, #92]	; (8001938 <HAL_RCC_OscConfig+0x570>)
 80018dc:	f023 0304 	bic.w	r3, r3, #4
 80018e0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	689b      	ldr	r3, [r3, #8]
 80018e8:	2b00      	cmp	r3, #0
 80018ea:	d016      	beq.n	800191a <HAL_RCC_OscConfig+0x552>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80018ec:	f7ff fa28 	bl	8000d40 <HAL_GetTick>
 80018f0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80018f2:	e00a      	b.n	800190a <HAL_RCC_OscConfig+0x542>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80018f4:	f7ff fa24 	bl	8000d40 <HAL_GetTick>
 80018f8:	4602      	mov	r2, r0
 80018fa:	693b      	ldr	r3, [r7, #16]
 80018fc:	1ad3      	subs	r3, r2, r3
 80018fe:	f241 3288 	movw	r2, #5000	; 0x1388
 8001902:	4293      	cmp	r3, r2
 8001904:	d901      	bls.n	800190a <HAL_RCC_OscConfig+0x542>
        {
          return HAL_TIMEOUT;
 8001906:	2303      	movs	r3, #3
 8001908:	e105      	b.n	8001b16 <HAL_RCC_OscConfig+0x74e>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800190a:	4b0b      	ldr	r3, [pc, #44]	; (8001938 <HAL_RCC_OscConfig+0x570>)
 800190c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001910:	f003 0302 	and.w	r3, r3, #2
 8001914:	2b00      	cmp	r3, #0
 8001916:	d0ed      	beq.n	80018f4 <HAL_RCC_OscConfig+0x52c>
 8001918:	e019      	b.n	800194e <HAL_RCC_OscConfig+0x586>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800191a:	f7ff fa11 	bl	8000d40 <HAL_GetTick>
 800191e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001920:	e00e      	b.n	8001940 <HAL_RCC_OscConfig+0x578>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001922:	f7ff fa0d 	bl	8000d40 <HAL_GetTick>
 8001926:	4602      	mov	r2, r0
 8001928:	693b      	ldr	r3, [r7, #16]
 800192a:	1ad3      	subs	r3, r2, r3
 800192c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001930:	4293      	cmp	r3, r2
 8001932:	d905      	bls.n	8001940 <HAL_RCC_OscConfig+0x578>
        {
          return HAL_TIMEOUT;
 8001934:	2303      	movs	r3, #3
 8001936:	e0ee      	b.n	8001b16 <HAL_RCC_OscConfig+0x74e>
 8001938:	40021000 	.word	0x40021000
 800193c:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001940:	4b77      	ldr	r3, [pc, #476]	; (8001b20 <HAL_RCC_OscConfig+0x758>)
 8001942:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001946:	f003 0302 	and.w	r3, r3, #2
 800194a:	2b00      	cmp	r3, #0
 800194c:	d1e9      	bne.n	8001922 <HAL_RCC_OscConfig+0x55a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800194e:	7ffb      	ldrb	r3, [r7, #31]
 8001950:	2b01      	cmp	r3, #1
 8001952:	d105      	bne.n	8001960 <HAL_RCC_OscConfig+0x598>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001954:	4b72      	ldr	r3, [pc, #456]	; (8001b20 <HAL_RCC_OscConfig+0x758>)
 8001956:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001958:	4a71      	ldr	r2, [pc, #452]	; (8001b20 <HAL_RCC_OscConfig+0x758>)
 800195a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800195e:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001964:	2b00      	cmp	r3, #0
 8001966:	f000 80d5 	beq.w	8001b14 <HAL_RCC_OscConfig+0x74c>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_CFGR_SWS_PLL)
 800196a:	69bb      	ldr	r3, [r7, #24]
 800196c:	2b0c      	cmp	r3, #12
 800196e:	f000 808e 	beq.w	8001a8e <HAL_RCC_OscConfig+0x6c6>
    {
      if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001976:	2b02      	cmp	r3, #2
 8001978:	d15b      	bne.n	8001a32 <HAL_RCC_OscConfig+0x66a>
#endif /* RCC_PLLP_SUPPORT */
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800197a:	4b69      	ldr	r3, [pc, #420]	; (8001b20 <HAL_RCC_OscConfig+0x758>)
 800197c:	681b      	ldr	r3, [r3, #0]
 800197e:	4a68      	ldr	r2, [pc, #416]	; (8001b20 <HAL_RCC_OscConfig+0x758>)
 8001980:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001984:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001986:	f7ff f9db 	bl	8000d40 <HAL_GetTick>
 800198a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800198c:	e008      	b.n	80019a0 <HAL_RCC_OscConfig+0x5d8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800198e:	f7ff f9d7 	bl	8000d40 <HAL_GetTick>
 8001992:	4602      	mov	r2, r0
 8001994:	693b      	ldr	r3, [r7, #16]
 8001996:	1ad3      	subs	r3, r2, r3
 8001998:	2b02      	cmp	r3, #2
 800199a:	d901      	bls.n	80019a0 <HAL_RCC_OscConfig+0x5d8>
          {
            return HAL_TIMEOUT;
 800199c:	2303      	movs	r3, #3
 800199e:	e0ba      	b.n	8001b16 <HAL_RCC_OscConfig+0x74e>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80019a0:	4b5f      	ldr	r3, [pc, #380]	; (8001b20 <HAL_RCC_OscConfig+0x758>)
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80019a8:	2b00      	cmp	r3, #0
 80019aa:	d1f0      	bne.n	800198e <HAL_RCC_OscConfig+0x5c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80019ac:	4b5c      	ldr	r3, [pc, #368]	; (8001b20 <HAL_RCC_OscConfig+0x758>)
 80019ae:	68da      	ldr	r2, [r3, #12]
 80019b0:	4b5c      	ldr	r3, [pc, #368]	; (8001b24 <HAL_RCC_OscConfig+0x75c>)
 80019b2:	4013      	ands	r3, r2
 80019b4:	687a      	ldr	r2, [r7, #4]
 80019b6:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 80019b8:	687a      	ldr	r2, [r7, #4]
 80019ba:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80019bc:	3a01      	subs	r2, #1
 80019be:	0112      	lsls	r2, r2, #4
 80019c0:	4311      	orrs	r1, r2
 80019c2:	687a      	ldr	r2, [r7, #4]
 80019c4:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80019c6:	0212      	lsls	r2, r2, #8
 80019c8:	4311      	orrs	r1, r2
 80019ca:	687a      	ldr	r2, [r7, #4]
 80019cc:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80019ce:	0852      	lsrs	r2, r2, #1
 80019d0:	3a01      	subs	r2, #1
 80019d2:	0552      	lsls	r2, r2, #21
 80019d4:	4311      	orrs	r1, r2
 80019d6:	687a      	ldr	r2, [r7, #4]
 80019d8:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80019da:	0852      	lsrs	r2, r2, #1
 80019dc:	3a01      	subs	r2, #1
 80019de:	0652      	lsls	r2, r2, #25
 80019e0:	4311      	orrs	r1, r2
 80019e2:	687a      	ldr	r2, [r7, #4]
 80019e4:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80019e6:	0912      	lsrs	r2, r2, #4
 80019e8:	0452      	lsls	r2, r2, #17
 80019ea:	430a      	orrs	r2, r1
 80019ec:	494c      	ldr	r1, [pc, #304]	; (8001b20 <HAL_RCC_OscConfig+0x758>)
 80019ee:	4313      	orrs	r3, r2
 80019f0:	60cb      	str	r3, [r1, #12]
#endif
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80019f2:	4b4b      	ldr	r3, [pc, #300]	; (8001b20 <HAL_RCC_OscConfig+0x758>)
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	4a4a      	ldr	r2, [pc, #296]	; (8001b20 <HAL_RCC_OscConfig+0x758>)
 80019f8:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80019fc:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80019fe:	4b48      	ldr	r3, [pc, #288]	; (8001b20 <HAL_RCC_OscConfig+0x758>)
 8001a00:	68db      	ldr	r3, [r3, #12]
 8001a02:	4a47      	ldr	r2, [pc, #284]	; (8001b20 <HAL_RCC_OscConfig+0x758>)
 8001a04:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001a08:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a0a:	f7ff f999 	bl	8000d40 <HAL_GetTick>
 8001a0e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001a10:	e008      	b.n	8001a24 <HAL_RCC_OscConfig+0x65c>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001a12:	f7ff f995 	bl	8000d40 <HAL_GetTick>
 8001a16:	4602      	mov	r2, r0
 8001a18:	693b      	ldr	r3, [r7, #16]
 8001a1a:	1ad3      	subs	r3, r2, r3
 8001a1c:	2b02      	cmp	r3, #2
 8001a1e:	d901      	bls.n	8001a24 <HAL_RCC_OscConfig+0x65c>
          {
            return HAL_TIMEOUT;
 8001a20:	2303      	movs	r3, #3
 8001a22:	e078      	b.n	8001b16 <HAL_RCC_OscConfig+0x74e>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001a24:	4b3e      	ldr	r3, [pc, #248]	; (8001b20 <HAL_RCC_OscConfig+0x758>)
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a2c:	2b00      	cmp	r3, #0
 8001a2e:	d0f0      	beq.n	8001a12 <HAL_RCC_OscConfig+0x64a>
 8001a30:	e070      	b.n	8001b14 <HAL_RCC_OscConfig+0x74c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001a32:	4b3b      	ldr	r3, [pc, #236]	; (8001b20 <HAL_RCC_OscConfig+0x758>)
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	4a3a      	ldr	r2, [pc, #232]	; (8001b20 <HAL_RCC_OscConfig+0x758>)
 8001a38:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001a3c:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 8001a3e:	4b38      	ldr	r3, [pc, #224]	; (8001b20 <HAL_RCC_OscConfig+0x758>)
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 8001a46:	2b00      	cmp	r3, #0
 8001a48:	d105      	bne.n	8001a56 <HAL_RCC_OscConfig+0x68e>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8001a4a:	4b35      	ldr	r3, [pc, #212]	; (8001b20 <HAL_RCC_OscConfig+0x758>)
 8001a4c:	68db      	ldr	r3, [r3, #12]
 8001a4e:	4a34      	ldr	r2, [pc, #208]	; (8001b20 <HAL_RCC_OscConfig+0x758>)
 8001a50:	f023 0303 	bic.w	r3, r3, #3
 8001a54:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8001a56:	4b32      	ldr	r3, [pc, #200]	; (8001b20 <HAL_RCC_OscConfig+0x758>)
 8001a58:	68db      	ldr	r3, [r3, #12]
 8001a5a:	4a31      	ldr	r2, [pc, #196]	; (8001b20 <HAL_RCC_OscConfig+0x758>)
 8001a5c:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8001a60:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001a64:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a66:	f7ff f96b 	bl	8000d40 <HAL_GetTick>
 8001a6a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001a6c:	e008      	b.n	8001a80 <HAL_RCC_OscConfig+0x6b8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001a6e:	f7ff f967 	bl	8000d40 <HAL_GetTick>
 8001a72:	4602      	mov	r2, r0
 8001a74:	693b      	ldr	r3, [r7, #16]
 8001a76:	1ad3      	subs	r3, r2, r3
 8001a78:	2b02      	cmp	r3, #2
 8001a7a:	d901      	bls.n	8001a80 <HAL_RCC_OscConfig+0x6b8>
          {
            return HAL_TIMEOUT;
 8001a7c:	2303      	movs	r3, #3
 8001a7e:	e04a      	b.n	8001b16 <HAL_RCC_OscConfig+0x74e>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001a80:	4b27      	ldr	r3, [pc, #156]	; (8001b20 <HAL_RCC_OscConfig+0x758>)
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a88:	2b00      	cmp	r3, #0
 8001a8a:	d1f0      	bne.n	8001a6e <HAL_RCC_OscConfig+0x6a6>
 8001a8c:	e042      	b.n	8001b14 <HAL_RCC_OscConfig+0x74c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a92:	2b01      	cmp	r3, #1
 8001a94:	d101      	bne.n	8001a9a <HAL_RCC_OscConfig+0x6d2>
      {
        return HAL_ERROR;
 8001a96:	2301      	movs	r3, #1
 8001a98:	e03d      	b.n	8001b16 <HAL_RCC_OscConfig+0x74e>
      }
      else
      {
        pll_config = RCC->PLLCFGR;
 8001a9a:	4b21      	ldr	r3, [pc, #132]	; (8001b20 <HAL_RCC_OscConfig+0x758>)
 8001a9c:	68db      	ldr	r3, [r3, #12]
 8001a9e:	617b      	str	r3, [r7, #20]
        /* Do not return HAL_ERROR if request repeats the current configuration */
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001aa0:	697b      	ldr	r3, [r7, #20]
 8001aa2:	f003 0203 	and.w	r2, r3, #3
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001aaa:	429a      	cmp	r2, r3
 8001aac:	d130      	bne.n	8001b10 <HAL_RCC_OscConfig+0x748>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001aae:	697b      	ldr	r3, [r7, #20]
 8001ab0:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ab8:	3b01      	subs	r3, #1
 8001aba:	011b      	lsls	r3, r3, #4
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001abc:	429a      	cmp	r2, r3
 8001abe:	d127      	bne.n	8001b10 <HAL_RCC_OscConfig+0x748>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001ac0:	697b      	ldr	r3, [r7, #20]
 8001ac2:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001aca:	021b      	lsls	r3, r3, #8
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001acc:	429a      	cmp	r2, r3
 8001ace:	d11f      	bne.n	8001b10 <HAL_RCC_OscConfig+0x748>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8001ad0:	697b      	ldr	r3, [r7, #20]
 8001ad2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ad6:	687a      	ldr	r2, [r7, #4]
 8001ad8:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8001ada:	2a07      	cmp	r2, #7
 8001adc:	bf14      	ite	ne
 8001ade:	2201      	movne	r2, #1
 8001ae0:	2200      	moveq	r2, #0
 8001ae2:	b2d2      	uxtb	r2, r2
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001ae4:	4293      	cmp	r3, r2
 8001ae6:	d113      	bne.n	8001b10 <HAL_RCC_OscConfig+0x748>
#endif
#endif
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001ae8:	697b      	ldr	r3, [r7, #20]
 8001aea:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001af2:	085b      	lsrs	r3, r3, #1
 8001af4:	3b01      	subs	r3, #1
 8001af6:	055b      	lsls	r3, r3, #21
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8001af8:	429a      	cmp	r2, r3
 8001afa:	d109      	bne.n	8001b10 <HAL_RCC_OscConfig+0x748>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8001afc:	697b      	ldr	r3, [r7, #20]
 8001afe:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b06:	085b      	lsrs	r3, r3, #1
 8001b08:	3b01      	subs	r3, #1
 8001b0a:	065b      	lsls	r3, r3, #25
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001b0c:	429a      	cmp	r2, r3
 8001b0e:	d001      	beq.n	8001b14 <HAL_RCC_OscConfig+0x74c>
        {
          return HAL_ERROR;
 8001b10:	2301      	movs	r3, #1
 8001b12:	e000      	b.n	8001b16 <HAL_RCC_OscConfig+0x74e>
        }
      }
    }
  }
  return HAL_OK;
 8001b14:	2300      	movs	r3, #0
}
 8001b16:	4618      	mov	r0, r3
 8001b18:	3720      	adds	r7, #32
 8001b1a:	46bd      	mov	sp, r7
 8001b1c:	bd80      	pop	{r7, pc}
 8001b1e:	bf00      	nop
 8001b20:	40021000 	.word	0x40021000
 8001b24:	f99d808c 	.word	0xf99d808c

08001b28 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001b28:	b580      	push	{r7, lr}
 8001b2a:	b084      	sub	sp, #16
 8001b2c:	af00      	add	r7, sp, #0
 8001b2e:	6078      	str	r0, [r7, #4]
 8001b30:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	2b00      	cmp	r3, #0
 8001b36:	d101      	bne.n	8001b3c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001b38:	2301      	movs	r3, #1
 8001b3a:	e0c8      	b.n	8001cce <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001b3c:	4b66      	ldr	r3, [pc, #408]	; (8001cd8 <HAL_RCC_ClockConfig+0x1b0>)
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	f003 0307 	and.w	r3, r3, #7
 8001b44:	683a      	ldr	r2, [r7, #0]
 8001b46:	429a      	cmp	r2, r3
 8001b48:	d910      	bls.n	8001b6c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001b4a:	4b63      	ldr	r3, [pc, #396]	; (8001cd8 <HAL_RCC_ClockConfig+0x1b0>)
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	f023 0207 	bic.w	r2, r3, #7
 8001b52:	4961      	ldr	r1, [pc, #388]	; (8001cd8 <HAL_RCC_ClockConfig+0x1b0>)
 8001b54:	683b      	ldr	r3, [r7, #0]
 8001b56:	4313      	orrs	r3, r2
 8001b58:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001b5a:	4b5f      	ldr	r3, [pc, #380]	; (8001cd8 <HAL_RCC_ClockConfig+0x1b0>)
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	f003 0307 	and.w	r3, r3, #7
 8001b62:	683a      	ldr	r2, [r7, #0]
 8001b64:	429a      	cmp	r2, r3
 8001b66:	d001      	beq.n	8001b6c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8001b68:	2301      	movs	r3, #1
 8001b6a:	e0b0      	b.n	8001cce <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	f003 0301 	and.w	r3, r3, #1
 8001b74:	2b00      	cmp	r3, #0
 8001b76:	d04c      	beq.n	8001c12 <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	685b      	ldr	r3, [r3, #4]
 8001b7c:	2b03      	cmp	r3, #3
 8001b7e:	d107      	bne.n	8001b90 <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001b80:	4b56      	ldr	r3, [pc, #344]	; (8001cdc <HAL_RCC_ClockConfig+0x1b4>)
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b88:	2b00      	cmp	r3, #0
 8001b8a:	d121      	bne.n	8001bd0 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 8001b8c:	2301      	movs	r3, #1
 8001b8e:	e09e      	b.n	8001cce <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	685b      	ldr	r3, [r3, #4]
 8001b94:	2b02      	cmp	r3, #2
 8001b96:	d107      	bne.n	8001ba8 <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001b98:	4b50      	ldr	r3, [pc, #320]	; (8001cdc <HAL_RCC_ClockConfig+0x1b4>)
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ba0:	2b00      	cmp	r3, #0
 8001ba2:	d115      	bne.n	8001bd0 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8001ba4:	2301      	movs	r3, #1
 8001ba6:	e092      	b.n	8001cce <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	685b      	ldr	r3, [r3, #4]
 8001bac:	2b00      	cmp	r3, #0
 8001bae:	d107      	bne.n	8001bc0 <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001bb0:	4b4a      	ldr	r3, [pc, #296]	; (8001cdc <HAL_RCC_ClockConfig+0x1b4>)
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	f003 0302 	and.w	r3, r3, #2
 8001bb8:	2b00      	cmp	r3, #0
 8001bba:	d109      	bne.n	8001bd0 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8001bbc:	2301      	movs	r3, #1
 8001bbe:	e086      	b.n	8001cce <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001bc0:	4b46      	ldr	r3, [pc, #280]	; (8001cdc <HAL_RCC_ClockConfig+0x1b4>)
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001bc8:	2b00      	cmp	r3, #0
 8001bca:	d101      	bne.n	8001bd0 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8001bcc:	2301      	movs	r3, #1
 8001bce:	e07e      	b.n	8001cce <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001bd0:	4b42      	ldr	r3, [pc, #264]	; (8001cdc <HAL_RCC_ClockConfig+0x1b4>)
 8001bd2:	689b      	ldr	r3, [r3, #8]
 8001bd4:	f023 0203 	bic.w	r2, r3, #3
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	685b      	ldr	r3, [r3, #4]
 8001bdc:	493f      	ldr	r1, [pc, #252]	; (8001cdc <HAL_RCC_ClockConfig+0x1b4>)
 8001bde:	4313      	orrs	r3, r2
 8001be0:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001be2:	f7ff f8ad 	bl	8000d40 <HAL_GetTick>
 8001be6:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001be8:	e00a      	b.n	8001c00 <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001bea:	f7ff f8a9 	bl	8000d40 <HAL_GetTick>
 8001bee:	4602      	mov	r2, r0
 8001bf0:	68fb      	ldr	r3, [r7, #12]
 8001bf2:	1ad3      	subs	r3, r2, r3
 8001bf4:	f241 3288 	movw	r2, #5000	; 0x1388
 8001bf8:	4293      	cmp	r3, r2
 8001bfa:	d901      	bls.n	8001c00 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 8001bfc:	2303      	movs	r3, #3
 8001bfe:	e066      	b.n	8001cce <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001c00:	4b36      	ldr	r3, [pc, #216]	; (8001cdc <HAL_RCC_ClockConfig+0x1b4>)
 8001c02:	689b      	ldr	r3, [r3, #8]
 8001c04:	f003 020c 	and.w	r2, r3, #12
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	685b      	ldr	r3, [r3, #4]
 8001c0c:	009b      	lsls	r3, r3, #2
 8001c0e:	429a      	cmp	r2, r3
 8001c10:	d1eb      	bne.n	8001bea <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	f003 0302 	and.w	r3, r3, #2
 8001c1a:	2b00      	cmp	r3, #0
 8001c1c:	d008      	beq.n	8001c30 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001c1e:	4b2f      	ldr	r3, [pc, #188]	; (8001cdc <HAL_RCC_ClockConfig+0x1b4>)
 8001c20:	689b      	ldr	r3, [r3, #8]
 8001c22:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	689b      	ldr	r3, [r3, #8]
 8001c2a:	492c      	ldr	r1, [pc, #176]	; (8001cdc <HAL_RCC_ClockConfig+0x1b4>)
 8001c2c:	4313      	orrs	r3, r2
 8001c2e:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001c30:	4b29      	ldr	r3, [pc, #164]	; (8001cd8 <HAL_RCC_ClockConfig+0x1b0>)
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	f003 0307 	and.w	r3, r3, #7
 8001c38:	683a      	ldr	r2, [r7, #0]
 8001c3a:	429a      	cmp	r2, r3
 8001c3c:	d210      	bcs.n	8001c60 <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001c3e:	4b26      	ldr	r3, [pc, #152]	; (8001cd8 <HAL_RCC_ClockConfig+0x1b0>)
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	f023 0207 	bic.w	r2, r3, #7
 8001c46:	4924      	ldr	r1, [pc, #144]	; (8001cd8 <HAL_RCC_ClockConfig+0x1b0>)
 8001c48:	683b      	ldr	r3, [r7, #0]
 8001c4a:	4313      	orrs	r3, r2
 8001c4c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001c4e:	4b22      	ldr	r3, [pc, #136]	; (8001cd8 <HAL_RCC_ClockConfig+0x1b0>)
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	f003 0307 	and.w	r3, r3, #7
 8001c56:	683a      	ldr	r2, [r7, #0]
 8001c58:	429a      	cmp	r2, r3
 8001c5a:	d001      	beq.n	8001c60 <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 8001c5c:	2301      	movs	r3, #1
 8001c5e:	e036      	b.n	8001cce <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	f003 0304 	and.w	r3, r3, #4
 8001c68:	2b00      	cmp	r3, #0
 8001c6a:	d008      	beq.n	8001c7e <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001c6c:	4b1b      	ldr	r3, [pc, #108]	; (8001cdc <HAL_RCC_ClockConfig+0x1b4>)
 8001c6e:	689b      	ldr	r3, [r3, #8]
 8001c70:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	68db      	ldr	r3, [r3, #12]
 8001c78:	4918      	ldr	r1, [pc, #96]	; (8001cdc <HAL_RCC_ClockConfig+0x1b4>)
 8001c7a:	4313      	orrs	r3, r2
 8001c7c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	f003 0308 	and.w	r3, r3, #8
 8001c86:	2b00      	cmp	r3, #0
 8001c88:	d009      	beq.n	8001c9e <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001c8a:	4b14      	ldr	r3, [pc, #80]	; (8001cdc <HAL_RCC_ClockConfig+0x1b4>)
 8001c8c:	689b      	ldr	r3, [r3, #8]
 8001c8e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	691b      	ldr	r3, [r3, #16]
 8001c96:	00db      	lsls	r3, r3, #3
 8001c98:	4910      	ldr	r1, [pc, #64]	; (8001cdc <HAL_RCC_ClockConfig+0x1b4>)
 8001c9a:	4313      	orrs	r3, r2
 8001c9c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001c9e:	f000 f825 	bl	8001cec <HAL_RCC_GetSysClockFreq>
 8001ca2:	4601      	mov	r1, r0
 8001ca4:	4b0d      	ldr	r3, [pc, #52]	; (8001cdc <HAL_RCC_ClockConfig+0x1b4>)
 8001ca6:	689b      	ldr	r3, [r3, #8]
 8001ca8:	091b      	lsrs	r3, r3, #4
 8001caa:	f003 030f 	and.w	r3, r3, #15
 8001cae:	4a0c      	ldr	r2, [pc, #48]	; (8001ce0 <HAL_RCC_ClockConfig+0x1b8>)
 8001cb0:	5cd3      	ldrb	r3, [r2, r3]
 8001cb2:	f003 031f 	and.w	r3, r3, #31
 8001cb6:	fa21 f303 	lsr.w	r3, r1, r3
 8001cba:	4a0a      	ldr	r2, [pc, #40]	; (8001ce4 <HAL_RCC_ClockConfig+0x1bc>)
 8001cbc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8001cbe:	4b0a      	ldr	r3, [pc, #40]	; (8001ce8 <HAL_RCC_ClockConfig+0x1c0>)
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	4618      	mov	r0, r3
 8001cc4:	f7fe febe 	bl	8000a44 <HAL_InitTick>
 8001cc8:	4603      	mov	r3, r0
 8001cca:	72fb      	strb	r3, [r7, #11]

  return status;
 8001ccc:	7afb      	ldrb	r3, [r7, #11]
}
 8001cce:	4618      	mov	r0, r3
 8001cd0:	3710      	adds	r7, #16
 8001cd2:	46bd      	mov	sp, r7
 8001cd4:	bd80      	pop	{r7, pc}
 8001cd6:	bf00      	nop
 8001cd8:	40022000 	.word	0x40022000
 8001cdc:	40021000 	.word	0x40021000
 8001ce0:	0800684c 	.word	0x0800684c
 8001ce4:	20000000 	.word	0x20000000
 8001ce8:	20000004 	.word	0x20000004

08001cec <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001cec:	b480      	push	{r7}
 8001cee:	b089      	sub	sp, #36	; 0x24
 8001cf0:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8001cf2:	2300      	movs	r3, #0
 8001cf4:	61fb      	str	r3, [r7, #28]
 8001cf6:	2300      	movs	r3, #0
 8001cf8:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001cfa:	4b3d      	ldr	r3, [pc, #244]	; (8001df0 <HAL_RCC_GetSysClockFreq+0x104>)
 8001cfc:	689b      	ldr	r3, [r3, #8]
 8001cfe:	f003 030c 	and.w	r3, r3, #12
 8001d02:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001d04:	4b3a      	ldr	r3, [pc, #232]	; (8001df0 <HAL_RCC_GetSysClockFreq+0x104>)
 8001d06:	68db      	ldr	r3, [r3, #12]
 8001d08:	f003 0303 	and.w	r3, r3, #3
 8001d0c:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001d0e:	693b      	ldr	r3, [r7, #16]
 8001d10:	2b00      	cmp	r3, #0
 8001d12:	d005      	beq.n	8001d20 <HAL_RCC_GetSysClockFreq+0x34>
 8001d14:	693b      	ldr	r3, [r7, #16]
 8001d16:	2b0c      	cmp	r3, #12
 8001d18:	d121      	bne.n	8001d5e <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8001d1a:	68fb      	ldr	r3, [r7, #12]
 8001d1c:	2b01      	cmp	r3, #1
 8001d1e:	d11e      	bne.n	8001d5e <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8001d20:	4b33      	ldr	r3, [pc, #204]	; (8001df0 <HAL_RCC_GetSysClockFreq+0x104>)
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	f003 0308 	and.w	r3, r3, #8
 8001d28:	2b00      	cmp	r3, #0
 8001d2a:	d107      	bne.n	8001d3c <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8001d2c:	4b30      	ldr	r3, [pc, #192]	; (8001df0 <HAL_RCC_GetSysClockFreq+0x104>)
 8001d2e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001d32:	0a1b      	lsrs	r3, r3, #8
 8001d34:	f003 030f 	and.w	r3, r3, #15
 8001d38:	61fb      	str	r3, [r7, #28]
 8001d3a:	e005      	b.n	8001d48 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8001d3c:	4b2c      	ldr	r3, [pc, #176]	; (8001df0 <HAL_RCC_GetSysClockFreq+0x104>)
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	091b      	lsrs	r3, r3, #4
 8001d42:	f003 030f 	and.w	r3, r3, #15
 8001d46:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8001d48:	4a2a      	ldr	r2, [pc, #168]	; (8001df4 <HAL_RCC_GetSysClockFreq+0x108>)
 8001d4a:	69fb      	ldr	r3, [r7, #28]
 8001d4c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001d50:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001d52:	693b      	ldr	r3, [r7, #16]
 8001d54:	2b00      	cmp	r3, #0
 8001d56:	d10d      	bne.n	8001d74 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8001d58:	69fb      	ldr	r3, [r7, #28]
 8001d5a:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001d5c:	e00a      	b.n	8001d74 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8001d5e:	693b      	ldr	r3, [r7, #16]
 8001d60:	2b04      	cmp	r3, #4
 8001d62:	d102      	bne.n	8001d6a <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8001d64:	4b24      	ldr	r3, [pc, #144]	; (8001df8 <HAL_RCC_GetSysClockFreq+0x10c>)
 8001d66:	61bb      	str	r3, [r7, #24]
 8001d68:	e004      	b.n	8001d74 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8001d6a:	693b      	ldr	r3, [r7, #16]
 8001d6c:	2b08      	cmp	r3, #8
 8001d6e:	d101      	bne.n	8001d74 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001d70:	4b22      	ldr	r3, [pc, #136]	; (8001dfc <HAL_RCC_GetSysClockFreq+0x110>)
 8001d72:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8001d74:	693b      	ldr	r3, [r7, #16]
 8001d76:	2b0c      	cmp	r3, #12
 8001d78:	d133      	bne.n	8001de2 <HAL_RCC_GetSysClockFreq+0xf6>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001d7a:	4b1d      	ldr	r3, [pc, #116]	; (8001df0 <HAL_RCC_GetSysClockFreq+0x104>)
 8001d7c:	68db      	ldr	r3, [r3, #12]
 8001d7e:	f003 0303 	and.w	r3, r3, #3
 8001d82:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8001d84:	68bb      	ldr	r3, [r7, #8]
 8001d86:	2b02      	cmp	r3, #2
 8001d88:	d002      	beq.n	8001d90 <HAL_RCC_GetSysClockFreq+0xa4>
 8001d8a:	2b03      	cmp	r3, #3
 8001d8c:	d003      	beq.n	8001d96 <HAL_RCC_GetSysClockFreq+0xaa>
 8001d8e:	e005      	b.n	8001d9c <HAL_RCC_GetSysClockFreq+0xb0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8001d90:	4b19      	ldr	r3, [pc, #100]	; (8001df8 <HAL_RCC_GetSysClockFreq+0x10c>)
 8001d92:	617b      	str	r3, [r7, #20]
      break;
 8001d94:	e005      	b.n	8001da2 <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8001d96:	4b19      	ldr	r3, [pc, #100]	; (8001dfc <HAL_RCC_GetSysClockFreq+0x110>)
 8001d98:	617b      	str	r3, [r7, #20]
      break;
 8001d9a:	e002      	b.n	8001da2 <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8001d9c:	69fb      	ldr	r3, [r7, #28]
 8001d9e:	617b      	str	r3, [r7, #20]
      break;
 8001da0:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001da2:	4b13      	ldr	r3, [pc, #76]	; (8001df0 <HAL_RCC_GetSysClockFreq+0x104>)
 8001da4:	68db      	ldr	r3, [r3, #12]
 8001da6:	091b      	lsrs	r3, r3, #4
 8001da8:	f003 0307 	and.w	r3, r3, #7
 8001dac:	3301      	adds	r3, #1
 8001dae:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8001db0:	4b0f      	ldr	r3, [pc, #60]	; (8001df0 <HAL_RCC_GetSysClockFreq+0x104>)
 8001db2:	68db      	ldr	r3, [r3, #12]
 8001db4:	0a1b      	lsrs	r3, r3, #8
 8001db6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001dba:	697a      	ldr	r2, [r7, #20]
 8001dbc:	fb02 f203 	mul.w	r2, r2, r3
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	fbb2 f3f3 	udiv	r3, r2, r3
 8001dc6:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001dc8:	4b09      	ldr	r3, [pc, #36]	; (8001df0 <HAL_RCC_GetSysClockFreq+0x104>)
 8001dca:	68db      	ldr	r3, [r3, #12]
 8001dcc:	0e5b      	lsrs	r3, r3, #25
 8001dce:	f003 0303 	and.w	r3, r3, #3
 8001dd2:	3301      	adds	r3, #1
 8001dd4:	005b      	lsls	r3, r3, #1
 8001dd6:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8001dd8:	697a      	ldr	r2, [r7, #20]
 8001dda:	683b      	ldr	r3, [r7, #0]
 8001ddc:	fbb2 f3f3 	udiv	r3, r2, r3
 8001de0:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8001de2:	69bb      	ldr	r3, [r7, #24]
}
 8001de4:	4618      	mov	r0, r3
 8001de6:	3724      	adds	r7, #36	; 0x24
 8001de8:	46bd      	mov	sp, r7
 8001dea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dee:	4770      	bx	lr
 8001df0:	40021000 	.word	0x40021000
 8001df4:	08006864 	.word	0x08006864
 8001df8:	00f42400 	.word	0x00f42400
 8001dfc:	007a1200 	.word	0x007a1200

08001e00 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001e00:	b480      	push	{r7}
 8001e02:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001e04:	4b03      	ldr	r3, [pc, #12]	; (8001e14 <HAL_RCC_GetHCLKFreq+0x14>)
 8001e06:	681b      	ldr	r3, [r3, #0]
}
 8001e08:	4618      	mov	r0, r3
 8001e0a:	46bd      	mov	sp, r7
 8001e0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e10:	4770      	bx	lr
 8001e12:	bf00      	nop
 8001e14:	20000000 	.word	0x20000000

08001e18 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001e18:	b580      	push	{r7, lr}
 8001e1a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8001e1c:	f7ff fff0 	bl	8001e00 <HAL_RCC_GetHCLKFreq>
 8001e20:	4601      	mov	r1, r0
 8001e22:	4b06      	ldr	r3, [pc, #24]	; (8001e3c <HAL_RCC_GetPCLK1Freq+0x24>)
 8001e24:	689b      	ldr	r3, [r3, #8]
 8001e26:	0a1b      	lsrs	r3, r3, #8
 8001e28:	f003 0307 	and.w	r3, r3, #7
 8001e2c:	4a04      	ldr	r2, [pc, #16]	; (8001e40 <HAL_RCC_GetPCLK1Freq+0x28>)
 8001e2e:	5cd3      	ldrb	r3, [r2, r3]
 8001e30:	f003 031f 	and.w	r3, r3, #31
 8001e34:	fa21 f303 	lsr.w	r3, r1, r3
}
 8001e38:	4618      	mov	r0, r3
 8001e3a:	bd80      	pop	{r7, pc}
 8001e3c:	40021000 	.word	0x40021000
 8001e40:	0800685c 	.word	0x0800685c

08001e44 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001e44:	b580      	push	{r7, lr}
 8001e46:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8001e48:	f7ff ffda 	bl	8001e00 <HAL_RCC_GetHCLKFreq>
 8001e4c:	4601      	mov	r1, r0
 8001e4e:	4b06      	ldr	r3, [pc, #24]	; (8001e68 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001e50:	689b      	ldr	r3, [r3, #8]
 8001e52:	0adb      	lsrs	r3, r3, #11
 8001e54:	f003 0307 	and.w	r3, r3, #7
 8001e58:	4a04      	ldr	r2, [pc, #16]	; (8001e6c <HAL_RCC_GetPCLK2Freq+0x28>)
 8001e5a:	5cd3      	ldrb	r3, [r2, r3]
 8001e5c:	f003 031f 	and.w	r3, r3, #31
 8001e60:	fa21 f303 	lsr.w	r3, r1, r3
}
 8001e64:	4618      	mov	r0, r3
 8001e66:	bd80      	pop	{r7, pc}
 8001e68:	40021000 	.word	0x40021000
 8001e6c:	0800685c 	.word	0x0800685c

08001e70 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001e70:	b480      	push	{r7}
 8001e72:	b083      	sub	sp, #12
 8001e74:	af00      	add	r7, sp, #0
 8001e76:	6078      	str	r0, [r7, #4]
 8001e78:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	220f      	movs	r2, #15
 8001e7e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 8001e80:	4b12      	ldr	r3, [pc, #72]	; (8001ecc <HAL_RCC_GetClockConfig+0x5c>)
 8001e82:	689b      	ldr	r3, [r3, #8]
 8001e84:	f003 0203 	and.w	r2, r3, #3
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 8001e8c:	4b0f      	ldr	r3, [pc, #60]	; (8001ecc <HAL_RCC_GetClockConfig+0x5c>)
 8001e8e:	689b      	ldr	r3, [r3, #8]
 8001e90:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 8001e98:	4b0c      	ldr	r3, [pc, #48]	; (8001ecc <HAL_RCC_GetClockConfig+0x5c>)
 8001e9a:	689b      	ldr	r3, [r3, #8]
 8001e9c:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 8001ea4:	4b09      	ldr	r3, [pc, #36]	; (8001ecc <HAL_RCC_GetClockConfig+0x5c>)
 8001ea6:	689b      	ldr	r3, [r3, #8]
 8001ea8:	08db      	lsrs	r3, r3, #3
 8001eaa:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 8001eb2:	4b07      	ldr	r3, [pc, #28]	; (8001ed0 <HAL_RCC_GetClockConfig+0x60>)
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	f003 0207 	and.w	r2, r3, #7
 8001eba:	683b      	ldr	r3, [r7, #0]
 8001ebc:	601a      	str	r2, [r3, #0]
}
 8001ebe:	bf00      	nop
 8001ec0:	370c      	adds	r7, #12
 8001ec2:	46bd      	mov	sp, r7
 8001ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ec8:	4770      	bx	lr
 8001eca:	bf00      	nop
 8001ecc:	40021000 	.word	0x40021000
 8001ed0:	40022000 	.word	0x40022000

08001ed4 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8001ed4:	b580      	push	{r7, lr}
 8001ed6:	b086      	sub	sp, #24
 8001ed8:	af00      	add	r7, sp, #0
 8001eda:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8001edc:	2300      	movs	r3, #0
 8001ede:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8001ee0:	4b2a      	ldr	r3, [pc, #168]	; (8001f8c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001ee2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ee4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ee8:	2b00      	cmp	r3, #0
 8001eea:	d003      	beq.n	8001ef4 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8001eec:	f7ff fa08 	bl	8001300 <HAL_PWREx_GetVoltageRange>
 8001ef0:	6178      	str	r0, [r7, #20]
 8001ef2:	e014      	b.n	8001f1e <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8001ef4:	4b25      	ldr	r3, [pc, #148]	; (8001f8c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001ef6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ef8:	4a24      	ldr	r2, [pc, #144]	; (8001f8c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001efa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001efe:	6593      	str	r3, [r2, #88]	; 0x58
 8001f00:	4b22      	ldr	r3, [pc, #136]	; (8001f8c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001f02:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f04:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f08:	60fb      	str	r3, [r7, #12]
 8001f0a:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8001f0c:	f7ff f9f8 	bl	8001300 <HAL_PWREx_GetVoltageRange>
 8001f10:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8001f12:	4b1e      	ldr	r3, [pc, #120]	; (8001f8c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001f14:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f16:	4a1d      	ldr	r2, [pc, #116]	; (8001f8c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001f18:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001f1c:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001f1e:	697b      	ldr	r3, [r7, #20]
 8001f20:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001f24:	d10b      	bne.n	8001f3e <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	2b80      	cmp	r3, #128	; 0x80
 8001f2a:	d919      	bls.n	8001f60 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	2ba0      	cmp	r3, #160	; 0xa0
 8001f30:	d902      	bls.n	8001f38 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8001f32:	2302      	movs	r3, #2
 8001f34:	613b      	str	r3, [r7, #16]
 8001f36:	e013      	b.n	8001f60 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001f38:	2301      	movs	r3, #1
 8001f3a:	613b      	str	r3, [r7, #16]
 8001f3c:	e010      	b.n	8001f60 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	2b80      	cmp	r3, #128	; 0x80
 8001f42:	d902      	bls.n	8001f4a <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8001f44:	2303      	movs	r3, #3
 8001f46:	613b      	str	r3, [r7, #16]
 8001f48:	e00a      	b.n	8001f60 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	2b80      	cmp	r3, #128	; 0x80
 8001f4e:	d102      	bne.n	8001f56 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8001f50:	2302      	movs	r3, #2
 8001f52:	613b      	str	r3, [r7, #16]
 8001f54:	e004      	b.n	8001f60 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	2b70      	cmp	r3, #112	; 0x70
 8001f5a:	d101      	bne.n	8001f60 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001f5c:	2301      	movs	r3, #1
 8001f5e:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8001f60:	4b0b      	ldr	r3, [pc, #44]	; (8001f90 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	f023 0207 	bic.w	r2, r3, #7
 8001f68:	4909      	ldr	r1, [pc, #36]	; (8001f90 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001f6a:	693b      	ldr	r3, [r7, #16]
 8001f6c:	4313      	orrs	r3, r2
 8001f6e:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8001f70:	4b07      	ldr	r3, [pc, #28]	; (8001f90 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	f003 0307 	and.w	r3, r3, #7
 8001f78:	693a      	ldr	r2, [r7, #16]
 8001f7a:	429a      	cmp	r2, r3
 8001f7c:	d001      	beq.n	8001f82 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8001f7e:	2301      	movs	r3, #1
 8001f80:	e000      	b.n	8001f84 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8001f82:	2300      	movs	r3, #0
}
 8001f84:	4618      	mov	r0, r3
 8001f86:	3718      	adds	r7, #24
 8001f88:	46bd      	mov	sp, r7
 8001f8a:	bd80      	pop	{r7, pc}
 8001f8c:	40021000 	.word	0x40021000
 8001f90:	40022000 	.word	0x40022000

08001f94 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001f94:	b580      	push	{r7, lr}
 8001f96:	b086      	sub	sp, #24
 8001f98:	af00      	add	r7, sp, #0
 8001f9a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8001f9c:	2300      	movs	r3, #0
 8001f9e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8001fa0:	2300      	movs	r3, #0
 8001fa2:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001fac:	2b00      	cmp	r3, #0
 8001fae:	d03f      	beq.n	8002030 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8001fb4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001fb8:	d01c      	beq.n	8001ff4 <HAL_RCCEx_PeriphCLKConfig+0x60>
 8001fba:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001fbe:	d802      	bhi.n	8001fc6 <HAL_RCCEx_PeriphCLKConfig+0x32>
 8001fc0:	2b00      	cmp	r3, #0
 8001fc2:	d00e      	beq.n	8001fe2 <HAL_RCCEx_PeriphCLKConfig+0x4e>
 8001fc4:	e01f      	b.n	8002006 <HAL_RCCEx_PeriphCLKConfig+0x72>
 8001fc6:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8001fca:	d003      	beq.n	8001fd4 <HAL_RCCEx_PeriphCLKConfig+0x40>
 8001fcc:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8001fd0:	d01c      	beq.n	800200c <HAL_RCCEx_PeriphCLKConfig+0x78>
 8001fd2:	e018      	b.n	8002006 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8001fd4:	4b85      	ldr	r3, [pc, #532]	; (80021ec <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8001fd6:	68db      	ldr	r3, [r3, #12]
 8001fd8:	4a84      	ldr	r2, [pc, #528]	; (80021ec <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8001fda:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001fde:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8001fe0:	e015      	b.n	800200e <HAL_RCCEx_PeriphCLKConfig+0x7a>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	3304      	adds	r3, #4
 8001fe6:	2100      	movs	r1, #0
 8001fe8:	4618      	mov	r0, r3
 8001fea:	f000 fab9 	bl	8002560 <RCCEx_PLLSAI1_Config>
 8001fee:	4603      	mov	r3, r0
 8001ff0:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8001ff2:	e00c      	b.n	800200e <HAL_RCCEx_PeriphCLKConfig+0x7a>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	3320      	adds	r3, #32
 8001ff8:	2100      	movs	r1, #0
 8001ffa:	4618      	mov	r0, r3
 8001ffc:	f000 fba0 	bl	8002740 <RCCEx_PLLSAI2_Config>
 8002000:	4603      	mov	r3, r0
 8002002:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002004:	e003      	b.n	800200e <HAL_RCCEx_PeriphCLKConfig+0x7a>
#endif /* STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002006:	2301      	movs	r3, #1
 8002008:	74fb      	strb	r3, [r7, #19]
      break;
 800200a:	e000      	b.n	800200e <HAL_RCCEx_PeriphCLKConfig+0x7a>
      break;
 800200c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800200e:	7cfb      	ldrb	r3, [r7, #19]
 8002010:	2b00      	cmp	r3, #0
 8002012:	d10b      	bne.n	800202c <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002014:	4b75      	ldr	r3, [pc, #468]	; (80021ec <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002016:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800201a:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002022:	4972      	ldr	r1, [pc, #456]	; (80021ec <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002024:	4313      	orrs	r3, r2
 8002026:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800202a:	e001      	b.n	8002030 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800202c:	7cfb      	ldrb	r3, [r7, #19]
 800202e:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002038:	2b00      	cmp	r3, #0
 800203a:	d03f      	beq.n	80020bc <HAL_RCCEx_PeriphCLKConfig+0x128>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002040:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002044:	d01c      	beq.n	8002080 <HAL_RCCEx_PeriphCLKConfig+0xec>
 8002046:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800204a:	d802      	bhi.n	8002052 <HAL_RCCEx_PeriphCLKConfig+0xbe>
 800204c:	2b00      	cmp	r3, #0
 800204e:	d00e      	beq.n	800206e <HAL_RCCEx_PeriphCLKConfig+0xda>
 8002050:	e01f      	b.n	8002092 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8002052:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002056:	d003      	beq.n	8002060 <HAL_RCCEx_PeriphCLKConfig+0xcc>
 8002058:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800205c:	d01c      	beq.n	8002098 <HAL_RCCEx_PeriphCLKConfig+0x104>
 800205e:	e018      	b.n	8002092 <HAL_RCCEx_PeriphCLKConfig+0xfe>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002060:	4b62      	ldr	r3, [pc, #392]	; (80021ec <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002062:	68db      	ldr	r3, [r3, #12]
 8002064:	4a61      	ldr	r2, [pc, #388]	; (80021ec <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002066:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800206a:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800206c:	e015      	b.n	800209a <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	3304      	adds	r3, #4
 8002072:	2100      	movs	r1, #0
 8002074:	4618      	mov	r0, r3
 8002076:	f000 fa73 	bl	8002560 <RCCEx_PLLSAI1_Config>
 800207a:	4603      	mov	r3, r0
 800207c:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800207e:	e00c      	b.n	800209a <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	3320      	adds	r3, #32
 8002084:	2100      	movs	r1, #0
 8002086:	4618      	mov	r0, r3
 8002088:	f000 fb5a 	bl	8002740 <RCCEx_PLLSAI2_Config>
 800208c:	4603      	mov	r3, r0
 800208e:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002090:	e003      	b.n	800209a <HAL_RCCEx_PeriphCLKConfig+0x106>
#endif /* STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002092:	2301      	movs	r3, #1
 8002094:	74fb      	strb	r3, [r7, #19]
      break;
 8002096:	e000      	b.n	800209a <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 8002098:	bf00      	nop
    }

    if(ret == HAL_OK)
 800209a:	7cfb      	ldrb	r3, [r7, #19]
 800209c:	2b00      	cmp	r3, #0
 800209e:	d10b      	bne.n	80020b8 <HAL_RCCEx_PeriphCLKConfig+0x124>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80020a0:	4b52      	ldr	r3, [pc, #328]	; (80021ec <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80020a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80020a6:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80020ae:	494f      	ldr	r1, [pc, #316]	; (80021ec <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80020b0:	4313      	orrs	r3, r2
 80020b2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80020b6:	e001      	b.n	80020bc <HAL_RCCEx_PeriphCLKConfig+0x128>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80020b8:	7cfb      	ldrb	r3, [r7, #19]
 80020ba:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80020c4:	2b00      	cmp	r3, #0
 80020c6:	f000 80a0 	beq.w	800220a <HAL_RCCEx_PeriphCLKConfig+0x276>
  {
    FlagStatus       pwrclkchanged = RESET;
 80020ca:	2300      	movs	r3, #0
 80020cc:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80020ce:	4b47      	ldr	r3, [pc, #284]	; (80021ec <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80020d0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80020d2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80020d6:	2b00      	cmp	r3, #0
 80020d8:	d101      	bne.n	80020de <HAL_RCCEx_PeriphCLKConfig+0x14a>
 80020da:	2301      	movs	r3, #1
 80020dc:	e000      	b.n	80020e0 <HAL_RCCEx_PeriphCLKConfig+0x14c>
 80020de:	2300      	movs	r3, #0
 80020e0:	2b00      	cmp	r3, #0
 80020e2:	d00d      	beq.n	8002100 <HAL_RCCEx_PeriphCLKConfig+0x16c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80020e4:	4b41      	ldr	r3, [pc, #260]	; (80021ec <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80020e6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80020e8:	4a40      	ldr	r2, [pc, #256]	; (80021ec <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80020ea:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80020ee:	6593      	str	r3, [r2, #88]	; 0x58
 80020f0:	4b3e      	ldr	r3, [pc, #248]	; (80021ec <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80020f2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80020f4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80020f8:	60bb      	str	r3, [r7, #8]
 80020fa:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80020fc:	2301      	movs	r3, #1
 80020fe:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002100:	4b3b      	ldr	r3, [pc, #236]	; (80021f0 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	4a3a      	ldr	r2, [pc, #232]	; (80021f0 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8002106:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800210a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800210c:	f7fe fe18 	bl	8000d40 <HAL_GetTick>
 8002110:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002112:	e009      	b.n	8002128 <HAL_RCCEx_PeriphCLKConfig+0x194>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002114:	f7fe fe14 	bl	8000d40 <HAL_GetTick>
 8002118:	4602      	mov	r2, r0
 800211a:	68fb      	ldr	r3, [r7, #12]
 800211c:	1ad3      	subs	r3, r2, r3
 800211e:	2b02      	cmp	r3, #2
 8002120:	d902      	bls.n	8002128 <HAL_RCCEx_PeriphCLKConfig+0x194>
      {
        ret = HAL_TIMEOUT;
 8002122:	2303      	movs	r3, #3
 8002124:	74fb      	strb	r3, [r7, #19]
        break;
 8002126:	e005      	b.n	8002134 <HAL_RCCEx_PeriphCLKConfig+0x1a0>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002128:	4b31      	ldr	r3, [pc, #196]	; (80021f0 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002130:	2b00      	cmp	r3, #0
 8002132:	d0ef      	beq.n	8002114 <HAL_RCCEx_PeriphCLKConfig+0x180>
      }
    }

    if(ret == HAL_OK)
 8002134:	7cfb      	ldrb	r3, [r7, #19]
 8002136:	2b00      	cmp	r3, #0
 8002138:	d15c      	bne.n	80021f4 <HAL_RCCEx_PeriphCLKConfig+0x260>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800213a:	4b2c      	ldr	r3, [pc, #176]	; (80021ec <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800213c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002140:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002144:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002146:	697b      	ldr	r3, [r7, #20]
 8002148:	2b00      	cmp	r3, #0
 800214a:	d01f      	beq.n	800218c <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002152:	697a      	ldr	r2, [r7, #20]
 8002154:	429a      	cmp	r2, r3
 8002156:	d019      	beq.n	800218c <HAL_RCCEx_PeriphCLKConfig+0x1f8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002158:	4b24      	ldr	r3, [pc, #144]	; (80021ec <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800215a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800215e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002162:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002164:	4b21      	ldr	r3, [pc, #132]	; (80021ec <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002166:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800216a:	4a20      	ldr	r2, [pc, #128]	; (80021ec <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800216c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002170:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002174:	4b1d      	ldr	r3, [pc, #116]	; (80021ec <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002176:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800217a:	4a1c      	ldr	r2, [pc, #112]	; (80021ec <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800217c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002180:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002184:	4a19      	ldr	r2, [pc, #100]	; (80021ec <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002186:	697b      	ldr	r3, [r7, #20]
 8002188:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800218c:	697b      	ldr	r3, [r7, #20]
 800218e:	f003 0301 	and.w	r3, r3, #1
 8002192:	2b00      	cmp	r3, #0
 8002194:	d016      	beq.n	80021c4 <HAL_RCCEx_PeriphCLKConfig+0x230>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002196:	f7fe fdd3 	bl	8000d40 <HAL_GetTick>
 800219a:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800219c:	e00b      	b.n	80021b6 <HAL_RCCEx_PeriphCLKConfig+0x222>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800219e:	f7fe fdcf 	bl	8000d40 <HAL_GetTick>
 80021a2:	4602      	mov	r2, r0
 80021a4:	68fb      	ldr	r3, [r7, #12]
 80021a6:	1ad3      	subs	r3, r2, r3
 80021a8:	f241 3288 	movw	r2, #5000	; 0x1388
 80021ac:	4293      	cmp	r3, r2
 80021ae:	d902      	bls.n	80021b6 <HAL_RCCEx_PeriphCLKConfig+0x222>
          {
            ret = HAL_TIMEOUT;
 80021b0:	2303      	movs	r3, #3
 80021b2:	74fb      	strb	r3, [r7, #19]
            break;
 80021b4:	e006      	b.n	80021c4 <HAL_RCCEx_PeriphCLKConfig+0x230>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80021b6:	4b0d      	ldr	r3, [pc, #52]	; (80021ec <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80021b8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80021bc:	f003 0302 	and.w	r3, r3, #2
 80021c0:	2b00      	cmp	r3, #0
 80021c2:	d0ec      	beq.n	800219e <HAL_RCCEx_PeriphCLKConfig+0x20a>
          }
        }
      }

      if(ret == HAL_OK)
 80021c4:	7cfb      	ldrb	r3, [r7, #19]
 80021c6:	2b00      	cmp	r3, #0
 80021c8:	d10c      	bne.n	80021e4 <HAL_RCCEx_PeriphCLKConfig+0x250>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80021ca:	4b08      	ldr	r3, [pc, #32]	; (80021ec <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80021cc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80021d0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80021da:	4904      	ldr	r1, [pc, #16]	; (80021ec <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80021dc:	4313      	orrs	r3, r2
 80021de:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80021e2:	e009      	b.n	80021f8 <HAL_RCCEx_PeriphCLKConfig+0x264>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80021e4:	7cfb      	ldrb	r3, [r7, #19]
 80021e6:	74bb      	strb	r3, [r7, #18]
 80021e8:	e006      	b.n	80021f8 <HAL_RCCEx_PeriphCLKConfig+0x264>
 80021ea:	bf00      	nop
 80021ec:	40021000 	.word	0x40021000
 80021f0:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80021f4:	7cfb      	ldrb	r3, [r7, #19]
 80021f6:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80021f8:	7c7b      	ldrb	r3, [r7, #17]
 80021fa:	2b01      	cmp	r3, #1
 80021fc:	d105      	bne.n	800220a <HAL_RCCEx_PeriphCLKConfig+0x276>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80021fe:	4b9e      	ldr	r3, [pc, #632]	; (8002478 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002200:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002202:	4a9d      	ldr	r2, [pc, #628]	; (8002478 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002204:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002208:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	f003 0301 	and.w	r3, r3, #1
 8002212:	2b00      	cmp	r3, #0
 8002214:	d00a      	beq.n	800222c <HAL_RCCEx_PeriphCLKConfig+0x298>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002216:	4b98      	ldr	r3, [pc, #608]	; (8002478 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002218:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800221c:	f023 0203 	bic.w	r2, r3, #3
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002224:	4994      	ldr	r1, [pc, #592]	; (8002478 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002226:	4313      	orrs	r3, r2
 8002228:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	f003 0302 	and.w	r3, r3, #2
 8002234:	2b00      	cmp	r3, #0
 8002236:	d00a      	beq.n	800224e <HAL_RCCEx_PeriphCLKConfig+0x2ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002238:	4b8f      	ldr	r3, [pc, #572]	; (8002478 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800223a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800223e:	f023 020c 	bic.w	r2, r3, #12
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002246:	498c      	ldr	r1, [pc, #560]	; (8002478 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002248:	4313      	orrs	r3, r2
 800224a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	f003 0304 	and.w	r3, r3, #4
 8002256:	2b00      	cmp	r3, #0
 8002258:	d00a      	beq.n	8002270 <HAL_RCCEx_PeriphCLKConfig+0x2dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800225a:	4b87      	ldr	r3, [pc, #540]	; (8002478 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800225c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002260:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002268:	4983      	ldr	r1, [pc, #524]	; (8002478 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800226a:	4313      	orrs	r3, r2
 800226c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	f003 0308 	and.w	r3, r3, #8
 8002278:	2b00      	cmp	r3, #0
 800227a:	d00a      	beq.n	8002292 <HAL_RCCEx_PeriphCLKConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800227c:	4b7e      	ldr	r3, [pc, #504]	; (8002478 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800227e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002282:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800228a:	497b      	ldr	r1, [pc, #492]	; (8002478 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800228c:	4313      	orrs	r3, r2
 800228e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	f003 0310 	and.w	r3, r3, #16
 800229a:	2b00      	cmp	r3, #0
 800229c:	d00a      	beq.n	80022b4 <HAL_RCCEx_PeriphCLKConfig+0x320>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800229e:	4b76      	ldr	r3, [pc, #472]	; (8002478 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80022a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80022a4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80022ac:	4972      	ldr	r1, [pc, #456]	; (8002478 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80022ae:	4313      	orrs	r3, r2
 80022b0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	f003 0320 	and.w	r3, r3, #32
 80022bc:	2b00      	cmp	r3, #0
 80022be:	d00a      	beq.n	80022d6 <HAL_RCCEx_PeriphCLKConfig+0x342>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80022c0:	4b6d      	ldr	r3, [pc, #436]	; (8002478 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80022c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80022c6:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80022ce:	496a      	ldr	r1, [pc, #424]	; (8002478 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80022d0:	4313      	orrs	r3, r2
 80022d2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80022de:	2b00      	cmp	r3, #0
 80022e0:	d00a      	beq.n	80022f8 <HAL_RCCEx_PeriphCLKConfig+0x364>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80022e2:	4b65      	ldr	r3, [pc, #404]	; (8002478 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80022e4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80022e8:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80022f0:	4961      	ldr	r1, [pc, #388]	; (8002478 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80022f2:	4313      	orrs	r3, r2
 80022f4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002300:	2b00      	cmp	r3, #0
 8002302:	d00a      	beq.n	800231a <HAL_RCCEx_PeriphCLKConfig+0x386>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002304:	4b5c      	ldr	r3, [pc, #368]	; (8002478 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002306:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800230a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002312:	4959      	ldr	r1, [pc, #356]	; (8002478 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002314:	4313      	orrs	r3, r2
 8002316:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002322:	2b00      	cmp	r3, #0
 8002324:	d00a      	beq.n	800233c <HAL_RCCEx_PeriphCLKConfig+0x3a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002326:	4b54      	ldr	r3, [pc, #336]	; (8002478 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002328:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800232c:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002334:	4950      	ldr	r1, [pc, #320]	; (8002478 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002336:	4313      	orrs	r3, r2
 8002338:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002344:	2b00      	cmp	r3, #0
 8002346:	d00a      	beq.n	800235e <HAL_RCCEx_PeriphCLKConfig+0x3ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002348:	4b4b      	ldr	r3, [pc, #300]	; (8002478 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800234a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800234e:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002356:	4948      	ldr	r1, [pc, #288]	; (8002478 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002358:	4313      	orrs	r3, r2
 800235a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002366:	2b00      	cmp	r3, #0
 8002368:	d00a      	beq.n	8002380 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800236a:	4b43      	ldr	r3, [pc, #268]	; (8002478 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800236c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002370:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002378:	493f      	ldr	r1, [pc, #252]	; (8002478 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800237a:	4313      	orrs	r3, r2
 800237c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002388:	2b00      	cmp	r3, #0
 800238a:	d028      	beq.n	80023de <HAL_RCCEx_PeriphCLKConfig+0x44a>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800238c:	4b3a      	ldr	r3, [pc, #232]	; (8002478 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800238e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002392:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800239a:	4937      	ldr	r1, [pc, #220]	; (8002478 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800239c:	4313      	orrs	r3, r2
 800239e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80023a6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80023aa:	d106      	bne.n	80023ba <HAL_RCCEx_PeriphCLKConfig+0x426>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80023ac:	4b32      	ldr	r3, [pc, #200]	; (8002478 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80023ae:	68db      	ldr	r3, [r3, #12]
 80023b0:	4a31      	ldr	r2, [pc, #196]	; (8002478 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80023b2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80023b6:	60d3      	str	r3, [r2, #12]
 80023b8:	e011      	b.n	80023de <HAL_RCCEx_PeriphCLKConfig+0x44a>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80023be:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80023c2:	d10c      	bne.n	80023de <HAL_RCCEx_PeriphCLKConfig+0x44a>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	3304      	adds	r3, #4
 80023c8:	2101      	movs	r1, #1
 80023ca:	4618      	mov	r0, r3
 80023cc:	f000 f8c8 	bl	8002560 <RCCEx_PLLSAI1_Config>
 80023d0:	4603      	mov	r3, r0
 80023d2:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 80023d4:	7cfb      	ldrb	r3, [r7, #19]
 80023d6:	2b00      	cmp	r3, #0
 80023d8:	d001      	beq.n	80023de <HAL_RCCEx_PeriphCLKConfig+0x44a>
        {
          /* set overall return value */
          status = ret;
 80023da:	7cfb      	ldrb	r3, [r7, #19]
 80023dc:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80023e6:	2b00      	cmp	r3, #0
 80023e8:	d028      	beq.n	800243c <HAL_RCCEx_PeriphCLKConfig+0x4a8>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80023ea:	4b23      	ldr	r3, [pc, #140]	; (8002478 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80023ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80023f0:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80023f8:	491f      	ldr	r1, [pc, #124]	; (8002478 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80023fa:	4313      	orrs	r3, r2
 80023fc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002404:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002408:	d106      	bne.n	8002418 <HAL_RCCEx_PeriphCLKConfig+0x484>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800240a:	4b1b      	ldr	r3, [pc, #108]	; (8002478 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800240c:	68db      	ldr	r3, [r3, #12]
 800240e:	4a1a      	ldr	r2, [pc, #104]	; (8002478 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002410:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002414:	60d3      	str	r3, [r2, #12]
 8002416:	e011      	b.n	800243c <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800241c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002420:	d10c      	bne.n	800243c <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	3304      	adds	r3, #4
 8002426:	2101      	movs	r1, #1
 8002428:	4618      	mov	r0, r3
 800242a:	f000 f899 	bl	8002560 <RCCEx_PLLSAI1_Config>
 800242e:	4603      	mov	r3, r0
 8002430:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002432:	7cfb      	ldrb	r3, [r7, #19]
 8002434:	2b00      	cmp	r3, #0
 8002436:	d001      	beq.n	800243c <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* set overall return value */
        status = ret;
 8002438:	7cfb      	ldrb	r3, [r7, #19]
 800243a:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002444:	2b00      	cmp	r3, #0
 8002446:	d02b      	beq.n	80024a0 <HAL_RCCEx_PeriphCLKConfig+0x50c>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002448:	4b0b      	ldr	r3, [pc, #44]	; (8002478 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800244a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800244e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002456:	4908      	ldr	r1, [pc, #32]	; (8002478 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002458:	4313      	orrs	r3, r2
 800245a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002462:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002466:	d109      	bne.n	800247c <HAL_RCCEx_PeriphCLKConfig+0x4e8>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002468:	4b03      	ldr	r3, [pc, #12]	; (8002478 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800246a:	68db      	ldr	r3, [r3, #12]
 800246c:	4a02      	ldr	r2, [pc, #8]	; (8002478 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800246e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002472:	60d3      	str	r3, [r2, #12]
 8002474:	e014      	b.n	80024a0 <HAL_RCCEx_PeriphCLKConfig+0x50c>
 8002476:	bf00      	nop
 8002478:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002480:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002484:	d10c      	bne.n	80024a0 <HAL_RCCEx_PeriphCLKConfig+0x50c>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	3304      	adds	r3, #4
 800248a:	2101      	movs	r1, #1
 800248c:	4618      	mov	r0, r3
 800248e:	f000 f867 	bl	8002560 <RCCEx_PLLSAI1_Config>
 8002492:	4603      	mov	r3, r0
 8002494:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002496:	7cfb      	ldrb	r3, [r7, #19]
 8002498:	2b00      	cmp	r3, #0
 800249a:	d001      	beq.n	80024a0 <HAL_RCCEx_PeriphCLKConfig+0x50c>
      {
        /* set overall return value */
        status = ret;
 800249c:	7cfb      	ldrb	r3, [r7, #19]
 800249e:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80024a8:	2b00      	cmp	r3, #0
 80024aa:	d02f      	beq.n	800250c <HAL_RCCEx_PeriphCLKConfig+0x578>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80024ac:	4b2b      	ldr	r3, [pc, #172]	; (800255c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80024ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80024b2:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80024ba:	4928      	ldr	r1, [pc, #160]	; (800255c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80024bc:	4313      	orrs	r3, r2
 80024be:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80024c6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80024ca:	d10d      	bne.n	80024e8 <HAL_RCCEx_PeriphCLKConfig+0x554>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	3304      	adds	r3, #4
 80024d0:	2102      	movs	r1, #2
 80024d2:	4618      	mov	r0, r3
 80024d4:	f000 f844 	bl	8002560 <RCCEx_PLLSAI1_Config>
 80024d8:	4603      	mov	r3, r0
 80024da:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80024dc:	7cfb      	ldrb	r3, [r7, #19]
 80024de:	2b00      	cmp	r3, #0
 80024e0:	d014      	beq.n	800250c <HAL_RCCEx_PeriphCLKConfig+0x578>
      {
        /* set overall return value */
        status = ret;
 80024e2:	7cfb      	ldrb	r3, [r7, #19]
 80024e4:	74bb      	strb	r3, [r7, #18]
 80024e6:	e011      	b.n	800250c <HAL_RCCEx_PeriphCLKConfig+0x578>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80024ec:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80024f0:	d10c      	bne.n	800250c <HAL_RCCEx_PeriphCLKConfig+0x578>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	3320      	adds	r3, #32
 80024f6:	2102      	movs	r1, #2
 80024f8:	4618      	mov	r0, r3
 80024fa:	f000 f921 	bl	8002740 <RCCEx_PLLSAI2_Config>
 80024fe:	4603      	mov	r3, r0
 8002500:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002502:	7cfb      	ldrb	r3, [r7, #19]
 8002504:	2b00      	cmp	r3, #0
 8002506:	d001      	beq.n	800250c <HAL_RCCEx_PeriphCLKConfig+0x578>
      {
        /* set overall return value */
        status = ret;
 8002508:	7cfb      	ldrb	r3, [r7, #19]
 800250a:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002514:	2b00      	cmp	r3, #0
 8002516:	d00a      	beq.n	800252e <HAL_RCCEx_PeriphCLKConfig+0x59a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8002518:	4b10      	ldr	r3, [pc, #64]	; (800255c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800251a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800251e:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002526:	490d      	ldr	r1, [pc, #52]	; (800255c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002528:	4313      	orrs	r3, r2
 800252a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002536:	2b00      	cmp	r3, #0
 8002538:	d00b      	beq.n	8002552 <HAL_RCCEx_PeriphCLKConfig+0x5be>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800253a:	4b08      	ldr	r3, [pc, #32]	; (800255c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800253c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002540:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800254a:	4904      	ldr	r1, [pc, #16]	; (800255c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800254c:	4313      	orrs	r3, r2
 800254e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8002552:	7cbb      	ldrb	r3, [r7, #18]
}
 8002554:	4618      	mov	r0, r3
 8002556:	3718      	adds	r7, #24
 8002558:	46bd      	mov	sp, r7
 800255a:	bd80      	pop	{r7, pc}
 800255c:	40021000 	.word	0x40021000

08002560 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8002560:	b580      	push	{r7, lr}
 8002562:	b084      	sub	sp, #16
 8002564:	af00      	add	r7, sp, #0
 8002566:	6078      	str	r0, [r7, #4]
 8002568:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800256a:	2300      	movs	r3, #0
 800256c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800256e:	4b73      	ldr	r3, [pc, #460]	; (800273c <RCCEx_PLLSAI1_Config+0x1dc>)
 8002570:	68db      	ldr	r3, [r3, #12]
 8002572:	f003 0303 	and.w	r3, r3, #3
 8002576:	2b00      	cmp	r3, #0
 8002578:	d018      	beq.n	80025ac <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 800257a:	4b70      	ldr	r3, [pc, #448]	; (800273c <RCCEx_PLLSAI1_Config+0x1dc>)
 800257c:	68db      	ldr	r3, [r3, #12]
 800257e:	f003 0203 	and.w	r2, r3, #3
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	429a      	cmp	r2, r3
 8002588:	d10d      	bne.n	80025a6 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	681b      	ldr	r3, [r3, #0]
       ||
 800258e:	2b00      	cmp	r3, #0
 8002590:	d009      	beq.n	80025a6 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8002592:	4b6a      	ldr	r3, [pc, #424]	; (800273c <RCCEx_PLLSAI1_Config+0x1dc>)
 8002594:	68db      	ldr	r3, [r3, #12]
 8002596:	091b      	lsrs	r3, r3, #4
 8002598:	f003 0307 	and.w	r3, r3, #7
 800259c:	1c5a      	adds	r2, r3, #1
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	685b      	ldr	r3, [r3, #4]
       ||
 80025a2:	429a      	cmp	r2, r3
 80025a4:	d044      	beq.n	8002630 <RCCEx_PLLSAI1_Config+0xd0>
#endif
      )
    {
      status = HAL_ERROR;
 80025a6:	2301      	movs	r3, #1
 80025a8:	73fb      	strb	r3, [r7, #15]
 80025aa:	e041      	b.n	8002630 <RCCEx_PLLSAI1_Config+0xd0>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	2b02      	cmp	r3, #2
 80025b2:	d00c      	beq.n	80025ce <RCCEx_PLLSAI1_Config+0x6e>
 80025b4:	2b03      	cmp	r3, #3
 80025b6:	d013      	beq.n	80025e0 <RCCEx_PLLSAI1_Config+0x80>
 80025b8:	2b01      	cmp	r3, #1
 80025ba:	d120      	bne.n	80025fe <RCCEx_PLLSAI1_Config+0x9e>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80025bc:	4b5f      	ldr	r3, [pc, #380]	; (800273c <RCCEx_PLLSAI1_Config+0x1dc>)
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	f003 0302 	and.w	r3, r3, #2
 80025c4:	2b00      	cmp	r3, #0
 80025c6:	d11d      	bne.n	8002604 <RCCEx_PLLSAI1_Config+0xa4>
      {
        status = HAL_ERROR;
 80025c8:	2301      	movs	r3, #1
 80025ca:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80025cc:	e01a      	b.n	8002604 <RCCEx_PLLSAI1_Config+0xa4>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80025ce:	4b5b      	ldr	r3, [pc, #364]	; (800273c <RCCEx_PLLSAI1_Config+0x1dc>)
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80025d6:	2b00      	cmp	r3, #0
 80025d8:	d116      	bne.n	8002608 <RCCEx_PLLSAI1_Config+0xa8>
      {
        status = HAL_ERROR;
 80025da:	2301      	movs	r3, #1
 80025dc:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80025de:	e013      	b.n	8002608 <RCCEx_PLLSAI1_Config+0xa8>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80025e0:	4b56      	ldr	r3, [pc, #344]	; (800273c <RCCEx_PLLSAI1_Config+0x1dc>)
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80025e8:	2b00      	cmp	r3, #0
 80025ea:	d10f      	bne.n	800260c <RCCEx_PLLSAI1_Config+0xac>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80025ec:	4b53      	ldr	r3, [pc, #332]	; (800273c <RCCEx_PLLSAI1_Config+0x1dc>)
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80025f4:	2b00      	cmp	r3, #0
 80025f6:	d109      	bne.n	800260c <RCCEx_PLLSAI1_Config+0xac>
        {
          status = HAL_ERROR;
 80025f8:	2301      	movs	r3, #1
 80025fa:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80025fc:	e006      	b.n	800260c <RCCEx_PLLSAI1_Config+0xac>
    default:
      status = HAL_ERROR;
 80025fe:	2301      	movs	r3, #1
 8002600:	73fb      	strb	r3, [r7, #15]
      break;
 8002602:	e004      	b.n	800260e <RCCEx_PLLSAI1_Config+0xae>
      break;
 8002604:	bf00      	nop
 8002606:	e002      	b.n	800260e <RCCEx_PLLSAI1_Config+0xae>
      break;
 8002608:	bf00      	nop
 800260a:	e000      	b.n	800260e <RCCEx_PLLSAI1_Config+0xae>
      break;
 800260c:	bf00      	nop
    }

    if(status == HAL_OK)
 800260e:	7bfb      	ldrb	r3, [r7, #15]
 8002610:	2b00      	cmp	r3, #0
 8002612:	d10d      	bne.n	8002630 <RCCEx_PLLSAI1_Config+0xd0>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8002614:	4b49      	ldr	r3, [pc, #292]	; (800273c <RCCEx_PLLSAI1_Config+0x1dc>)
 8002616:	68db      	ldr	r3, [r3, #12]
 8002618:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	6819      	ldr	r1, [r3, #0]
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	685b      	ldr	r3, [r3, #4]
 8002624:	3b01      	subs	r3, #1
 8002626:	011b      	lsls	r3, r3, #4
 8002628:	430b      	orrs	r3, r1
 800262a:	4944      	ldr	r1, [pc, #272]	; (800273c <RCCEx_PLLSAI1_Config+0x1dc>)
 800262c:	4313      	orrs	r3, r2
 800262e:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8002630:	7bfb      	ldrb	r3, [r7, #15]
 8002632:	2b00      	cmp	r3, #0
 8002634:	d17d      	bne.n	8002732 <RCCEx_PLLSAI1_Config+0x1d2>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8002636:	4b41      	ldr	r3, [pc, #260]	; (800273c <RCCEx_PLLSAI1_Config+0x1dc>)
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	4a40      	ldr	r2, [pc, #256]	; (800273c <RCCEx_PLLSAI1_Config+0x1dc>)
 800263c:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8002640:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002642:	f7fe fb7d 	bl	8000d40 <HAL_GetTick>
 8002646:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002648:	e009      	b.n	800265e <RCCEx_PLLSAI1_Config+0xfe>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800264a:	f7fe fb79 	bl	8000d40 <HAL_GetTick>
 800264e:	4602      	mov	r2, r0
 8002650:	68bb      	ldr	r3, [r7, #8]
 8002652:	1ad3      	subs	r3, r2, r3
 8002654:	2b02      	cmp	r3, #2
 8002656:	d902      	bls.n	800265e <RCCEx_PLLSAI1_Config+0xfe>
      {
        status = HAL_TIMEOUT;
 8002658:	2303      	movs	r3, #3
 800265a:	73fb      	strb	r3, [r7, #15]
        break;
 800265c:	e005      	b.n	800266a <RCCEx_PLLSAI1_Config+0x10a>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800265e:	4b37      	ldr	r3, [pc, #220]	; (800273c <RCCEx_PLLSAI1_Config+0x1dc>)
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002666:	2b00      	cmp	r3, #0
 8002668:	d1ef      	bne.n	800264a <RCCEx_PLLSAI1_Config+0xea>
      }
    }

    if(status == HAL_OK)
 800266a:	7bfb      	ldrb	r3, [r7, #15]
 800266c:	2b00      	cmp	r3, #0
 800266e:	d160      	bne.n	8002732 <RCCEx_PLLSAI1_Config+0x1d2>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8002670:	683b      	ldr	r3, [r7, #0]
 8002672:	2b00      	cmp	r3, #0
 8002674:	d111      	bne.n	800269a <RCCEx_PLLSAI1_Config+0x13a>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002676:	4b31      	ldr	r3, [pc, #196]	; (800273c <RCCEx_PLLSAI1_Config+0x1dc>)
 8002678:	691b      	ldr	r3, [r3, #16]
 800267a:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 800267e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002682:	687a      	ldr	r2, [r7, #4]
 8002684:	6892      	ldr	r2, [r2, #8]
 8002686:	0211      	lsls	r1, r2, #8
 8002688:	687a      	ldr	r2, [r7, #4]
 800268a:	68d2      	ldr	r2, [r2, #12]
 800268c:	0912      	lsrs	r2, r2, #4
 800268e:	0452      	lsls	r2, r2, #17
 8002690:	430a      	orrs	r2, r1
 8002692:	492a      	ldr	r1, [pc, #168]	; (800273c <RCCEx_PLLSAI1_Config+0x1dc>)
 8002694:	4313      	orrs	r3, r2
 8002696:	610b      	str	r3, [r1, #16]
 8002698:	e027      	b.n	80026ea <RCCEx_PLLSAI1_Config+0x18a>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 800269a:	683b      	ldr	r3, [r7, #0]
 800269c:	2b01      	cmp	r3, #1
 800269e:	d112      	bne.n	80026c6 <RCCEx_PLLSAI1_Config+0x166>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80026a0:	4b26      	ldr	r3, [pc, #152]	; (800273c <RCCEx_PLLSAI1_Config+0x1dc>)
 80026a2:	691b      	ldr	r3, [r3, #16]
 80026a4:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 80026a8:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80026ac:	687a      	ldr	r2, [r7, #4]
 80026ae:	6892      	ldr	r2, [r2, #8]
 80026b0:	0211      	lsls	r1, r2, #8
 80026b2:	687a      	ldr	r2, [r7, #4]
 80026b4:	6912      	ldr	r2, [r2, #16]
 80026b6:	0852      	lsrs	r2, r2, #1
 80026b8:	3a01      	subs	r2, #1
 80026ba:	0552      	lsls	r2, r2, #21
 80026bc:	430a      	orrs	r2, r1
 80026be:	491f      	ldr	r1, [pc, #124]	; (800273c <RCCEx_PLLSAI1_Config+0x1dc>)
 80026c0:	4313      	orrs	r3, r2
 80026c2:	610b      	str	r3, [r1, #16]
 80026c4:	e011      	b.n	80026ea <RCCEx_PLLSAI1_Config+0x18a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80026c6:	4b1d      	ldr	r3, [pc, #116]	; (800273c <RCCEx_PLLSAI1_Config+0x1dc>)
 80026c8:	691b      	ldr	r3, [r3, #16]
 80026ca:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80026ce:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80026d2:	687a      	ldr	r2, [r7, #4]
 80026d4:	6892      	ldr	r2, [r2, #8]
 80026d6:	0211      	lsls	r1, r2, #8
 80026d8:	687a      	ldr	r2, [r7, #4]
 80026da:	6952      	ldr	r2, [r2, #20]
 80026dc:	0852      	lsrs	r2, r2, #1
 80026de:	3a01      	subs	r2, #1
 80026e0:	0652      	lsls	r2, r2, #25
 80026e2:	430a      	orrs	r2, r1
 80026e4:	4915      	ldr	r1, [pc, #84]	; (800273c <RCCEx_PLLSAI1_Config+0x1dc>)
 80026e6:	4313      	orrs	r3, r2
 80026e8:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80026ea:	4b14      	ldr	r3, [pc, #80]	; (800273c <RCCEx_PLLSAI1_Config+0x1dc>)
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	4a13      	ldr	r2, [pc, #76]	; (800273c <RCCEx_PLLSAI1_Config+0x1dc>)
 80026f0:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80026f4:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80026f6:	f7fe fb23 	bl	8000d40 <HAL_GetTick>
 80026fa:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80026fc:	e009      	b.n	8002712 <RCCEx_PLLSAI1_Config+0x1b2>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80026fe:	f7fe fb1f 	bl	8000d40 <HAL_GetTick>
 8002702:	4602      	mov	r2, r0
 8002704:	68bb      	ldr	r3, [r7, #8]
 8002706:	1ad3      	subs	r3, r2, r3
 8002708:	2b02      	cmp	r3, #2
 800270a:	d902      	bls.n	8002712 <RCCEx_PLLSAI1_Config+0x1b2>
        {
          status = HAL_TIMEOUT;
 800270c:	2303      	movs	r3, #3
 800270e:	73fb      	strb	r3, [r7, #15]
          break;
 8002710:	e005      	b.n	800271e <RCCEx_PLLSAI1_Config+0x1be>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002712:	4b0a      	ldr	r3, [pc, #40]	; (800273c <RCCEx_PLLSAI1_Config+0x1dc>)
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800271a:	2b00      	cmp	r3, #0
 800271c:	d0ef      	beq.n	80026fe <RCCEx_PLLSAI1_Config+0x19e>
        }
      }

      if(status == HAL_OK)
 800271e:	7bfb      	ldrb	r3, [r7, #15]
 8002720:	2b00      	cmp	r3, #0
 8002722:	d106      	bne.n	8002732 <RCCEx_PLLSAI1_Config+0x1d2>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8002724:	4b05      	ldr	r3, [pc, #20]	; (800273c <RCCEx_PLLSAI1_Config+0x1dc>)
 8002726:	691a      	ldr	r2, [r3, #16]
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	699b      	ldr	r3, [r3, #24]
 800272c:	4903      	ldr	r1, [pc, #12]	; (800273c <RCCEx_PLLSAI1_Config+0x1dc>)
 800272e:	4313      	orrs	r3, r2
 8002730:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8002732:	7bfb      	ldrb	r3, [r7, #15]
}
 8002734:	4618      	mov	r0, r3
 8002736:	3710      	adds	r7, #16
 8002738:	46bd      	mov	sp, r7
 800273a:	bd80      	pop	{r7, pc}
 800273c:	40021000 	.word	0x40021000

08002740 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8002740:	b580      	push	{r7, lr}
 8002742:	b084      	sub	sp, #16
 8002744:	af00      	add	r7, sp, #0
 8002746:	6078      	str	r0, [r7, #4]
 8002748:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800274a:	2300      	movs	r3, #0
 800274c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800274e:	4b68      	ldr	r3, [pc, #416]	; (80028f0 <RCCEx_PLLSAI2_Config+0x1b0>)
 8002750:	68db      	ldr	r3, [r3, #12]
 8002752:	f003 0303 	and.w	r3, r3, #3
 8002756:	2b00      	cmp	r3, #0
 8002758:	d018      	beq.n	800278c <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 800275a:	4b65      	ldr	r3, [pc, #404]	; (80028f0 <RCCEx_PLLSAI2_Config+0x1b0>)
 800275c:	68db      	ldr	r3, [r3, #12]
 800275e:	f003 0203 	and.w	r2, r3, #3
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	429a      	cmp	r2, r3
 8002768:	d10d      	bne.n	8002786 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	681b      	ldr	r3, [r3, #0]
       ||
 800276e:	2b00      	cmp	r3, #0
 8002770:	d009      	beq.n	8002786 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8002772:	4b5f      	ldr	r3, [pc, #380]	; (80028f0 <RCCEx_PLLSAI2_Config+0x1b0>)
 8002774:	68db      	ldr	r3, [r3, #12]
 8002776:	091b      	lsrs	r3, r3, #4
 8002778:	f003 0307 	and.w	r3, r3, #7
 800277c:	1c5a      	adds	r2, r3, #1
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	685b      	ldr	r3, [r3, #4]
       ||
 8002782:	429a      	cmp	r2, r3
 8002784:	d044      	beq.n	8002810 <RCCEx_PLLSAI2_Config+0xd0>
#endif
      )
    {
      status = HAL_ERROR;
 8002786:	2301      	movs	r3, #1
 8002788:	73fb      	strb	r3, [r7, #15]
 800278a:	e041      	b.n	8002810 <RCCEx_PLLSAI2_Config+0xd0>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	2b02      	cmp	r3, #2
 8002792:	d00c      	beq.n	80027ae <RCCEx_PLLSAI2_Config+0x6e>
 8002794:	2b03      	cmp	r3, #3
 8002796:	d013      	beq.n	80027c0 <RCCEx_PLLSAI2_Config+0x80>
 8002798:	2b01      	cmp	r3, #1
 800279a:	d120      	bne.n	80027de <RCCEx_PLLSAI2_Config+0x9e>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800279c:	4b54      	ldr	r3, [pc, #336]	; (80028f0 <RCCEx_PLLSAI2_Config+0x1b0>)
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	f003 0302 	and.w	r3, r3, #2
 80027a4:	2b00      	cmp	r3, #0
 80027a6:	d11d      	bne.n	80027e4 <RCCEx_PLLSAI2_Config+0xa4>
      {
        status = HAL_ERROR;
 80027a8:	2301      	movs	r3, #1
 80027aa:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80027ac:	e01a      	b.n	80027e4 <RCCEx_PLLSAI2_Config+0xa4>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80027ae:	4b50      	ldr	r3, [pc, #320]	; (80028f0 <RCCEx_PLLSAI2_Config+0x1b0>)
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80027b6:	2b00      	cmp	r3, #0
 80027b8:	d116      	bne.n	80027e8 <RCCEx_PLLSAI2_Config+0xa8>
      {
        status = HAL_ERROR;
 80027ba:	2301      	movs	r3, #1
 80027bc:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80027be:	e013      	b.n	80027e8 <RCCEx_PLLSAI2_Config+0xa8>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80027c0:	4b4b      	ldr	r3, [pc, #300]	; (80028f0 <RCCEx_PLLSAI2_Config+0x1b0>)
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80027c8:	2b00      	cmp	r3, #0
 80027ca:	d10f      	bne.n	80027ec <RCCEx_PLLSAI2_Config+0xac>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80027cc:	4b48      	ldr	r3, [pc, #288]	; (80028f0 <RCCEx_PLLSAI2_Config+0x1b0>)
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80027d4:	2b00      	cmp	r3, #0
 80027d6:	d109      	bne.n	80027ec <RCCEx_PLLSAI2_Config+0xac>
        {
          status = HAL_ERROR;
 80027d8:	2301      	movs	r3, #1
 80027da:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80027dc:	e006      	b.n	80027ec <RCCEx_PLLSAI2_Config+0xac>
    default:
      status = HAL_ERROR;
 80027de:	2301      	movs	r3, #1
 80027e0:	73fb      	strb	r3, [r7, #15]
      break;
 80027e2:	e004      	b.n	80027ee <RCCEx_PLLSAI2_Config+0xae>
      break;
 80027e4:	bf00      	nop
 80027e6:	e002      	b.n	80027ee <RCCEx_PLLSAI2_Config+0xae>
      break;
 80027e8:	bf00      	nop
 80027ea:	e000      	b.n	80027ee <RCCEx_PLLSAI2_Config+0xae>
      break;
 80027ec:	bf00      	nop
    }

    if(status == HAL_OK)
 80027ee:	7bfb      	ldrb	r3, [r7, #15]
 80027f0:	2b00      	cmp	r3, #0
 80027f2:	d10d      	bne.n	8002810 <RCCEx_PLLSAI2_Config+0xd0>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80027f4:	4b3e      	ldr	r3, [pc, #248]	; (80028f0 <RCCEx_PLLSAI2_Config+0x1b0>)
 80027f6:	68db      	ldr	r3, [r3, #12]
 80027f8:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	6819      	ldr	r1, [r3, #0]
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	685b      	ldr	r3, [r3, #4]
 8002804:	3b01      	subs	r3, #1
 8002806:	011b      	lsls	r3, r3, #4
 8002808:	430b      	orrs	r3, r1
 800280a:	4939      	ldr	r1, [pc, #228]	; (80028f0 <RCCEx_PLLSAI2_Config+0x1b0>)
 800280c:	4313      	orrs	r3, r2
 800280e:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8002810:	7bfb      	ldrb	r3, [r7, #15]
 8002812:	2b00      	cmp	r3, #0
 8002814:	d167      	bne.n	80028e6 <RCCEx_PLLSAI2_Config+0x1a6>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8002816:	4b36      	ldr	r3, [pc, #216]	; (80028f0 <RCCEx_PLLSAI2_Config+0x1b0>)
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	4a35      	ldr	r2, [pc, #212]	; (80028f0 <RCCEx_PLLSAI2_Config+0x1b0>)
 800281c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002820:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002822:	f7fe fa8d 	bl	8000d40 <HAL_GetTick>
 8002826:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8002828:	e009      	b.n	800283e <RCCEx_PLLSAI2_Config+0xfe>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 800282a:	f7fe fa89 	bl	8000d40 <HAL_GetTick>
 800282e:	4602      	mov	r2, r0
 8002830:	68bb      	ldr	r3, [r7, #8]
 8002832:	1ad3      	subs	r3, r2, r3
 8002834:	2b02      	cmp	r3, #2
 8002836:	d902      	bls.n	800283e <RCCEx_PLLSAI2_Config+0xfe>
      {
        status = HAL_TIMEOUT;
 8002838:	2303      	movs	r3, #3
 800283a:	73fb      	strb	r3, [r7, #15]
        break;
 800283c:	e005      	b.n	800284a <RCCEx_PLLSAI2_Config+0x10a>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800283e:	4b2c      	ldr	r3, [pc, #176]	; (80028f0 <RCCEx_PLLSAI2_Config+0x1b0>)
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002846:	2b00      	cmp	r3, #0
 8002848:	d1ef      	bne.n	800282a <RCCEx_PLLSAI2_Config+0xea>
      }
    }

    if(status == HAL_OK)
 800284a:	7bfb      	ldrb	r3, [r7, #15]
 800284c:	2b00      	cmp	r3, #0
 800284e:	d14a      	bne.n	80028e6 <RCCEx_PLLSAI2_Config+0x1a6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8002850:	683b      	ldr	r3, [r7, #0]
 8002852:	2b00      	cmp	r3, #0
 8002854:	d111      	bne.n	800287a <RCCEx_PLLSAI2_Config+0x13a>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8002856:	4b26      	ldr	r3, [pc, #152]	; (80028f0 <RCCEx_PLLSAI2_Config+0x1b0>)
 8002858:	695b      	ldr	r3, [r3, #20]
 800285a:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 800285e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002862:	687a      	ldr	r2, [r7, #4]
 8002864:	6892      	ldr	r2, [r2, #8]
 8002866:	0211      	lsls	r1, r2, #8
 8002868:	687a      	ldr	r2, [r7, #4]
 800286a:	68d2      	ldr	r2, [r2, #12]
 800286c:	0912      	lsrs	r2, r2, #4
 800286e:	0452      	lsls	r2, r2, #17
 8002870:	430a      	orrs	r2, r1
 8002872:	491f      	ldr	r1, [pc, #124]	; (80028f0 <RCCEx_PLLSAI2_Config+0x1b0>)
 8002874:	4313      	orrs	r3, r2
 8002876:	614b      	str	r3, [r1, #20]
 8002878:	e011      	b.n	800289e <RCCEx_PLLSAI2_Config+0x15e>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800287a:	4b1d      	ldr	r3, [pc, #116]	; (80028f0 <RCCEx_PLLSAI2_Config+0x1b0>)
 800287c:	695b      	ldr	r3, [r3, #20]
 800287e:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8002882:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002886:	687a      	ldr	r2, [r7, #4]
 8002888:	6892      	ldr	r2, [r2, #8]
 800288a:	0211      	lsls	r1, r2, #8
 800288c:	687a      	ldr	r2, [r7, #4]
 800288e:	6912      	ldr	r2, [r2, #16]
 8002890:	0852      	lsrs	r2, r2, #1
 8002892:	3a01      	subs	r2, #1
 8002894:	0652      	lsls	r2, r2, #25
 8002896:	430a      	orrs	r2, r1
 8002898:	4915      	ldr	r1, [pc, #84]	; (80028f0 <RCCEx_PLLSAI2_Config+0x1b0>)
 800289a:	4313      	orrs	r3, r2
 800289c:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 800289e:	4b14      	ldr	r3, [pc, #80]	; (80028f0 <RCCEx_PLLSAI2_Config+0x1b0>)
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	4a13      	ldr	r2, [pc, #76]	; (80028f0 <RCCEx_PLLSAI2_Config+0x1b0>)
 80028a4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80028a8:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80028aa:	f7fe fa49 	bl	8000d40 <HAL_GetTick>
 80028ae:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80028b0:	e009      	b.n	80028c6 <RCCEx_PLLSAI2_Config+0x186>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80028b2:	f7fe fa45 	bl	8000d40 <HAL_GetTick>
 80028b6:	4602      	mov	r2, r0
 80028b8:	68bb      	ldr	r3, [r7, #8]
 80028ba:	1ad3      	subs	r3, r2, r3
 80028bc:	2b02      	cmp	r3, #2
 80028be:	d902      	bls.n	80028c6 <RCCEx_PLLSAI2_Config+0x186>
        {
          status = HAL_TIMEOUT;
 80028c0:	2303      	movs	r3, #3
 80028c2:	73fb      	strb	r3, [r7, #15]
          break;
 80028c4:	e005      	b.n	80028d2 <RCCEx_PLLSAI2_Config+0x192>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80028c6:	4b0a      	ldr	r3, [pc, #40]	; (80028f0 <RCCEx_PLLSAI2_Config+0x1b0>)
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80028ce:	2b00      	cmp	r3, #0
 80028d0:	d0ef      	beq.n	80028b2 <RCCEx_PLLSAI2_Config+0x172>
        }
      }

      if(status == HAL_OK)
 80028d2:	7bfb      	ldrb	r3, [r7, #15]
 80028d4:	2b00      	cmp	r3, #0
 80028d6:	d106      	bne.n	80028e6 <RCCEx_PLLSAI2_Config+0x1a6>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 80028d8:	4b05      	ldr	r3, [pc, #20]	; (80028f0 <RCCEx_PLLSAI2_Config+0x1b0>)
 80028da:	695a      	ldr	r2, [r3, #20]
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	695b      	ldr	r3, [r3, #20]
 80028e0:	4903      	ldr	r1, [pc, #12]	; (80028f0 <RCCEx_PLLSAI2_Config+0x1b0>)
 80028e2:	4313      	orrs	r3, r2
 80028e4:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 80028e6:	7bfb      	ldrb	r3, [r7, #15]
}
 80028e8:	4618      	mov	r0, r3
 80028ea:	3710      	adds	r7, #16
 80028ec:	46bd      	mov	sp, r7
 80028ee:	bd80      	pop	{r7, pc}
 80028f0:	40021000 	.word	0x40021000

080028f4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80028f4:	b580      	push	{r7, lr}
 80028f6:	b082      	sub	sp, #8
 80028f8:	af00      	add	r7, sp, #0
 80028fa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	2b00      	cmp	r3, #0
 8002900:	d101      	bne.n	8002906 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002902:	2301      	movs	r3, #1
 8002904:	e01d      	b.n	8002942 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800290c:	b2db      	uxtb	r3, r3
 800290e:	2b00      	cmp	r3, #0
 8002910:	d106      	bne.n	8002920 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	2200      	movs	r2, #0
 8002916:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800291a:	6878      	ldr	r0, [r7, #4]
 800291c:	f000 f815 	bl	800294a <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	2202      	movs	r2, #2
 8002924:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	681a      	ldr	r2, [r3, #0]
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	3304      	adds	r3, #4
 8002930:	4619      	mov	r1, r3
 8002932:	4610      	mov	r0, r2
 8002934:	f000 f986 	bl	8002c44 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	2201      	movs	r2, #1
 800293c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002940:	2300      	movs	r3, #0
}
 8002942:	4618      	mov	r0, r3
 8002944:	3708      	adds	r7, #8
 8002946:	46bd      	mov	sp, r7
 8002948:	bd80      	pop	{r7, pc}

0800294a <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 800294a:	b480      	push	{r7}
 800294c:	b083      	sub	sp, #12
 800294e:	af00      	add	r7, sp, #0
 8002950:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8002952:	bf00      	nop
 8002954:	370c      	adds	r7, #12
 8002956:	46bd      	mov	sp, r7
 8002958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800295c:	4770      	bx	lr
	...

08002960 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002960:	b480      	push	{r7}
 8002962:	b085      	sub	sp, #20
 8002964:	af00      	add	r7, sp, #0
 8002966:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	68da      	ldr	r2, [r3, #12]
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	f042 0201 	orr.w	r2, r2, #1
 8002976:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	689a      	ldr	r2, [r3, #8]
 800297e:	4b0c      	ldr	r3, [pc, #48]	; (80029b0 <HAL_TIM_Base_Start_IT+0x50>)
 8002980:	4013      	ands	r3, r2
 8002982:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002984:	68fb      	ldr	r3, [r7, #12]
 8002986:	2b06      	cmp	r3, #6
 8002988:	d00b      	beq.n	80029a2 <HAL_TIM_Base_Start_IT+0x42>
 800298a:	68fb      	ldr	r3, [r7, #12]
 800298c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002990:	d007      	beq.n	80029a2 <HAL_TIM_Base_Start_IT+0x42>
  {
    __HAL_TIM_ENABLE(htim);
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	681a      	ldr	r2, [r3, #0]
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	f042 0201 	orr.w	r2, r2, #1
 80029a0:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80029a2:	2300      	movs	r3, #0
}
 80029a4:	4618      	mov	r0, r3
 80029a6:	3714      	adds	r7, #20
 80029a8:	46bd      	mov	sp, r7
 80029aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029ae:	4770      	bx	lr
 80029b0:	00010007 	.word	0x00010007

080029b4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80029b4:	b580      	push	{r7, lr}
 80029b6:	b082      	sub	sp, #8
 80029b8:	af00      	add	r7, sp, #0
 80029ba:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	691b      	ldr	r3, [r3, #16]
 80029c2:	f003 0302 	and.w	r3, r3, #2
 80029c6:	2b02      	cmp	r3, #2
 80029c8:	d122      	bne.n	8002a10 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	68db      	ldr	r3, [r3, #12]
 80029d0:	f003 0302 	and.w	r3, r3, #2
 80029d4:	2b02      	cmp	r3, #2
 80029d6:	d11b      	bne.n	8002a10 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	f06f 0202 	mvn.w	r2, #2
 80029e0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	2201      	movs	r2, #1
 80029e6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	699b      	ldr	r3, [r3, #24]
 80029ee:	f003 0303 	and.w	r3, r3, #3
 80029f2:	2b00      	cmp	r3, #0
 80029f4:	d003      	beq.n	80029fe <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80029f6:	6878      	ldr	r0, [r7, #4]
 80029f8:	f000 f905 	bl	8002c06 <HAL_TIM_IC_CaptureCallback>
 80029fc:	e005      	b.n	8002a0a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80029fe:	6878      	ldr	r0, [r7, #4]
 8002a00:	f000 f8f7 	bl	8002bf2 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002a04:	6878      	ldr	r0, [r7, #4]
 8002a06:	f000 f908 	bl	8002c1a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	2200      	movs	r2, #0
 8002a0e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	691b      	ldr	r3, [r3, #16]
 8002a16:	f003 0304 	and.w	r3, r3, #4
 8002a1a:	2b04      	cmp	r3, #4
 8002a1c:	d122      	bne.n	8002a64 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	68db      	ldr	r3, [r3, #12]
 8002a24:	f003 0304 	and.w	r3, r3, #4
 8002a28:	2b04      	cmp	r3, #4
 8002a2a:	d11b      	bne.n	8002a64 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	f06f 0204 	mvn.w	r2, #4
 8002a34:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	2202      	movs	r2, #2
 8002a3a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	699b      	ldr	r3, [r3, #24]
 8002a42:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002a46:	2b00      	cmp	r3, #0
 8002a48:	d003      	beq.n	8002a52 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002a4a:	6878      	ldr	r0, [r7, #4]
 8002a4c:	f000 f8db 	bl	8002c06 <HAL_TIM_IC_CaptureCallback>
 8002a50:	e005      	b.n	8002a5e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002a52:	6878      	ldr	r0, [r7, #4]
 8002a54:	f000 f8cd 	bl	8002bf2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002a58:	6878      	ldr	r0, [r7, #4]
 8002a5a:	f000 f8de 	bl	8002c1a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	2200      	movs	r2, #0
 8002a62:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	691b      	ldr	r3, [r3, #16]
 8002a6a:	f003 0308 	and.w	r3, r3, #8
 8002a6e:	2b08      	cmp	r3, #8
 8002a70:	d122      	bne.n	8002ab8 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	68db      	ldr	r3, [r3, #12]
 8002a78:	f003 0308 	and.w	r3, r3, #8
 8002a7c:	2b08      	cmp	r3, #8
 8002a7e:	d11b      	bne.n	8002ab8 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	f06f 0208 	mvn.w	r2, #8
 8002a88:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	2204      	movs	r2, #4
 8002a8e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	69db      	ldr	r3, [r3, #28]
 8002a96:	f003 0303 	and.w	r3, r3, #3
 8002a9a:	2b00      	cmp	r3, #0
 8002a9c:	d003      	beq.n	8002aa6 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002a9e:	6878      	ldr	r0, [r7, #4]
 8002aa0:	f000 f8b1 	bl	8002c06 <HAL_TIM_IC_CaptureCallback>
 8002aa4:	e005      	b.n	8002ab2 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002aa6:	6878      	ldr	r0, [r7, #4]
 8002aa8:	f000 f8a3 	bl	8002bf2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002aac:	6878      	ldr	r0, [r7, #4]
 8002aae:	f000 f8b4 	bl	8002c1a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	2200      	movs	r2, #0
 8002ab6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	691b      	ldr	r3, [r3, #16]
 8002abe:	f003 0310 	and.w	r3, r3, #16
 8002ac2:	2b10      	cmp	r3, #16
 8002ac4:	d122      	bne.n	8002b0c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	68db      	ldr	r3, [r3, #12]
 8002acc:	f003 0310 	and.w	r3, r3, #16
 8002ad0:	2b10      	cmp	r3, #16
 8002ad2:	d11b      	bne.n	8002b0c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	f06f 0210 	mvn.w	r2, #16
 8002adc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	2208      	movs	r2, #8
 8002ae2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	69db      	ldr	r3, [r3, #28]
 8002aea:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002aee:	2b00      	cmp	r3, #0
 8002af0:	d003      	beq.n	8002afa <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002af2:	6878      	ldr	r0, [r7, #4]
 8002af4:	f000 f887 	bl	8002c06 <HAL_TIM_IC_CaptureCallback>
 8002af8:	e005      	b.n	8002b06 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002afa:	6878      	ldr	r0, [r7, #4]
 8002afc:	f000 f879 	bl	8002bf2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002b00:	6878      	ldr	r0, [r7, #4]
 8002b02:	f000 f88a 	bl	8002c1a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	2200      	movs	r2, #0
 8002b0a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	691b      	ldr	r3, [r3, #16]
 8002b12:	f003 0301 	and.w	r3, r3, #1
 8002b16:	2b01      	cmp	r3, #1
 8002b18:	d10e      	bne.n	8002b38 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	68db      	ldr	r3, [r3, #12]
 8002b20:	f003 0301 	and.w	r3, r3, #1
 8002b24:	2b01      	cmp	r3, #1
 8002b26:	d107      	bne.n	8002b38 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	f06f 0201 	mvn.w	r2, #1
 8002b30:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002b32:	6878      	ldr	r0, [r7, #4]
 8002b34:	f7fd ff44 	bl	80009c0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	691b      	ldr	r3, [r3, #16]
 8002b3e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002b42:	2b80      	cmp	r3, #128	; 0x80
 8002b44:	d10e      	bne.n	8002b64 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	68db      	ldr	r3, [r3, #12]
 8002b4c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002b50:	2b80      	cmp	r3, #128	; 0x80
 8002b52:	d107      	bne.n	8002b64 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002b5c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002b5e:	6878      	ldr	r0, [r7, #4]
 8002b60:	f000 f914 	bl	8002d8c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	691b      	ldr	r3, [r3, #16]
 8002b6a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b6e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002b72:	d10e      	bne.n	8002b92 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	68db      	ldr	r3, [r3, #12]
 8002b7a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002b7e:	2b80      	cmp	r3, #128	; 0x80
 8002b80:	d107      	bne.n	8002b92 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8002b8a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8002b8c:	6878      	ldr	r0, [r7, #4]
 8002b8e:	f000 f907 	bl	8002da0 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	691b      	ldr	r3, [r3, #16]
 8002b98:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002b9c:	2b40      	cmp	r3, #64	; 0x40
 8002b9e:	d10e      	bne.n	8002bbe <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	68db      	ldr	r3, [r3, #12]
 8002ba6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002baa:	2b40      	cmp	r3, #64	; 0x40
 8002bac:	d107      	bne.n	8002bbe <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002bb6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002bb8:	6878      	ldr	r0, [r7, #4]
 8002bba:	f000 f838 	bl	8002c2e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	691b      	ldr	r3, [r3, #16]
 8002bc4:	f003 0320 	and.w	r3, r3, #32
 8002bc8:	2b20      	cmp	r3, #32
 8002bca:	d10e      	bne.n	8002bea <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	68db      	ldr	r3, [r3, #12]
 8002bd2:	f003 0320 	and.w	r3, r3, #32
 8002bd6:	2b20      	cmp	r3, #32
 8002bd8:	d107      	bne.n	8002bea <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	f06f 0220 	mvn.w	r2, #32
 8002be2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002be4:	6878      	ldr	r0, [r7, #4]
 8002be6:	f000 f8c7 	bl	8002d78 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002bea:	bf00      	nop
 8002bec:	3708      	adds	r7, #8
 8002bee:	46bd      	mov	sp, r7
 8002bf0:	bd80      	pop	{r7, pc}

08002bf2 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002bf2:	b480      	push	{r7}
 8002bf4:	b083      	sub	sp, #12
 8002bf6:	af00      	add	r7, sp, #0
 8002bf8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002bfa:	bf00      	nop
 8002bfc:	370c      	adds	r7, #12
 8002bfe:	46bd      	mov	sp, r7
 8002c00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c04:	4770      	bx	lr

08002c06 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002c06:	b480      	push	{r7}
 8002c08:	b083      	sub	sp, #12
 8002c0a:	af00      	add	r7, sp, #0
 8002c0c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002c0e:	bf00      	nop
 8002c10:	370c      	adds	r7, #12
 8002c12:	46bd      	mov	sp, r7
 8002c14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c18:	4770      	bx	lr

08002c1a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002c1a:	b480      	push	{r7}
 8002c1c:	b083      	sub	sp, #12
 8002c1e:	af00      	add	r7, sp, #0
 8002c20:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002c22:	bf00      	nop
 8002c24:	370c      	adds	r7, #12
 8002c26:	46bd      	mov	sp, r7
 8002c28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c2c:	4770      	bx	lr

08002c2e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002c2e:	b480      	push	{r7}
 8002c30:	b083      	sub	sp, #12
 8002c32:	af00      	add	r7, sp, #0
 8002c34:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002c36:	bf00      	nop
 8002c38:	370c      	adds	r7, #12
 8002c3a:	46bd      	mov	sp, r7
 8002c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c40:	4770      	bx	lr
	...

08002c44 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002c44:	b480      	push	{r7}
 8002c46:	b085      	sub	sp, #20
 8002c48:	af00      	add	r7, sp, #0
 8002c4a:	6078      	str	r0, [r7, #4]
 8002c4c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	4a40      	ldr	r2, [pc, #256]	; (8002d58 <TIM_Base_SetConfig+0x114>)
 8002c58:	4293      	cmp	r3, r2
 8002c5a:	d013      	beq.n	8002c84 <TIM_Base_SetConfig+0x40>
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002c62:	d00f      	beq.n	8002c84 <TIM_Base_SetConfig+0x40>
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	4a3d      	ldr	r2, [pc, #244]	; (8002d5c <TIM_Base_SetConfig+0x118>)
 8002c68:	4293      	cmp	r3, r2
 8002c6a:	d00b      	beq.n	8002c84 <TIM_Base_SetConfig+0x40>
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	4a3c      	ldr	r2, [pc, #240]	; (8002d60 <TIM_Base_SetConfig+0x11c>)
 8002c70:	4293      	cmp	r3, r2
 8002c72:	d007      	beq.n	8002c84 <TIM_Base_SetConfig+0x40>
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	4a3b      	ldr	r2, [pc, #236]	; (8002d64 <TIM_Base_SetConfig+0x120>)
 8002c78:	4293      	cmp	r3, r2
 8002c7a:	d003      	beq.n	8002c84 <TIM_Base_SetConfig+0x40>
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	4a3a      	ldr	r2, [pc, #232]	; (8002d68 <TIM_Base_SetConfig+0x124>)
 8002c80:	4293      	cmp	r3, r2
 8002c82:	d108      	bne.n	8002c96 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002c84:	68fb      	ldr	r3, [r7, #12]
 8002c86:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002c8a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002c8c:	683b      	ldr	r3, [r7, #0]
 8002c8e:	685b      	ldr	r3, [r3, #4]
 8002c90:	68fa      	ldr	r2, [r7, #12]
 8002c92:	4313      	orrs	r3, r2
 8002c94:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	4a2f      	ldr	r2, [pc, #188]	; (8002d58 <TIM_Base_SetConfig+0x114>)
 8002c9a:	4293      	cmp	r3, r2
 8002c9c:	d01f      	beq.n	8002cde <TIM_Base_SetConfig+0x9a>
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002ca4:	d01b      	beq.n	8002cde <TIM_Base_SetConfig+0x9a>
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	4a2c      	ldr	r2, [pc, #176]	; (8002d5c <TIM_Base_SetConfig+0x118>)
 8002caa:	4293      	cmp	r3, r2
 8002cac:	d017      	beq.n	8002cde <TIM_Base_SetConfig+0x9a>
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	4a2b      	ldr	r2, [pc, #172]	; (8002d60 <TIM_Base_SetConfig+0x11c>)
 8002cb2:	4293      	cmp	r3, r2
 8002cb4:	d013      	beq.n	8002cde <TIM_Base_SetConfig+0x9a>
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	4a2a      	ldr	r2, [pc, #168]	; (8002d64 <TIM_Base_SetConfig+0x120>)
 8002cba:	4293      	cmp	r3, r2
 8002cbc:	d00f      	beq.n	8002cde <TIM_Base_SetConfig+0x9a>
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	4a29      	ldr	r2, [pc, #164]	; (8002d68 <TIM_Base_SetConfig+0x124>)
 8002cc2:	4293      	cmp	r3, r2
 8002cc4:	d00b      	beq.n	8002cde <TIM_Base_SetConfig+0x9a>
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	4a28      	ldr	r2, [pc, #160]	; (8002d6c <TIM_Base_SetConfig+0x128>)
 8002cca:	4293      	cmp	r3, r2
 8002ccc:	d007      	beq.n	8002cde <TIM_Base_SetConfig+0x9a>
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	4a27      	ldr	r2, [pc, #156]	; (8002d70 <TIM_Base_SetConfig+0x12c>)
 8002cd2:	4293      	cmp	r3, r2
 8002cd4:	d003      	beq.n	8002cde <TIM_Base_SetConfig+0x9a>
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	4a26      	ldr	r2, [pc, #152]	; (8002d74 <TIM_Base_SetConfig+0x130>)
 8002cda:	4293      	cmp	r3, r2
 8002cdc:	d108      	bne.n	8002cf0 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002cde:	68fb      	ldr	r3, [r7, #12]
 8002ce0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002ce4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002ce6:	683b      	ldr	r3, [r7, #0]
 8002ce8:	68db      	ldr	r3, [r3, #12]
 8002cea:	68fa      	ldr	r2, [r7, #12]
 8002cec:	4313      	orrs	r3, r2
 8002cee:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002cf0:	68fb      	ldr	r3, [r7, #12]
 8002cf2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002cf6:	683b      	ldr	r3, [r7, #0]
 8002cf8:	695b      	ldr	r3, [r3, #20]
 8002cfa:	4313      	orrs	r3, r2
 8002cfc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	68fa      	ldr	r2, [r7, #12]
 8002d02:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002d04:	683b      	ldr	r3, [r7, #0]
 8002d06:	689a      	ldr	r2, [r3, #8]
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002d0c:	683b      	ldr	r3, [r7, #0]
 8002d0e:	681a      	ldr	r2, [r3, #0]
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	4a10      	ldr	r2, [pc, #64]	; (8002d58 <TIM_Base_SetConfig+0x114>)
 8002d18:	4293      	cmp	r3, r2
 8002d1a:	d00f      	beq.n	8002d3c <TIM_Base_SetConfig+0xf8>
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	4a12      	ldr	r2, [pc, #72]	; (8002d68 <TIM_Base_SetConfig+0x124>)
 8002d20:	4293      	cmp	r3, r2
 8002d22:	d00b      	beq.n	8002d3c <TIM_Base_SetConfig+0xf8>
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	4a11      	ldr	r2, [pc, #68]	; (8002d6c <TIM_Base_SetConfig+0x128>)
 8002d28:	4293      	cmp	r3, r2
 8002d2a:	d007      	beq.n	8002d3c <TIM_Base_SetConfig+0xf8>
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	4a10      	ldr	r2, [pc, #64]	; (8002d70 <TIM_Base_SetConfig+0x12c>)
 8002d30:	4293      	cmp	r3, r2
 8002d32:	d003      	beq.n	8002d3c <TIM_Base_SetConfig+0xf8>
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	4a0f      	ldr	r2, [pc, #60]	; (8002d74 <TIM_Base_SetConfig+0x130>)
 8002d38:	4293      	cmp	r3, r2
 8002d3a:	d103      	bne.n	8002d44 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002d3c:	683b      	ldr	r3, [r7, #0]
 8002d3e:	691a      	ldr	r2, [r3, #16]
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	2201      	movs	r2, #1
 8002d48:	615a      	str	r2, [r3, #20]
}
 8002d4a:	bf00      	nop
 8002d4c:	3714      	adds	r7, #20
 8002d4e:	46bd      	mov	sp, r7
 8002d50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d54:	4770      	bx	lr
 8002d56:	bf00      	nop
 8002d58:	40012c00 	.word	0x40012c00
 8002d5c:	40000400 	.word	0x40000400
 8002d60:	40000800 	.word	0x40000800
 8002d64:	40000c00 	.word	0x40000c00
 8002d68:	40013400 	.word	0x40013400
 8002d6c:	40014000 	.word	0x40014000
 8002d70:	40014400 	.word	0x40014400
 8002d74:	40014800 	.word	0x40014800

08002d78 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002d78:	b480      	push	{r7}
 8002d7a:	b083      	sub	sp, #12
 8002d7c:	af00      	add	r7, sp, #0
 8002d7e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002d80:	bf00      	nop
 8002d82:	370c      	adds	r7, #12
 8002d84:	46bd      	mov	sp, r7
 8002d86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d8a:	4770      	bx	lr

08002d8c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002d8c:	b480      	push	{r7}
 8002d8e:	b083      	sub	sp, #12
 8002d90:	af00      	add	r7, sp, #0
 8002d92:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002d94:	bf00      	nop
 8002d96:	370c      	adds	r7, #12
 8002d98:	46bd      	mov	sp, r7
 8002d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d9e:	4770      	bx	lr

08002da0 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8002da0:	b480      	push	{r7}
 8002da2:	b083      	sub	sp, #12
 8002da4:	af00      	add	r7, sp, #0
 8002da6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8002da8:	bf00      	nop
 8002daa:	370c      	adds	r7, #12
 8002dac:	46bd      	mov	sp, r7
 8002dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002db2:	4770      	bx	lr

08002db4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002db4:	b580      	push	{r7, lr}
 8002db6:	b082      	sub	sp, #8
 8002db8:	af00      	add	r7, sp, #0
 8002dba:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	2b00      	cmp	r3, #0
 8002dc0:	d101      	bne.n	8002dc6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002dc2:	2301      	movs	r3, #1
 8002dc4:	e040      	b.n	8002e48 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002dca:	2b00      	cmp	r3, #0
 8002dcc:	d106      	bne.n	8002ddc <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	2200      	movs	r2, #0
 8002dd2:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002dd6:	6878      	ldr	r0, [r7, #4]
 8002dd8:	f7fd ff14 	bl	8000c04 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	2224      	movs	r2, #36	; 0x24
 8002de0:	675a      	str	r2, [r3, #116]	; 0x74

  __HAL_UART_DISABLE(huart);
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	681a      	ldr	r2, [r3, #0]
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	f022 0201 	bic.w	r2, r2, #1
 8002df0:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002df2:	6878      	ldr	r0, [r7, #4]
 8002df4:	f000 f82c 	bl	8002e50 <UART_SetConfig>
 8002df8:	4603      	mov	r3, r0
 8002dfa:	2b01      	cmp	r3, #1
 8002dfc:	d101      	bne.n	8002e02 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8002dfe:	2301      	movs	r3, #1
 8002e00:	e022      	b.n	8002e48 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e06:	2b00      	cmp	r3, #0
 8002e08:	d002      	beq.n	8002e10 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8002e0a:	6878      	ldr	r0, [r7, #4]
 8002e0c:	f000 fb68 	bl	80034e0 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	685a      	ldr	r2, [r3, #4]
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002e1e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	689a      	ldr	r2, [r3, #8]
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002e2e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	681a      	ldr	r2, [r3, #0]
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	f042 0201 	orr.w	r2, r2, #1
 8002e3e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002e40:	6878      	ldr	r0, [r7, #4]
 8002e42:	f000 fbef 	bl	8003624 <UART_CheckIdleState>
 8002e46:	4603      	mov	r3, r0
}
 8002e48:	4618      	mov	r0, r3
 8002e4a:	3708      	adds	r7, #8
 8002e4c:	46bd      	mov	sp, r7
 8002e4e:	bd80      	pop	{r7, pc}

08002e50 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002e50:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 8002e54:	b088      	sub	sp, #32
 8002e56:	af00      	add	r7, sp, #0
 8002e58:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 8002e5a:	2300      	movs	r3, #0
 8002e5c:	617b      	str	r3, [r7, #20]
  HAL_StatusTypeDef ret               = HAL_OK;
 8002e5e:	2300      	movs	r3, #0
 8002e60:	74fb      	strb	r3, [r7, #19]
  uint32_t lpuart_ker_ck_pres         = 0x00000000U;
 8002e62:	2300      	movs	r3, #0
 8002e64:	60fb      	str	r3, [r7, #12]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	689a      	ldr	r2, [r3, #8]
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	691b      	ldr	r3, [r3, #16]
 8002e6e:	431a      	orrs	r2, r3
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	695b      	ldr	r3, [r3, #20]
 8002e74:	431a      	orrs	r2, r3
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	69db      	ldr	r3, [r3, #28]
 8002e7a:	4313      	orrs	r3, r2
 8002e7c:	61fb      	str	r3, [r7, #28]
#if defined(USART_CR1_FIFOEN)
  tmpreg |= (uint32_t)huart->FifoMode;
#endif /* USART_CR1_FIFOEN */
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	681a      	ldr	r2, [r3, #0]
 8002e84:	4bac      	ldr	r3, [pc, #688]	; (8003138 <UART_SetConfig+0x2e8>)
 8002e86:	4013      	ands	r3, r2
 8002e88:	687a      	ldr	r2, [r7, #4]
 8002e8a:	6812      	ldr	r2, [r2, #0]
 8002e8c:	69f9      	ldr	r1, [r7, #28]
 8002e8e:	430b      	orrs	r3, r1
 8002e90:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	685b      	ldr	r3, [r3, #4]
 8002e98:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	68da      	ldr	r2, [r3, #12]
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	430a      	orrs	r2, r1
 8002ea6:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	699b      	ldr	r3, [r3, #24]
 8002eac:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	4aa2      	ldr	r2, [pc, #648]	; (800313c <UART_SetConfig+0x2ec>)
 8002eb4:	4293      	cmp	r3, r2
 8002eb6:	d004      	beq.n	8002ec2 <UART_SetConfig+0x72>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	6a1b      	ldr	r3, [r3, #32]
 8002ebc:	69fa      	ldr	r2, [r7, #28]
 8002ebe:	4313      	orrs	r3, r2
 8002ec0:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	689b      	ldr	r3, [r3, #8]
 8002ec8:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	69fa      	ldr	r2, [r7, #28]
 8002ed2:	430a      	orrs	r2, r1
 8002ed4:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	4a99      	ldr	r2, [pc, #612]	; (8003140 <UART_SetConfig+0x2f0>)
 8002edc:	4293      	cmp	r3, r2
 8002ede:	d121      	bne.n	8002f24 <UART_SetConfig+0xd4>
 8002ee0:	4b98      	ldr	r3, [pc, #608]	; (8003144 <UART_SetConfig+0x2f4>)
 8002ee2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002ee6:	f003 0303 	and.w	r3, r3, #3
 8002eea:	2b03      	cmp	r3, #3
 8002eec:	d816      	bhi.n	8002f1c <UART_SetConfig+0xcc>
 8002eee:	a201      	add	r2, pc, #4	; (adr r2, 8002ef4 <UART_SetConfig+0xa4>)
 8002ef0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002ef4:	08002f05 	.word	0x08002f05
 8002ef8:	08002f11 	.word	0x08002f11
 8002efc:	08002f0b 	.word	0x08002f0b
 8002f00:	08002f17 	.word	0x08002f17
 8002f04:	2301      	movs	r3, #1
 8002f06:	76fb      	strb	r3, [r7, #27]
 8002f08:	e0e8      	b.n	80030dc <UART_SetConfig+0x28c>
 8002f0a:	2302      	movs	r3, #2
 8002f0c:	76fb      	strb	r3, [r7, #27]
 8002f0e:	e0e5      	b.n	80030dc <UART_SetConfig+0x28c>
 8002f10:	2304      	movs	r3, #4
 8002f12:	76fb      	strb	r3, [r7, #27]
 8002f14:	e0e2      	b.n	80030dc <UART_SetConfig+0x28c>
 8002f16:	2308      	movs	r3, #8
 8002f18:	76fb      	strb	r3, [r7, #27]
 8002f1a:	e0df      	b.n	80030dc <UART_SetConfig+0x28c>
 8002f1c:	2310      	movs	r3, #16
 8002f1e:	76fb      	strb	r3, [r7, #27]
 8002f20:	bf00      	nop
 8002f22:	e0db      	b.n	80030dc <UART_SetConfig+0x28c>
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	4a87      	ldr	r2, [pc, #540]	; (8003148 <UART_SetConfig+0x2f8>)
 8002f2a:	4293      	cmp	r3, r2
 8002f2c:	d134      	bne.n	8002f98 <UART_SetConfig+0x148>
 8002f2e:	4b85      	ldr	r3, [pc, #532]	; (8003144 <UART_SetConfig+0x2f4>)
 8002f30:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002f34:	f003 030c 	and.w	r3, r3, #12
 8002f38:	2b0c      	cmp	r3, #12
 8002f3a:	d829      	bhi.n	8002f90 <UART_SetConfig+0x140>
 8002f3c:	a201      	add	r2, pc, #4	; (adr r2, 8002f44 <UART_SetConfig+0xf4>)
 8002f3e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002f42:	bf00      	nop
 8002f44:	08002f79 	.word	0x08002f79
 8002f48:	08002f91 	.word	0x08002f91
 8002f4c:	08002f91 	.word	0x08002f91
 8002f50:	08002f91 	.word	0x08002f91
 8002f54:	08002f85 	.word	0x08002f85
 8002f58:	08002f91 	.word	0x08002f91
 8002f5c:	08002f91 	.word	0x08002f91
 8002f60:	08002f91 	.word	0x08002f91
 8002f64:	08002f7f 	.word	0x08002f7f
 8002f68:	08002f91 	.word	0x08002f91
 8002f6c:	08002f91 	.word	0x08002f91
 8002f70:	08002f91 	.word	0x08002f91
 8002f74:	08002f8b 	.word	0x08002f8b
 8002f78:	2300      	movs	r3, #0
 8002f7a:	76fb      	strb	r3, [r7, #27]
 8002f7c:	e0ae      	b.n	80030dc <UART_SetConfig+0x28c>
 8002f7e:	2302      	movs	r3, #2
 8002f80:	76fb      	strb	r3, [r7, #27]
 8002f82:	e0ab      	b.n	80030dc <UART_SetConfig+0x28c>
 8002f84:	2304      	movs	r3, #4
 8002f86:	76fb      	strb	r3, [r7, #27]
 8002f88:	e0a8      	b.n	80030dc <UART_SetConfig+0x28c>
 8002f8a:	2308      	movs	r3, #8
 8002f8c:	76fb      	strb	r3, [r7, #27]
 8002f8e:	e0a5      	b.n	80030dc <UART_SetConfig+0x28c>
 8002f90:	2310      	movs	r3, #16
 8002f92:	76fb      	strb	r3, [r7, #27]
 8002f94:	bf00      	nop
 8002f96:	e0a1      	b.n	80030dc <UART_SetConfig+0x28c>
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	4a6b      	ldr	r2, [pc, #428]	; (800314c <UART_SetConfig+0x2fc>)
 8002f9e:	4293      	cmp	r3, r2
 8002fa0:	d120      	bne.n	8002fe4 <UART_SetConfig+0x194>
 8002fa2:	4b68      	ldr	r3, [pc, #416]	; (8003144 <UART_SetConfig+0x2f4>)
 8002fa4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002fa8:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8002fac:	2b10      	cmp	r3, #16
 8002fae:	d00f      	beq.n	8002fd0 <UART_SetConfig+0x180>
 8002fb0:	2b10      	cmp	r3, #16
 8002fb2:	d802      	bhi.n	8002fba <UART_SetConfig+0x16a>
 8002fb4:	2b00      	cmp	r3, #0
 8002fb6:	d005      	beq.n	8002fc4 <UART_SetConfig+0x174>
 8002fb8:	e010      	b.n	8002fdc <UART_SetConfig+0x18c>
 8002fba:	2b20      	cmp	r3, #32
 8002fbc:	d005      	beq.n	8002fca <UART_SetConfig+0x17a>
 8002fbe:	2b30      	cmp	r3, #48	; 0x30
 8002fc0:	d009      	beq.n	8002fd6 <UART_SetConfig+0x186>
 8002fc2:	e00b      	b.n	8002fdc <UART_SetConfig+0x18c>
 8002fc4:	2300      	movs	r3, #0
 8002fc6:	76fb      	strb	r3, [r7, #27]
 8002fc8:	e088      	b.n	80030dc <UART_SetConfig+0x28c>
 8002fca:	2302      	movs	r3, #2
 8002fcc:	76fb      	strb	r3, [r7, #27]
 8002fce:	e085      	b.n	80030dc <UART_SetConfig+0x28c>
 8002fd0:	2304      	movs	r3, #4
 8002fd2:	76fb      	strb	r3, [r7, #27]
 8002fd4:	e082      	b.n	80030dc <UART_SetConfig+0x28c>
 8002fd6:	2308      	movs	r3, #8
 8002fd8:	76fb      	strb	r3, [r7, #27]
 8002fda:	e07f      	b.n	80030dc <UART_SetConfig+0x28c>
 8002fdc:	2310      	movs	r3, #16
 8002fde:	76fb      	strb	r3, [r7, #27]
 8002fe0:	bf00      	nop
 8002fe2:	e07b      	b.n	80030dc <UART_SetConfig+0x28c>
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	4a59      	ldr	r2, [pc, #356]	; (8003150 <UART_SetConfig+0x300>)
 8002fea:	4293      	cmp	r3, r2
 8002fec:	d120      	bne.n	8003030 <UART_SetConfig+0x1e0>
 8002fee:	4b55      	ldr	r3, [pc, #340]	; (8003144 <UART_SetConfig+0x2f4>)
 8002ff0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002ff4:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8002ff8:	2b40      	cmp	r3, #64	; 0x40
 8002ffa:	d00f      	beq.n	800301c <UART_SetConfig+0x1cc>
 8002ffc:	2b40      	cmp	r3, #64	; 0x40
 8002ffe:	d802      	bhi.n	8003006 <UART_SetConfig+0x1b6>
 8003000:	2b00      	cmp	r3, #0
 8003002:	d005      	beq.n	8003010 <UART_SetConfig+0x1c0>
 8003004:	e010      	b.n	8003028 <UART_SetConfig+0x1d8>
 8003006:	2b80      	cmp	r3, #128	; 0x80
 8003008:	d005      	beq.n	8003016 <UART_SetConfig+0x1c6>
 800300a:	2bc0      	cmp	r3, #192	; 0xc0
 800300c:	d009      	beq.n	8003022 <UART_SetConfig+0x1d2>
 800300e:	e00b      	b.n	8003028 <UART_SetConfig+0x1d8>
 8003010:	2300      	movs	r3, #0
 8003012:	76fb      	strb	r3, [r7, #27]
 8003014:	e062      	b.n	80030dc <UART_SetConfig+0x28c>
 8003016:	2302      	movs	r3, #2
 8003018:	76fb      	strb	r3, [r7, #27]
 800301a:	e05f      	b.n	80030dc <UART_SetConfig+0x28c>
 800301c:	2304      	movs	r3, #4
 800301e:	76fb      	strb	r3, [r7, #27]
 8003020:	e05c      	b.n	80030dc <UART_SetConfig+0x28c>
 8003022:	2308      	movs	r3, #8
 8003024:	76fb      	strb	r3, [r7, #27]
 8003026:	e059      	b.n	80030dc <UART_SetConfig+0x28c>
 8003028:	2310      	movs	r3, #16
 800302a:	76fb      	strb	r3, [r7, #27]
 800302c:	bf00      	nop
 800302e:	e055      	b.n	80030dc <UART_SetConfig+0x28c>
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	4a47      	ldr	r2, [pc, #284]	; (8003154 <UART_SetConfig+0x304>)
 8003036:	4293      	cmp	r3, r2
 8003038:	d124      	bne.n	8003084 <UART_SetConfig+0x234>
 800303a:	4b42      	ldr	r3, [pc, #264]	; (8003144 <UART_SetConfig+0x2f4>)
 800303c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003040:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003044:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003048:	d012      	beq.n	8003070 <UART_SetConfig+0x220>
 800304a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800304e:	d802      	bhi.n	8003056 <UART_SetConfig+0x206>
 8003050:	2b00      	cmp	r3, #0
 8003052:	d007      	beq.n	8003064 <UART_SetConfig+0x214>
 8003054:	e012      	b.n	800307c <UART_SetConfig+0x22c>
 8003056:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800305a:	d006      	beq.n	800306a <UART_SetConfig+0x21a>
 800305c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003060:	d009      	beq.n	8003076 <UART_SetConfig+0x226>
 8003062:	e00b      	b.n	800307c <UART_SetConfig+0x22c>
 8003064:	2300      	movs	r3, #0
 8003066:	76fb      	strb	r3, [r7, #27]
 8003068:	e038      	b.n	80030dc <UART_SetConfig+0x28c>
 800306a:	2302      	movs	r3, #2
 800306c:	76fb      	strb	r3, [r7, #27]
 800306e:	e035      	b.n	80030dc <UART_SetConfig+0x28c>
 8003070:	2304      	movs	r3, #4
 8003072:	76fb      	strb	r3, [r7, #27]
 8003074:	e032      	b.n	80030dc <UART_SetConfig+0x28c>
 8003076:	2308      	movs	r3, #8
 8003078:	76fb      	strb	r3, [r7, #27]
 800307a:	e02f      	b.n	80030dc <UART_SetConfig+0x28c>
 800307c:	2310      	movs	r3, #16
 800307e:	76fb      	strb	r3, [r7, #27]
 8003080:	bf00      	nop
 8003082:	e02b      	b.n	80030dc <UART_SetConfig+0x28c>
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	4a2c      	ldr	r2, [pc, #176]	; (800313c <UART_SetConfig+0x2ec>)
 800308a:	4293      	cmp	r3, r2
 800308c:	d124      	bne.n	80030d8 <UART_SetConfig+0x288>
 800308e:	4b2d      	ldr	r3, [pc, #180]	; (8003144 <UART_SetConfig+0x2f4>)
 8003090:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003094:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8003098:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800309c:	d012      	beq.n	80030c4 <UART_SetConfig+0x274>
 800309e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80030a2:	d802      	bhi.n	80030aa <UART_SetConfig+0x25a>
 80030a4:	2b00      	cmp	r3, #0
 80030a6:	d007      	beq.n	80030b8 <UART_SetConfig+0x268>
 80030a8:	e012      	b.n	80030d0 <UART_SetConfig+0x280>
 80030aa:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80030ae:	d006      	beq.n	80030be <UART_SetConfig+0x26e>
 80030b0:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80030b4:	d009      	beq.n	80030ca <UART_SetConfig+0x27a>
 80030b6:	e00b      	b.n	80030d0 <UART_SetConfig+0x280>
 80030b8:	2300      	movs	r3, #0
 80030ba:	76fb      	strb	r3, [r7, #27]
 80030bc:	e00e      	b.n	80030dc <UART_SetConfig+0x28c>
 80030be:	2302      	movs	r3, #2
 80030c0:	76fb      	strb	r3, [r7, #27]
 80030c2:	e00b      	b.n	80030dc <UART_SetConfig+0x28c>
 80030c4:	2304      	movs	r3, #4
 80030c6:	76fb      	strb	r3, [r7, #27]
 80030c8:	e008      	b.n	80030dc <UART_SetConfig+0x28c>
 80030ca:	2308      	movs	r3, #8
 80030cc:	76fb      	strb	r3, [r7, #27]
 80030ce:	e005      	b.n	80030dc <UART_SetConfig+0x28c>
 80030d0:	2310      	movs	r3, #16
 80030d2:	76fb      	strb	r3, [r7, #27]
 80030d4:	bf00      	nop
 80030d6:	e001      	b.n	80030dc <UART_SetConfig+0x28c>
 80030d8:	2310      	movs	r3, #16
 80030da:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	4a16      	ldr	r2, [pc, #88]	; (800313c <UART_SetConfig+0x2ec>)
 80030e2:	4293      	cmp	r3, r2
 80030e4:	f040 80fa 	bne.w	80032dc <UART_SetConfig+0x48c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80030e8:	7efb      	ldrb	r3, [r7, #27]
 80030ea:	2b08      	cmp	r3, #8
 80030ec:	d836      	bhi.n	800315c <UART_SetConfig+0x30c>
 80030ee:	a201      	add	r2, pc, #4	; (adr r2, 80030f4 <UART_SetConfig+0x2a4>)
 80030f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80030f4:	08003119 	.word	0x08003119
 80030f8:	0800315d 	.word	0x0800315d
 80030fc:	08003121 	.word	0x08003121
 8003100:	0800315d 	.word	0x0800315d
 8003104:	08003127 	.word	0x08003127
 8003108:	0800315d 	.word	0x0800315d
 800310c:	0800315d 	.word	0x0800315d
 8003110:	0800315d 	.word	0x0800315d
 8003114:	0800312f 	.word	0x0800312f
    {
      case UART_CLOCKSOURCE_PCLK1:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = (HAL_RCC_GetPCLK1Freq() / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
#else
        lpuart_ker_ck_pres = HAL_RCC_GetPCLK1Freq();
 8003118:	f7fe fe7e 	bl	8001e18 <HAL_RCC_GetPCLK1Freq>
 800311c:	60f8      	str	r0, [r7, #12]
#endif /* USART_PRESC_PRESCALER */
        break;
 800311e:	e020      	b.n	8003162 <UART_SetConfig+0x312>
      case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = ((uint32_t)HSI_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
#else
        lpuart_ker_ck_pres = (uint32_t)HSI_VALUE;
 8003120:	4b0d      	ldr	r3, [pc, #52]	; (8003158 <UART_SetConfig+0x308>)
 8003122:	60fb      	str	r3, [r7, #12]
#endif /* USART_PRESC_PRESCALER */
        break;
 8003124:	e01d      	b.n	8003162 <UART_SetConfig+0x312>
      case UART_CLOCKSOURCE_SYSCLK:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = (HAL_RCC_GetSysClockFreq() / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
#else
        lpuart_ker_ck_pres = HAL_RCC_GetSysClockFreq();
 8003126:	f7fe fde1 	bl	8001cec <HAL_RCC_GetSysClockFreq>
 800312a:	60f8      	str	r0, [r7, #12]
#endif /* USART_PRESC_PRESCALER */
        break;
 800312c:	e019      	b.n	8003162 <UART_SetConfig+0x312>
      case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = ((uint32_t)LSE_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
#else
        lpuart_ker_ck_pres = (uint32_t)LSE_VALUE;
 800312e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003132:	60fb      	str	r3, [r7, #12]
#endif /* USART_PRESC_PRESCALER */
        break;
 8003134:	e015      	b.n	8003162 <UART_SetConfig+0x312>
 8003136:	bf00      	nop
 8003138:	efff69f3 	.word	0xefff69f3
 800313c:	40008000 	.word	0x40008000
 8003140:	40013800 	.word	0x40013800
 8003144:	40021000 	.word	0x40021000
 8003148:	40004400 	.word	0x40004400
 800314c:	40004800 	.word	0x40004800
 8003150:	40004c00 	.word	0x40004c00
 8003154:	40005000 	.word	0x40005000
 8003158:	00f42400 	.word	0x00f42400
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 800315c:	2301      	movs	r3, #1
 800315e:	74fb      	strb	r3, [r7, #19]
        break;
 8003160:	bf00      	nop
    }

    /* if proper clock source reported */
    if (lpuart_ker_ck_pres != 0U)
 8003162:	68fb      	ldr	r3, [r7, #12]
 8003164:	2b00      	cmp	r3, #0
 8003166:	f000 81ac 	beq.w	80034c2 <UART_SetConfig+0x672>
    {
      /* ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	685a      	ldr	r2, [r3, #4]
 800316e:	4613      	mov	r3, r2
 8003170:	005b      	lsls	r3, r3, #1
 8003172:	4413      	add	r3, r2
 8003174:	68fa      	ldr	r2, [r7, #12]
 8003176:	429a      	cmp	r2, r3
 8003178:	d305      	bcc.n	8003186 <UART_SetConfig+0x336>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	685b      	ldr	r3, [r3, #4]
 800317e:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8003180:	68fa      	ldr	r2, [r7, #12]
 8003182:	429a      	cmp	r2, r3
 8003184:	d902      	bls.n	800318c <UART_SetConfig+0x33c>
      {
        ret = HAL_ERROR;
 8003186:	2301      	movs	r3, #1
 8003188:	74fb      	strb	r3, [r7, #19]
 800318a:	e19a      	b.n	80034c2 <UART_SetConfig+0x672>
      }
      else
      {
        switch (clocksource)
 800318c:	7efb      	ldrb	r3, [r7, #27]
 800318e:	2b08      	cmp	r3, #8
 8003190:	f200 8091 	bhi.w	80032b6 <UART_SetConfig+0x466>
 8003194:	a201      	add	r2, pc, #4	; (adr r2, 800319c <UART_SetConfig+0x34c>)
 8003196:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800319a:	bf00      	nop
 800319c:	080031c1 	.word	0x080031c1
 80031a0:	080032b7 	.word	0x080032b7
 80031a4:	0800320d 	.word	0x0800320d
 80031a8:	080032b7 	.word	0x080032b7
 80031ac:	08003241 	.word	0x08003241
 80031b0:	080032b7 	.word	0x080032b7
 80031b4:	080032b7 	.word	0x080032b7
 80031b8:	080032b7 	.word	0x080032b7
 80031bc:	0800328d 	.word	0x0800328d
        {
          case UART_CLOCKSOURCE_PCLK1:
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 80031c0:	f7fe fe2a 	bl	8001e18 <HAL_RCC_GetPCLK1Freq>
 80031c4:	4603      	mov	r3, r0
 80031c6:	4619      	mov	r1, r3
 80031c8:	f04f 0200 	mov.w	r2, #0
 80031cc:	f04f 0300 	mov.w	r3, #0
 80031d0:	f04f 0400 	mov.w	r4, #0
 80031d4:	0214      	lsls	r4, r2, #8
 80031d6:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 80031da:	020b      	lsls	r3, r1, #8
 80031dc:	687a      	ldr	r2, [r7, #4]
 80031de:	6852      	ldr	r2, [r2, #4]
 80031e0:	0852      	lsrs	r2, r2, #1
 80031e2:	4611      	mov	r1, r2
 80031e4:	f04f 0200 	mov.w	r2, #0
 80031e8:	eb13 0b01 	adds.w	fp, r3, r1
 80031ec:	eb44 0c02 	adc.w	ip, r4, r2
 80031f0:	4658      	mov	r0, fp
 80031f2:	4661      	mov	r1, ip
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	685b      	ldr	r3, [r3, #4]
 80031f8:	f04f 0400 	mov.w	r4, #0
 80031fc:	461a      	mov	r2, r3
 80031fe:	4623      	mov	r3, r4
 8003200:	f7fc ffe6 	bl	80001d0 <__aeabi_uldivmod>
 8003204:	4603      	mov	r3, r0
 8003206:	460c      	mov	r4, r1
 8003208:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
            break;
 800320a:	e057      	b.n	80032bc <UART_SetConfig+0x46c>
          case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate));
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	685b      	ldr	r3, [r3, #4]
 8003210:	085b      	lsrs	r3, r3, #1
 8003212:	f04f 0400 	mov.w	r4, #0
 8003216:	49b1      	ldr	r1, [pc, #708]	; (80034dc <UART_SetConfig+0x68c>)
 8003218:	f04f 0200 	mov.w	r2, #0
 800321c:	eb13 0b01 	adds.w	fp, r3, r1
 8003220:	eb44 0c02 	adc.w	ip, r4, r2
 8003224:	4658      	mov	r0, fp
 8003226:	4661      	mov	r1, ip
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	685b      	ldr	r3, [r3, #4]
 800322c:	f04f 0400 	mov.w	r4, #0
 8003230:	461a      	mov	r2, r3
 8003232:	4623      	mov	r3, r4
 8003234:	f7fc ffcc 	bl	80001d0 <__aeabi_uldivmod>
 8003238:	4603      	mov	r3, r0
 800323a:	460c      	mov	r4, r1
 800323c:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
            break;
 800323e:	e03d      	b.n	80032bc <UART_SetConfig+0x46c>
          case UART_CLOCKSOURCE_SYSCLK:
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8003240:	f7fe fd54 	bl	8001cec <HAL_RCC_GetSysClockFreq>
 8003244:	4603      	mov	r3, r0
 8003246:	4619      	mov	r1, r3
 8003248:	f04f 0200 	mov.w	r2, #0
 800324c:	f04f 0300 	mov.w	r3, #0
 8003250:	f04f 0400 	mov.w	r4, #0
 8003254:	0214      	lsls	r4, r2, #8
 8003256:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 800325a:	020b      	lsls	r3, r1, #8
 800325c:	687a      	ldr	r2, [r7, #4]
 800325e:	6852      	ldr	r2, [r2, #4]
 8003260:	0852      	lsrs	r2, r2, #1
 8003262:	4611      	mov	r1, r2
 8003264:	f04f 0200 	mov.w	r2, #0
 8003268:	eb13 0b01 	adds.w	fp, r3, r1
 800326c:	eb44 0c02 	adc.w	ip, r4, r2
 8003270:	4658      	mov	r0, fp
 8003272:	4661      	mov	r1, ip
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	685b      	ldr	r3, [r3, #4]
 8003278:	f04f 0400 	mov.w	r4, #0
 800327c:	461a      	mov	r2, r3
 800327e:	4623      	mov	r3, r4
 8003280:	f7fc ffa6 	bl	80001d0 <__aeabi_uldivmod>
 8003284:	4603      	mov	r3, r0
 8003286:	460c      	mov	r4, r1
 8003288:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
            break;
 800328a:	e017      	b.n	80032bc <UART_SetConfig+0x46c>
          case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate));
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	685b      	ldr	r3, [r3, #4]
 8003290:	085b      	lsrs	r3, r3, #1
 8003292:	f04f 0400 	mov.w	r4, #0
 8003296:	f513 0000 	adds.w	r0, r3, #8388608	; 0x800000
 800329a:	f144 0100 	adc.w	r1, r4, #0
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	685b      	ldr	r3, [r3, #4]
 80032a2:	f04f 0400 	mov.w	r4, #0
 80032a6:	461a      	mov	r2, r3
 80032a8:	4623      	mov	r3, r4
 80032aa:	f7fc ff91 	bl	80001d0 <__aeabi_uldivmod>
 80032ae:	4603      	mov	r3, r0
 80032b0:	460c      	mov	r4, r1
 80032b2:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
            break;
 80032b4:	e002      	b.n	80032bc <UART_SetConfig+0x46c>
          case UART_CLOCKSOURCE_UNDEFINED:
          default:
            ret = HAL_ERROR;
 80032b6:	2301      	movs	r3, #1
 80032b8:	74fb      	strb	r3, [r7, #19]
            break;
 80032ba:	bf00      	nop
        }

        /* It is forbidden to write values lower than 0x300 in the LPUART_BRR register */
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80032bc:	697b      	ldr	r3, [r7, #20]
 80032be:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80032c2:	d308      	bcc.n	80032d6 <UART_SetConfig+0x486>
 80032c4:	697b      	ldr	r3, [r7, #20]
 80032c6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80032ca:	d204      	bcs.n	80032d6 <UART_SetConfig+0x486>
        {
          huart->Instance->BRR = usartdiv;
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	697a      	ldr	r2, [r7, #20]
 80032d2:	60da      	str	r2, [r3, #12]
 80032d4:	e0f5      	b.n	80034c2 <UART_SetConfig+0x672>
        }
        else
        {
          ret = HAL_ERROR;
 80032d6:	2301      	movs	r3, #1
 80032d8:	74fb      	strb	r3, [r7, #19]
 80032da:	e0f2      	b.n	80034c2 <UART_SetConfig+0x672>
        }
      } /*   if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) || (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (lpuart_ker_ck_pres != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	69db      	ldr	r3, [r3, #28]
 80032e0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80032e4:	d17f      	bne.n	80033e6 <UART_SetConfig+0x596>
  {
    switch (clocksource)
 80032e6:	7efb      	ldrb	r3, [r7, #27]
 80032e8:	2b08      	cmp	r3, #8
 80032ea:	d85c      	bhi.n	80033a6 <UART_SetConfig+0x556>
 80032ec:	a201      	add	r2, pc, #4	; (adr r2, 80032f4 <UART_SetConfig+0x4a4>)
 80032ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80032f2:	bf00      	nop
 80032f4:	08003319 	.word	0x08003319
 80032f8:	08003337 	.word	0x08003337
 80032fc:	08003355 	.word	0x08003355
 8003300:	080033a7 	.word	0x080033a7
 8003304:	08003371 	.word	0x08003371
 8003308:	080033a7 	.word	0x080033a7
 800330c:	080033a7 	.word	0x080033a7
 8003310:	080033a7 	.word	0x080033a7
 8003314:	0800338f 	.word	0x0800338f
    {
      case UART_CLOCKSOURCE_PCLK1:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8003318:	f7fe fd7e 	bl	8001e18 <HAL_RCC_GetPCLK1Freq>
 800331c:	4603      	mov	r3, r0
 800331e:	005a      	lsls	r2, r3, #1
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	685b      	ldr	r3, [r3, #4]
 8003324:	085b      	lsrs	r3, r3, #1
 8003326:	441a      	add	r2, r3
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	685b      	ldr	r3, [r3, #4]
 800332c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003330:	b29b      	uxth	r3, r3
 8003332:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 8003334:	e03a      	b.n	80033ac <UART_SetConfig+0x55c>
      case UART_CLOCKSOURCE_PCLK2:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 8003336:	f7fe fd85 	bl	8001e44 <HAL_RCC_GetPCLK2Freq>
 800333a:	4603      	mov	r3, r0
 800333c:	005a      	lsls	r2, r3, #1
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	685b      	ldr	r3, [r3, #4]
 8003342:	085b      	lsrs	r3, r3, #1
 8003344:	441a      	add	r2, r3
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	685b      	ldr	r3, [r3, #4]
 800334a:	fbb2 f3f3 	udiv	r3, r2, r3
 800334e:	b29b      	uxth	r3, r3
 8003350:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 8003352:	e02b      	b.n	80033ac <UART_SetConfig+0x55c>
      case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	685b      	ldr	r3, [r3, #4]
 8003358:	085b      	lsrs	r3, r3, #1
 800335a:	f103 73f4 	add.w	r3, r3, #31981568	; 0x1e80000
 800335e:	f503 4390 	add.w	r3, r3, #18432	; 0x4800
 8003362:	687a      	ldr	r2, [r7, #4]
 8003364:	6852      	ldr	r2, [r2, #4]
 8003366:	fbb3 f3f2 	udiv	r3, r3, r2
 800336a:	b29b      	uxth	r3, r3
 800336c:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 800336e:	e01d      	b.n	80033ac <UART_SetConfig+0x55c>
      case UART_CLOCKSOURCE_SYSCLK:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8003370:	f7fe fcbc 	bl	8001cec <HAL_RCC_GetSysClockFreq>
 8003374:	4603      	mov	r3, r0
 8003376:	005a      	lsls	r2, r3, #1
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	685b      	ldr	r3, [r3, #4]
 800337c:	085b      	lsrs	r3, r3, #1
 800337e:	441a      	add	r2, r3
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	685b      	ldr	r3, [r3, #4]
 8003384:	fbb2 f3f3 	udiv	r3, r2, r3
 8003388:	b29b      	uxth	r3, r3
 800338a:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 800338c:	e00e      	b.n	80033ac <UART_SetConfig+0x55c>
      case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	685b      	ldr	r3, [r3, #4]
 8003392:	085b      	lsrs	r3, r3, #1
 8003394:	f503 3280 	add.w	r2, r3, #65536	; 0x10000
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	685b      	ldr	r3, [r3, #4]
 800339c:	fbb2 f3f3 	udiv	r3, r2, r3
 80033a0:	b29b      	uxth	r3, r3
 80033a2:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 80033a4:	e002      	b.n	80033ac <UART_SetConfig+0x55c>
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 80033a6:	2301      	movs	r3, #1
 80033a8:	74fb      	strb	r3, [r7, #19]
        break;
 80033aa:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80033ac:	697b      	ldr	r3, [r7, #20]
 80033ae:	2b0f      	cmp	r3, #15
 80033b0:	d916      	bls.n	80033e0 <UART_SetConfig+0x590>
 80033b2:	697b      	ldr	r3, [r7, #20]
 80033b4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80033b8:	d212      	bcs.n	80033e0 <UART_SetConfig+0x590>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80033ba:	697b      	ldr	r3, [r7, #20]
 80033bc:	b29b      	uxth	r3, r3
 80033be:	f023 030f 	bic.w	r3, r3, #15
 80033c2:	817b      	strh	r3, [r7, #10]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80033c4:	697b      	ldr	r3, [r7, #20]
 80033c6:	085b      	lsrs	r3, r3, #1
 80033c8:	b29b      	uxth	r3, r3
 80033ca:	f003 0307 	and.w	r3, r3, #7
 80033ce:	b29a      	uxth	r2, r3
 80033d0:	897b      	ldrh	r3, [r7, #10]
 80033d2:	4313      	orrs	r3, r2
 80033d4:	817b      	strh	r3, [r7, #10]
      huart->Instance->BRR = brrtemp;
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	897a      	ldrh	r2, [r7, #10]
 80033dc:	60da      	str	r2, [r3, #12]
 80033de:	e070      	b.n	80034c2 <UART_SetConfig+0x672>
    }
    else
    {
      ret = HAL_ERROR;
 80033e0:	2301      	movs	r3, #1
 80033e2:	74fb      	strb	r3, [r7, #19]
 80033e4:	e06d      	b.n	80034c2 <UART_SetConfig+0x672>
    }
  }
  else
  {
    switch (clocksource)
 80033e6:	7efb      	ldrb	r3, [r7, #27]
 80033e8:	2b08      	cmp	r3, #8
 80033ea:	d859      	bhi.n	80034a0 <UART_SetConfig+0x650>
 80033ec:	a201      	add	r2, pc, #4	; (adr r2, 80033f4 <UART_SetConfig+0x5a4>)
 80033ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80033f2:	bf00      	nop
 80033f4:	08003419 	.word	0x08003419
 80033f8:	08003435 	.word	0x08003435
 80033fc:	08003451 	.word	0x08003451
 8003400:	080034a1 	.word	0x080034a1
 8003404:	0800346d 	.word	0x0800346d
 8003408:	080034a1 	.word	0x080034a1
 800340c:	080034a1 	.word	0x080034a1
 8003410:	080034a1 	.word	0x080034a1
 8003414:	08003489 	.word	0x08003489
    {
      case UART_CLOCKSOURCE_PCLK1:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8003418:	f7fe fcfe 	bl	8001e18 <HAL_RCC_GetPCLK1Freq>
 800341c:	4602      	mov	r2, r0
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	685b      	ldr	r3, [r3, #4]
 8003422:	085b      	lsrs	r3, r3, #1
 8003424:	441a      	add	r2, r3
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	685b      	ldr	r3, [r3, #4]
 800342a:	fbb2 f3f3 	udiv	r3, r2, r3
 800342e:	b29b      	uxth	r3, r3
 8003430:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 8003432:	e038      	b.n	80034a6 <UART_SetConfig+0x656>
      case UART_CLOCKSOURCE_PCLK2:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 8003434:	f7fe fd06 	bl	8001e44 <HAL_RCC_GetPCLK2Freq>
 8003438:	4602      	mov	r2, r0
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	685b      	ldr	r3, [r3, #4]
 800343e:	085b      	lsrs	r3, r3, #1
 8003440:	441a      	add	r2, r3
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	685b      	ldr	r3, [r3, #4]
 8003446:	fbb2 f3f3 	udiv	r3, r2, r3
 800344a:	b29b      	uxth	r3, r3
 800344c:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 800344e:	e02a      	b.n	80034a6 <UART_SetConfig+0x656>
      case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	685b      	ldr	r3, [r3, #4]
 8003454:	085b      	lsrs	r3, r3, #1
 8003456:	f503 0374 	add.w	r3, r3, #15990784	; 0xf40000
 800345a:	f503 5310 	add.w	r3, r3, #9216	; 0x2400
 800345e:	687a      	ldr	r2, [r7, #4]
 8003460:	6852      	ldr	r2, [r2, #4]
 8003462:	fbb3 f3f2 	udiv	r3, r3, r2
 8003466:	b29b      	uxth	r3, r3
 8003468:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 800346a:	e01c      	b.n	80034a6 <UART_SetConfig+0x656>
      case UART_CLOCKSOURCE_SYSCLK:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 800346c:	f7fe fc3e 	bl	8001cec <HAL_RCC_GetSysClockFreq>
 8003470:	4602      	mov	r2, r0
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	685b      	ldr	r3, [r3, #4]
 8003476:	085b      	lsrs	r3, r3, #1
 8003478:	441a      	add	r2, r3
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	685b      	ldr	r3, [r3, #4]
 800347e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003482:	b29b      	uxth	r3, r3
 8003484:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 8003486:	e00e      	b.n	80034a6 <UART_SetConfig+0x656>
      case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	685b      	ldr	r3, [r3, #4]
 800348c:	085b      	lsrs	r3, r3, #1
 800348e:	f503 4200 	add.w	r2, r3, #32768	; 0x8000
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	685b      	ldr	r3, [r3, #4]
 8003496:	fbb2 f3f3 	udiv	r3, r2, r3
 800349a:	b29b      	uxth	r3, r3
 800349c:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 800349e:	e002      	b.n	80034a6 <UART_SetConfig+0x656>
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 80034a0:	2301      	movs	r3, #1
 80034a2:	74fb      	strb	r3, [r7, #19]
        break;
 80034a4:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80034a6:	697b      	ldr	r3, [r7, #20]
 80034a8:	2b0f      	cmp	r3, #15
 80034aa:	d908      	bls.n	80034be <UART_SetConfig+0x66e>
 80034ac:	697b      	ldr	r3, [r7, #20]
 80034ae:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80034b2:	d204      	bcs.n	80034be <UART_SetConfig+0x66e>
    {
      huart->Instance->BRR = usartdiv;
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	697a      	ldr	r2, [r7, #20]
 80034ba:	60da      	str	r2, [r3, #12]
 80034bc:	e001      	b.n	80034c2 <UART_SetConfig+0x672>
    }
    else
    {
      ret = HAL_ERROR;
 80034be:	2301      	movs	r3, #1
 80034c0:	74fb      	strb	r3, [r7, #19]
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	2200      	movs	r2, #0
 80034c6:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	2200      	movs	r2, #0
 80034cc:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 80034ce:	7cfb      	ldrb	r3, [r7, #19]
}
 80034d0:	4618      	mov	r0, r3
 80034d2:	3720      	adds	r7, #32
 80034d4:	46bd      	mov	sp, r7
 80034d6:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}
 80034da:	bf00      	nop
 80034dc:	f4240000 	.word	0xf4240000

080034e0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80034e0:	b480      	push	{r7}
 80034e2:	b083      	sub	sp, #12
 80034e4:	af00      	add	r7, sp, #0
 80034e6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034ec:	f003 0301 	and.w	r3, r3, #1
 80034f0:	2b00      	cmp	r3, #0
 80034f2:	d00a      	beq.n	800350a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	685b      	ldr	r3, [r3, #4]
 80034fa:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	430a      	orrs	r2, r1
 8003508:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800350e:	f003 0302 	and.w	r3, r3, #2
 8003512:	2b00      	cmp	r3, #0
 8003514:	d00a      	beq.n	800352c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	685b      	ldr	r3, [r3, #4]
 800351c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	430a      	orrs	r2, r1
 800352a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003530:	f003 0304 	and.w	r3, r3, #4
 8003534:	2b00      	cmp	r3, #0
 8003536:	d00a      	beq.n	800354e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	685b      	ldr	r3, [r3, #4]
 800353e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	430a      	orrs	r2, r1
 800354c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003552:	f003 0308 	and.w	r3, r3, #8
 8003556:	2b00      	cmp	r3, #0
 8003558:	d00a      	beq.n	8003570 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	685b      	ldr	r3, [r3, #4]
 8003560:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	430a      	orrs	r2, r1
 800356e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003574:	f003 0310 	and.w	r3, r3, #16
 8003578:	2b00      	cmp	r3, #0
 800357a:	d00a      	beq.n	8003592 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	689b      	ldr	r3, [r3, #8]
 8003582:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	430a      	orrs	r2, r1
 8003590:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003596:	f003 0320 	and.w	r3, r3, #32
 800359a:	2b00      	cmp	r3, #0
 800359c:	d00a      	beq.n	80035b4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	689b      	ldr	r3, [r3, #8]
 80035a4:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	430a      	orrs	r2, r1
 80035b2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035b8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80035bc:	2b00      	cmp	r3, #0
 80035be:	d01a      	beq.n	80035f6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	685b      	ldr	r3, [r3, #4]
 80035c6:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	430a      	orrs	r2, r1
 80035d4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035da:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80035de:	d10a      	bne.n	80035f6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	685b      	ldr	r3, [r3, #4]
 80035e6:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	430a      	orrs	r2, r1
 80035f4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035fa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80035fe:	2b00      	cmp	r3, #0
 8003600:	d00a      	beq.n	8003618 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	685b      	ldr	r3, [r3, #4]
 8003608:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	430a      	orrs	r2, r1
 8003616:	605a      	str	r2, [r3, #4]
  }
}
 8003618:	bf00      	nop
 800361a:	370c      	adds	r7, #12
 800361c:	46bd      	mov	sp, r7
 800361e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003622:	4770      	bx	lr

08003624 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003624:	b580      	push	{r7, lr}
 8003626:	b086      	sub	sp, #24
 8003628:	af02      	add	r7, sp, #8
 800362a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	2200      	movs	r2, #0
 8003630:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 8003632:	f7fd fb85 	bl	8000d40 <HAL_GetTick>
 8003636:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	f003 0308 	and.w	r3, r3, #8
 8003642:	2b08      	cmp	r3, #8
 8003644:	d10e      	bne.n	8003664 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003646:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800364a:	9300      	str	r3, [sp, #0]
 800364c:	68fb      	ldr	r3, [r7, #12]
 800364e:	2200      	movs	r2, #0
 8003650:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8003654:	6878      	ldr	r0, [r7, #4]
 8003656:	f000 f82a 	bl	80036ae <UART_WaitOnFlagUntilTimeout>
 800365a:	4603      	mov	r3, r0
 800365c:	2b00      	cmp	r3, #0
 800365e:	d001      	beq.n	8003664 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003660:	2303      	movs	r3, #3
 8003662:	e020      	b.n	80036a6 <UART_CheckIdleState+0x82>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	f003 0304 	and.w	r3, r3, #4
 800366e:	2b04      	cmp	r3, #4
 8003670:	d10e      	bne.n	8003690 <UART_CheckIdleState+0x6c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003672:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003676:	9300      	str	r3, [sp, #0]
 8003678:	68fb      	ldr	r3, [r7, #12]
 800367a:	2200      	movs	r2, #0
 800367c:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8003680:	6878      	ldr	r0, [r7, #4]
 8003682:	f000 f814 	bl	80036ae <UART_WaitOnFlagUntilTimeout>
 8003686:	4603      	mov	r3, r0
 8003688:	2b00      	cmp	r3, #0
 800368a:	d001      	beq.n	8003690 <UART_CheckIdleState+0x6c>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800368c:	2303      	movs	r3, #3
 800368e:	e00a      	b.n	80036a6 <UART_CheckIdleState+0x82>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	2220      	movs	r2, #32
 8003694:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	2220      	movs	r2, #32
 800369a:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UNLOCK(huart);
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	2200      	movs	r2, #0
 80036a0:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 80036a4:	2300      	movs	r3, #0
}
 80036a6:	4618      	mov	r0, r3
 80036a8:	3710      	adds	r7, #16
 80036aa:	46bd      	mov	sp, r7
 80036ac:	bd80      	pop	{r7, pc}

080036ae <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80036ae:	b580      	push	{r7, lr}
 80036b0:	b084      	sub	sp, #16
 80036b2:	af00      	add	r7, sp, #0
 80036b4:	60f8      	str	r0, [r7, #12]
 80036b6:	60b9      	str	r1, [r7, #8]
 80036b8:	603b      	str	r3, [r7, #0]
 80036ba:	4613      	mov	r3, r2
 80036bc:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80036be:	e02a      	b.n	8003716 <UART_WaitOnFlagUntilTimeout+0x68>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80036c0:	69bb      	ldr	r3, [r7, #24]
 80036c2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80036c6:	d026      	beq.n	8003716 <UART_WaitOnFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80036c8:	f7fd fb3a 	bl	8000d40 <HAL_GetTick>
 80036cc:	4602      	mov	r2, r0
 80036ce:	683b      	ldr	r3, [r7, #0]
 80036d0:	1ad3      	subs	r3, r2, r3
 80036d2:	69ba      	ldr	r2, [r7, #24]
 80036d4:	429a      	cmp	r2, r3
 80036d6:	d302      	bcc.n	80036de <UART_WaitOnFlagUntilTimeout+0x30>
 80036d8:	69bb      	ldr	r3, [r7, #24]
 80036da:	2b00      	cmp	r3, #0
 80036dc:	d11b      	bne.n	8003716 <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80036de:	68fb      	ldr	r3, [r7, #12]
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	681a      	ldr	r2, [r3, #0]
 80036e4:	68fb      	ldr	r3, [r7, #12]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80036ec:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80036ee:	68fb      	ldr	r3, [r7, #12]
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	689a      	ldr	r2, [r3, #8]
 80036f4:	68fb      	ldr	r3, [r7, #12]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	f022 0201 	bic.w	r2, r2, #1
 80036fc:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 80036fe:	68fb      	ldr	r3, [r7, #12]
 8003700:	2220      	movs	r2, #32
 8003702:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 8003704:	68fb      	ldr	r3, [r7, #12]
 8003706:	2220      	movs	r2, #32
 8003708:	679a      	str	r2, [r3, #120]	; 0x78

        __HAL_UNLOCK(huart);
 800370a:	68fb      	ldr	r3, [r7, #12]
 800370c:	2200      	movs	r2, #0
 800370e:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        return HAL_TIMEOUT;
 8003712:	2303      	movs	r3, #3
 8003714:	e00f      	b.n	8003736 <UART_WaitOnFlagUntilTimeout+0x88>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003716:	68fb      	ldr	r3, [r7, #12]
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	69da      	ldr	r2, [r3, #28]
 800371c:	68bb      	ldr	r3, [r7, #8]
 800371e:	4013      	ands	r3, r2
 8003720:	68ba      	ldr	r2, [r7, #8]
 8003722:	429a      	cmp	r2, r3
 8003724:	bf0c      	ite	eq
 8003726:	2301      	moveq	r3, #1
 8003728:	2300      	movne	r3, #0
 800372a:	b2db      	uxtb	r3, r3
 800372c:	461a      	mov	r2, r3
 800372e:	79fb      	ldrb	r3, [r7, #7]
 8003730:	429a      	cmp	r2, r3
 8003732:	d0c5      	beq.n	80036c0 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003734:	2300      	movs	r3, #0
}
 8003736:	4618      	mov	r0, r3
 8003738:	3710      	adds	r7, #16
 800373a:	46bd      	mov	sp, r7
 800373c:	bd80      	pop	{r7, pc}
	...

08003740 <osKernelInitialize>:
}
#endif /* SysTick */

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8003740:	b480      	push	{r7}
 8003742:	b085      	sub	sp, #20
 8003744:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003746:	f3ef 8305 	mrs	r3, IPSR
 800374a:	60bb      	str	r3, [r7, #8]
  return(result);
 800374c:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800374e:	2b00      	cmp	r3, #0
 8003750:	d10f      	bne.n	8003772 <osKernelInitialize+0x32>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003752:	f3ef 8310 	mrs	r3, PRIMASK
 8003756:	607b      	str	r3, [r7, #4]
  return(result);
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	2b00      	cmp	r3, #0
 800375c:	d109      	bne.n	8003772 <osKernelInitialize+0x32>
 800375e:	4b11      	ldr	r3, [pc, #68]	; (80037a4 <osKernelInitialize+0x64>)
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	2b02      	cmp	r3, #2
 8003764:	d109      	bne.n	800377a <osKernelInitialize+0x3a>
 */
__STATIC_FORCEINLINE uint32_t __get_BASEPRI(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8003766:	f3ef 8311 	mrs	r3, BASEPRI
 800376a:	603b      	str	r3, [r7, #0]
  return(result);
 800376c:	683b      	ldr	r3, [r7, #0]
 800376e:	2b00      	cmp	r3, #0
 8003770:	d003      	beq.n	800377a <osKernelInitialize+0x3a>
    stat = osErrorISR;
 8003772:	f06f 0305 	mvn.w	r3, #5
 8003776:	60fb      	str	r3, [r7, #12]
 8003778:	e00c      	b.n	8003794 <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 800377a:	4b0a      	ldr	r3, [pc, #40]	; (80037a4 <osKernelInitialize+0x64>)
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	2b00      	cmp	r3, #0
 8003780:	d105      	bne.n	800378e <osKernelInitialize+0x4e>
      #if defined(USE_FreeRTOS_HEAP_5)
        vPortDefineHeapRegions (xHeapRegions);
      #endif
      KernelState = osKernelReady;
 8003782:	4b08      	ldr	r3, [pc, #32]	; (80037a4 <osKernelInitialize+0x64>)
 8003784:	2201      	movs	r2, #1
 8003786:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8003788:	2300      	movs	r3, #0
 800378a:	60fb      	str	r3, [r7, #12]
 800378c:	e002      	b.n	8003794 <osKernelInitialize+0x54>
    } else {
      stat = osError;
 800378e:	f04f 33ff 	mov.w	r3, #4294967295
 8003792:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8003794:	68fb      	ldr	r3, [r7, #12]
}
 8003796:	4618      	mov	r0, r3
 8003798:	3714      	adds	r7, #20
 800379a:	46bd      	mov	sp, r7
 800379c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037a0:	4770      	bx	lr
 80037a2:	bf00      	nop
 80037a4:	20000030 	.word	0x20000030

080037a8 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 80037a8:	b580      	push	{r7, lr}
 80037aa:	b084      	sub	sp, #16
 80037ac:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80037ae:	f3ef 8305 	mrs	r3, IPSR
 80037b2:	60bb      	str	r3, [r7, #8]
  return(result);
 80037b4:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80037b6:	2b00      	cmp	r3, #0
 80037b8:	d10f      	bne.n	80037da <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80037ba:	f3ef 8310 	mrs	r3, PRIMASK
 80037be:	607b      	str	r3, [r7, #4]
  return(result);
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	2b00      	cmp	r3, #0
 80037c4:	d109      	bne.n	80037da <osKernelStart+0x32>
 80037c6:	4b11      	ldr	r3, [pc, #68]	; (800380c <osKernelStart+0x64>)
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	2b02      	cmp	r3, #2
 80037cc:	d109      	bne.n	80037e2 <osKernelStart+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80037ce:	f3ef 8311 	mrs	r3, BASEPRI
 80037d2:	603b      	str	r3, [r7, #0]
  return(result);
 80037d4:	683b      	ldr	r3, [r7, #0]
 80037d6:	2b00      	cmp	r3, #0
 80037d8:	d003      	beq.n	80037e2 <osKernelStart+0x3a>
    stat = osErrorISR;
 80037da:	f06f 0305 	mvn.w	r3, #5
 80037de:	60fb      	str	r3, [r7, #12]
 80037e0:	e00e      	b.n	8003800 <osKernelStart+0x58>
  }
  else {
    if (KernelState == osKernelReady) {
 80037e2:	4b0a      	ldr	r3, [pc, #40]	; (800380c <osKernelStart+0x64>)
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	2b01      	cmp	r3, #1
 80037e8:	d107      	bne.n	80037fa <osKernelStart+0x52>
      KernelState = osKernelRunning;
 80037ea:	4b08      	ldr	r3, [pc, #32]	; (800380c <osKernelStart+0x64>)
 80037ec:	2202      	movs	r2, #2
 80037ee:	601a      	str	r2, [r3, #0]
      vTaskStartScheduler();
 80037f0:	f001 fa72 	bl	8004cd8 <vTaskStartScheduler>
      stat = osOK;
 80037f4:	2300      	movs	r3, #0
 80037f6:	60fb      	str	r3, [r7, #12]
 80037f8:	e002      	b.n	8003800 <osKernelStart+0x58>
    } else {
      stat = osError;
 80037fa:	f04f 33ff 	mov.w	r3, #4294967295
 80037fe:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8003800:	68fb      	ldr	r3, [r7, #12]
}
 8003802:	4618      	mov	r0, r3
 8003804:	3710      	adds	r7, #16
 8003806:	46bd      	mov	sp, r7
 8003808:	bd80      	pop	{r7, pc}
 800380a:	bf00      	nop
 800380c:	20000030 	.word	0x20000030

08003810 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8003810:	b580      	push	{r7, lr}
 8003812:	b092      	sub	sp, #72	; 0x48
 8003814:	af04      	add	r7, sp, #16
 8003816:	60f8      	str	r0, [r7, #12]
 8003818:	60b9      	str	r1, [r7, #8]
 800381a:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800381c:	2300      	movs	r3, #0
 800381e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003820:	f3ef 8305 	mrs	r3, IPSR
 8003824:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8003826:	6a7b      	ldr	r3, [r7, #36]	; 0x24

  if (!IS_IRQ() && (func != NULL)) {
 8003828:	2b00      	cmp	r3, #0
 800382a:	f040 8094 	bne.w	8003956 <osThreadNew+0x146>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800382e:	f3ef 8310 	mrs	r3, PRIMASK
 8003832:	623b      	str	r3, [r7, #32]
  return(result);
 8003834:	6a3b      	ldr	r3, [r7, #32]
 8003836:	2b00      	cmp	r3, #0
 8003838:	f040 808d 	bne.w	8003956 <osThreadNew+0x146>
 800383c:	4b48      	ldr	r3, [pc, #288]	; (8003960 <osThreadNew+0x150>)
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	2b02      	cmp	r3, #2
 8003842:	d106      	bne.n	8003852 <osThreadNew+0x42>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8003844:	f3ef 8311 	mrs	r3, BASEPRI
 8003848:	61fb      	str	r3, [r7, #28]
  return(result);
 800384a:	69fb      	ldr	r3, [r7, #28]
 800384c:	2b00      	cmp	r3, #0
 800384e:	f040 8082 	bne.w	8003956 <osThreadNew+0x146>
 8003852:	68fb      	ldr	r3, [r7, #12]
 8003854:	2b00      	cmp	r3, #0
 8003856:	d07e      	beq.n	8003956 <osThreadNew+0x146>
    stack = configMINIMAL_STACK_SIZE;
 8003858:	2380      	movs	r3, #128	; 0x80
 800385a:	633b      	str	r3, [r7, #48]	; 0x30
    prio  = (UBaseType_t)osPriorityNormal;
 800385c:	2318      	movs	r3, #24
 800385e:	62fb      	str	r3, [r7, #44]	; 0x2c

    empty = '\0';
 8003860:	2300      	movs	r3, #0
 8003862:	76fb      	strb	r3, [r7, #27]
    name  = &empty;
 8003864:	f107 031b 	add.w	r3, r7, #27
 8003868:	637b      	str	r3, [r7, #52]	; 0x34
    mem   = -1;
 800386a:	f04f 33ff 	mov.w	r3, #4294967295
 800386e:	62bb      	str	r3, [r7, #40]	; 0x28

    if (attr != NULL) {
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	2b00      	cmp	r3, #0
 8003874:	d045      	beq.n	8003902 <osThreadNew+0xf2>
      if (attr->name != NULL) {
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	2b00      	cmp	r3, #0
 800387c:	d002      	beq.n	8003884 <osThreadNew+0x74>
        name = attr->name;
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	637b      	str	r3, [r7, #52]	; 0x34
      }
      if (attr->priority != osPriorityNone) {
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	699b      	ldr	r3, [r3, #24]
 8003888:	2b00      	cmp	r3, #0
 800388a:	d002      	beq.n	8003892 <osThreadNew+0x82>
        prio = (UBaseType_t)attr->priority;
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	699b      	ldr	r3, [r3, #24]
 8003890:	62fb      	str	r3, [r7, #44]	; 0x2c
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8003892:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003894:	2b00      	cmp	r3, #0
 8003896:	d008      	beq.n	80038aa <osThreadNew+0x9a>
 8003898:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800389a:	2b38      	cmp	r3, #56	; 0x38
 800389c:	d805      	bhi.n	80038aa <osThreadNew+0x9a>
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	685b      	ldr	r3, [r3, #4]
 80038a2:	f003 0301 	and.w	r3, r3, #1
 80038a6:	2b00      	cmp	r3, #0
 80038a8:	d001      	beq.n	80038ae <osThreadNew+0x9e>
        return (NULL);
 80038aa:	2300      	movs	r3, #0
 80038ac:	e054      	b.n	8003958 <osThreadNew+0x148>
      }

      if (attr->stack_size > 0U) {
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	695b      	ldr	r3, [r3, #20]
 80038b2:	2b00      	cmp	r3, #0
 80038b4:	d003      	beq.n	80038be <osThreadNew+0xae>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	695b      	ldr	r3, [r3, #20]
 80038ba:	089b      	lsrs	r3, r3, #2
 80038bc:	633b      	str	r3, [r7, #48]	; 0x30
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	689b      	ldr	r3, [r3, #8]
 80038c2:	2b00      	cmp	r3, #0
 80038c4:	d00e      	beq.n	80038e4 <osThreadNew+0xd4>
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	68db      	ldr	r3, [r3, #12]
 80038ca:	2b5b      	cmp	r3, #91	; 0x5b
 80038cc:	d90a      	bls.n	80038e4 <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80038d2:	2b00      	cmp	r3, #0
 80038d4:	d006      	beq.n	80038e4 <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	695b      	ldr	r3, [r3, #20]
 80038da:	2b00      	cmp	r3, #0
 80038dc:	d002      	beq.n	80038e4 <osThreadNew+0xd4>
        mem = 1;
 80038de:	2301      	movs	r3, #1
 80038e0:	62bb      	str	r3, [r7, #40]	; 0x28
 80038e2:	e010      	b.n	8003906 <osThreadNew+0xf6>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	689b      	ldr	r3, [r3, #8]
 80038e8:	2b00      	cmp	r3, #0
 80038ea:	d10c      	bne.n	8003906 <osThreadNew+0xf6>
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	68db      	ldr	r3, [r3, #12]
 80038f0:	2b00      	cmp	r3, #0
 80038f2:	d108      	bne.n	8003906 <osThreadNew+0xf6>
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	691b      	ldr	r3, [r3, #16]
 80038f8:	2b00      	cmp	r3, #0
 80038fa:	d104      	bne.n	8003906 <osThreadNew+0xf6>
          mem = 0;
 80038fc:	2300      	movs	r3, #0
 80038fe:	62bb      	str	r3, [r7, #40]	; 0x28
 8003900:	e001      	b.n	8003906 <osThreadNew+0xf6>
        }
      }
    }
    else {
      mem = 0;
 8003902:	2300      	movs	r3, #0
 8003904:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    if (mem == 1) {
 8003906:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003908:	2b01      	cmp	r3, #1
 800390a:	d110      	bne.n	800392e <osThreadNew+0x11e>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 8003910:	687a      	ldr	r2, [r7, #4]
 8003912:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8003914:	9202      	str	r2, [sp, #8]
 8003916:	9301      	str	r3, [sp, #4]
 8003918:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800391a:	9300      	str	r3, [sp, #0]
 800391c:	68bb      	ldr	r3, [r7, #8]
 800391e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003920:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8003922:	68f8      	ldr	r0, [r7, #12]
 8003924:	f000 ff96 	bl	8004854 <xTaskCreateStatic>
 8003928:	4603      	mov	r3, r0
 800392a:	617b      	str	r3, [r7, #20]
 800392c:	e013      	b.n	8003956 <osThreadNew+0x146>
    }
    else {
      if (mem == 0) {
 800392e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003930:	2b00      	cmp	r3, #0
 8003932:	d110      	bne.n	8003956 <osThreadNew+0x146>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8003934:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003936:	b29a      	uxth	r2, r3
 8003938:	f107 0314 	add.w	r3, r7, #20
 800393c:	9301      	str	r3, [sp, #4]
 800393e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003940:	9300      	str	r3, [sp, #0]
 8003942:	68bb      	ldr	r3, [r7, #8]
 8003944:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8003946:	68f8      	ldr	r0, [r7, #12]
 8003948:	f000 ffdd 	bl	8004906 <xTaskCreate>
 800394c:	4603      	mov	r3, r0
 800394e:	2b01      	cmp	r3, #1
 8003950:	d001      	beq.n	8003956 <osThreadNew+0x146>
          hTask = NULL;
 8003952:	2300      	movs	r3, #0
 8003954:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 8003956:	697b      	ldr	r3, [r7, #20]
}
 8003958:	4618      	mov	r0, r3
 800395a:	3738      	adds	r7, #56	; 0x38
 800395c:	46bd      	mov	sp, r7
 800395e:	bd80      	pop	{r7, pc}
 8003960:	20000030 	.word	0x20000030

08003964 <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 8003964:	b580      	push	{r7, lr}
 8003966:	b086      	sub	sp, #24
 8003968:	af00      	add	r7, sp, #0
 800396a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800396c:	f3ef 8305 	mrs	r3, IPSR
 8003970:	613b      	str	r3, [r7, #16]
  return(result);
 8003972:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 8003974:	2b00      	cmp	r3, #0
 8003976:	d10f      	bne.n	8003998 <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003978:	f3ef 8310 	mrs	r3, PRIMASK
 800397c:	60fb      	str	r3, [r7, #12]
  return(result);
 800397e:	68fb      	ldr	r3, [r7, #12]
 8003980:	2b00      	cmp	r3, #0
 8003982:	d109      	bne.n	8003998 <osDelay+0x34>
 8003984:	4b0d      	ldr	r3, [pc, #52]	; (80039bc <osDelay+0x58>)
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	2b02      	cmp	r3, #2
 800398a:	d109      	bne.n	80039a0 <osDelay+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800398c:	f3ef 8311 	mrs	r3, BASEPRI
 8003990:	60bb      	str	r3, [r7, #8]
  return(result);
 8003992:	68bb      	ldr	r3, [r7, #8]
 8003994:	2b00      	cmp	r3, #0
 8003996:	d003      	beq.n	80039a0 <osDelay+0x3c>
    stat = osErrorISR;
 8003998:	f06f 0305 	mvn.w	r3, #5
 800399c:	617b      	str	r3, [r7, #20]
 800399e:	e007      	b.n	80039b0 <osDelay+0x4c>
  }
  else {
    stat = osOK;
 80039a0:	2300      	movs	r3, #0
 80039a2:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	2b00      	cmp	r3, #0
 80039a8:	d002      	beq.n	80039b0 <osDelay+0x4c>
      vTaskDelay(ticks);
 80039aa:	6878      	ldr	r0, [r7, #4]
 80039ac:	f001 f960 	bl	8004c70 <vTaskDelay>
    }
  }

  return (stat);
 80039b0:	697b      	ldr	r3, [r7, #20]
}
 80039b2:	4618      	mov	r0, r3
 80039b4:	3718      	adds	r7, #24
 80039b6:	46bd      	mov	sp, r7
 80039b8:	bd80      	pop	{r7, pc}
 80039ba:	bf00      	nop
 80039bc:	20000030 	.word	0x20000030

080039c0 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 80039c0:	b480      	push	{r7}
 80039c2:	b085      	sub	sp, #20
 80039c4:	af00      	add	r7, sp, #0
 80039c6:	60f8      	str	r0, [r7, #12]
 80039c8:	60b9      	str	r1, [r7, #8]
 80039ca:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 80039cc:	68fb      	ldr	r3, [r7, #12]
 80039ce:	4a07      	ldr	r2, [pc, #28]	; (80039ec <vApplicationGetIdleTaskMemory+0x2c>)
 80039d0:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 80039d2:	68bb      	ldr	r3, [r7, #8]
 80039d4:	4a06      	ldr	r2, [pc, #24]	; (80039f0 <vApplicationGetIdleTaskMemory+0x30>)
 80039d6:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	2280      	movs	r2, #128	; 0x80
 80039dc:	601a      	str	r2, [r3, #0]
}
 80039de:	bf00      	nop
 80039e0:	3714      	adds	r7, #20
 80039e2:	46bd      	mov	sp, r7
 80039e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039e8:	4770      	bx	lr
 80039ea:	bf00      	nop
 80039ec:	20000034 	.word	0x20000034
 80039f0:	20000090 	.word	0x20000090

080039f4 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 80039f4:	b480      	push	{r7}
 80039f6:	b085      	sub	sp, #20
 80039f8:	af00      	add	r7, sp, #0
 80039fa:	60f8      	str	r0, [r7, #12]
 80039fc:	60b9      	str	r1, [r7, #8]
 80039fe:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8003a00:	68fb      	ldr	r3, [r7, #12]
 8003a02:	4a07      	ldr	r2, [pc, #28]	; (8003a20 <vApplicationGetTimerTaskMemory+0x2c>)
 8003a04:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8003a06:	68bb      	ldr	r3, [r7, #8]
 8003a08:	4a06      	ldr	r2, [pc, #24]	; (8003a24 <vApplicationGetTimerTaskMemory+0x30>)
 8003a0a:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003a12:	601a      	str	r2, [r3, #0]
}
 8003a14:	bf00      	nop
 8003a16:	3714      	adds	r7, #20
 8003a18:	46bd      	mov	sp, r7
 8003a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a1e:	4770      	bx	lr
 8003a20:	20000290 	.word	0x20000290
 8003a24:	200002ec 	.word	0x200002ec

08003a28 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8003a28:	b480      	push	{r7}
 8003a2a:	b083      	sub	sp, #12
 8003a2c:	af00      	add	r7, sp, #0
 8003a2e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	f103 0208 	add.w	r2, r3, #8
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	f04f 32ff 	mov.w	r2, #4294967295
 8003a40:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	f103 0208 	add.w	r2, r3, #8
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	f103 0208 	add.w	r2, r3, #8
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	2200      	movs	r2, #0
 8003a5a:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8003a5c:	bf00      	nop
 8003a5e:	370c      	adds	r7, #12
 8003a60:	46bd      	mov	sp, r7
 8003a62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a66:	4770      	bx	lr

08003a68 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8003a68:	b480      	push	{r7}
 8003a6a:	b083      	sub	sp, #12
 8003a6c:	af00      	add	r7, sp, #0
 8003a6e:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	2200      	movs	r2, #0
 8003a74:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8003a76:	bf00      	nop
 8003a78:	370c      	adds	r7, #12
 8003a7a:	46bd      	mov	sp, r7
 8003a7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a80:	4770      	bx	lr

08003a82 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003a82:	b480      	push	{r7}
 8003a84:	b085      	sub	sp, #20
 8003a86:	af00      	add	r7, sp, #0
 8003a88:	6078      	str	r0, [r7, #4]
 8003a8a:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	685b      	ldr	r3, [r3, #4]
 8003a90:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8003a92:	683b      	ldr	r3, [r7, #0]
 8003a94:	68fa      	ldr	r2, [r7, #12]
 8003a96:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8003a98:	68fb      	ldr	r3, [r7, #12]
 8003a9a:	689a      	ldr	r2, [r3, #8]
 8003a9c:	683b      	ldr	r3, [r7, #0]
 8003a9e:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8003aa0:	68fb      	ldr	r3, [r7, #12]
 8003aa2:	689b      	ldr	r3, [r3, #8]
 8003aa4:	683a      	ldr	r2, [r7, #0]
 8003aa6:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8003aa8:	68fb      	ldr	r3, [r7, #12]
 8003aaa:	683a      	ldr	r2, [r7, #0]
 8003aac:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8003aae:	683b      	ldr	r3, [r7, #0]
 8003ab0:	687a      	ldr	r2, [r7, #4]
 8003ab2:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	1c5a      	adds	r2, r3, #1
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	601a      	str	r2, [r3, #0]
}
 8003abe:	bf00      	nop
 8003ac0:	3714      	adds	r7, #20
 8003ac2:	46bd      	mov	sp, r7
 8003ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ac8:	4770      	bx	lr

08003aca <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003aca:	b480      	push	{r7}
 8003acc:	b085      	sub	sp, #20
 8003ace:	af00      	add	r7, sp, #0
 8003ad0:	6078      	str	r0, [r7, #4]
 8003ad2:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8003ad4:	683b      	ldr	r3, [r7, #0]
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8003ada:	68bb      	ldr	r3, [r7, #8]
 8003adc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ae0:	d103      	bne.n	8003aea <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	691b      	ldr	r3, [r3, #16]
 8003ae6:	60fb      	str	r3, [r7, #12]
 8003ae8:	e00c      	b.n	8003b04 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	3308      	adds	r3, #8
 8003aee:	60fb      	str	r3, [r7, #12]
 8003af0:	e002      	b.n	8003af8 <vListInsert+0x2e>
 8003af2:	68fb      	ldr	r3, [r7, #12]
 8003af4:	685b      	ldr	r3, [r3, #4]
 8003af6:	60fb      	str	r3, [r7, #12]
 8003af8:	68fb      	ldr	r3, [r7, #12]
 8003afa:	685b      	ldr	r3, [r3, #4]
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	68ba      	ldr	r2, [r7, #8]
 8003b00:	429a      	cmp	r2, r3
 8003b02:	d2f6      	bcs.n	8003af2 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8003b04:	68fb      	ldr	r3, [r7, #12]
 8003b06:	685a      	ldr	r2, [r3, #4]
 8003b08:	683b      	ldr	r3, [r7, #0]
 8003b0a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8003b0c:	683b      	ldr	r3, [r7, #0]
 8003b0e:	685b      	ldr	r3, [r3, #4]
 8003b10:	683a      	ldr	r2, [r7, #0]
 8003b12:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8003b14:	683b      	ldr	r3, [r7, #0]
 8003b16:	68fa      	ldr	r2, [r7, #12]
 8003b18:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8003b1a:	68fb      	ldr	r3, [r7, #12]
 8003b1c:	683a      	ldr	r2, [r7, #0]
 8003b1e:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8003b20:	683b      	ldr	r3, [r7, #0]
 8003b22:	687a      	ldr	r2, [r7, #4]
 8003b24:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	1c5a      	adds	r2, r3, #1
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	601a      	str	r2, [r3, #0]
}
 8003b30:	bf00      	nop
 8003b32:	3714      	adds	r7, #20
 8003b34:	46bd      	mov	sp, r7
 8003b36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b3a:	4770      	bx	lr

08003b3c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8003b3c:	b480      	push	{r7}
 8003b3e:	b085      	sub	sp, #20
 8003b40:	af00      	add	r7, sp, #0
 8003b42:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	691b      	ldr	r3, [r3, #16]
 8003b48:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	685b      	ldr	r3, [r3, #4]
 8003b4e:	687a      	ldr	r2, [r7, #4]
 8003b50:	6892      	ldr	r2, [r2, #8]
 8003b52:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	689b      	ldr	r3, [r3, #8]
 8003b58:	687a      	ldr	r2, [r7, #4]
 8003b5a:	6852      	ldr	r2, [r2, #4]
 8003b5c:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8003b5e:	68fb      	ldr	r3, [r7, #12]
 8003b60:	685b      	ldr	r3, [r3, #4]
 8003b62:	687a      	ldr	r2, [r7, #4]
 8003b64:	429a      	cmp	r2, r3
 8003b66:	d103      	bne.n	8003b70 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	689a      	ldr	r2, [r3, #8]
 8003b6c:	68fb      	ldr	r3, [r7, #12]
 8003b6e:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	2200      	movs	r2, #0
 8003b74:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8003b76:	68fb      	ldr	r3, [r7, #12]
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	1e5a      	subs	r2, r3, #1
 8003b7c:	68fb      	ldr	r3, [r7, #12]
 8003b7e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8003b80:	68fb      	ldr	r3, [r7, #12]
 8003b82:	681b      	ldr	r3, [r3, #0]
}
 8003b84:	4618      	mov	r0, r3
 8003b86:	3714      	adds	r7, #20
 8003b88:	46bd      	mov	sp, r7
 8003b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b8e:	4770      	bx	lr

08003b90 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8003b90:	b580      	push	{r7, lr}
 8003b92:	b084      	sub	sp, #16
 8003b94:	af00      	add	r7, sp, #0
 8003b96:	6078      	str	r0, [r7, #4]
 8003b98:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8003b9e:	68fb      	ldr	r3, [r7, #12]
 8003ba0:	2b00      	cmp	r3, #0
 8003ba2:	d109      	bne.n	8003bb8 <xQueueGenericReset+0x28>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8003ba4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ba8:	f383 8811 	msr	BASEPRI, r3
 8003bac:	f3bf 8f6f 	isb	sy
 8003bb0:	f3bf 8f4f 	dsb	sy
 8003bb4:	60bb      	str	r3, [r7, #8]
 8003bb6:	e7fe      	b.n	8003bb6 <xQueueGenericReset+0x26>

	taskENTER_CRITICAL();
 8003bb8:	f002 fae8 	bl	800618c <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 8003bbc:	68fb      	ldr	r3, [r7, #12]
 8003bbe:	681a      	ldr	r2, [r3, #0]
 8003bc0:	68fb      	ldr	r3, [r7, #12]
 8003bc2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003bc4:	68f9      	ldr	r1, [r7, #12]
 8003bc6:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8003bc8:	fb01 f303 	mul.w	r3, r1, r3
 8003bcc:	441a      	add	r2, r3
 8003bce:	68fb      	ldr	r3, [r7, #12]
 8003bd0:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8003bd2:	68fb      	ldr	r3, [r7, #12]
 8003bd4:	2200      	movs	r2, #0
 8003bd6:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8003bd8:	68fb      	ldr	r3, [r7, #12]
 8003bda:	681a      	ldr	r2, [r3, #0]
 8003bdc:	68fb      	ldr	r3, [r7, #12]
 8003bde:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 8003be0:	68fb      	ldr	r3, [r7, #12]
 8003be2:	681a      	ldr	r2, [r3, #0]
 8003be4:	68fb      	ldr	r3, [r7, #12]
 8003be6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003be8:	3b01      	subs	r3, #1
 8003bea:	68f9      	ldr	r1, [r7, #12]
 8003bec:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8003bee:	fb01 f303 	mul.w	r3, r1, r3
 8003bf2:	441a      	add	r2, r3
 8003bf4:	68fb      	ldr	r3, [r7, #12]
 8003bf6:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8003bf8:	68fb      	ldr	r3, [r7, #12]
 8003bfa:	22ff      	movs	r2, #255	; 0xff
 8003bfc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8003c00:	68fb      	ldr	r3, [r7, #12]
 8003c02:	22ff      	movs	r2, #255	; 0xff
 8003c04:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8003c08:	683b      	ldr	r3, [r7, #0]
 8003c0a:	2b00      	cmp	r3, #0
 8003c0c:	d114      	bne.n	8003c38 <xQueueGenericReset+0xa8>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003c0e:	68fb      	ldr	r3, [r7, #12]
 8003c10:	691b      	ldr	r3, [r3, #16]
 8003c12:	2b00      	cmp	r3, #0
 8003c14:	d01a      	beq.n	8003c4c <xQueueGenericReset+0xbc>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003c16:	68fb      	ldr	r3, [r7, #12]
 8003c18:	3310      	adds	r3, #16
 8003c1a:	4618      	mov	r0, r3
 8003c1c:	f001 fae2 	bl	80051e4 <xTaskRemoveFromEventList>
 8003c20:	4603      	mov	r3, r0
 8003c22:	2b00      	cmp	r3, #0
 8003c24:	d012      	beq.n	8003c4c <xQueueGenericReset+0xbc>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8003c26:	4b0d      	ldr	r3, [pc, #52]	; (8003c5c <xQueueGenericReset+0xcc>)
 8003c28:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003c2c:	601a      	str	r2, [r3, #0]
 8003c2e:	f3bf 8f4f 	dsb	sy
 8003c32:	f3bf 8f6f 	isb	sy
 8003c36:	e009      	b.n	8003c4c <xQueueGenericReset+0xbc>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8003c38:	68fb      	ldr	r3, [r7, #12]
 8003c3a:	3310      	adds	r3, #16
 8003c3c:	4618      	mov	r0, r3
 8003c3e:	f7ff fef3 	bl	8003a28 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8003c42:	68fb      	ldr	r3, [r7, #12]
 8003c44:	3324      	adds	r3, #36	; 0x24
 8003c46:	4618      	mov	r0, r3
 8003c48:	f7ff feee 	bl	8003a28 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8003c4c:	f002 facc 	bl	80061e8 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8003c50:	2301      	movs	r3, #1
}
 8003c52:	4618      	mov	r0, r3
 8003c54:	3710      	adds	r7, #16
 8003c56:	46bd      	mov	sp, r7
 8003c58:	bd80      	pop	{r7, pc}
 8003c5a:	bf00      	nop
 8003c5c:	e000ed04 	.word	0xe000ed04

08003c60 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8003c60:	b580      	push	{r7, lr}
 8003c62:	b08e      	sub	sp, #56	; 0x38
 8003c64:	af02      	add	r7, sp, #8
 8003c66:	60f8      	str	r0, [r7, #12]
 8003c68:	60b9      	str	r1, [r7, #8]
 8003c6a:	607a      	str	r2, [r7, #4]
 8003c6c:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8003c6e:	68fb      	ldr	r3, [r7, #12]
 8003c70:	2b00      	cmp	r3, #0
 8003c72:	d109      	bne.n	8003c88 <xQueueGenericCreateStatic+0x28>
 8003c74:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c78:	f383 8811 	msr	BASEPRI, r3
 8003c7c:	f3bf 8f6f 	isb	sy
 8003c80:	f3bf 8f4f 	dsb	sy
 8003c84:	62bb      	str	r3, [r7, #40]	; 0x28
 8003c86:	e7fe      	b.n	8003c86 <xQueueGenericCreateStatic+0x26>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8003c88:	683b      	ldr	r3, [r7, #0]
 8003c8a:	2b00      	cmp	r3, #0
 8003c8c:	d109      	bne.n	8003ca2 <xQueueGenericCreateStatic+0x42>
 8003c8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c92:	f383 8811 	msr	BASEPRI, r3
 8003c96:	f3bf 8f6f 	isb	sy
 8003c9a:	f3bf 8f4f 	dsb	sy
 8003c9e:	627b      	str	r3, [r7, #36]	; 0x24
 8003ca0:	e7fe      	b.n	8003ca0 <xQueueGenericCreateStatic+0x40>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	2b00      	cmp	r3, #0
 8003ca6:	d002      	beq.n	8003cae <xQueueGenericCreateStatic+0x4e>
 8003ca8:	68bb      	ldr	r3, [r7, #8]
 8003caa:	2b00      	cmp	r3, #0
 8003cac:	d001      	beq.n	8003cb2 <xQueueGenericCreateStatic+0x52>
 8003cae:	2301      	movs	r3, #1
 8003cb0:	e000      	b.n	8003cb4 <xQueueGenericCreateStatic+0x54>
 8003cb2:	2300      	movs	r3, #0
 8003cb4:	2b00      	cmp	r3, #0
 8003cb6:	d109      	bne.n	8003ccc <xQueueGenericCreateStatic+0x6c>
 8003cb8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003cbc:	f383 8811 	msr	BASEPRI, r3
 8003cc0:	f3bf 8f6f 	isb	sy
 8003cc4:	f3bf 8f4f 	dsb	sy
 8003cc8:	623b      	str	r3, [r7, #32]
 8003cca:	e7fe      	b.n	8003cca <xQueueGenericCreateStatic+0x6a>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	2b00      	cmp	r3, #0
 8003cd0:	d102      	bne.n	8003cd8 <xQueueGenericCreateStatic+0x78>
 8003cd2:	68bb      	ldr	r3, [r7, #8]
 8003cd4:	2b00      	cmp	r3, #0
 8003cd6:	d101      	bne.n	8003cdc <xQueueGenericCreateStatic+0x7c>
 8003cd8:	2301      	movs	r3, #1
 8003cda:	e000      	b.n	8003cde <xQueueGenericCreateStatic+0x7e>
 8003cdc:	2300      	movs	r3, #0
 8003cde:	2b00      	cmp	r3, #0
 8003ce0:	d109      	bne.n	8003cf6 <xQueueGenericCreateStatic+0x96>
 8003ce2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ce6:	f383 8811 	msr	BASEPRI, r3
 8003cea:	f3bf 8f6f 	isb	sy
 8003cee:	f3bf 8f4f 	dsb	sy
 8003cf2:	61fb      	str	r3, [r7, #28]
 8003cf4:	e7fe      	b.n	8003cf4 <xQueueGenericCreateStatic+0x94>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8003cf6:	2350      	movs	r3, #80	; 0x50
 8003cf8:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8003cfa:	697b      	ldr	r3, [r7, #20]
 8003cfc:	2b50      	cmp	r3, #80	; 0x50
 8003cfe:	d009      	beq.n	8003d14 <xQueueGenericCreateStatic+0xb4>
 8003d00:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d04:	f383 8811 	msr	BASEPRI, r3
 8003d08:	f3bf 8f6f 	isb	sy
 8003d0c:	f3bf 8f4f 	dsb	sy
 8003d10:	61bb      	str	r3, [r7, #24]
 8003d12:	e7fe      	b.n	8003d12 <xQueueGenericCreateStatic+0xb2>
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8003d14:	683b      	ldr	r3, [r7, #0]
 8003d16:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8003d18:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003d1a:	2b00      	cmp	r3, #0
 8003d1c:	d00d      	beq.n	8003d3a <xQueueGenericCreateStatic+0xda>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8003d1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003d20:	2201      	movs	r2, #1
 8003d22:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8003d26:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8003d2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003d2c:	9300      	str	r3, [sp, #0]
 8003d2e:	4613      	mov	r3, r2
 8003d30:	687a      	ldr	r2, [r7, #4]
 8003d32:	68b9      	ldr	r1, [r7, #8]
 8003d34:	68f8      	ldr	r0, [r7, #12]
 8003d36:	f000 f842 	bl	8003dbe <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 8003d3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8003d3c:	4618      	mov	r0, r3
 8003d3e:	3730      	adds	r7, #48	; 0x30
 8003d40:	46bd      	mov	sp, r7
 8003d42:	bd80      	pop	{r7, pc}

08003d44 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8003d44:	b580      	push	{r7, lr}
 8003d46:	b08a      	sub	sp, #40	; 0x28
 8003d48:	af02      	add	r7, sp, #8
 8003d4a:	60f8      	str	r0, [r7, #12]
 8003d4c:	60b9      	str	r1, [r7, #8]
 8003d4e:	4613      	mov	r3, r2
 8003d50:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8003d52:	68fb      	ldr	r3, [r7, #12]
 8003d54:	2b00      	cmp	r3, #0
 8003d56:	d109      	bne.n	8003d6c <xQueueGenericCreate+0x28>
 8003d58:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d5c:	f383 8811 	msr	BASEPRI, r3
 8003d60:	f3bf 8f6f 	isb	sy
 8003d64:	f3bf 8f4f 	dsb	sy
 8003d68:	613b      	str	r3, [r7, #16]
 8003d6a:	e7fe      	b.n	8003d6a <xQueueGenericCreate+0x26>

		if( uxItemSize == ( UBaseType_t ) 0 )
 8003d6c:	68bb      	ldr	r3, [r7, #8]
 8003d6e:	2b00      	cmp	r3, #0
 8003d70:	d102      	bne.n	8003d78 <xQueueGenericCreate+0x34>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 8003d72:	2300      	movs	r3, #0
 8003d74:	61fb      	str	r3, [r7, #28]
 8003d76:	e004      	b.n	8003d82 <xQueueGenericCreate+0x3e>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003d78:	68fb      	ldr	r3, [r7, #12]
 8003d7a:	68ba      	ldr	r2, [r7, #8]
 8003d7c:	fb02 f303 	mul.w	r3, r2, r3
 8003d80:	61fb      	str	r3, [r7, #28]
		}

		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 8003d82:	69fb      	ldr	r3, [r7, #28]
 8003d84:	3350      	adds	r3, #80	; 0x50
 8003d86:	4618      	mov	r0, r3
 8003d88:	f002 fb1a 	bl	80063c0 <pvPortMalloc>
 8003d8c:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8003d8e:	69bb      	ldr	r3, [r7, #24]
 8003d90:	2b00      	cmp	r3, #0
 8003d92:	d00f      	beq.n	8003db4 <xQueueGenericCreate+0x70>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
 8003d94:	69bb      	ldr	r3, [r7, #24]
 8003d96:	3350      	adds	r3, #80	; 0x50
 8003d98:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8003d9a:	69bb      	ldr	r3, [r7, #24]
 8003d9c:	2200      	movs	r2, #0
 8003d9e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8003da2:	79fa      	ldrb	r2, [r7, #7]
 8003da4:	69bb      	ldr	r3, [r7, #24]
 8003da6:	9300      	str	r3, [sp, #0]
 8003da8:	4613      	mov	r3, r2
 8003daa:	697a      	ldr	r2, [r7, #20]
 8003dac:	68b9      	ldr	r1, [r7, #8]
 8003dae:	68f8      	ldr	r0, [r7, #12]
 8003db0:	f000 f805 	bl	8003dbe <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 8003db4:	69bb      	ldr	r3, [r7, #24]
	}
 8003db6:	4618      	mov	r0, r3
 8003db8:	3720      	adds	r7, #32
 8003dba:	46bd      	mov	sp, r7
 8003dbc:	bd80      	pop	{r7, pc}

08003dbe <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8003dbe:	b580      	push	{r7, lr}
 8003dc0:	b084      	sub	sp, #16
 8003dc2:	af00      	add	r7, sp, #0
 8003dc4:	60f8      	str	r0, [r7, #12]
 8003dc6:	60b9      	str	r1, [r7, #8]
 8003dc8:	607a      	str	r2, [r7, #4]
 8003dca:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8003dcc:	68bb      	ldr	r3, [r7, #8]
 8003dce:	2b00      	cmp	r3, #0
 8003dd0:	d103      	bne.n	8003dda <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8003dd2:	69bb      	ldr	r3, [r7, #24]
 8003dd4:	69ba      	ldr	r2, [r7, #24]
 8003dd6:	601a      	str	r2, [r3, #0]
 8003dd8:	e002      	b.n	8003de0 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8003dda:	69bb      	ldr	r3, [r7, #24]
 8003ddc:	687a      	ldr	r2, [r7, #4]
 8003dde:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8003de0:	69bb      	ldr	r3, [r7, #24]
 8003de2:	68fa      	ldr	r2, [r7, #12]
 8003de4:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8003de6:	69bb      	ldr	r3, [r7, #24]
 8003de8:	68ba      	ldr	r2, [r7, #8]
 8003dea:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8003dec:	2101      	movs	r1, #1
 8003dee:	69b8      	ldr	r0, [r7, #24]
 8003df0:	f7ff fece 	bl	8003b90 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8003df4:	69bb      	ldr	r3, [r7, #24]
 8003df6:	78fa      	ldrb	r2, [r7, #3]
 8003df8:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8003dfc:	bf00      	nop
 8003dfe:	3710      	adds	r7, #16
 8003e00:	46bd      	mov	sp, r7
 8003e02:	bd80      	pop	{r7, pc}

08003e04 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 8003e04:	b580      	push	{r7, lr}
 8003e06:	b082      	sub	sp, #8
 8003e08:	af00      	add	r7, sp, #0
 8003e0a:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	2b00      	cmp	r3, #0
 8003e10:	d00e      	beq.n	8003e30 <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->pxMutexHolder = NULL;
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	2200      	movs	r2, #0
 8003e16:	605a      	str	r2, [r3, #4]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	2200      	movs	r2, #0
 8003e1c:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.uxRecursiveCallCount = 0;
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	2200      	movs	r2, #0
 8003e22:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8003e24:	2300      	movs	r3, #0
 8003e26:	2200      	movs	r2, #0
 8003e28:	2100      	movs	r1, #0
 8003e2a:	6878      	ldr	r0, [r7, #4]
 8003e2c:	f000 f81c 	bl	8003e68 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 8003e30:	bf00      	nop
 8003e32:	3708      	adds	r7, #8
 8003e34:	46bd      	mov	sp, r7
 8003e36:	bd80      	pop	{r7, pc}

08003e38 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 8003e38:	b580      	push	{r7, lr}
 8003e3a:	b086      	sub	sp, #24
 8003e3c:	af00      	add	r7, sp, #0
 8003e3e:	4603      	mov	r3, r0
 8003e40:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8003e42:	2301      	movs	r3, #1
 8003e44:	617b      	str	r3, [r7, #20]
 8003e46:	2300      	movs	r3, #0
 8003e48:	613b      	str	r3, [r7, #16]

		pxNewQueue = ( Queue_t * ) xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 8003e4a:	79fb      	ldrb	r3, [r7, #7]
 8003e4c:	461a      	mov	r2, r3
 8003e4e:	6939      	ldr	r1, [r7, #16]
 8003e50:	6978      	ldr	r0, [r7, #20]
 8003e52:	f7ff ff77 	bl	8003d44 <xQueueGenericCreate>
 8003e56:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( pxNewQueue );
 8003e58:	68f8      	ldr	r0, [r7, #12]
 8003e5a:	f7ff ffd3 	bl	8003e04 <prvInitialiseMutex>

		return pxNewQueue;
 8003e5e:	68fb      	ldr	r3, [r7, #12]
	}
 8003e60:	4618      	mov	r0, r3
 8003e62:	3718      	adds	r7, #24
 8003e64:	46bd      	mov	sp, r7
 8003e66:	bd80      	pop	{r7, pc}

08003e68 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8003e68:	b580      	push	{r7, lr}
 8003e6a:	b08e      	sub	sp, #56	; 0x38
 8003e6c:	af00      	add	r7, sp, #0
 8003e6e:	60f8      	str	r0, [r7, #12]
 8003e70:	60b9      	str	r1, [r7, #8]
 8003e72:	607a      	str	r2, [r7, #4]
 8003e74:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8003e76:	2300      	movs	r3, #0
 8003e78:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8003e7a:	68fb      	ldr	r3, [r7, #12]
 8003e7c:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8003e7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e80:	2b00      	cmp	r3, #0
 8003e82:	d109      	bne.n	8003e98 <xQueueGenericSend+0x30>
 8003e84:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e88:	f383 8811 	msr	BASEPRI, r3
 8003e8c:	f3bf 8f6f 	isb	sy
 8003e90:	f3bf 8f4f 	dsb	sy
 8003e94:	62bb      	str	r3, [r7, #40]	; 0x28
 8003e96:	e7fe      	b.n	8003e96 <xQueueGenericSend+0x2e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003e98:	68bb      	ldr	r3, [r7, #8]
 8003e9a:	2b00      	cmp	r3, #0
 8003e9c:	d103      	bne.n	8003ea6 <xQueueGenericSend+0x3e>
 8003e9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ea0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ea2:	2b00      	cmp	r3, #0
 8003ea4:	d101      	bne.n	8003eaa <xQueueGenericSend+0x42>
 8003ea6:	2301      	movs	r3, #1
 8003ea8:	e000      	b.n	8003eac <xQueueGenericSend+0x44>
 8003eaa:	2300      	movs	r3, #0
 8003eac:	2b00      	cmp	r3, #0
 8003eae:	d109      	bne.n	8003ec4 <xQueueGenericSend+0x5c>
 8003eb0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003eb4:	f383 8811 	msr	BASEPRI, r3
 8003eb8:	f3bf 8f6f 	isb	sy
 8003ebc:	f3bf 8f4f 	dsb	sy
 8003ec0:	627b      	str	r3, [r7, #36]	; 0x24
 8003ec2:	e7fe      	b.n	8003ec2 <xQueueGenericSend+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8003ec4:	683b      	ldr	r3, [r7, #0]
 8003ec6:	2b02      	cmp	r3, #2
 8003ec8:	d103      	bne.n	8003ed2 <xQueueGenericSend+0x6a>
 8003eca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ecc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003ece:	2b01      	cmp	r3, #1
 8003ed0:	d101      	bne.n	8003ed6 <xQueueGenericSend+0x6e>
 8003ed2:	2301      	movs	r3, #1
 8003ed4:	e000      	b.n	8003ed8 <xQueueGenericSend+0x70>
 8003ed6:	2300      	movs	r3, #0
 8003ed8:	2b00      	cmp	r3, #0
 8003eda:	d109      	bne.n	8003ef0 <xQueueGenericSend+0x88>
 8003edc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ee0:	f383 8811 	msr	BASEPRI, r3
 8003ee4:	f3bf 8f6f 	isb	sy
 8003ee8:	f3bf 8f4f 	dsb	sy
 8003eec:	623b      	str	r3, [r7, #32]
 8003eee:	e7fe      	b.n	8003eee <xQueueGenericSend+0x86>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8003ef0:	f001 fb34 	bl	800555c <xTaskGetSchedulerState>
 8003ef4:	4603      	mov	r3, r0
 8003ef6:	2b00      	cmp	r3, #0
 8003ef8:	d102      	bne.n	8003f00 <xQueueGenericSend+0x98>
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	2b00      	cmp	r3, #0
 8003efe:	d101      	bne.n	8003f04 <xQueueGenericSend+0x9c>
 8003f00:	2301      	movs	r3, #1
 8003f02:	e000      	b.n	8003f06 <xQueueGenericSend+0x9e>
 8003f04:	2300      	movs	r3, #0
 8003f06:	2b00      	cmp	r3, #0
 8003f08:	d109      	bne.n	8003f1e <xQueueGenericSend+0xb6>
 8003f0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f0e:	f383 8811 	msr	BASEPRI, r3
 8003f12:	f3bf 8f6f 	isb	sy
 8003f16:	f3bf 8f4f 	dsb	sy
 8003f1a:	61fb      	str	r3, [r7, #28]
 8003f1c:	e7fe      	b.n	8003f1c <xQueueGenericSend+0xb4>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8003f1e:	f002 f935 	bl	800618c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8003f22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f24:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003f26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f28:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003f2a:	429a      	cmp	r2, r3
 8003f2c:	d302      	bcc.n	8003f34 <xQueueGenericSend+0xcc>
 8003f2e:	683b      	ldr	r3, [r7, #0]
 8003f30:	2b02      	cmp	r3, #2
 8003f32:	d129      	bne.n	8003f88 <xQueueGenericSend+0x120>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8003f34:	683a      	ldr	r2, [r7, #0]
 8003f36:	68b9      	ldr	r1, [r7, #8]
 8003f38:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003f3a:	f000 fb1f 	bl	800457c <prvCopyDataToQueue>
 8003f3e:	62f8      	str	r0, [r7, #44]	; 0x2c
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003f40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f44:	2b00      	cmp	r3, #0
 8003f46:	d010      	beq.n	8003f6a <xQueueGenericSend+0x102>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003f48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f4a:	3324      	adds	r3, #36	; 0x24
 8003f4c:	4618      	mov	r0, r3
 8003f4e:	f001 f949 	bl	80051e4 <xTaskRemoveFromEventList>
 8003f52:	4603      	mov	r3, r0
 8003f54:	2b00      	cmp	r3, #0
 8003f56:	d013      	beq.n	8003f80 <xQueueGenericSend+0x118>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8003f58:	4b3f      	ldr	r3, [pc, #252]	; (8004058 <xQueueGenericSend+0x1f0>)
 8003f5a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003f5e:	601a      	str	r2, [r3, #0]
 8003f60:	f3bf 8f4f 	dsb	sy
 8003f64:	f3bf 8f6f 	isb	sy
 8003f68:	e00a      	b.n	8003f80 <xQueueGenericSend+0x118>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8003f6a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003f6c:	2b00      	cmp	r3, #0
 8003f6e:	d007      	beq.n	8003f80 <xQueueGenericSend+0x118>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8003f70:	4b39      	ldr	r3, [pc, #228]	; (8004058 <xQueueGenericSend+0x1f0>)
 8003f72:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003f76:	601a      	str	r2, [r3, #0]
 8003f78:	f3bf 8f4f 	dsb	sy
 8003f7c:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8003f80:	f002 f932 	bl	80061e8 <vPortExitCritical>
				return pdPASS;
 8003f84:	2301      	movs	r3, #1
 8003f86:	e063      	b.n	8004050 <xQueueGenericSend+0x1e8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	2b00      	cmp	r3, #0
 8003f8c:	d103      	bne.n	8003f96 <xQueueGenericSend+0x12e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8003f8e:	f002 f92b 	bl	80061e8 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8003f92:	2300      	movs	r3, #0
 8003f94:	e05c      	b.n	8004050 <xQueueGenericSend+0x1e8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8003f96:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003f98:	2b00      	cmp	r3, #0
 8003f9a:	d106      	bne.n	8003faa <xQueueGenericSend+0x142>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8003f9c:	f107 0314 	add.w	r3, r7, #20
 8003fa0:	4618      	mov	r0, r3
 8003fa2:	f001 f981 	bl	80052a8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8003fa6:	2301      	movs	r3, #1
 8003fa8:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8003faa:	f002 f91d 	bl	80061e8 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8003fae:	f000 fef7 	bl	8004da0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8003fb2:	f002 f8eb 	bl	800618c <vPortEnterCritical>
 8003fb6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003fb8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003fbc:	b25b      	sxtb	r3, r3
 8003fbe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003fc2:	d103      	bne.n	8003fcc <xQueueGenericSend+0x164>
 8003fc4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003fc6:	2200      	movs	r2, #0
 8003fc8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003fcc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003fce:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003fd2:	b25b      	sxtb	r3, r3
 8003fd4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003fd8:	d103      	bne.n	8003fe2 <xQueueGenericSend+0x17a>
 8003fda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003fdc:	2200      	movs	r2, #0
 8003fde:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003fe2:	f002 f901 	bl	80061e8 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8003fe6:	1d3a      	adds	r2, r7, #4
 8003fe8:	f107 0314 	add.w	r3, r7, #20
 8003fec:	4611      	mov	r1, r2
 8003fee:	4618      	mov	r0, r3
 8003ff0:	f001 f970 	bl	80052d4 <xTaskCheckForTimeOut>
 8003ff4:	4603      	mov	r3, r0
 8003ff6:	2b00      	cmp	r3, #0
 8003ff8:	d124      	bne.n	8004044 <xQueueGenericSend+0x1dc>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8003ffa:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003ffc:	f000 fbb6 	bl	800476c <prvIsQueueFull>
 8004000:	4603      	mov	r3, r0
 8004002:	2b00      	cmp	r3, #0
 8004004:	d018      	beq.n	8004038 <xQueueGenericSend+0x1d0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8004006:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004008:	3310      	adds	r3, #16
 800400a:	687a      	ldr	r2, [r7, #4]
 800400c:	4611      	mov	r1, r2
 800400e:	4618      	mov	r0, r3
 8004010:	f001 f89a 	bl	8005148 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8004014:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004016:	f000 fb41 	bl	800469c <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800401a:	f000 fecf 	bl	8004dbc <xTaskResumeAll>
 800401e:	4603      	mov	r3, r0
 8004020:	2b00      	cmp	r3, #0
 8004022:	f47f af7c 	bne.w	8003f1e <xQueueGenericSend+0xb6>
				{
					portYIELD_WITHIN_API();
 8004026:	4b0c      	ldr	r3, [pc, #48]	; (8004058 <xQueueGenericSend+0x1f0>)
 8004028:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800402c:	601a      	str	r2, [r3, #0]
 800402e:	f3bf 8f4f 	dsb	sy
 8004032:	f3bf 8f6f 	isb	sy
 8004036:	e772      	b.n	8003f1e <xQueueGenericSend+0xb6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8004038:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800403a:	f000 fb2f 	bl	800469c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800403e:	f000 febd 	bl	8004dbc <xTaskResumeAll>
 8004042:	e76c      	b.n	8003f1e <xQueueGenericSend+0xb6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8004044:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004046:	f000 fb29 	bl	800469c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800404a:	f000 feb7 	bl	8004dbc <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800404e:	2300      	movs	r3, #0
		}
	}
}
 8004050:	4618      	mov	r0, r3
 8004052:	3738      	adds	r7, #56	; 0x38
 8004054:	46bd      	mov	sp, r7
 8004056:	bd80      	pop	{r7, pc}
 8004058:	e000ed04 	.word	0xe000ed04

0800405c <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800405c:	b580      	push	{r7, lr}
 800405e:	b08e      	sub	sp, #56	; 0x38
 8004060:	af00      	add	r7, sp, #0
 8004062:	60f8      	str	r0, [r7, #12]
 8004064:	60b9      	str	r1, [r7, #8]
 8004066:	607a      	str	r2, [r7, #4]
 8004068:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800406a:	68fb      	ldr	r3, [r7, #12]
 800406c:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800406e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004070:	2b00      	cmp	r3, #0
 8004072:	d109      	bne.n	8004088 <xQueueGenericSendFromISR+0x2c>
 8004074:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004078:	f383 8811 	msr	BASEPRI, r3
 800407c:	f3bf 8f6f 	isb	sy
 8004080:	f3bf 8f4f 	dsb	sy
 8004084:	627b      	str	r3, [r7, #36]	; 0x24
 8004086:	e7fe      	b.n	8004086 <xQueueGenericSendFromISR+0x2a>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004088:	68bb      	ldr	r3, [r7, #8]
 800408a:	2b00      	cmp	r3, #0
 800408c:	d103      	bne.n	8004096 <xQueueGenericSendFromISR+0x3a>
 800408e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004090:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004092:	2b00      	cmp	r3, #0
 8004094:	d101      	bne.n	800409a <xQueueGenericSendFromISR+0x3e>
 8004096:	2301      	movs	r3, #1
 8004098:	e000      	b.n	800409c <xQueueGenericSendFromISR+0x40>
 800409a:	2300      	movs	r3, #0
 800409c:	2b00      	cmp	r3, #0
 800409e:	d109      	bne.n	80040b4 <xQueueGenericSendFromISR+0x58>
 80040a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80040a4:	f383 8811 	msr	BASEPRI, r3
 80040a8:	f3bf 8f6f 	isb	sy
 80040ac:	f3bf 8f4f 	dsb	sy
 80040b0:	623b      	str	r3, [r7, #32]
 80040b2:	e7fe      	b.n	80040b2 <xQueueGenericSendFromISR+0x56>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80040b4:	683b      	ldr	r3, [r7, #0]
 80040b6:	2b02      	cmp	r3, #2
 80040b8:	d103      	bne.n	80040c2 <xQueueGenericSendFromISR+0x66>
 80040ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80040bc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80040be:	2b01      	cmp	r3, #1
 80040c0:	d101      	bne.n	80040c6 <xQueueGenericSendFromISR+0x6a>
 80040c2:	2301      	movs	r3, #1
 80040c4:	e000      	b.n	80040c8 <xQueueGenericSendFromISR+0x6c>
 80040c6:	2300      	movs	r3, #0
 80040c8:	2b00      	cmp	r3, #0
 80040ca:	d109      	bne.n	80040e0 <xQueueGenericSendFromISR+0x84>
 80040cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80040d0:	f383 8811 	msr	BASEPRI, r3
 80040d4:	f3bf 8f6f 	isb	sy
 80040d8:	f3bf 8f4f 	dsb	sy
 80040dc:	61fb      	str	r3, [r7, #28]
 80040de:	e7fe      	b.n	80040de <xQueueGenericSendFromISR+0x82>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80040e0:	f002 f930 	bl	8006344 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80040e4:	f3ef 8211 	mrs	r2, BASEPRI
 80040e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80040ec:	f383 8811 	msr	BASEPRI, r3
 80040f0:	f3bf 8f6f 	isb	sy
 80040f4:	f3bf 8f4f 	dsb	sy
 80040f8:	61ba      	str	r2, [r7, #24]
 80040fa:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80040fc:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80040fe:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8004100:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004102:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004104:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004106:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004108:	429a      	cmp	r2, r3
 800410a:	d302      	bcc.n	8004112 <xQueueGenericSendFromISR+0xb6>
 800410c:	683b      	ldr	r3, [r7, #0]
 800410e:	2b02      	cmp	r3, #2
 8004110:	d12c      	bne.n	800416c <xQueueGenericSendFromISR+0x110>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8004112:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004114:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004118:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800411c:	683a      	ldr	r2, [r7, #0]
 800411e:	68b9      	ldr	r1, [r7, #8]
 8004120:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004122:	f000 fa2b 	bl	800457c <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8004126:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 800412a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800412e:	d112      	bne.n	8004156 <xQueueGenericSendFromISR+0xfa>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004130:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004132:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004134:	2b00      	cmp	r3, #0
 8004136:	d016      	beq.n	8004166 <xQueueGenericSendFromISR+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004138:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800413a:	3324      	adds	r3, #36	; 0x24
 800413c:	4618      	mov	r0, r3
 800413e:	f001 f851 	bl	80051e4 <xTaskRemoveFromEventList>
 8004142:	4603      	mov	r3, r0
 8004144:	2b00      	cmp	r3, #0
 8004146:	d00e      	beq.n	8004166 <xQueueGenericSendFromISR+0x10a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	2b00      	cmp	r3, #0
 800414c:	d00b      	beq.n	8004166 <xQueueGenericSendFromISR+0x10a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	2201      	movs	r2, #1
 8004152:	601a      	str	r2, [r3, #0]
 8004154:	e007      	b.n	8004166 <xQueueGenericSendFromISR+0x10a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8004156:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800415a:	3301      	adds	r3, #1
 800415c:	b2db      	uxtb	r3, r3
 800415e:	b25a      	sxtb	r2, r3
 8004160:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004162:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8004166:	2301      	movs	r3, #1
 8004168:	637b      	str	r3, [r7, #52]	; 0x34
		{
 800416a:	e001      	b.n	8004170 <xQueueGenericSendFromISR+0x114>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800416c:	2300      	movs	r3, #0
 800416e:	637b      	str	r3, [r7, #52]	; 0x34
 8004170:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004172:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8004174:	693b      	ldr	r3, [r7, #16]
 8004176:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800417a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800417c:	4618      	mov	r0, r3
 800417e:	3738      	adds	r7, #56	; 0x38
 8004180:	46bd      	mov	sp, r7
 8004182:	bd80      	pop	{r7, pc}

08004184 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8004184:	b580      	push	{r7, lr}
 8004186:	b08c      	sub	sp, #48	; 0x30
 8004188:	af00      	add	r7, sp, #0
 800418a:	60f8      	str	r0, [r7, #12]
 800418c:	60b9      	str	r1, [r7, #8]
 800418e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8004190:	2300      	movs	r3, #0
 8004192:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8004194:	68fb      	ldr	r3, [r7, #12]
 8004196:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8004198:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800419a:	2b00      	cmp	r3, #0
 800419c:	d109      	bne.n	80041b2 <xQueueReceive+0x2e>
	__asm volatile
 800419e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80041a2:	f383 8811 	msr	BASEPRI, r3
 80041a6:	f3bf 8f6f 	isb	sy
 80041aa:	f3bf 8f4f 	dsb	sy
 80041ae:	623b      	str	r3, [r7, #32]
 80041b0:	e7fe      	b.n	80041b0 <xQueueReceive+0x2c>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80041b2:	68bb      	ldr	r3, [r7, #8]
 80041b4:	2b00      	cmp	r3, #0
 80041b6:	d103      	bne.n	80041c0 <xQueueReceive+0x3c>
 80041b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80041ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041bc:	2b00      	cmp	r3, #0
 80041be:	d101      	bne.n	80041c4 <xQueueReceive+0x40>
 80041c0:	2301      	movs	r3, #1
 80041c2:	e000      	b.n	80041c6 <xQueueReceive+0x42>
 80041c4:	2300      	movs	r3, #0
 80041c6:	2b00      	cmp	r3, #0
 80041c8:	d109      	bne.n	80041de <xQueueReceive+0x5a>
 80041ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80041ce:	f383 8811 	msr	BASEPRI, r3
 80041d2:	f3bf 8f6f 	isb	sy
 80041d6:	f3bf 8f4f 	dsb	sy
 80041da:	61fb      	str	r3, [r7, #28]
 80041dc:	e7fe      	b.n	80041dc <xQueueReceive+0x58>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80041de:	f001 f9bd 	bl	800555c <xTaskGetSchedulerState>
 80041e2:	4603      	mov	r3, r0
 80041e4:	2b00      	cmp	r3, #0
 80041e6:	d102      	bne.n	80041ee <xQueueReceive+0x6a>
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	2b00      	cmp	r3, #0
 80041ec:	d101      	bne.n	80041f2 <xQueueReceive+0x6e>
 80041ee:	2301      	movs	r3, #1
 80041f0:	e000      	b.n	80041f4 <xQueueReceive+0x70>
 80041f2:	2300      	movs	r3, #0
 80041f4:	2b00      	cmp	r3, #0
 80041f6:	d109      	bne.n	800420c <xQueueReceive+0x88>
 80041f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80041fc:	f383 8811 	msr	BASEPRI, r3
 8004200:	f3bf 8f6f 	isb	sy
 8004204:	f3bf 8f4f 	dsb	sy
 8004208:	61bb      	str	r3, [r7, #24]
 800420a:	e7fe      	b.n	800420a <xQueueReceive+0x86>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 800420c:	f001 ffbe 	bl	800618c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004210:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004212:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004214:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004216:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004218:	2b00      	cmp	r3, #0
 800421a:	d01f      	beq.n	800425c <xQueueReceive+0xd8>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800421c:	68b9      	ldr	r1, [r7, #8]
 800421e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004220:	f000 fa16 	bl	8004650 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8004224:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004226:	1e5a      	subs	r2, r3, #1
 8004228:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800422a:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800422c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800422e:	691b      	ldr	r3, [r3, #16]
 8004230:	2b00      	cmp	r3, #0
 8004232:	d00f      	beq.n	8004254 <xQueueReceive+0xd0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004234:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004236:	3310      	adds	r3, #16
 8004238:	4618      	mov	r0, r3
 800423a:	f000 ffd3 	bl	80051e4 <xTaskRemoveFromEventList>
 800423e:	4603      	mov	r3, r0
 8004240:	2b00      	cmp	r3, #0
 8004242:	d007      	beq.n	8004254 <xQueueReceive+0xd0>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8004244:	4b3c      	ldr	r3, [pc, #240]	; (8004338 <xQueueReceive+0x1b4>)
 8004246:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800424a:	601a      	str	r2, [r3, #0]
 800424c:	f3bf 8f4f 	dsb	sy
 8004250:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8004254:	f001 ffc8 	bl	80061e8 <vPortExitCritical>
				return pdPASS;
 8004258:	2301      	movs	r3, #1
 800425a:	e069      	b.n	8004330 <xQueueReceive+0x1ac>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	2b00      	cmp	r3, #0
 8004260:	d103      	bne.n	800426a <xQueueReceive+0xe6>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8004262:	f001 ffc1 	bl	80061e8 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8004266:	2300      	movs	r3, #0
 8004268:	e062      	b.n	8004330 <xQueueReceive+0x1ac>
				}
				else if( xEntryTimeSet == pdFALSE )
 800426a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800426c:	2b00      	cmp	r3, #0
 800426e:	d106      	bne.n	800427e <xQueueReceive+0xfa>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8004270:	f107 0310 	add.w	r3, r7, #16
 8004274:	4618      	mov	r0, r3
 8004276:	f001 f817 	bl	80052a8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800427a:	2301      	movs	r3, #1
 800427c:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800427e:	f001 ffb3 	bl	80061e8 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8004282:	f000 fd8d 	bl	8004da0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8004286:	f001 ff81 	bl	800618c <vPortEnterCritical>
 800428a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800428c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004290:	b25b      	sxtb	r3, r3
 8004292:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004296:	d103      	bne.n	80042a0 <xQueueReceive+0x11c>
 8004298:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800429a:	2200      	movs	r2, #0
 800429c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80042a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80042a2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80042a6:	b25b      	sxtb	r3, r3
 80042a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80042ac:	d103      	bne.n	80042b6 <xQueueReceive+0x132>
 80042ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80042b0:	2200      	movs	r2, #0
 80042b2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80042b6:	f001 ff97 	bl	80061e8 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80042ba:	1d3a      	adds	r2, r7, #4
 80042bc:	f107 0310 	add.w	r3, r7, #16
 80042c0:	4611      	mov	r1, r2
 80042c2:	4618      	mov	r0, r3
 80042c4:	f001 f806 	bl	80052d4 <xTaskCheckForTimeOut>
 80042c8:	4603      	mov	r3, r0
 80042ca:	2b00      	cmp	r3, #0
 80042cc:	d123      	bne.n	8004316 <xQueueReceive+0x192>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80042ce:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80042d0:	f000 fa36 	bl	8004740 <prvIsQueueEmpty>
 80042d4:	4603      	mov	r3, r0
 80042d6:	2b00      	cmp	r3, #0
 80042d8:	d017      	beq.n	800430a <xQueueReceive+0x186>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80042da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80042dc:	3324      	adds	r3, #36	; 0x24
 80042de:	687a      	ldr	r2, [r7, #4]
 80042e0:	4611      	mov	r1, r2
 80042e2:	4618      	mov	r0, r3
 80042e4:	f000 ff30 	bl	8005148 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80042e8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80042ea:	f000 f9d7 	bl	800469c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80042ee:	f000 fd65 	bl	8004dbc <xTaskResumeAll>
 80042f2:	4603      	mov	r3, r0
 80042f4:	2b00      	cmp	r3, #0
 80042f6:	d189      	bne.n	800420c <xQueueReceive+0x88>
				{
					portYIELD_WITHIN_API();
 80042f8:	4b0f      	ldr	r3, [pc, #60]	; (8004338 <xQueueReceive+0x1b4>)
 80042fa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80042fe:	601a      	str	r2, [r3, #0]
 8004300:	f3bf 8f4f 	dsb	sy
 8004304:	f3bf 8f6f 	isb	sy
 8004308:	e780      	b.n	800420c <xQueueReceive+0x88>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800430a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800430c:	f000 f9c6 	bl	800469c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8004310:	f000 fd54 	bl	8004dbc <xTaskResumeAll>
 8004314:	e77a      	b.n	800420c <xQueueReceive+0x88>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8004316:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004318:	f000 f9c0 	bl	800469c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800431c:	f000 fd4e 	bl	8004dbc <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004320:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004322:	f000 fa0d 	bl	8004740 <prvIsQueueEmpty>
 8004326:	4603      	mov	r3, r0
 8004328:	2b00      	cmp	r3, #0
 800432a:	f43f af6f 	beq.w	800420c <xQueueReceive+0x88>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800432e:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 8004330:	4618      	mov	r0, r3
 8004332:	3730      	adds	r7, #48	; 0x30
 8004334:	46bd      	mov	sp, r7
 8004336:	bd80      	pop	{r7, pc}
 8004338:	e000ed04 	.word	0xe000ed04

0800433c <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 800433c:	b580      	push	{r7, lr}
 800433e:	b08e      	sub	sp, #56	; 0x38
 8004340:	af00      	add	r7, sp, #0
 8004342:	6078      	str	r0, [r7, #4]
 8004344:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8004346:	2300      	movs	r3, #0
 8004348:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800434e:	2300      	movs	r3, #0
 8004350:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8004352:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004354:	2b00      	cmp	r3, #0
 8004356:	d109      	bne.n	800436c <xQueueSemaphoreTake+0x30>
 8004358:	f04f 0350 	mov.w	r3, #80	; 0x50
 800435c:	f383 8811 	msr	BASEPRI, r3
 8004360:	f3bf 8f6f 	isb	sy
 8004364:	f3bf 8f4f 	dsb	sy
 8004368:	623b      	str	r3, [r7, #32]
 800436a:	e7fe      	b.n	800436a <xQueueSemaphoreTake+0x2e>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800436c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800436e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004370:	2b00      	cmp	r3, #0
 8004372:	d009      	beq.n	8004388 <xQueueSemaphoreTake+0x4c>
 8004374:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004378:	f383 8811 	msr	BASEPRI, r3
 800437c:	f3bf 8f6f 	isb	sy
 8004380:	f3bf 8f4f 	dsb	sy
 8004384:	61fb      	str	r3, [r7, #28]
 8004386:	e7fe      	b.n	8004386 <xQueueSemaphoreTake+0x4a>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004388:	f001 f8e8 	bl	800555c <xTaskGetSchedulerState>
 800438c:	4603      	mov	r3, r0
 800438e:	2b00      	cmp	r3, #0
 8004390:	d102      	bne.n	8004398 <xQueueSemaphoreTake+0x5c>
 8004392:	683b      	ldr	r3, [r7, #0]
 8004394:	2b00      	cmp	r3, #0
 8004396:	d101      	bne.n	800439c <xQueueSemaphoreTake+0x60>
 8004398:	2301      	movs	r3, #1
 800439a:	e000      	b.n	800439e <xQueueSemaphoreTake+0x62>
 800439c:	2300      	movs	r3, #0
 800439e:	2b00      	cmp	r3, #0
 80043a0:	d109      	bne.n	80043b6 <xQueueSemaphoreTake+0x7a>
 80043a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80043a6:	f383 8811 	msr	BASEPRI, r3
 80043aa:	f3bf 8f6f 	isb	sy
 80043ae:	f3bf 8f4f 	dsb	sy
 80043b2:	61bb      	str	r3, [r7, #24]
 80043b4:	e7fe      	b.n	80043b4 <xQueueSemaphoreTake+0x78>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 80043b6:	f001 fee9 	bl	800618c <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 80043ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80043bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80043be:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 80043c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80043c2:	2b00      	cmp	r3, #0
 80043c4:	d024      	beq.n	8004410 <xQueueSemaphoreTake+0xd4>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 80043c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80043c8:	1e5a      	subs	r2, r3, #1
 80043ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80043cc:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80043ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	2b00      	cmp	r3, #0
 80043d4:	d104      	bne.n	80043e0 <xQueueSemaphoreTake+0xa4>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->pxMutexHolder = ( int8_t * ) pvTaskIncrementMutexHeldCount(); /*lint !e961 Cast is not redundant as TaskHandle_t is a typedef. */
 80043d6:	f001 fa3d 	bl	8005854 <pvTaskIncrementMutexHeldCount>
 80043da:	4602      	mov	r2, r0
 80043dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80043de:	605a      	str	r2, [r3, #4]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80043e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80043e2:	691b      	ldr	r3, [r3, #16]
 80043e4:	2b00      	cmp	r3, #0
 80043e6:	d00f      	beq.n	8004408 <xQueueSemaphoreTake+0xcc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80043e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80043ea:	3310      	adds	r3, #16
 80043ec:	4618      	mov	r0, r3
 80043ee:	f000 fef9 	bl	80051e4 <xTaskRemoveFromEventList>
 80043f2:	4603      	mov	r3, r0
 80043f4:	2b00      	cmp	r3, #0
 80043f6:	d007      	beq.n	8004408 <xQueueSemaphoreTake+0xcc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80043f8:	4b53      	ldr	r3, [pc, #332]	; (8004548 <xQueueSemaphoreTake+0x20c>)
 80043fa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80043fe:	601a      	str	r2, [r3, #0]
 8004400:	f3bf 8f4f 	dsb	sy
 8004404:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8004408:	f001 feee 	bl	80061e8 <vPortExitCritical>
				return pdPASS;
 800440c:	2301      	movs	r3, #1
 800440e:	e096      	b.n	800453e <xQueueSemaphoreTake+0x202>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8004410:	683b      	ldr	r3, [r7, #0]
 8004412:	2b00      	cmp	r3, #0
 8004414:	d110      	bne.n	8004438 <xQueueSemaphoreTake+0xfc>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8004416:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004418:	2b00      	cmp	r3, #0
 800441a:	d009      	beq.n	8004430 <xQueueSemaphoreTake+0xf4>
 800441c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004420:	f383 8811 	msr	BASEPRI, r3
 8004424:	f3bf 8f6f 	isb	sy
 8004428:	f3bf 8f4f 	dsb	sy
 800442c:	617b      	str	r3, [r7, #20]
 800442e:	e7fe      	b.n	800442e <xQueueSemaphoreTake+0xf2>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8004430:	f001 feda 	bl	80061e8 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8004434:	2300      	movs	r3, #0
 8004436:	e082      	b.n	800453e <xQueueSemaphoreTake+0x202>
				}
				else if( xEntryTimeSet == pdFALSE )
 8004438:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800443a:	2b00      	cmp	r3, #0
 800443c:	d106      	bne.n	800444c <xQueueSemaphoreTake+0x110>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800443e:	f107 030c 	add.w	r3, r7, #12
 8004442:	4618      	mov	r0, r3
 8004444:	f000 ff30 	bl	80052a8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8004448:	2301      	movs	r3, #1
 800444a:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800444c:	f001 fecc 	bl	80061e8 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8004450:	f000 fca6 	bl	8004da0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8004454:	f001 fe9a 	bl	800618c <vPortEnterCritical>
 8004458:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800445a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800445e:	b25b      	sxtb	r3, r3
 8004460:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004464:	d103      	bne.n	800446e <xQueueSemaphoreTake+0x132>
 8004466:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004468:	2200      	movs	r2, #0
 800446a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800446e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004470:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004474:	b25b      	sxtb	r3, r3
 8004476:	f1b3 3fff 	cmp.w	r3, #4294967295
 800447a:	d103      	bne.n	8004484 <xQueueSemaphoreTake+0x148>
 800447c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800447e:	2200      	movs	r2, #0
 8004480:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004484:	f001 feb0 	bl	80061e8 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004488:	463a      	mov	r2, r7
 800448a:	f107 030c 	add.w	r3, r7, #12
 800448e:	4611      	mov	r1, r2
 8004490:	4618      	mov	r0, r3
 8004492:	f000 ff1f 	bl	80052d4 <xTaskCheckForTimeOut>
 8004496:	4603      	mov	r3, r0
 8004498:	2b00      	cmp	r3, #0
 800449a:	d132      	bne.n	8004502 <xQueueSemaphoreTake+0x1c6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800449c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800449e:	f000 f94f 	bl	8004740 <prvIsQueueEmpty>
 80044a2:	4603      	mov	r3, r0
 80044a4:	2b00      	cmp	r3, #0
 80044a6:	d026      	beq.n	80044f6 <xQueueSemaphoreTake+0x1ba>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80044a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	2b00      	cmp	r3, #0
 80044ae:	d109      	bne.n	80044c4 <xQueueSemaphoreTake+0x188>
					{
						taskENTER_CRITICAL();
 80044b0:	f001 fe6c 	bl	800618c <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
 80044b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80044b6:	685b      	ldr	r3, [r3, #4]
 80044b8:	4618      	mov	r0, r3
 80044ba:	f001 f86d 	bl	8005598 <xTaskPriorityInherit>
 80044be:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 80044c0:	f001 fe92 	bl	80061e8 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80044c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80044c6:	3324      	adds	r3, #36	; 0x24
 80044c8:	683a      	ldr	r2, [r7, #0]
 80044ca:	4611      	mov	r1, r2
 80044cc:	4618      	mov	r0, r3
 80044ce:	f000 fe3b 	bl	8005148 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80044d2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80044d4:	f000 f8e2 	bl	800469c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80044d8:	f000 fc70 	bl	8004dbc <xTaskResumeAll>
 80044dc:	4603      	mov	r3, r0
 80044de:	2b00      	cmp	r3, #0
 80044e0:	f47f af69 	bne.w	80043b6 <xQueueSemaphoreTake+0x7a>
				{
					portYIELD_WITHIN_API();
 80044e4:	4b18      	ldr	r3, [pc, #96]	; (8004548 <xQueueSemaphoreTake+0x20c>)
 80044e6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80044ea:	601a      	str	r2, [r3, #0]
 80044ec:	f3bf 8f4f 	dsb	sy
 80044f0:	f3bf 8f6f 	isb	sy
 80044f4:	e75f      	b.n	80043b6 <xQueueSemaphoreTake+0x7a>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 80044f6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80044f8:	f000 f8d0 	bl	800469c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80044fc:	f000 fc5e 	bl	8004dbc <xTaskResumeAll>
 8004500:	e759      	b.n	80043b6 <xQueueSemaphoreTake+0x7a>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8004502:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8004504:	f000 f8ca 	bl	800469c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8004508:	f000 fc58 	bl	8004dbc <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800450c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800450e:	f000 f917 	bl	8004740 <prvIsQueueEmpty>
 8004512:	4603      	mov	r3, r0
 8004514:	2b00      	cmp	r3, #0
 8004516:	f43f af4e 	beq.w	80043b6 <xQueueSemaphoreTake+0x7a>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800451a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800451c:	2b00      	cmp	r3, #0
 800451e:	d00d      	beq.n	800453c <xQueueSemaphoreTake+0x200>
					{
						taskENTER_CRITICAL();
 8004520:	f001 fe34 	bl	800618c <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8004524:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8004526:	f000 f811 	bl	800454c <prvGetDisinheritPriorityAfterTimeout>
 800452a:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( ( void * ) pxQueue->pxMutexHolder, uxHighestWaitingPriority );
 800452c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800452e:	685b      	ldr	r3, [r3, #4]
 8004530:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004532:	4618      	mov	r0, r3
 8004534:	f001 f90a 	bl	800574c <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8004538:	f001 fe56 	bl	80061e8 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800453c:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 800453e:	4618      	mov	r0, r3
 8004540:	3738      	adds	r7, #56	; 0x38
 8004542:	46bd      	mov	sp, r7
 8004544:	bd80      	pop	{r7, pc}
 8004546:	bf00      	nop
 8004548:	e000ed04 	.word	0xe000ed04

0800454c <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 800454c:	b480      	push	{r7}
 800454e:	b085      	sub	sp, #20
 8004550:	af00      	add	r7, sp, #0
 8004552:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0 )
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004558:	2b00      	cmp	r3, #0
 800455a:	d006      	beq.n	800456a <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = configMAX_PRIORITIES - listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 8004566:	60fb      	str	r3, [r7, #12]
 8004568:	e001      	b.n	800456e <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800456a:	2300      	movs	r3, #0
 800456c:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 800456e:	68fb      	ldr	r3, [r7, #12]
	}
 8004570:	4618      	mov	r0, r3
 8004572:	3714      	adds	r7, #20
 8004574:	46bd      	mov	sp, r7
 8004576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800457a:	4770      	bx	lr

0800457c <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800457c:	b580      	push	{r7, lr}
 800457e:	b086      	sub	sp, #24
 8004580:	af00      	add	r7, sp, #0
 8004582:	60f8      	str	r0, [r7, #12]
 8004584:	60b9      	str	r1, [r7, #8]
 8004586:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8004588:	2300      	movs	r3, #0
 800458a:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800458c:	68fb      	ldr	r3, [r7, #12]
 800458e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004590:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8004592:	68fb      	ldr	r3, [r7, #12]
 8004594:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004596:	2b00      	cmp	r3, #0
 8004598:	d10d      	bne.n	80045b6 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800459a:	68fb      	ldr	r3, [r7, #12]
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	2b00      	cmp	r3, #0
 80045a0:	d14d      	bne.n	800463e <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 80045a2:	68fb      	ldr	r3, [r7, #12]
 80045a4:	685b      	ldr	r3, [r3, #4]
 80045a6:	4618      	mov	r0, r3
 80045a8:	f001 f864 	bl	8005674 <xTaskPriorityDisinherit>
 80045ac:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 80045ae:	68fb      	ldr	r3, [r7, #12]
 80045b0:	2200      	movs	r2, #0
 80045b2:	605a      	str	r2, [r3, #4]
 80045b4:	e043      	b.n	800463e <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	2b00      	cmp	r3, #0
 80045ba:	d119      	bne.n	80045f0 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 80045bc:	68fb      	ldr	r3, [r7, #12]
 80045be:	6898      	ldr	r0, [r3, #8]
 80045c0:	68fb      	ldr	r3, [r7, #12]
 80045c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045c4:	461a      	mov	r2, r3
 80045c6:	68b9      	ldr	r1, [r7, #8]
 80045c8:	f002 f8f4 	bl	80067b4 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 80045cc:	68fb      	ldr	r3, [r7, #12]
 80045ce:	689a      	ldr	r2, [r3, #8]
 80045d0:	68fb      	ldr	r3, [r7, #12]
 80045d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045d4:	441a      	add	r2, r3
 80045d6:	68fb      	ldr	r3, [r7, #12]
 80045d8:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80045da:	68fb      	ldr	r3, [r7, #12]
 80045dc:	689a      	ldr	r2, [r3, #8]
 80045de:	68fb      	ldr	r3, [r7, #12]
 80045e0:	685b      	ldr	r3, [r3, #4]
 80045e2:	429a      	cmp	r2, r3
 80045e4:	d32b      	bcc.n	800463e <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80045e6:	68fb      	ldr	r3, [r7, #12]
 80045e8:	681a      	ldr	r2, [r3, #0]
 80045ea:	68fb      	ldr	r3, [r7, #12]
 80045ec:	609a      	str	r2, [r3, #8]
 80045ee:	e026      	b.n	800463e <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80045f0:	68fb      	ldr	r3, [r7, #12]
 80045f2:	68d8      	ldr	r0, [r3, #12]
 80045f4:	68fb      	ldr	r3, [r7, #12]
 80045f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045f8:	461a      	mov	r2, r3
 80045fa:	68b9      	ldr	r1, [r7, #8]
 80045fc:	f002 f8da 	bl	80067b4 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 8004600:	68fb      	ldr	r3, [r7, #12]
 8004602:	68da      	ldr	r2, [r3, #12]
 8004604:	68fb      	ldr	r3, [r7, #12]
 8004606:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004608:	425b      	negs	r3, r3
 800460a:	441a      	add	r2, r3
 800460c:	68fb      	ldr	r3, [r7, #12]
 800460e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8004610:	68fb      	ldr	r3, [r7, #12]
 8004612:	68da      	ldr	r2, [r3, #12]
 8004614:	68fb      	ldr	r3, [r7, #12]
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	429a      	cmp	r2, r3
 800461a:	d207      	bcs.n	800462c <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 800461c:	68fb      	ldr	r3, [r7, #12]
 800461e:	685a      	ldr	r2, [r3, #4]
 8004620:	68fb      	ldr	r3, [r7, #12]
 8004622:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004624:	425b      	negs	r3, r3
 8004626:	441a      	add	r2, r3
 8004628:	68fb      	ldr	r3, [r7, #12]
 800462a:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	2b02      	cmp	r3, #2
 8004630:	d105      	bne.n	800463e <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004632:	693b      	ldr	r3, [r7, #16]
 8004634:	2b00      	cmp	r3, #0
 8004636:	d002      	beq.n	800463e <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8004638:	693b      	ldr	r3, [r7, #16]
 800463a:	3b01      	subs	r3, #1
 800463c:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800463e:	693b      	ldr	r3, [r7, #16]
 8004640:	1c5a      	adds	r2, r3, #1
 8004642:	68fb      	ldr	r3, [r7, #12]
 8004644:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8004646:	697b      	ldr	r3, [r7, #20]
}
 8004648:	4618      	mov	r0, r3
 800464a:	3718      	adds	r7, #24
 800464c:	46bd      	mov	sp, r7
 800464e:	bd80      	pop	{r7, pc}

08004650 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8004650:	b580      	push	{r7, lr}
 8004652:	b082      	sub	sp, #8
 8004654:	af00      	add	r7, sp, #0
 8004656:	6078      	str	r0, [r7, #4]
 8004658:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800465e:	2b00      	cmp	r3, #0
 8004660:	d018      	beq.n	8004694 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	68da      	ldr	r2, [r3, #12]
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800466a:	441a      	add	r2, r3
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	68da      	ldr	r2, [r3, #12]
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	685b      	ldr	r3, [r3, #4]
 8004678:	429a      	cmp	r2, r3
 800467a:	d303      	bcc.n	8004684 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	681a      	ldr	r2, [r3, #0]
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	68d9      	ldr	r1, [r3, #12]
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800468c:	461a      	mov	r2, r3
 800468e:	6838      	ldr	r0, [r7, #0]
 8004690:	f002 f890 	bl	80067b4 <memcpy>
	}
}
 8004694:	bf00      	nop
 8004696:	3708      	adds	r7, #8
 8004698:	46bd      	mov	sp, r7
 800469a:	bd80      	pop	{r7, pc}

0800469c <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800469c:	b580      	push	{r7, lr}
 800469e:	b084      	sub	sp, #16
 80046a0:	af00      	add	r7, sp, #0
 80046a2:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80046a4:	f001 fd72 	bl	800618c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80046ae:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80046b0:	e011      	b.n	80046d6 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046b6:	2b00      	cmp	r3, #0
 80046b8:	d012      	beq.n	80046e0 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	3324      	adds	r3, #36	; 0x24
 80046be:	4618      	mov	r0, r3
 80046c0:	f000 fd90 	bl	80051e4 <xTaskRemoveFromEventList>
 80046c4:	4603      	mov	r3, r0
 80046c6:	2b00      	cmp	r3, #0
 80046c8:	d001      	beq.n	80046ce <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80046ca:	f000 fe63 	bl	8005394 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80046ce:	7bfb      	ldrb	r3, [r7, #15]
 80046d0:	3b01      	subs	r3, #1
 80046d2:	b2db      	uxtb	r3, r3
 80046d4:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80046d6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80046da:	2b00      	cmp	r3, #0
 80046dc:	dce9      	bgt.n	80046b2 <prvUnlockQueue+0x16>
 80046de:	e000      	b.n	80046e2 <prvUnlockQueue+0x46>
					break;
 80046e0:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	22ff      	movs	r2, #255	; 0xff
 80046e6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 80046ea:	f001 fd7d 	bl	80061e8 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80046ee:	f001 fd4d 	bl	800618c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80046f8:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80046fa:	e011      	b.n	8004720 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	691b      	ldr	r3, [r3, #16]
 8004700:	2b00      	cmp	r3, #0
 8004702:	d012      	beq.n	800472a <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	3310      	adds	r3, #16
 8004708:	4618      	mov	r0, r3
 800470a:	f000 fd6b 	bl	80051e4 <xTaskRemoveFromEventList>
 800470e:	4603      	mov	r3, r0
 8004710:	2b00      	cmp	r3, #0
 8004712:	d001      	beq.n	8004718 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8004714:	f000 fe3e 	bl	8005394 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8004718:	7bbb      	ldrb	r3, [r7, #14]
 800471a:	3b01      	subs	r3, #1
 800471c:	b2db      	uxtb	r3, r3
 800471e:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8004720:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8004724:	2b00      	cmp	r3, #0
 8004726:	dce9      	bgt.n	80046fc <prvUnlockQueue+0x60>
 8004728:	e000      	b.n	800472c <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800472a:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	22ff      	movs	r2, #255	; 0xff
 8004730:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8004734:	f001 fd58 	bl	80061e8 <vPortExitCritical>
}
 8004738:	bf00      	nop
 800473a:	3710      	adds	r7, #16
 800473c:	46bd      	mov	sp, r7
 800473e:	bd80      	pop	{r7, pc}

08004740 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8004740:	b580      	push	{r7, lr}
 8004742:	b084      	sub	sp, #16
 8004744:	af00      	add	r7, sp, #0
 8004746:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8004748:	f001 fd20 	bl	800618c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004750:	2b00      	cmp	r3, #0
 8004752:	d102      	bne.n	800475a <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8004754:	2301      	movs	r3, #1
 8004756:	60fb      	str	r3, [r7, #12]
 8004758:	e001      	b.n	800475e <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800475a:	2300      	movs	r3, #0
 800475c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800475e:	f001 fd43 	bl	80061e8 <vPortExitCritical>

	return xReturn;
 8004762:	68fb      	ldr	r3, [r7, #12]
}
 8004764:	4618      	mov	r0, r3
 8004766:	3710      	adds	r7, #16
 8004768:	46bd      	mov	sp, r7
 800476a:	bd80      	pop	{r7, pc}

0800476c <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800476c:	b580      	push	{r7, lr}
 800476e:	b084      	sub	sp, #16
 8004770:	af00      	add	r7, sp, #0
 8004772:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8004774:	f001 fd0a 	bl	800618c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004780:	429a      	cmp	r2, r3
 8004782:	d102      	bne.n	800478a <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8004784:	2301      	movs	r3, #1
 8004786:	60fb      	str	r3, [r7, #12]
 8004788:	e001      	b.n	800478e <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800478a:	2300      	movs	r3, #0
 800478c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800478e:	f001 fd2b 	bl	80061e8 <vPortExitCritical>

	return xReturn;
 8004792:	68fb      	ldr	r3, [r7, #12]
}
 8004794:	4618      	mov	r0, r3
 8004796:	3710      	adds	r7, #16
 8004798:	46bd      	mov	sp, r7
 800479a:	bd80      	pop	{r7, pc}

0800479c <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800479c:	b480      	push	{r7}
 800479e:	b085      	sub	sp, #20
 80047a0:	af00      	add	r7, sp, #0
 80047a2:	6078      	str	r0, [r7, #4]
 80047a4:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80047a6:	2300      	movs	r3, #0
 80047a8:	60fb      	str	r3, [r7, #12]
 80047aa:	e014      	b.n	80047d6 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80047ac:	4a0e      	ldr	r2, [pc, #56]	; (80047e8 <vQueueAddToRegistry+0x4c>)
 80047ae:	68fb      	ldr	r3, [r7, #12]
 80047b0:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80047b4:	2b00      	cmp	r3, #0
 80047b6:	d10b      	bne.n	80047d0 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 80047b8:	490b      	ldr	r1, [pc, #44]	; (80047e8 <vQueueAddToRegistry+0x4c>)
 80047ba:	68fb      	ldr	r3, [r7, #12]
 80047bc:	683a      	ldr	r2, [r7, #0]
 80047be:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 80047c2:	4a09      	ldr	r2, [pc, #36]	; (80047e8 <vQueueAddToRegistry+0x4c>)
 80047c4:	68fb      	ldr	r3, [r7, #12]
 80047c6:	00db      	lsls	r3, r3, #3
 80047c8:	4413      	add	r3, r2
 80047ca:	687a      	ldr	r2, [r7, #4]
 80047cc:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 80047ce:	e005      	b.n	80047dc <vQueueAddToRegistry+0x40>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80047d0:	68fb      	ldr	r3, [r7, #12]
 80047d2:	3301      	adds	r3, #1
 80047d4:	60fb      	str	r3, [r7, #12]
 80047d6:	68fb      	ldr	r3, [r7, #12]
 80047d8:	2b07      	cmp	r3, #7
 80047da:	d9e7      	bls.n	80047ac <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80047dc:	bf00      	nop
 80047de:	3714      	adds	r7, #20
 80047e0:	46bd      	mov	sp, r7
 80047e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047e6:	4770      	bx	lr
 80047e8:	200019c8 	.word	0x200019c8

080047ec <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80047ec:	b580      	push	{r7, lr}
 80047ee:	b086      	sub	sp, #24
 80047f0:	af00      	add	r7, sp, #0
 80047f2:	60f8      	str	r0, [r7, #12]
 80047f4:	60b9      	str	r1, [r7, #8]
 80047f6:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80047f8:	68fb      	ldr	r3, [r7, #12]
 80047fa:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 80047fc:	f001 fcc6 	bl	800618c <vPortEnterCritical>
 8004800:	697b      	ldr	r3, [r7, #20]
 8004802:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004806:	b25b      	sxtb	r3, r3
 8004808:	f1b3 3fff 	cmp.w	r3, #4294967295
 800480c:	d103      	bne.n	8004816 <vQueueWaitForMessageRestricted+0x2a>
 800480e:	697b      	ldr	r3, [r7, #20]
 8004810:	2200      	movs	r2, #0
 8004812:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004816:	697b      	ldr	r3, [r7, #20]
 8004818:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800481c:	b25b      	sxtb	r3, r3
 800481e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004822:	d103      	bne.n	800482c <vQueueWaitForMessageRestricted+0x40>
 8004824:	697b      	ldr	r3, [r7, #20]
 8004826:	2200      	movs	r2, #0
 8004828:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800482c:	f001 fcdc 	bl	80061e8 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8004830:	697b      	ldr	r3, [r7, #20]
 8004832:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004834:	2b00      	cmp	r3, #0
 8004836:	d106      	bne.n	8004846 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8004838:	697b      	ldr	r3, [r7, #20]
 800483a:	3324      	adds	r3, #36	; 0x24
 800483c:	687a      	ldr	r2, [r7, #4]
 800483e:	68b9      	ldr	r1, [r7, #8]
 8004840:	4618      	mov	r0, r3
 8004842:	f000 fca5 	bl	8005190 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8004846:	6978      	ldr	r0, [r7, #20]
 8004848:	f7ff ff28 	bl	800469c <prvUnlockQueue>
	}
 800484c:	bf00      	nop
 800484e:	3718      	adds	r7, #24
 8004850:	46bd      	mov	sp, r7
 8004852:	bd80      	pop	{r7, pc}

08004854 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8004854:	b580      	push	{r7, lr}
 8004856:	b08e      	sub	sp, #56	; 0x38
 8004858:	af04      	add	r7, sp, #16
 800485a:	60f8      	str	r0, [r7, #12]
 800485c:	60b9      	str	r1, [r7, #8]
 800485e:	607a      	str	r2, [r7, #4]
 8004860:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8004862:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004864:	2b00      	cmp	r3, #0
 8004866:	d109      	bne.n	800487c <xTaskCreateStatic+0x28>
 8004868:	f04f 0350 	mov.w	r3, #80	; 0x50
 800486c:	f383 8811 	msr	BASEPRI, r3
 8004870:	f3bf 8f6f 	isb	sy
 8004874:	f3bf 8f4f 	dsb	sy
 8004878:	623b      	str	r3, [r7, #32]
 800487a:	e7fe      	b.n	800487a <xTaskCreateStatic+0x26>
		configASSERT( pxTaskBuffer != NULL );
 800487c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800487e:	2b00      	cmp	r3, #0
 8004880:	d109      	bne.n	8004896 <xTaskCreateStatic+0x42>
 8004882:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004886:	f383 8811 	msr	BASEPRI, r3
 800488a:	f3bf 8f6f 	isb	sy
 800488e:	f3bf 8f4f 	dsb	sy
 8004892:	61fb      	str	r3, [r7, #28]
 8004894:	e7fe      	b.n	8004894 <xTaskCreateStatic+0x40>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8004896:	235c      	movs	r3, #92	; 0x5c
 8004898:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800489a:	693b      	ldr	r3, [r7, #16]
 800489c:	2b5c      	cmp	r3, #92	; 0x5c
 800489e:	d009      	beq.n	80048b4 <xTaskCreateStatic+0x60>
 80048a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80048a4:	f383 8811 	msr	BASEPRI, r3
 80048a8:	f3bf 8f6f 	isb	sy
 80048ac:	f3bf 8f4f 	dsb	sy
 80048b0:	61bb      	str	r3, [r7, #24]
 80048b2:	e7fe      	b.n	80048b2 <xTaskCreateStatic+0x5e>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80048b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80048b6:	2b00      	cmp	r3, #0
 80048b8:	d01e      	beq.n	80048f8 <xTaskCreateStatic+0xa4>
 80048ba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80048bc:	2b00      	cmp	r3, #0
 80048be:	d01b      	beq.n	80048f8 <xTaskCreateStatic+0xa4>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80048c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80048c2:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80048c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048c6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80048c8:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80048ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048cc:	2202      	movs	r2, #2
 80048ce:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80048d2:	2300      	movs	r3, #0
 80048d4:	9303      	str	r3, [sp, #12]
 80048d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048d8:	9302      	str	r3, [sp, #8]
 80048da:	f107 0314 	add.w	r3, r7, #20
 80048de:	9301      	str	r3, [sp, #4]
 80048e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80048e2:	9300      	str	r3, [sp, #0]
 80048e4:	683b      	ldr	r3, [r7, #0]
 80048e6:	687a      	ldr	r2, [r7, #4]
 80048e8:	68b9      	ldr	r1, [r7, #8]
 80048ea:	68f8      	ldr	r0, [r7, #12]
 80048ec:	f000 f850 	bl	8004990 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80048f0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80048f2:	f000 f8d3 	bl	8004a9c <prvAddNewTaskToReadyList>
 80048f6:	e001      	b.n	80048fc <xTaskCreateStatic+0xa8>
		}
		else
		{
			xReturn = NULL;
 80048f8:	2300      	movs	r3, #0
 80048fa:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80048fc:	697b      	ldr	r3, [r7, #20]
	}
 80048fe:	4618      	mov	r0, r3
 8004900:	3728      	adds	r7, #40	; 0x28
 8004902:	46bd      	mov	sp, r7
 8004904:	bd80      	pop	{r7, pc}

08004906 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8004906:	b580      	push	{r7, lr}
 8004908:	b08c      	sub	sp, #48	; 0x30
 800490a:	af04      	add	r7, sp, #16
 800490c:	60f8      	str	r0, [r7, #12]
 800490e:	60b9      	str	r1, [r7, #8]
 8004910:	603b      	str	r3, [r7, #0]
 8004912:	4613      	mov	r3, r2
 8004914:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004916:	88fb      	ldrh	r3, [r7, #6]
 8004918:	009b      	lsls	r3, r3, #2
 800491a:	4618      	mov	r0, r3
 800491c:	f001 fd50 	bl	80063c0 <pvPortMalloc>
 8004920:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8004922:	697b      	ldr	r3, [r7, #20]
 8004924:	2b00      	cmp	r3, #0
 8004926:	d00e      	beq.n	8004946 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 8004928:	205c      	movs	r0, #92	; 0x5c
 800492a:	f001 fd49 	bl	80063c0 <pvPortMalloc>
 800492e:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8004930:	69fb      	ldr	r3, [r7, #28]
 8004932:	2b00      	cmp	r3, #0
 8004934:	d003      	beq.n	800493e <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8004936:	69fb      	ldr	r3, [r7, #28]
 8004938:	697a      	ldr	r2, [r7, #20]
 800493a:	631a      	str	r2, [r3, #48]	; 0x30
 800493c:	e005      	b.n	800494a <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800493e:	6978      	ldr	r0, [r7, #20]
 8004940:	f001 fe00 	bl	8006544 <vPortFree>
 8004944:	e001      	b.n	800494a <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8004946:	2300      	movs	r3, #0
 8004948:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800494a:	69fb      	ldr	r3, [r7, #28]
 800494c:	2b00      	cmp	r3, #0
 800494e:	d017      	beq.n	8004980 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8004950:	69fb      	ldr	r3, [r7, #28]
 8004952:	2200      	movs	r2, #0
 8004954:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8004958:	88fa      	ldrh	r2, [r7, #6]
 800495a:	2300      	movs	r3, #0
 800495c:	9303      	str	r3, [sp, #12]
 800495e:	69fb      	ldr	r3, [r7, #28]
 8004960:	9302      	str	r3, [sp, #8]
 8004962:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004964:	9301      	str	r3, [sp, #4]
 8004966:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004968:	9300      	str	r3, [sp, #0]
 800496a:	683b      	ldr	r3, [r7, #0]
 800496c:	68b9      	ldr	r1, [r7, #8]
 800496e:	68f8      	ldr	r0, [r7, #12]
 8004970:	f000 f80e 	bl	8004990 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8004974:	69f8      	ldr	r0, [r7, #28]
 8004976:	f000 f891 	bl	8004a9c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800497a:	2301      	movs	r3, #1
 800497c:	61bb      	str	r3, [r7, #24]
 800497e:	e002      	b.n	8004986 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8004980:	f04f 33ff 	mov.w	r3, #4294967295
 8004984:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8004986:	69bb      	ldr	r3, [r7, #24]
	}
 8004988:	4618      	mov	r0, r3
 800498a:	3720      	adds	r7, #32
 800498c:	46bd      	mov	sp, r7
 800498e:	bd80      	pop	{r7, pc}

08004990 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8004990:	b580      	push	{r7, lr}
 8004992:	b088      	sub	sp, #32
 8004994:	af00      	add	r7, sp, #0
 8004996:	60f8      	str	r0, [r7, #12]
 8004998:	60b9      	str	r1, [r7, #8]
 800499a:	607a      	str	r2, [r7, #4]
 800499c:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800499e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80049a0:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	009b      	lsls	r3, r3, #2
 80049a6:	461a      	mov	r2, r3
 80049a8:	21a5      	movs	r1, #165	; 0xa5
 80049aa:	f001 ff0e 	bl	80067ca <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 80049ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80049b0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80049b8:	3b01      	subs	r3, #1
 80049ba:	009b      	lsls	r3, r3, #2
 80049bc:	4413      	add	r3, r2
 80049be:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 80049c0:	69bb      	ldr	r3, [r7, #24]
 80049c2:	f023 0307 	bic.w	r3, r3, #7
 80049c6:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80049c8:	69bb      	ldr	r3, [r7, #24]
 80049ca:	f003 0307 	and.w	r3, r3, #7
 80049ce:	2b00      	cmp	r3, #0
 80049d0:	d009      	beq.n	80049e6 <prvInitialiseNewTask+0x56>
 80049d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80049d6:	f383 8811 	msr	BASEPRI, r3
 80049da:	f3bf 8f6f 	isb	sy
 80049de:	f3bf 8f4f 	dsb	sy
 80049e2:	617b      	str	r3, [r7, #20]
 80049e4:	e7fe      	b.n	80049e4 <prvInitialiseNewTask+0x54>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80049e6:	2300      	movs	r3, #0
 80049e8:	61fb      	str	r3, [r7, #28]
 80049ea:	e012      	b.n	8004a12 <prvInitialiseNewTask+0x82>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80049ec:	68ba      	ldr	r2, [r7, #8]
 80049ee:	69fb      	ldr	r3, [r7, #28]
 80049f0:	4413      	add	r3, r2
 80049f2:	7819      	ldrb	r1, [r3, #0]
 80049f4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80049f6:	69fb      	ldr	r3, [r7, #28]
 80049f8:	4413      	add	r3, r2
 80049fa:	3334      	adds	r3, #52	; 0x34
 80049fc:	460a      	mov	r2, r1
 80049fe:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 8004a00:	68ba      	ldr	r2, [r7, #8]
 8004a02:	69fb      	ldr	r3, [r7, #28]
 8004a04:	4413      	add	r3, r2
 8004a06:	781b      	ldrb	r3, [r3, #0]
 8004a08:	2b00      	cmp	r3, #0
 8004a0a:	d006      	beq.n	8004a1a <prvInitialiseNewTask+0x8a>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004a0c:	69fb      	ldr	r3, [r7, #28]
 8004a0e:	3301      	adds	r3, #1
 8004a10:	61fb      	str	r3, [r7, #28]
 8004a12:	69fb      	ldr	r3, [r7, #28]
 8004a14:	2b0f      	cmp	r3, #15
 8004a16:	d9e9      	bls.n	80049ec <prvInitialiseNewTask+0x5c>
 8004a18:	e000      	b.n	8004a1c <prvInitialiseNewTask+0x8c>
		{
			break;
 8004a1a:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8004a1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a1e:	2200      	movs	r2, #0
 8004a20:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8004a24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a26:	2b37      	cmp	r3, #55	; 0x37
 8004a28:	d901      	bls.n	8004a2e <prvInitialiseNewTask+0x9e>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8004a2a:	2337      	movs	r3, #55	; 0x37
 8004a2c:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8004a2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a30:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004a32:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8004a34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a36:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004a38:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8004a3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a3c:	2200      	movs	r2, #0
 8004a3e:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8004a40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a42:	3304      	adds	r3, #4
 8004a44:	4618      	mov	r0, r3
 8004a46:	f7ff f80f 	bl	8003a68 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8004a4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a4c:	3318      	adds	r3, #24
 8004a4e:	4618      	mov	r0, r3
 8004a50:	f7ff f80a 	bl	8003a68 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8004a54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a56:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004a58:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004a5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a5c:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8004a60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a62:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8004a64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a66:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004a68:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8004a6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a6c:	2200      	movs	r2, #0
 8004a6e:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8004a70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a72:	2200      	movs	r2, #0
 8004a74:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8004a78:	683a      	ldr	r2, [r7, #0]
 8004a7a:	68f9      	ldr	r1, [r7, #12]
 8004a7c:	69b8      	ldr	r0, [r7, #24]
 8004a7e:	f001 fa5b 	bl	8005f38 <pxPortInitialiseStack>
 8004a82:	4602      	mov	r2, r0
 8004a84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a86:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 8004a88:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004a8a:	2b00      	cmp	r3, #0
 8004a8c:	d002      	beq.n	8004a94 <prvInitialiseNewTask+0x104>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8004a8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004a90:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004a92:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004a94:	bf00      	nop
 8004a96:	3720      	adds	r7, #32
 8004a98:	46bd      	mov	sp, r7
 8004a9a:	bd80      	pop	{r7, pc}

08004a9c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8004a9c:	b580      	push	{r7, lr}
 8004a9e:	b082      	sub	sp, #8
 8004aa0:	af00      	add	r7, sp, #0
 8004aa2:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8004aa4:	f001 fb72 	bl	800618c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8004aa8:	4b2d      	ldr	r3, [pc, #180]	; (8004b60 <prvAddNewTaskToReadyList+0xc4>)
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	3301      	adds	r3, #1
 8004aae:	4a2c      	ldr	r2, [pc, #176]	; (8004b60 <prvAddNewTaskToReadyList+0xc4>)
 8004ab0:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8004ab2:	4b2c      	ldr	r3, [pc, #176]	; (8004b64 <prvAddNewTaskToReadyList+0xc8>)
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	2b00      	cmp	r3, #0
 8004ab8:	d109      	bne.n	8004ace <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8004aba:	4a2a      	ldr	r2, [pc, #168]	; (8004b64 <prvAddNewTaskToReadyList+0xc8>)
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8004ac0:	4b27      	ldr	r3, [pc, #156]	; (8004b60 <prvAddNewTaskToReadyList+0xc4>)
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	2b01      	cmp	r3, #1
 8004ac6:	d110      	bne.n	8004aea <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8004ac8:	f000 fc88 	bl	80053dc <prvInitialiseTaskLists>
 8004acc:	e00d      	b.n	8004aea <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8004ace:	4b26      	ldr	r3, [pc, #152]	; (8004b68 <prvAddNewTaskToReadyList+0xcc>)
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	2b00      	cmp	r3, #0
 8004ad4:	d109      	bne.n	8004aea <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8004ad6:	4b23      	ldr	r3, [pc, #140]	; (8004b64 <prvAddNewTaskToReadyList+0xc8>)
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ae0:	429a      	cmp	r2, r3
 8004ae2:	d802      	bhi.n	8004aea <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8004ae4:	4a1f      	ldr	r2, [pc, #124]	; (8004b64 <prvAddNewTaskToReadyList+0xc8>)
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8004aea:	4b20      	ldr	r3, [pc, #128]	; (8004b6c <prvAddNewTaskToReadyList+0xd0>)
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	3301      	adds	r3, #1
 8004af0:	4a1e      	ldr	r2, [pc, #120]	; (8004b6c <prvAddNewTaskToReadyList+0xd0>)
 8004af2:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8004af4:	4b1d      	ldr	r3, [pc, #116]	; (8004b6c <prvAddNewTaskToReadyList+0xd0>)
 8004af6:	681a      	ldr	r2, [r3, #0]
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004b00:	4b1b      	ldr	r3, [pc, #108]	; (8004b70 <prvAddNewTaskToReadyList+0xd4>)
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	429a      	cmp	r2, r3
 8004b06:	d903      	bls.n	8004b10 <prvAddNewTaskToReadyList+0x74>
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b0c:	4a18      	ldr	r2, [pc, #96]	; (8004b70 <prvAddNewTaskToReadyList+0xd4>)
 8004b0e:	6013      	str	r3, [r2, #0]
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004b14:	4613      	mov	r3, r2
 8004b16:	009b      	lsls	r3, r3, #2
 8004b18:	4413      	add	r3, r2
 8004b1a:	009b      	lsls	r3, r3, #2
 8004b1c:	4a15      	ldr	r2, [pc, #84]	; (8004b74 <prvAddNewTaskToReadyList+0xd8>)
 8004b1e:	441a      	add	r2, r3
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	3304      	adds	r3, #4
 8004b24:	4619      	mov	r1, r3
 8004b26:	4610      	mov	r0, r2
 8004b28:	f7fe ffab 	bl	8003a82 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8004b2c:	f001 fb5c 	bl	80061e8 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8004b30:	4b0d      	ldr	r3, [pc, #52]	; (8004b68 <prvAddNewTaskToReadyList+0xcc>)
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	2b00      	cmp	r3, #0
 8004b36:	d00e      	beq.n	8004b56 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8004b38:	4b0a      	ldr	r3, [pc, #40]	; (8004b64 <prvAddNewTaskToReadyList+0xc8>)
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b42:	429a      	cmp	r2, r3
 8004b44:	d207      	bcs.n	8004b56 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8004b46:	4b0c      	ldr	r3, [pc, #48]	; (8004b78 <prvAddNewTaskToReadyList+0xdc>)
 8004b48:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004b4c:	601a      	str	r2, [r3, #0]
 8004b4e:	f3bf 8f4f 	dsb	sy
 8004b52:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004b56:	bf00      	nop
 8004b58:	3708      	adds	r7, #8
 8004b5a:	46bd      	mov	sp, r7
 8004b5c:	bd80      	pop	{r7, pc}
 8004b5e:	bf00      	nop
 8004b60:	20000bc0 	.word	0x20000bc0
 8004b64:	200006ec 	.word	0x200006ec
 8004b68:	20000bcc 	.word	0x20000bcc
 8004b6c:	20000bdc 	.word	0x20000bdc
 8004b70:	20000bc8 	.word	0x20000bc8
 8004b74:	200006f0 	.word	0x200006f0
 8004b78:	e000ed04 	.word	0xe000ed04

08004b7c <vTaskDelayUntil>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelayUntil == 1 )

	void vTaskDelayUntil( TickType_t * const pxPreviousWakeTime, const TickType_t xTimeIncrement )
	{
 8004b7c:	b580      	push	{r7, lr}
 8004b7e:	b08a      	sub	sp, #40	; 0x28
 8004b80:	af00      	add	r7, sp, #0
 8004b82:	6078      	str	r0, [r7, #4]
 8004b84:	6039      	str	r1, [r7, #0]
	TickType_t xTimeToWake;
	BaseType_t xAlreadyYielded, xShouldDelay = pdFALSE;
 8004b86:	2300      	movs	r3, #0
 8004b88:	627b      	str	r3, [r7, #36]	; 0x24

		configASSERT( pxPreviousWakeTime );
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	2b00      	cmp	r3, #0
 8004b8e:	d109      	bne.n	8004ba4 <vTaskDelayUntil+0x28>
 8004b90:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b94:	f383 8811 	msr	BASEPRI, r3
 8004b98:	f3bf 8f6f 	isb	sy
 8004b9c:	f3bf 8f4f 	dsb	sy
 8004ba0:	617b      	str	r3, [r7, #20]
 8004ba2:	e7fe      	b.n	8004ba2 <vTaskDelayUntil+0x26>
		configASSERT( ( xTimeIncrement > 0U ) );
 8004ba4:	683b      	ldr	r3, [r7, #0]
 8004ba6:	2b00      	cmp	r3, #0
 8004ba8:	d109      	bne.n	8004bbe <vTaskDelayUntil+0x42>
 8004baa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004bae:	f383 8811 	msr	BASEPRI, r3
 8004bb2:	f3bf 8f6f 	isb	sy
 8004bb6:	f3bf 8f4f 	dsb	sy
 8004bba:	613b      	str	r3, [r7, #16]
 8004bbc:	e7fe      	b.n	8004bbc <vTaskDelayUntil+0x40>
		configASSERT( uxSchedulerSuspended == 0 );
 8004bbe:	4b29      	ldr	r3, [pc, #164]	; (8004c64 <vTaskDelayUntil+0xe8>)
 8004bc0:	681b      	ldr	r3, [r3, #0]
 8004bc2:	2b00      	cmp	r3, #0
 8004bc4:	d009      	beq.n	8004bda <vTaskDelayUntil+0x5e>
 8004bc6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004bca:	f383 8811 	msr	BASEPRI, r3
 8004bce:	f3bf 8f6f 	isb	sy
 8004bd2:	f3bf 8f4f 	dsb	sy
 8004bd6:	60fb      	str	r3, [r7, #12]
 8004bd8:	e7fe      	b.n	8004bd8 <vTaskDelayUntil+0x5c>

		vTaskSuspendAll();
 8004bda:	f000 f8e1 	bl	8004da0 <vTaskSuspendAll>
		{
			/* Minor optimisation.  The tick count cannot change in this
			block. */
			const TickType_t xConstTickCount = xTickCount;
 8004bde:	4b22      	ldr	r3, [pc, #136]	; (8004c68 <vTaskDelayUntil+0xec>)
 8004be0:	681b      	ldr	r3, [r3, #0]
 8004be2:	623b      	str	r3, [r7, #32]

			/* Generate the tick time at which the task wants to wake. */
			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	683a      	ldr	r2, [r7, #0]
 8004bea:	4413      	add	r3, r2
 8004bec:	61fb      	str	r3, [r7, #28]

			if( xConstTickCount < *pxPreviousWakeTime )
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	6a3a      	ldr	r2, [r7, #32]
 8004bf4:	429a      	cmp	r2, r3
 8004bf6:	d20b      	bcs.n	8004c10 <vTaskDelayUntil+0x94>
				/* The tick count has overflowed since this function was
				lasted called.  In this case the only time we should ever
				actually delay is if the wake time has also	overflowed,
				and the wake time is greater than the tick time.  When this
				is the case it is as if neither time had overflowed. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	69fa      	ldr	r2, [r7, #28]
 8004bfe:	429a      	cmp	r2, r3
 8004c00:	d211      	bcs.n	8004c26 <vTaskDelayUntil+0xaa>
 8004c02:	69fa      	ldr	r2, [r7, #28]
 8004c04:	6a3b      	ldr	r3, [r7, #32]
 8004c06:	429a      	cmp	r2, r3
 8004c08:	d90d      	bls.n	8004c26 <vTaskDelayUntil+0xaa>
				{
					xShouldDelay = pdTRUE;
 8004c0a:	2301      	movs	r3, #1
 8004c0c:	627b      	str	r3, [r7, #36]	; 0x24
 8004c0e:	e00a      	b.n	8004c26 <vTaskDelayUntil+0xaa>
			else
			{
				/* The tick time has not overflowed.  In this case we will
				delay if either the wake time has overflowed, and/or the
				tick time is less than the wake time. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	69fa      	ldr	r2, [r7, #28]
 8004c16:	429a      	cmp	r2, r3
 8004c18:	d303      	bcc.n	8004c22 <vTaskDelayUntil+0xa6>
 8004c1a:	69fa      	ldr	r2, [r7, #28]
 8004c1c:	6a3b      	ldr	r3, [r7, #32]
 8004c1e:	429a      	cmp	r2, r3
 8004c20:	d901      	bls.n	8004c26 <vTaskDelayUntil+0xaa>
				{
					xShouldDelay = pdTRUE;
 8004c22:	2301      	movs	r3, #1
 8004c24:	627b      	str	r3, [r7, #36]	; 0x24
					mtCOVERAGE_TEST_MARKER();
				}
			}

			/* Update the wake time ready for the next call. */
			*pxPreviousWakeTime = xTimeToWake;
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	69fa      	ldr	r2, [r7, #28]
 8004c2a:	601a      	str	r2, [r3, #0]

			if( xShouldDelay != pdFALSE )
 8004c2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c2e:	2b00      	cmp	r3, #0
 8004c30:	d006      	beq.n	8004c40 <vTaskDelayUntil+0xc4>
			{
				traceTASK_DELAY_UNTIL( xTimeToWake );

				/* prvAddCurrentTaskToDelayedList() needs the block time, not
				the time to wake, so subtract the current tick count. */
				prvAddCurrentTaskToDelayedList( xTimeToWake - xConstTickCount, pdFALSE );
 8004c32:	69fa      	ldr	r2, [r7, #28]
 8004c34:	6a3b      	ldr	r3, [r7, #32]
 8004c36:	1ad3      	subs	r3, r2, r3
 8004c38:	2100      	movs	r1, #0
 8004c3a:	4618      	mov	r0, r3
 8004c3c:	f000 fe1e 	bl	800587c <prvAddCurrentTaskToDelayedList>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		xAlreadyYielded = xTaskResumeAll();
 8004c40:	f000 f8bc 	bl	8004dbc <xTaskResumeAll>
 8004c44:	61b8      	str	r0, [r7, #24]

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8004c46:	69bb      	ldr	r3, [r7, #24]
 8004c48:	2b00      	cmp	r3, #0
 8004c4a:	d107      	bne.n	8004c5c <vTaskDelayUntil+0xe0>
		{
			portYIELD_WITHIN_API();
 8004c4c:	4b07      	ldr	r3, [pc, #28]	; (8004c6c <vTaskDelayUntil+0xf0>)
 8004c4e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004c52:	601a      	str	r2, [r3, #0]
 8004c54:	f3bf 8f4f 	dsb	sy
 8004c58:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8004c5c:	bf00      	nop
 8004c5e:	3728      	adds	r7, #40	; 0x28
 8004c60:	46bd      	mov	sp, r7
 8004c62:	bd80      	pop	{r7, pc}
 8004c64:	20000be8 	.word	0x20000be8
 8004c68:	20000bc4 	.word	0x20000bc4
 8004c6c:	e000ed04 	.word	0xe000ed04

08004c70 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8004c70:	b580      	push	{r7, lr}
 8004c72:	b084      	sub	sp, #16
 8004c74:	af00      	add	r7, sp, #0
 8004c76:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8004c78:	2300      	movs	r3, #0
 8004c7a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	2b00      	cmp	r3, #0
 8004c80:	d016      	beq.n	8004cb0 <vTaskDelay+0x40>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8004c82:	4b13      	ldr	r3, [pc, #76]	; (8004cd0 <vTaskDelay+0x60>)
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	2b00      	cmp	r3, #0
 8004c88:	d009      	beq.n	8004c9e <vTaskDelay+0x2e>
 8004c8a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c8e:	f383 8811 	msr	BASEPRI, r3
 8004c92:	f3bf 8f6f 	isb	sy
 8004c96:	f3bf 8f4f 	dsb	sy
 8004c9a:	60bb      	str	r3, [r7, #8]
 8004c9c:	e7fe      	b.n	8004c9c <vTaskDelay+0x2c>
			vTaskSuspendAll();
 8004c9e:	f000 f87f 	bl	8004da0 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8004ca2:	2100      	movs	r1, #0
 8004ca4:	6878      	ldr	r0, [r7, #4]
 8004ca6:	f000 fde9 	bl	800587c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8004caa:	f000 f887 	bl	8004dbc <xTaskResumeAll>
 8004cae:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8004cb0:	68fb      	ldr	r3, [r7, #12]
 8004cb2:	2b00      	cmp	r3, #0
 8004cb4:	d107      	bne.n	8004cc6 <vTaskDelay+0x56>
		{
			portYIELD_WITHIN_API();
 8004cb6:	4b07      	ldr	r3, [pc, #28]	; (8004cd4 <vTaskDelay+0x64>)
 8004cb8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004cbc:	601a      	str	r2, [r3, #0]
 8004cbe:	f3bf 8f4f 	dsb	sy
 8004cc2:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8004cc6:	bf00      	nop
 8004cc8:	3710      	adds	r7, #16
 8004cca:	46bd      	mov	sp, r7
 8004ccc:	bd80      	pop	{r7, pc}
 8004cce:	bf00      	nop
 8004cd0:	20000be8 	.word	0x20000be8
 8004cd4:	e000ed04 	.word	0xe000ed04

08004cd8 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8004cd8:	b580      	push	{r7, lr}
 8004cda:	b08a      	sub	sp, #40	; 0x28
 8004cdc:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8004cde:	2300      	movs	r3, #0
 8004ce0:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8004ce2:	2300      	movs	r3, #0
 8004ce4:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8004ce6:	463a      	mov	r2, r7
 8004ce8:	1d39      	adds	r1, r7, #4
 8004cea:	f107 0308 	add.w	r3, r7, #8
 8004cee:	4618      	mov	r0, r3
 8004cf0:	f7fe fe66 	bl	80039c0 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8004cf4:	6839      	ldr	r1, [r7, #0]
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	68ba      	ldr	r2, [r7, #8]
 8004cfa:	9202      	str	r2, [sp, #8]
 8004cfc:	9301      	str	r3, [sp, #4]
 8004cfe:	2300      	movs	r3, #0
 8004d00:	9300      	str	r3, [sp, #0]
 8004d02:	2300      	movs	r3, #0
 8004d04:	460a      	mov	r2, r1
 8004d06:	4920      	ldr	r1, [pc, #128]	; (8004d88 <vTaskStartScheduler+0xb0>)
 8004d08:	4820      	ldr	r0, [pc, #128]	; (8004d8c <vTaskStartScheduler+0xb4>)
 8004d0a:	f7ff fda3 	bl	8004854 <xTaskCreateStatic>
 8004d0e:	4602      	mov	r2, r0
 8004d10:	4b1f      	ldr	r3, [pc, #124]	; (8004d90 <vTaskStartScheduler+0xb8>)
 8004d12:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8004d14:	4b1e      	ldr	r3, [pc, #120]	; (8004d90 <vTaskStartScheduler+0xb8>)
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	2b00      	cmp	r3, #0
 8004d1a:	d002      	beq.n	8004d22 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8004d1c:	2301      	movs	r3, #1
 8004d1e:	617b      	str	r3, [r7, #20]
 8004d20:	e001      	b.n	8004d26 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8004d22:	2300      	movs	r3, #0
 8004d24:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8004d26:	697b      	ldr	r3, [r7, #20]
 8004d28:	2b01      	cmp	r3, #1
 8004d2a:	d102      	bne.n	8004d32 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8004d2c:	f000 fdfa 	bl	8005924 <xTimerCreateTimerTask>
 8004d30:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8004d32:	697b      	ldr	r3, [r7, #20]
 8004d34:	2b01      	cmp	r3, #1
 8004d36:	d115      	bne.n	8004d64 <vTaskStartScheduler+0x8c>
 8004d38:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d3c:	f383 8811 	msr	BASEPRI, r3
 8004d40:	f3bf 8f6f 	isb	sy
 8004d44:	f3bf 8f4f 	dsb	sy
 8004d48:	613b      	str	r3, [r7, #16]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8004d4a:	4b12      	ldr	r3, [pc, #72]	; (8004d94 <vTaskStartScheduler+0xbc>)
 8004d4c:	f04f 32ff 	mov.w	r2, #4294967295
 8004d50:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8004d52:	4b11      	ldr	r3, [pc, #68]	; (8004d98 <vTaskStartScheduler+0xc0>)
 8004d54:	2201      	movs	r2, #1
 8004d56:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 8004d58:	4b10      	ldr	r3, [pc, #64]	; (8004d9c <vTaskStartScheduler+0xc4>)
 8004d5a:	2200      	movs	r2, #0
 8004d5c:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8004d5e:	f001 f977 	bl	8006050 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8004d62:	e00d      	b.n	8004d80 <vTaskStartScheduler+0xa8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8004d64:	697b      	ldr	r3, [r7, #20]
 8004d66:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004d6a:	d109      	bne.n	8004d80 <vTaskStartScheduler+0xa8>
 8004d6c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d70:	f383 8811 	msr	BASEPRI, r3
 8004d74:	f3bf 8f6f 	isb	sy
 8004d78:	f3bf 8f4f 	dsb	sy
 8004d7c:	60fb      	str	r3, [r7, #12]
 8004d7e:	e7fe      	b.n	8004d7e <vTaskStartScheduler+0xa6>
}
 8004d80:	bf00      	nop
 8004d82:	3718      	adds	r7, #24
 8004d84:	46bd      	mov	sp, r7
 8004d86:	bd80      	pop	{r7, pc}
 8004d88:	08006834 	.word	0x08006834
 8004d8c:	080053ad 	.word	0x080053ad
 8004d90:	20000be4 	.word	0x20000be4
 8004d94:	20000be0 	.word	0x20000be0
 8004d98:	20000bcc 	.word	0x20000bcc
 8004d9c:	20000bc4 	.word	0x20000bc4

08004da0 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8004da0:	b480      	push	{r7}
 8004da2:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8004da4:	4b04      	ldr	r3, [pc, #16]	; (8004db8 <vTaskSuspendAll+0x18>)
 8004da6:	681b      	ldr	r3, [r3, #0]
 8004da8:	3301      	adds	r3, #1
 8004daa:	4a03      	ldr	r2, [pc, #12]	; (8004db8 <vTaskSuspendAll+0x18>)
 8004dac:	6013      	str	r3, [r2, #0]
}
 8004dae:	bf00      	nop
 8004db0:	46bd      	mov	sp, r7
 8004db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004db6:	4770      	bx	lr
 8004db8:	20000be8 	.word	0x20000be8

08004dbc <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8004dbc:	b580      	push	{r7, lr}
 8004dbe:	b084      	sub	sp, #16
 8004dc0:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8004dc2:	2300      	movs	r3, #0
 8004dc4:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8004dc6:	2300      	movs	r3, #0
 8004dc8:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8004dca:	4b41      	ldr	r3, [pc, #260]	; (8004ed0 <xTaskResumeAll+0x114>)
 8004dcc:	681b      	ldr	r3, [r3, #0]
 8004dce:	2b00      	cmp	r3, #0
 8004dd0:	d109      	bne.n	8004de6 <xTaskResumeAll+0x2a>
 8004dd2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004dd6:	f383 8811 	msr	BASEPRI, r3
 8004dda:	f3bf 8f6f 	isb	sy
 8004dde:	f3bf 8f4f 	dsb	sy
 8004de2:	603b      	str	r3, [r7, #0]
 8004de4:	e7fe      	b.n	8004de4 <xTaskResumeAll+0x28>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8004de6:	f001 f9d1 	bl	800618c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8004dea:	4b39      	ldr	r3, [pc, #228]	; (8004ed0 <xTaskResumeAll+0x114>)
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	3b01      	subs	r3, #1
 8004df0:	4a37      	ldr	r2, [pc, #220]	; (8004ed0 <xTaskResumeAll+0x114>)
 8004df2:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004df4:	4b36      	ldr	r3, [pc, #216]	; (8004ed0 <xTaskResumeAll+0x114>)
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	2b00      	cmp	r3, #0
 8004dfa:	d162      	bne.n	8004ec2 <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8004dfc:	4b35      	ldr	r3, [pc, #212]	; (8004ed4 <xTaskResumeAll+0x118>)
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	2b00      	cmp	r3, #0
 8004e02:	d05e      	beq.n	8004ec2 <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004e04:	e02f      	b.n	8004e66 <xTaskResumeAll+0xaa>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8004e06:	4b34      	ldr	r3, [pc, #208]	; (8004ed8 <xTaskResumeAll+0x11c>)
 8004e08:	68db      	ldr	r3, [r3, #12]
 8004e0a:	68db      	ldr	r3, [r3, #12]
 8004e0c:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004e0e:	68fb      	ldr	r3, [r7, #12]
 8004e10:	3318      	adds	r3, #24
 8004e12:	4618      	mov	r0, r3
 8004e14:	f7fe fe92 	bl	8003b3c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004e18:	68fb      	ldr	r3, [r7, #12]
 8004e1a:	3304      	adds	r3, #4
 8004e1c:	4618      	mov	r0, r3
 8004e1e:	f7fe fe8d 	bl	8003b3c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8004e22:	68fb      	ldr	r3, [r7, #12]
 8004e24:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004e26:	4b2d      	ldr	r3, [pc, #180]	; (8004edc <xTaskResumeAll+0x120>)
 8004e28:	681b      	ldr	r3, [r3, #0]
 8004e2a:	429a      	cmp	r2, r3
 8004e2c:	d903      	bls.n	8004e36 <xTaskResumeAll+0x7a>
 8004e2e:	68fb      	ldr	r3, [r7, #12]
 8004e30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e32:	4a2a      	ldr	r2, [pc, #168]	; (8004edc <xTaskResumeAll+0x120>)
 8004e34:	6013      	str	r3, [r2, #0]
 8004e36:	68fb      	ldr	r3, [r7, #12]
 8004e38:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004e3a:	4613      	mov	r3, r2
 8004e3c:	009b      	lsls	r3, r3, #2
 8004e3e:	4413      	add	r3, r2
 8004e40:	009b      	lsls	r3, r3, #2
 8004e42:	4a27      	ldr	r2, [pc, #156]	; (8004ee0 <xTaskResumeAll+0x124>)
 8004e44:	441a      	add	r2, r3
 8004e46:	68fb      	ldr	r3, [r7, #12]
 8004e48:	3304      	adds	r3, #4
 8004e4a:	4619      	mov	r1, r3
 8004e4c:	4610      	mov	r0, r2
 8004e4e:	f7fe fe18 	bl	8003a82 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004e52:	68fb      	ldr	r3, [r7, #12]
 8004e54:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004e56:	4b23      	ldr	r3, [pc, #140]	; (8004ee4 <xTaskResumeAll+0x128>)
 8004e58:	681b      	ldr	r3, [r3, #0]
 8004e5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e5c:	429a      	cmp	r2, r3
 8004e5e:	d302      	bcc.n	8004e66 <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 8004e60:	4b21      	ldr	r3, [pc, #132]	; (8004ee8 <xTaskResumeAll+0x12c>)
 8004e62:	2201      	movs	r2, #1
 8004e64:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004e66:	4b1c      	ldr	r3, [pc, #112]	; (8004ed8 <xTaskResumeAll+0x11c>)
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	2b00      	cmp	r3, #0
 8004e6c:	d1cb      	bne.n	8004e06 <xTaskResumeAll+0x4a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8004e6e:	68fb      	ldr	r3, [r7, #12]
 8004e70:	2b00      	cmp	r3, #0
 8004e72:	d001      	beq.n	8004e78 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8004e74:	f000 fb4c 	bl	8005510 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8004e78:	4b1c      	ldr	r3, [pc, #112]	; (8004eec <xTaskResumeAll+0x130>)
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	2b00      	cmp	r3, #0
 8004e82:	d010      	beq.n	8004ea6 <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8004e84:	f000 f846 	bl	8004f14 <xTaskIncrementTick>
 8004e88:	4603      	mov	r3, r0
 8004e8a:	2b00      	cmp	r3, #0
 8004e8c:	d002      	beq.n	8004e94 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 8004e8e:	4b16      	ldr	r3, [pc, #88]	; (8004ee8 <xTaskResumeAll+0x12c>)
 8004e90:	2201      	movs	r2, #1
 8004e92:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	3b01      	subs	r3, #1
 8004e98:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	2b00      	cmp	r3, #0
 8004e9e:	d1f1      	bne.n	8004e84 <xTaskResumeAll+0xc8>

						uxPendedTicks = 0;
 8004ea0:	4b12      	ldr	r3, [pc, #72]	; (8004eec <xTaskResumeAll+0x130>)
 8004ea2:	2200      	movs	r2, #0
 8004ea4:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8004ea6:	4b10      	ldr	r3, [pc, #64]	; (8004ee8 <xTaskResumeAll+0x12c>)
 8004ea8:	681b      	ldr	r3, [r3, #0]
 8004eaa:	2b00      	cmp	r3, #0
 8004eac:	d009      	beq.n	8004ec2 <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8004eae:	2301      	movs	r3, #1
 8004eb0:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8004eb2:	4b0f      	ldr	r3, [pc, #60]	; (8004ef0 <xTaskResumeAll+0x134>)
 8004eb4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004eb8:	601a      	str	r2, [r3, #0]
 8004eba:	f3bf 8f4f 	dsb	sy
 8004ebe:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8004ec2:	f001 f991 	bl	80061e8 <vPortExitCritical>

	return xAlreadyYielded;
 8004ec6:	68bb      	ldr	r3, [r7, #8]
}
 8004ec8:	4618      	mov	r0, r3
 8004eca:	3710      	adds	r7, #16
 8004ecc:	46bd      	mov	sp, r7
 8004ece:	bd80      	pop	{r7, pc}
 8004ed0:	20000be8 	.word	0x20000be8
 8004ed4:	20000bc0 	.word	0x20000bc0
 8004ed8:	20000b80 	.word	0x20000b80
 8004edc:	20000bc8 	.word	0x20000bc8
 8004ee0:	200006f0 	.word	0x200006f0
 8004ee4:	200006ec 	.word	0x200006ec
 8004ee8:	20000bd4 	.word	0x20000bd4
 8004eec:	20000bd0 	.word	0x20000bd0
 8004ef0:	e000ed04 	.word	0xe000ed04

08004ef4 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8004ef4:	b480      	push	{r7}
 8004ef6:	b083      	sub	sp, #12
 8004ef8:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8004efa:	4b05      	ldr	r3, [pc, #20]	; (8004f10 <xTaskGetTickCount+0x1c>)
 8004efc:	681b      	ldr	r3, [r3, #0]
 8004efe:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8004f00:	687b      	ldr	r3, [r7, #4]
}
 8004f02:	4618      	mov	r0, r3
 8004f04:	370c      	adds	r7, #12
 8004f06:	46bd      	mov	sp, r7
 8004f08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f0c:	4770      	bx	lr
 8004f0e:	bf00      	nop
 8004f10:	20000bc4 	.word	0x20000bc4

08004f14 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8004f14:	b580      	push	{r7, lr}
 8004f16:	b086      	sub	sp, #24
 8004f18:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8004f1a:	2300      	movs	r3, #0
 8004f1c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004f1e:	4b51      	ldr	r3, [pc, #324]	; (8005064 <xTaskIncrementTick+0x150>)
 8004f20:	681b      	ldr	r3, [r3, #0]
 8004f22:	2b00      	cmp	r3, #0
 8004f24:	f040 808d 	bne.w	8005042 <xTaskIncrementTick+0x12e>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8004f28:	4b4f      	ldr	r3, [pc, #316]	; (8005068 <xTaskIncrementTick+0x154>)
 8004f2a:	681b      	ldr	r3, [r3, #0]
 8004f2c:	3301      	adds	r3, #1
 8004f2e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8004f30:	4a4d      	ldr	r2, [pc, #308]	; (8005068 <xTaskIncrementTick+0x154>)
 8004f32:	693b      	ldr	r3, [r7, #16]
 8004f34:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8004f36:	693b      	ldr	r3, [r7, #16]
 8004f38:	2b00      	cmp	r3, #0
 8004f3a:	d11f      	bne.n	8004f7c <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 8004f3c:	4b4b      	ldr	r3, [pc, #300]	; (800506c <xTaskIncrementTick+0x158>)
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	681b      	ldr	r3, [r3, #0]
 8004f42:	2b00      	cmp	r3, #0
 8004f44:	d009      	beq.n	8004f5a <xTaskIncrementTick+0x46>
 8004f46:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f4a:	f383 8811 	msr	BASEPRI, r3
 8004f4e:	f3bf 8f6f 	isb	sy
 8004f52:	f3bf 8f4f 	dsb	sy
 8004f56:	603b      	str	r3, [r7, #0]
 8004f58:	e7fe      	b.n	8004f58 <xTaskIncrementTick+0x44>
 8004f5a:	4b44      	ldr	r3, [pc, #272]	; (800506c <xTaskIncrementTick+0x158>)
 8004f5c:	681b      	ldr	r3, [r3, #0]
 8004f5e:	60fb      	str	r3, [r7, #12]
 8004f60:	4b43      	ldr	r3, [pc, #268]	; (8005070 <xTaskIncrementTick+0x15c>)
 8004f62:	681b      	ldr	r3, [r3, #0]
 8004f64:	4a41      	ldr	r2, [pc, #260]	; (800506c <xTaskIncrementTick+0x158>)
 8004f66:	6013      	str	r3, [r2, #0]
 8004f68:	4a41      	ldr	r2, [pc, #260]	; (8005070 <xTaskIncrementTick+0x15c>)
 8004f6a:	68fb      	ldr	r3, [r7, #12]
 8004f6c:	6013      	str	r3, [r2, #0]
 8004f6e:	4b41      	ldr	r3, [pc, #260]	; (8005074 <xTaskIncrementTick+0x160>)
 8004f70:	681b      	ldr	r3, [r3, #0]
 8004f72:	3301      	adds	r3, #1
 8004f74:	4a3f      	ldr	r2, [pc, #252]	; (8005074 <xTaskIncrementTick+0x160>)
 8004f76:	6013      	str	r3, [r2, #0]
 8004f78:	f000 faca 	bl	8005510 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8004f7c:	4b3e      	ldr	r3, [pc, #248]	; (8005078 <xTaskIncrementTick+0x164>)
 8004f7e:	681b      	ldr	r3, [r3, #0]
 8004f80:	693a      	ldr	r2, [r7, #16]
 8004f82:	429a      	cmp	r2, r3
 8004f84:	d34e      	bcc.n	8005024 <xTaskIncrementTick+0x110>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004f86:	4b39      	ldr	r3, [pc, #228]	; (800506c <xTaskIncrementTick+0x158>)
 8004f88:	681b      	ldr	r3, [r3, #0]
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	2b00      	cmp	r3, #0
 8004f8e:	d101      	bne.n	8004f94 <xTaskIncrementTick+0x80>
 8004f90:	2301      	movs	r3, #1
 8004f92:	e000      	b.n	8004f96 <xTaskIncrementTick+0x82>
 8004f94:	2300      	movs	r3, #0
 8004f96:	2b00      	cmp	r3, #0
 8004f98:	d004      	beq.n	8004fa4 <xTaskIncrementTick+0x90>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004f9a:	4b37      	ldr	r3, [pc, #220]	; (8005078 <xTaskIncrementTick+0x164>)
 8004f9c:	f04f 32ff 	mov.w	r2, #4294967295
 8004fa0:	601a      	str	r2, [r3, #0]
					break;
 8004fa2:	e03f      	b.n	8005024 <xTaskIncrementTick+0x110>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8004fa4:	4b31      	ldr	r3, [pc, #196]	; (800506c <xTaskIncrementTick+0x158>)
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	68db      	ldr	r3, [r3, #12]
 8004faa:	68db      	ldr	r3, [r3, #12]
 8004fac:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8004fae:	68bb      	ldr	r3, [r7, #8]
 8004fb0:	685b      	ldr	r3, [r3, #4]
 8004fb2:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8004fb4:	693a      	ldr	r2, [r7, #16]
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	429a      	cmp	r2, r3
 8004fba:	d203      	bcs.n	8004fc4 <xTaskIncrementTick+0xb0>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8004fbc:	4a2e      	ldr	r2, [pc, #184]	; (8005078 <xTaskIncrementTick+0x164>)
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	6013      	str	r3, [r2, #0]
						break;
 8004fc2:	e02f      	b.n	8005024 <xTaskIncrementTick+0x110>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004fc4:	68bb      	ldr	r3, [r7, #8]
 8004fc6:	3304      	adds	r3, #4
 8004fc8:	4618      	mov	r0, r3
 8004fca:	f7fe fdb7 	bl	8003b3c <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8004fce:	68bb      	ldr	r3, [r7, #8]
 8004fd0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004fd2:	2b00      	cmp	r3, #0
 8004fd4:	d004      	beq.n	8004fe0 <xTaskIncrementTick+0xcc>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004fd6:	68bb      	ldr	r3, [r7, #8]
 8004fd8:	3318      	adds	r3, #24
 8004fda:	4618      	mov	r0, r3
 8004fdc:	f7fe fdae 	bl	8003b3c <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8004fe0:	68bb      	ldr	r3, [r7, #8]
 8004fe2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004fe4:	4b25      	ldr	r3, [pc, #148]	; (800507c <xTaskIncrementTick+0x168>)
 8004fe6:	681b      	ldr	r3, [r3, #0]
 8004fe8:	429a      	cmp	r2, r3
 8004fea:	d903      	bls.n	8004ff4 <xTaskIncrementTick+0xe0>
 8004fec:	68bb      	ldr	r3, [r7, #8]
 8004fee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ff0:	4a22      	ldr	r2, [pc, #136]	; (800507c <xTaskIncrementTick+0x168>)
 8004ff2:	6013      	str	r3, [r2, #0]
 8004ff4:	68bb      	ldr	r3, [r7, #8]
 8004ff6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004ff8:	4613      	mov	r3, r2
 8004ffa:	009b      	lsls	r3, r3, #2
 8004ffc:	4413      	add	r3, r2
 8004ffe:	009b      	lsls	r3, r3, #2
 8005000:	4a1f      	ldr	r2, [pc, #124]	; (8005080 <xTaskIncrementTick+0x16c>)
 8005002:	441a      	add	r2, r3
 8005004:	68bb      	ldr	r3, [r7, #8]
 8005006:	3304      	adds	r3, #4
 8005008:	4619      	mov	r1, r3
 800500a:	4610      	mov	r0, r2
 800500c:	f7fe fd39 	bl	8003a82 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005010:	68bb      	ldr	r3, [r7, #8]
 8005012:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005014:	4b1b      	ldr	r3, [pc, #108]	; (8005084 <xTaskIncrementTick+0x170>)
 8005016:	681b      	ldr	r3, [r3, #0]
 8005018:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800501a:	429a      	cmp	r2, r3
 800501c:	d3b3      	bcc.n	8004f86 <xTaskIncrementTick+0x72>
						{
							xSwitchRequired = pdTRUE;
 800501e:	2301      	movs	r3, #1
 8005020:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005022:	e7b0      	b.n	8004f86 <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8005024:	4b17      	ldr	r3, [pc, #92]	; (8005084 <xTaskIncrementTick+0x170>)
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800502a:	4915      	ldr	r1, [pc, #84]	; (8005080 <xTaskIncrementTick+0x16c>)
 800502c:	4613      	mov	r3, r2
 800502e:	009b      	lsls	r3, r3, #2
 8005030:	4413      	add	r3, r2
 8005032:	009b      	lsls	r3, r3, #2
 8005034:	440b      	add	r3, r1
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	2b01      	cmp	r3, #1
 800503a:	d907      	bls.n	800504c <xTaskIncrementTick+0x138>
			{
				xSwitchRequired = pdTRUE;
 800503c:	2301      	movs	r3, #1
 800503e:	617b      	str	r3, [r7, #20]
 8005040:	e004      	b.n	800504c <xTaskIncrementTick+0x138>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8005042:	4b11      	ldr	r3, [pc, #68]	; (8005088 <xTaskIncrementTick+0x174>)
 8005044:	681b      	ldr	r3, [r3, #0]
 8005046:	3301      	adds	r3, #1
 8005048:	4a0f      	ldr	r2, [pc, #60]	; (8005088 <xTaskIncrementTick+0x174>)
 800504a:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 800504c:	4b0f      	ldr	r3, [pc, #60]	; (800508c <xTaskIncrementTick+0x178>)
 800504e:	681b      	ldr	r3, [r3, #0]
 8005050:	2b00      	cmp	r3, #0
 8005052:	d001      	beq.n	8005058 <xTaskIncrementTick+0x144>
		{
			xSwitchRequired = pdTRUE;
 8005054:	2301      	movs	r3, #1
 8005056:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8005058:	697b      	ldr	r3, [r7, #20]
}
 800505a:	4618      	mov	r0, r3
 800505c:	3718      	adds	r7, #24
 800505e:	46bd      	mov	sp, r7
 8005060:	bd80      	pop	{r7, pc}
 8005062:	bf00      	nop
 8005064:	20000be8 	.word	0x20000be8
 8005068:	20000bc4 	.word	0x20000bc4
 800506c:	20000b78 	.word	0x20000b78
 8005070:	20000b7c 	.word	0x20000b7c
 8005074:	20000bd8 	.word	0x20000bd8
 8005078:	20000be0 	.word	0x20000be0
 800507c:	20000bc8 	.word	0x20000bc8
 8005080:	200006f0 	.word	0x200006f0
 8005084:	200006ec 	.word	0x200006ec
 8005088:	20000bd0 	.word	0x20000bd0
 800508c:	20000bd4 	.word	0x20000bd4

08005090 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8005090:	b480      	push	{r7}
 8005092:	b085      	sub	sp, #20
 8005094:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8005096:	4b27      	ldr	r3, [pc, #156]	; (8005134 <vTaskSwitchContext+0xa4>)
 8005098:	681b      	ldr	r3, [r3, #0]
 800509a:	2b00      	cmp	r3, #0
 800509c:	d003      	beq.n	80050a6 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800509e:	4b26      	ldr	r3, [pc, #152]	; (8005138 <vTaskSwitchContext+0xa8>)
 80050a0:	2201      	movs	r2, #1
 80050a2:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80050a4:	e040      	b.n	8005128 <vTaskSwitchContext+0x98>
		xYieldPending = pdFALSE;
 80050a6:	4b24      	ldr	r3, [pc, #144]	; (8005138 <vTaskSwitchContext+0xa8>)
 80050a8:	2200      	movs	r2, #0
 80050aa:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 80050ac:	4b23      	ldr	r3, [pc, #140]	; (800513c <vTaskSwitchContext+0xac>)
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	60fb      	str	r3, [r7, #12]
 80050b2:	e00f      	b.n	80050d4 <vTaskSwitchContext+0x44>
 80050b4:	68fb      	ldr	r3, [r7, #12]
 80050b6:	2b00      	cmp	r3, #0
 80050b8:	d109      	bne.n	80050ce <vTaskSwitchContext+0x3e>
 80050ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80050be:	f383 8811 	msr	BASEPRI, r3
 80050c2:	f3bf 8f6f 	isb	sy
 80050c6:	f3bf 8f4f 	dsb	sy
 80050ca:	607b      	str	r3, [r7, #4]
 80050cc:	e7fe      	b.n	80050cc <vTaskSwitchContext+0x3c>
 80050ce:	68fb      	ldr	r3, [r7, #12]
 80050d0:	3b01      	subs	r3, #1
 80050d2:	60fb      	str	r3, [r7, #12]
 80050d4:	491a      	ldr	r1, [pc, #104]	; (8005140 <vTaskSwitchContext+0xb0>)
 80050d6:	68fa      	ldr	r2, [r7, #12]
 80050d8:	4613      	mov	r3, r2
 80050da:	009b      	lsls	r3, r3, #2
 80050dc:	4413      	add	r3, r2
 80050de:	009b      	lsls	r3, r3, #2
 80050e0:	440b      	add	r3, r1
 80050e2:	681b      	ldr	r3, [r3, #0]
 80050e4:	2b00      	cmp	r3, #0
 80050e6:	d0e5      	beq.n	80050b4 <vTaskSwitchContext+0x24>
 80050e8:	68fa      	ldr	r2, [r7, #12]
 80050ea:	4613      	mov	r3, r2
 80050ec:	009b      	lsls	r3, r3, #2
 80050ee:	4413      	add	r3, r2
 80050f0:	009b      	lsls	r3, r3, #2
 80050f2:	4a13      	ldr	r2, [pc, #76]	; (8005140 <vTaskSwitchContext+0xb0>)
 80050f4:	4413      	add	r3, r2
 80050f6:	60bb      	str	r3, [r7, #8]
 80050f8:	68bb      	ldr	r3, [r7, #8]
 80050fa:	685b      	ldr	r3, [r3, #4]
 80050fc:	685a      	ldr	r2, [r3, #4]
 80050fe:	68bb      	ldr	r3, [r7, #8]
 8005100:	605a      	str	r2, [r3, #4]
 8005102:	68bb      	ldr	r3, [r7, #8]
 8005104:	685a      	ldr	r2, [r3, #4]
 8005106:	68bb      	ldr	r3, [r7, #8]
 8005108:	3308      	adds	r3, #8
 800510a:	429a      	cmp	r2, r3
 800510c:	d104      	bne.n	8005118 <vTaskSwitchContext+0x88>
 800510e:	68bb      	ldr	r3, [r7, #8]
 8005110:	685b      	ldr	r3, [r3, #4]
 8005112:	685a      	ldr	r2, [r3, #4]
 8005114:	68bb      	ldr	r3, [r7, #8]
 8005116:	605a      	str	r2, [r3, #4]
 8005118:	68bb      	ldr	r3, [r7, #8]
 800511a:	685b      	ldr	r3, [r3, #4]
 800511c:	68db      	ldr	r3, [r3, #12]
 800511e:	4a09      	ldr	r2, [pc, #36]	; (8005144 <vTaskSwitchContext+0xb4>)
 8005120:	6013      	str	r3, [r2, #0]
 8005122:	4a06      	ldr	r2, [pc, #24]	; (800513c <vTaskSwitchContext+0xac>)
 8005124:	68fb      	ldr	r3, [r7, #12]
 8005126:	6013      	str	r3, [r2, #0]
}
 8005128:	bf00      	nop
 800512a:	3714      	adds	r7, #20
 800512c:	46bd      	mov	sp, r7
 800512e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005132:	4770      	bx	lr
 8005134:	20000be8 	.word	0x20000be8
 8005138:	20000bd4 	.word	0x20000bd4
 800513c:	20000bc8 	.word	0x20000bc8
 8005140:	200006f0 	.word	0x200006f0
 8005144:	200006ec 	.word	0x200006ec

08005148 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8005148:	b580      	push	{r7, lr}
 800514a:	b084      	sub	sp, #16
 800514c:	af00      	add	r7, sp, #0
 800514e:	6078      	str	r0, [r7, #4]
 8005150:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	2b00      	cmp	r3, #0
 8005156:	d109      	bne.n	800516c <vTaskPlaceOnEventList+0x24>
 8005158:	f04f 0350 	mov.w	r3, #80	; 0x50
 800515c:	f383 8811 	msr	BASEPRI, r3
 8005160:	f3bf 8f6f 	isb	sy
 8005164:	f3bf 8f4f 	dsb	sy
 8005168:	60fb      	str	r3, [r7, #12]
 800516a:	e7fe      	b.n	800516a <vTaskPlaceOnEventList+0x22>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800516c:	4b07      	ldr	r3, [pc, #28]	; (800518c <vTaskPlaceOnEventList+0x44>)
 800516e:	681b      	ldr	r3, [r3, #0]
 8005170:	3318      	adds	r3, #24
 8005172:	4619      	mov	r1, r3
 8005174:	6878      	ldr	r0, [r7, #4]
 8005176:	f7fe fca8 	bl	8003aca <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800517a:	2101      	movs	r1, #1
 800517c:	6838      	ldr	r0, [r7, #0]
 800517e:	f000 fb7d 	bl	800587c <prvAddCurrentTaskToDelayedList>
}
 8005182:	bf00      	nop
 8005184:	3710      	adds	r7, #16
 8005186:	46bd      	mov	sp, r7
 8005188:	bd80      	pop	{r7, pc}
 800518a:	bf00      	nop
 800518c:	200006ec 	.word	0x200006ec

08005190 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8005190:	b580      	push	{r7, lr}
 8005192:	b086      	sub	sp, #24
 8005194:	af00      	add	r7, sp, #0
 8005196:	60f8      	str	r0, [r7, #12]
 8005198:	60b9      	str	r1, [r7, #8]
 800519a:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800519c:	68fb      	ldr	r3, [r7, #12]
 800519e:	2b00      	cmp	r3, #0
 80051a0:	d109      	bne.n	80051b6 <vTaskPlaceOnEventListRestricted+0x26>
 80051a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80051a6:	f383 8811 	msr	BASEPRI, r3
 80051aa:	f3bf 8f6f 	isb	sy
 80051ae:	f3bf 8f4f 	dsb	sy
 80051b2:	617b      	str	r3, [r7, #20]
 80051b4:	e7fe      	b.n	80051b4 <vTaskPlaceOnEventListRestricted+0x24>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80051b6:	4b0a      	ldr	r3, [pc, #40]	; (80051e0 <vTaskPlaceOnEventListRestricted+0x50>)
 80051b8:	681b      	ldr	r3, [r3, #0]
 80051ba:	3318      	adds	r3, #24
 80051bc:	4619      	mov	r1, r3
 80051be:	68f8      	ldr	r0, [r7, #12]
 80051c0:	f7fe fc5f 	bl	8003a82 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	2b00      	cmp	r3, #0
 80051c8:	d002      	beq.n	80051d0 <vTaskPlaceOnEventListRestricted+0x40>
		{
			xTicksToWait = portMAX_DELAY;
 80051ca:	f04f 33ff 	mov.w	r3, #4294967295
 80051ce:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80051d0:	6879      	ldr	r1, [r7, #4]
 80051d2:	68b8      	ldr	r0, [r7, #8]
 80051d4:	f000 fb52 	bl	800587c <prvAddCurrentTaskToDelayedList>
	}
 80051d8:	bf00      	nop
 80051da:	3718      	adds	r7, #24
 80051dc:	46bd      	mov	sp, r7
 80051de:	bd80      	pop	{r7, pc}
 80051e0:	200006ec 	.word	0x200006ec

080051e4 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80051e4:	b580      	push	{r7, lr}
 80051e6:	b086      	sub	sp, #24
 80051e8:	af00      	add	r7, sp, #0
 80051ea:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	68db      	ldr	r3, [r3, #12]
 80051f0:	68db      	ldr	r3, [r3, #12]
 80051f2:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80051f4:	693b      	ldr	r3, [r7, #16]
 80051f6:	2b00      	cmp	r3, #0
 80051f8:	d109      	bne.n	800520e <xTaskRemoveFromEventList+0x2a>
 80051fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80051fe:	f383 8811 	msr	BASEPRI, r3
 8005202:	f3bf 8f6f 	isb	sy
 8005206:	f3bf 8f4f 	dsb	sy
 800520a:	60fb      	str	r3, [r7, #12]
 800520c:	e7fe      	b.n	800520c <xTaskRemoveFromEventList+0x28>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800520e:	693b      	ldr	r3, [r7, #16]
 8005210:	3318      	adds	r3, #24
 8005212:	4618      	mov	r0, r3
 8005214:	f7fe fc92 	bl	8003b3c <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005218:	4b1d      	ldr	r3, [pc, #116]	; (8005290 <xTaskRemoveFromEventList+0xac>)
 800521a:	681b      	ldr	r3, [r3, #0]
 800521c:	2b00      	cmp	r3, #0
 800521e:	d11d      	bne.n	800525c <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8005220:	693b      	ldr	r3, [r7, #16]
 8005222:	3304      	adds	r3, #4
 8005224:	4618      	mov	r0, r3
 8005226:	f7fe fc89 	bl	8003b3c <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800522a:	693b      	ldr	r3, [r7, #16]
 800522c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800522e:	4b19      	ldr	r3, [pc, #100]	; (8005294 <xTaskRemoveFromEventList+0xb0>)
 8005230:	681b      	ldr	r3, [r3, #0]
 8005232:	429a      	cmp	r2, r3
 8005234:	d903      	bls.n	800523e <xTaskRemoveFromEventList+0x5a>
 8005236:	693b      	ldr	r3, [r7, #16]
 8005238:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800523a:	4a16      	ldr	r2, [pc, #88]	; (8005294 <xTaskRemoveFromEventList+0xb0>)
 800523c:	6013      	str	r3, [r2, #0]
 800523e:	693b      	ldr	r3, [r7, #16]
 8005240:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005242:	4613      	mov	r3, r2
 8005244:	009b      	lsls	r3, r3, #2
 8005246:	4413      	add	r3, r2
 8005248:	009b      	lsls	r3, r3, #2
 800524a:	4a13      	ldr	r2, [pc, #76]	; (8005298 <xTaskRemoveFromEventList+0xb4>)
 800524c:	441a      	add	r2, r3
 800524e:	693b      	ldr	r3, [r7, #16]
 8005250:	3304      	adds	r3, #4
 8005252:	4619      	mov	r1, r3
 8005254:	4610      	mov	r0, r2
 8005256:	f7fe fc14 	bl	8003a82 <vListInsertEnd>
 800525a:	e005      	b.n	8005268 <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800525c:	693b      	ldr	r3, [r7, #16]
 800525e:	3318      	adds	r3, #24
 8005260:	4619      	mov	r1, r3
 8005262:	480e      	ldr	r0, [pc, #56]	; (800529c <xTaskRemoveFromEventList+0xb8>)
 8005264:	f7fe fc0d 	bl	8003a82 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8005268:	693b      	ldr	r3, [r7, #16]
 800526a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800526c:	4b0c      	ldr	r3, [pc, #48]	; (80052a0 <xTaskRemoveFromEventList+0xbc>)
 800526e:	681b      	ldr	r3, [r3, #0]
 8005270:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005272:	429a      	cmp	r2, r3
 8005274:	d905      	bls.n	8005282 <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8005276:	2301      	movs	r3, #1
 8005278:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800527a:	4b0a      	ldr	r3, [pc, #40]	; (80052a4 <xTaskRemoveFromEventList+0xc0>)
 800527c:	2201      	movs	r2, #1
 800527e:	601a      	str	r2, [r3, #0]
 8005280:	e001      	b.n	8005286 <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 8005282:	2300      	movs	r3, #0
 8005284:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 8005286:	697b      	ldr	r3, [r7, #20]
}
 8005288:	4618      	mov	r0, r3
 800528a:	3718      	adds	r7, #24
 800528c:	46bd      	mov	sp, r7
 800528e:	bd80      	pop	{r7, pc}
 8005290:	20000be8 	.word	0x20000be8
 8005294:	20000bc8 	.word	0x20000bc8
 8005298:	200006f0 	.word	0x200006f0
 800529c:	20000b80 	.word	0x20000b80
 80052a0:	200006ec 	.word	0x200006ec
 80052a4:	20000bd4 	.word	0x20000bd4

080052a8 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80052a8:	b480      	push	{r7}
 80052aa:	b083      	sub	sp, #12
 80052ac:	af00      	add	r7, sp, #0
 80052ae:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80052b0:	4b06      	ldr	r3, [pc, #24]	; (80052cc <vTaskInternalSetTimeOutState+0x24>)
 80052b2:	681a      	ldr	r2, [r3, #0]
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80052b8:	4b05      	ldr	r3, [pc, #20]	; (80052d0 <vTaskInternalSetTimeOutState+0x28>)
 80052ba:	681a      	ldr	r2, [r3, #0]
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	605a      	str	r2, [r3, #4]
}
 80052c0:	bf00      	nop
 80052c2:	370c      	adds	r7, #12
 80052c4:	46bd      	mov	sp, r7
 80052c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052ca:	4770      	bx	lr
 80052cc:	20000bd8 	.word	0x20000bd8
 80052d0:	20000bc4 	.word	0x20000bc4

080052d4 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80052d4:	b580      	push	{r7, lr}
 80052d6:	b088      	sub	sp, #32
 80052d8:	af00      	add	r7, sp, #0
 80052da:	6078      	str	r0, [r7, #4]
 80052dc:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	2b00      	cmp	r3, #0
 80052e2:	d109      	bne.n	80052f8 <xTaskCheckForTimeOut+0x24>
 80052e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80052e8:	f383 8811 	msr	BASEPRI, r3
 80052ec:	f3bf 8f6f 	isb	sy
 80052f0:	f3bf 8f4f 	dsb	sy
 80052f4:	613b      	str	r3, [r7, #16]
 80052f6:	e7fe      	b.n	80052f6 <xTaskCheckForTimeOut+0x22>
	configASSERT( pxTicksToWait );
 80052f8:	683b      	ldr	r3, [r7, #0]
 80052fa:	2b00      	cmp	r3, #0
 80052fc:	d109      	bne.n	8005312 <xTaskCheckForTimeOut+0x3e>
 80052fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005302:	f383 8811 	msr	BASEPRI, r3
 8005306:	f3bf 8f6f 	isb	sy
 800530a:	f3bf 8f4f 	dsb	sy
 800530e:	60fb      	str	r3, [r7, #12]
 8005310:	e7fe      	b.n	8005310 <xTaskCheckForTimeOut+0x3c>

	taskENTER_CRITICAL();
 8005312:	f000 ff3b 	bl	800618c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8005316:	4b1d      	ldr	r3, [pc, #116]	; (800538c <xTaskCheckForTimeOut+0xb8>)
 8005318:	681b      	ldr	r3, [r3, #0]
 800531a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	685b      	ldr	r3, [r3, #4]
 8005320:	69ba      	ldr	r2, [r7, #24]
 8005322:	1ad3      	subs	r3, r2, r3
 8005324:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8005326:	683b      	ldr	r3, [r7, #0]
 8005328:	681b      	ldr	r3, [r3, #0]
 800532a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800532e:	d102      	bne.n	8005336 <xTaskCheckForTimeOut+0x62>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8005330:	2300      	movs	r3, #0
 8005332:	61fb      	str	r3, [r7, #28]
 8005334:	e023      	b.n	800537e <xTaskCheckForTimeOut+0xaa>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	681a      	ldr	r2, [r3, #0]
 800533a:	4b15      	ldr	r3, [pc, #84]	; (8005390 <xTaskCheckForTimeOut+0xbc>)
 800533c:	681b      	ldr	r3, [r3, #0]
 800533e:	429a      	cmp	r2, r3
 8005340:	d007      	beq.n	8005352 <xTaskCheckForTimeOut+0x7e>
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	685b      	ldr	r3, [r3, #4]
 8005346:	69ba      	ldr	r2, [r7, #24]
 8005348:	429a      	cmp	r2, r3
 800534a:	d302      	bcc.n	8005352 <xTaskCheckForTimeOut+0x7e>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800534c:	2301      	movs	r3, #1
 800534e:	61fb      	str	r3, [r7, #28]
 8005350:	e015      	b.n	800537e <xTaskCheckForTimeOut+0xaa>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8005352:	683b      	ldr	r3, [r7, #0]
 8005354:	681b      	ldr	r3, [r3, #0]
 8005356:	697a      	ldr	r2, [r7, #20]
 8005358:	429a      	cmp	r2, r3
 800535a:	d20b      	bcs.n	8005374 <xTaskCheckForTimeOut+0xa0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800535c:	683b      	ldr	r3, [r7, #0]
 800535e:	681a      	ldr	r2, [r3, #0]
 8005360:	697b      	ldr	r3, [r7, #20]
 8005362:	1ad2      	subs	r2, r2, r3
 8005364:	683b      	ldr	r3, [r7, #0]
 8005366:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8005368:	6878      	ldr	r0, [r7, #4]
 800536a:	f7ff ff9d 	bl	80052a8 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800536e:	2300      	movs	r3, #0
 8005370:	61fb      	str	r3, [r7, #28]
 8005372:	e004      	b.n	800537e <xTaskCheckForTimeOut+0xaa>
		}
		else
		{
			*pxTicksToWait = 0;
 8005374:	683b      	ldr	r3, [r7, #0]
 8005376:	2200      	movs	r2, #0
 8005378:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800537a:	2301      	movs	r3, #1
 800537c:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800537e:	f000 ff33 	bl	80061e8 <vPortExitCritical>

	return xReturn;
 8005382:	69fb      	ldr	r3, [r7, #28]
}
 8005384:	4618      	mov	r0, r3
 8005386:	3720      	adds	r7, #32
 8005388:	46bd      	mov	sp, r7
 800538a:	bd80      	pop	{r7, pc}
 800538c:	20000bc4 	.word	0x20000bc4
 8005390:	20000bd8 	.word	0x20000bd8

08005394 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8005394:	b480      	push	{r7}
 8005396:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8005398:	4b03      	ldr	r3, [pc, #12]	; (80053a8 <vTaskMissedYield+0x14>)
 800539a:	2201      	movs	r2, #1
 800539c:	601a      	str	r2, [r3, #0]
}
 800539e:	bf00      	nop
 80053a0:	46bd      	mov	sp, r7
 80053a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053a6:	4770      	bx	lr
 80053a8:	20000bd4 	.word	0x20000bd4

080053ac <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80053ac:	b580      	push	{r7, lr}
 80053ae:	b082      	sub	sp, #8
 80053b0:	af00      	add	r7, sp, #0
 80053b2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80053b4:	f000 f852 	bl	800545c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80053b8:	4b06      	ldr	r3, [pc, #24]	; (80053d4 <prvIdleTask+0x28>)
 80053ba:	681b      	ldr	r3, [r3, #0]
 80053bc:	2b01      	cmp	r3, #1
 80053be:	d9f9      	bls.n	80053b4 <prvIdleTask+0x8>
			{
				taskYIELD();
 80053c0:	4b05      	ldr	r3, [pc, #20]	; (80053d8 <prvIdleTask+0x2c>)
 80053c2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80053c6:	601a      	str	r2, [r3, #0]
 80053c8:	f3bf 8f4f 	dsb	sy
 80053cc:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80053d0:	e7f0      	b.n	80053b4 <prvIdleTask+0x8>
 80053d2:	bf00      	nop
 80053d4:	200006f0 	.word	0x200006f0
 80053d8:	e000ed04 	.word	0xe000ed04

080053dc <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80053dc:	b580      	push	{r7, lr}
 80053de:	b082      	sub	sp, #8
 80053e0:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80053e2:	2300      	movs	r3, #0
 80053e4:	607b      	str	r3, [r7, #4]
 80053e6:	e00c      	b.n	8005402 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80053e8:	687a      	ldr	r2, [r7, #4]
 80053ea:	4613      	mov	r3, r2
 80053ec:	009b      	lsls	r3, r3, #2
 80053ee:	4413      	add	r3, r2
 80053f0:	009b      	lsls	r3, r3, #2
 80053f2:	4a12      	ldr	r2, [pc, #72]	; (800543c <prvInitialiseTaskLists+0x60>)
 80053f4:	4413      	add	r3, r2
 80053f6:	4618      	mov	r0, r3
 80053f8:	f7fe fb16 	bl	8003a28 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	3301      	adds	r3, #1
 8005400:	607b      	str	r3, [r7, #4]
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	2b37      	cmp	r3, #55	; 0x37
 8005406:	d9ef      	bls.n	80053e8 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8005408:	480d      	ldr	r0, [pc, #52]	; (8005440 <prvInitialiseTaskLists+0x64>)
 800540a:	f7fe fb0d 	bl	8003a28 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800540e:	480d      	ldr	r0, [pc, #52]	; (8005444 <prvInitialiseTaskLists+0x68>)
 8005410:	f7fe fb0a 	bl	8003a28 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8005414:	480c      	ldr	r0, [pc, #48]	; (8005448 <prvInitialiseTaskLists+0x6c>)
 8005416:	f7fe fb07 	bl	8003a28 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800541a:	480c      	ldr	r0, [pc, #48]	; (800544c <prvInitialiseTaskLists+0x70>)
 800541c:	f7fe fb04 	bl	8003a28 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8005420:	480b      	ldr	r0, [pc, #44]	; (8005450 <prvInitialiseTaskLists+0x74>)
 8005422:	f7fe fb01 	bl	8003a28 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8005426:	4b0b      	ldr	r3, [pc, #44]	; (8005454 <prvInitialiseTaskLists+0x78>)
 8005428:	4a05      	ldr	r2, [pc, #20]	; (8005440 <prvInitialiseTaskLists+0x64>)
 800542a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800542c:	4b0a      	ldr	r3, [pc, #40]	; (8005458 <prvInitialiseTaskLists+0x7c>)
 800542e:	4a05      	ldr	r2, [pc, #20]	; (8005444 <prvInitialiseTaskLists+0x68>)
 8005430:	601a      	str	r2, [r3, #0]
}
 8005432:	bf00      	nop
 8005434:	3708      	adds	r7, #8
 8005436:	46bd      	mov	sp, r7
 8005438:	bd80      	pop	{r7, pc}
 800543a:	bf00      	nop
 800543c:	200006f0 	.word	0x200006f0
 8005440:	20000b50 	.word	0x20000b50
 8005444:	20000b64 	.word	0x20000b64
 8005448:	20000b80 	.word	0x20000b80
 800544c:	20000b94 	.word	0x20000b94
 8005450:	20000bac 	.word	0x20000bac
 8005454:	20000b78 	.word	0x20000b78
 8005458:	20000b7c 	.word	0x20000b7c

0800545c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800545c:	b580      	push	{r7, lr}
 800545e:	b082      	sub	sp, #8
 8005460:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005462:	e019      	b.n	8005498 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8005464:	f000 fe92 	bl	800618c <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8005468:	4b0f      	ldr	r3, [pc, #60]	; (80054a8 <prvCheckTasksWaitingTermination+0x4c>)
 800546a:	68db      	ldr	r3, [r3, #12]
 800546c:	68db      	ldr	r3, [r3, #12]
 800546e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	3304      	adds	r3, #4
 8005474:	4618      	mov	r0, r3
 8005476:	f7fe fb61 	bl	8003b3c <uxListRemove>
				--uxCurrentNumberOfTasks;
 800547a:	4b0c      	ldr	r3, [pc, #48]	; (80054ac <prvCheckTasksWaitingTermination+0x50>)
 800547c:	681b      	ldr	r3, [r3, #0]
 800547e:	3b01      	subs	r3, #1
 8005480:	4a0a      	ldr	r2, [pc, #40]	; (80054ac <prvCheckTasksWaitingTermination+0x50>)
 8005482:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8005484:	4b0a      	ldr	r3, [pc, #40]	; (80054b0 <prvCheckTasksWaitingTermination+0x54>)
 8005486:	681b      	ldr	r3, [r3, #0]
 8005488:	3b01      	subs	r3, #1
 800548a:	4a09      	ldr	r2, [pc, #36]	; (80054b0 <prvCheckTasksWaitingTermination+0x54>)
 800548c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800548e:	f000 feab 	bl	80061e8 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8005492:	6878      	ldr	r0, [r7, #4]
 8005494:	f000 f80e 	bl	80054b4 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005498:	4b05      	ldr	r3, [pc, #20]	; (80054b0 <prvCheckTasksWaitingTermination+0x54>)
 800549a:	681b      	ldr	r3, [r3, #0]
 800549c:	2b00      	cmp	r3, #0
 800549e:	d1e1      	bne.n	8005464 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80054a0:	bf00      	nop
 80054a2:	3708      	adds	r7, #8
 80054a4:	46bd      	mov	sp, r7
 80054a6:	bd80      	pop	{r7, pc}
 80054a8:	20000b94 	.word	0x20000b94
 80054ac:	20000bc0 	.word	0x20000bc0
 80054b0:	20000ba8 	.word	0x20000ba8

080054b4 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80054b4:	b580      	push	{r7, lr}
 80054b6:	b084      	sub	sp, #16
 80054b8:	af00      	add	r7, sp, #0
 80054ba:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 80054c2:	2b00      	cmp	r3, #0
 80054c4:	d108      	bne.n	80054d8 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80054ca:	4618      	mov	r0, r3
 80054cc:	f001 f83a 	bl	8006544 <vPortFree>
				vPortFree( pxTCB );
 80054d0:	6878      	ldr	r0, [r7, #4]
 80054d2:	f001 f837 	bl	8006544 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80054d6:	e017      	b.n	8005508 <prvDeleteTCB+0x54>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 80054de:	2b01      	cmp	r3, #1
 80054e0:	d103      	bne.n	80054ea <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 80054e2:	6878      	ldr	r0, [r7, #4]
 80054e4:	f001 f82e 	bl	8006544 <vPortFree>
	}
 80054e8:	e00e      	b.n	8005508 <prvDeleteTCB+0x54>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 80054f0:	2b02      	cmp	r3, #2
 80054f2:	d009      	beq.n	8005508 <prvDeleteTCB+0x54>
 80054f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80054f8:	f383 8811 	msr	BASEPRI, r3
 80054fc:	f3bf 8f6f 	isb	sy
 8005500:	f3bf 8f4f 	dsb	sy
 8005504:	60fb      	str	r3, [r7, #12]
 8005506:	e7fe      	b.n	8005506 <prvDeleteTCB+0x52>
	}
 8005508:	bf00      	nop
 800550a:	3710      	adds	r7, #16
 800550c:	46bd      	mov	sp, r7
 800550e:	bd80      	pop	{r7, pc}

08005510 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8005510:	b480      	push	{r7}
 8005512:	b083      	sub	sp, #12
 8005514:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005516:	4b0f      	ldr	r3, [pc, #60]	; (8005554 <prvResetNextTaskUnblockTime+0x44>)
 8005518:	681b      	ldr	r3, [r3, #0]
 800551a:	681b      	ldr	r3, [r3, #0]
 800551c:	2b00      	cmp	r3, #0
 800551e:	d101      	bne.n	8005524 <prvResetNextTaskUnblockTime+0x14>
 8005520:	2301      	movs	r3, #1
 8005522:	e000      	b.n	8005526 <prvResetNextTaskUnblockTime+0x16>
 8005524:	2300      	movs	r3, #0
 8005526:	2b00      	cmp	r3, #0
 8005528:	d004      	beq.n	8005534 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800552a:	4b0b      	ldr	r3, [pc, #44]	; (8005558 <prvResetNextTaskUnblockTime+0x48>)
 800552c:	f04f 32ff 	mov.w	r2, #4294967295
 8005530:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8005532:	e008      	b.n	8005546 <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8005534:	4b07      	ldr	r3, [pc, #28]	; (8005554 <prvResetNextTaskUnblockTime+0x44>)
 8005536:	681b      	ldr	r3, [r3, #0]
 8005538:	68db      	ldr	r3, [r3, #12]
 800553a:	68db      	ldr	r3, [r3, #12]
 800553c:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	685b      	ldr	r3, [r3, #4]
 8005542:	4a05      	ldr	r2, [pc, #20]	; (8005558 <prvResetNextTaskUnblockTime+0x48>)
 8005544:	6013      	str	r3, [r2, #0]
}
 8005546:	bf00      	nop
 8005548:	370c      	adds	r7, #12
 800554a:	46bd      	mov	sp, r7
 800554c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005550:	4770      	bx	lr
 8005552:	bf00      	nop
 8005554:	20000b78 	.word	0x20000b78
 8005558:	20000be0 	.word	0x20000be0

0800555c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800555c:	b480      	push	{r7}
 800555e:	b083      	sub	sp, #12
 8005560:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8005562:	4b0b      	ldr	r3, [pc, #44]	; (8005590 <xTaskGetSchedulerState+0x34>)
 8005564:	681b      	ldr	r3, [r3, #0]
 8005566:	2b00      	cmp	r3, #0
 8005568:	d102      	bne.n	8005570 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800556a:	2301      	movs	r3, #1
 800556c:	607b      	str	r3, [r7, #4]
 800556e:	e008      	b.n	8005582 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005570:	4b08      	ldr	r3, [pc, #32]	; (8005594 <xTaskGetSchedulerState+0x38>)
 8005572:	681b      	ldr	r3, [r3, #0]
 8005574:	2b00      	cmp	r3, #0
 8005576:	d102      	bne.n	800557e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8005578:	2302      	movs	r3, #2
 800557a:	607b      	str	r3, [r7, #4]
 800557c:	e001      	b.n	8005582 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800557e:	2300      	movs	r3, #0
 8005580:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8005582:	687b      	ldr	r3, [r7, #4]
	}
 8005584:	4618      	mov	r0, r3
 8005586:	370c      	adds	r7, #12
 8005588:	46bd      	mov	sp, r7
 800558a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800558e:	4770      	bx	lr
 8005590:	20000bcc 	.word	0x20000bcc
 8005594:	20000be8 	.word	0x20000be8

08005598 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8005598:	b580      	push	{r7, lr}
 800559a:	b084      	sub	sp, #16
 800559c:	af00      	add	r7, sp, #0
 800559e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = ( TCB_t * ) pxMutexHolder;
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 80055a4:	2300      	movs	r3, #0
 80055a6:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	2b00      	cmp	r3, #0
 80055ac:	d056      	beq.n	800565c <xTaskPriorityInherit+0xc4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 80055ae:	68bb      	ldr	r3, [r7, #8]
 80055b0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80055b2:	4b2d      	ldr	r3, [pc, #180]	; (8005668 <xTaskPriorityInherit+0xd0>)
 80055b4:	681b      	ldr	r3, [r3, #0]
 80055b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80055b8:	429a      	cmp	r2, r3
 80055ba:	d246      	bcs.n	800564a <xTaskPriorityInherit+0xb2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80055bc:	68bb      	ldr	r3, [r7, #8]
 80055be:	699b      	ldr	r3, [r3, #24]
 80055c0:	2b00      	cmp	r3, #0
 80055c2:	db06      	blt.n	80055d2 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80055c4:	4b28      	ldr	r3, [pc, #160]	; (8005668 <xTaskPriorityInherit+0xd0>)
 80055c6:	681b      	ldr	r3, [r3, #0]
 80055c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80055ca:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80055ce:	68bb      	ldr	r3, [r7, #8]
 80055d0:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 80055d2:	68bb      	ldr	r3, [r7, #8]
 80055d4:	6959      	ldr	r1, [r3, #20]
 80055d6:	68bb      	ldr	r3, [r7, #8]
 80055d8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80055da:	4613      	mov	r3, r2
 80055dc:	009b      	lsls	r3, r3, #2
 80055de:	4413      	add	r3, r2
 80055e0:	009b      	lsls	r3, r3, #2
 80055e2:	4a22      	ldr	r2, [pc, #136]	; (800566c <xTaskPriorityInherit+0xd4>)
 80055e4:	4413      	add	r3, r2
 80055e6:	4299      	cmp	r1, r3
 80055e8:	d101      	bne.n	80055ee <xTaskPriorityInherit+0x56>
 80055ea:	2301      	movs	r3, #1
 80055ec:	e000      	b.n	80055f0 <xTaskPriorityInherit+0x58>
 80055ee:	2300      	movs	r3, #0
 80055f0:	2b00      	cmp	r3, #0
 80055f2:	d022      	beq.n	800563a <xTaskPriorityInherit+0xa2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80055f4:	68bb      	ldr	r3, [r7, #8]
 80055f6:	3304      	adds	r3, #4
 80055f8:	4618      	mov	r0, r3
 80055fa:	f7fe fa9f 	bl	8003b3c <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80055fe:	4b1a      	ldr	r3, [pc, #104]	; (8005668 <xTaskPriorityInherit+0xd0>)
 8005600:	681b      	ldr	r3, [r3, #0]
 8005602:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005604:	68bb      	ldr	r3, [r7, #8]
 8005606:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8005608:	68bb      	ldr	r3, [r7, #8]
 800560a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800560c:	4b18      	ldr	r3, [pc, #96]	; (8005670 <xTaskPriorityInherit+0xd8>)
 800560e:	681b      	ldr	r3, [r3, #0]
 8005610:	429a      	cmp	r2, r3
 8005612:	d903      	bls.n	800561c <xTaskPriorityInherit+0x84>
 8005614:	68bb      	ldr	r3, [r7, #8]
 8005616:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005618:	4a15      	ldr	r2, [pc, #84]	; (8005670 <xTaskPriorityInherit+0xd8>)
 800561a:	6013      	str	r3, [r2, #0]
 800561c:	68bb      	ldr	r3, [r7, #8]
 800561e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005620:	4613      	mov	r3, r2
 8005622:	009b      	lsls	r3, r3, #2
 8005624:	4413      	add	r3, r2
 8005626:	009b      	lsls	r3, r3, #2
 8005628:	4a10      	ldr	r2, [pc, #64]	; (800566c <xTaskPriorityInherit+0xd4>)
 800562a:	441a      	add	r2, r3
 800562c:	68bb      	ldr	r3, [r7, #8]
 800562e:	3304      	adds	r3, #4
 8005630:	4619      	mov	r1, r3
 8005632:	4610      	mov	r0, r2
 8005634:	f7fe fa25 	bl	8003a82 <vListInsertEnd>
 8005638:	e004      	b.n	8005644 <xTaskPriorityInherit+0xac>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800563a:	4b0b      	ldr	r3, [pc, #44]	; (8005668 <xTaskPriorityInherit+0xd0>)
 800563c:	681b      	ldr	r3, [r3, #0]
 800563e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005640:	68bb      	ldr	r3, [r7, #8]
 8005642:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8005644:	2301      	movs	r3, #1
 8005646:	60fb      	str	r3, [r7, #12]
 8005648:	e008      	b.n	800565c <xTaskPriorityInherit+0xc4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800564a:	68bb      	ldr	r3, [r7, #8]
 800564c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800564e:	4b06      	ldr	r3, [pc, #24]	; (8005668 <xTaskPriorityInherit+0xd0>)
 8005650:	681b      	ldr	r3, [r3, #0]
 8005652:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005654:	429a      	cmp	r2, r3
 8005656:	d201      	bcs.n	800565c <xTaskPriorityInherit+0xc4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8005658:	2301      	movs	r3, #1
 800565a:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800565c:	68fb      	ldr	r3, [r7, #12]
	}
 800565e:	4618      	mov	r0, r3
 8005660:	3710      	adds	r7, #16
 8005662:	46bd      	mov	sp, r7
 8005664:	bd80      	pop	{r7, pc}
 8005666:	bf00      	nop
 8005668:	200006ec 	.word	0x200006ec
 800566c:	200006f0 	.word	0x200006f0
 8005670:	20000bc8 	.word	0x20000bc8

08005674 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8005674:	b580      	push	{r7, lr}
 8005676:	b086      	sub	sp, #24
 8005678:	af00      	add	r7, sp, #0
 800567a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8005680:	2300      	movs	r3, #0
 8005682:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	2b00      	cmp	r3, #0
 8005688:	d054      	beq.n	8005734 <xTaskPriorityDisinherit+0xc0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800568a:	4b2d      	ldr	r3, [pc, #180]	; (8005740 <xTaskPriorityDisinherit+0xcc>)
 800568c:	681b      	ldr	r3, [r3, #0]
 800568e:	693a      	ldr	r2, [r7, #16]
 8005690:	429a      	cmp	r2, r3
 8005692:	d009      	beq.n	80056a8 <xTaskPriorityDisinherit+0x34>
 8005694:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005698:	f383 8811 	msr	BASEPRI, r3
 800569c:	f3bf 8f6f 	isb	sy
 80056a0:	f3bf 8f4f 	dsb	sy
 80056a4:	60fb      	str	r3, [r7, #12]
 80056a6:	e7fe      	b.n	80056a6 <xTaskPriorityDisinherit+0x32>
			configASSERT( pxTCB->uxMutexesHeld );
 80056a8:	693b      	ldr	r3, [r7, #16]
 80056aa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80056ac:	2b00      	cmp	r3, #0
 80056ae:	d109      	bne.n	80056c4 <xTaskPriorityDisinherit+0x50>
 80056b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80056b4:	f383 8811 	msr	BASEPRI, r3
 80056b8:	f3bf 8f6f 	isb	sy
 80056bc:	f3bf 8f4f 	dsb	sy
 80056c0:	60bb      	str	r3, [r7, #8]
 80056c2:	e7fe      	b.n	80056c2 <xTaskPriorityDisinherit+0x4e>
			( pxTCB->uxMutexesHeld )--;
 80056c4:	693b      	ldr	r3, [r7, #16]
 80056c6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80056c8:	1e5a      	subs	r2, r3, #1
 80056ca:	693b      	ldr	r3, [r7, #16]
 80056cc:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80056ce:	693b      	ldr	r3, [r7, #16]
 80056d0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80056d2:	693b      	ldr	r3, [r7, #16]
 80056d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80056d6:	429a      	cmp	r2, r3
 80056d8:	d02c      	beq.n	8005734 <xTaskPriorityDisinherit+0xc0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80056da:	693b      	ldr	r3, [r7, #16]
 80056dc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80056de:	2b00      	cmp	r3, #0
 80056e0:	d128      	bne.n	8005734 <xTaskPriorityDisinherit+0xc0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80056e2:	693b      	ldr	r3, [r7, #16]
 80056e4:	3304      	adds	r3, #4
 80056e6:	4618      	mov	r0, r3
 80056e8:	f7fe fa28 	bl	8003b3c <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80056ec:	693b      	ldr	r3, [r7, #16]
 80056ee:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80056f0:	693b      	ldr	r3, [r7, #16]
 80056f2:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80056f4:	693b      	ldr	r3, [r7, #16]
 80056f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80056f8:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80056fc:	693b      	ldr	r3, [r7, #16]
 80056fe:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8005700:	693b      	ldr	r3, [r7, #16]
 8005702:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005704:	4b0f      	ldr	r3, [pc, #60]	; (8005744 <xTaskPriorityDisinherit+0xd0>)
 8005706:	681b      	ldr	r3, [r3, #0]
 8005708:	429a      	cmp	r2, r3
 800570a:	d903      	bls.n	8005714 <xTaskPriorityDisinherit+0xa0>
 800570c:	693b      	ldr	r3, [r7, #16]
 800570e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005710:	4a0c      	ldr	r2, [pc, #48]	; (8005744 <xTaskPriorityDisinherit+0xd0>)
 8005712:	6013      	str	r3, [r2, #0]
 8005714:	693b      	ldr	r3, [r7, #16]
 8005716:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005718:	4613      	mov	r3, r2
 800571a:	009b      	lsls	r3, r3, #2
 800571c:	4413      	add	r3, r2
 800571e:	009b      	lsls	r3, r3, #2
 8005720:	4a09      	ldr	r2, [pc, #36]	; (8005748 <xTaskPriorityDisinherit+0xd4>)
 8005722:	441a      	add	r2, r3
 8005724:	693b      	ldr	r3, [r7, #16]
 8005726:	3304      	adds	r3, #4
 8005728:	4619      	mov	r1, r3
 800572a:	4610      	mov	r0, r2
 800572c:	f7fe f9a9 	bl	8003a82 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8005730:	2301      	movs	r3, #1
 8005732:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8005734:	697b      	ldr	r3, [r7, #20]
	}
 8005736:	4618      	mov	r0, r3
 8005738:	3718      	adds	r7, #24
 800573a:	46bd      	mov	sp, r7
 800573c:	bd80      	pop	{r7, pc}
 800573e:	bf00      	nop
 8005740:	200006ec 	.word	0x200006ec
 8005744:	20000bc8 	.word	0x20000bc8
 8005748:	200006f0 	.word	0x200006f0

0800574c <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 800574c:	b580      	push	{r7, lr}
 800574e:	b088      	sub	sp, #32
 8005750:	af00      	add	r7, sp, #0
 8005752:	6078      	str	r0, [r7, #4]
 8005754:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800575a:	2301      	movs	r3, #1
 800575c:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	2b00      	cmp	r3, #0
 8005762:	d06d      	beq.n	8005840 <vTaskPriorityDisinheritAfterTimeout+0xf4>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8005764:	69bb      	ldr	r3, [r7, #24]
 8005766:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005768:	2b00      	cmp	r3, #0
 800576a:	d109      	bne.n	8005780 <vTaskPriorityDisinheritAfterTimeout+0x34>
 800576c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005770:	f383 8811 	msr	BASEPRI, r3
 8005774:	f3bf 8f6f 	isb	sy
 8005778:	f3bf 8f4f 	dsb	sy
 800577c:	60fb      	str	r3, [r7, #12]
 800577e:	e7fe      	b.n	800577e <vTaskPriorityDisinheritAfterTimeout+0x32>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8005780:	69bb      	ldr	r3, [r7, #24]
 8005782:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005784:	683a      	ldr	r2, [r7, #0]
 8005786:	429a      	cmp	r2, r3
 8005788:	d902      	bls.n	8005790 <vTaskPriorityDisinheritAfterTimeout+0x44>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800578a:	683b      	ldr	r3, [r7, #0]
 800578c:	61fb      	str	r3, [r7, #28]
 800578e:	e002      	b.n	8005796 <vTaskPriorityDisinheritAfterTimeout+0x4a>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8005790:	69bb      	ldr	r3, [r7, #24]
 8005792:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005794:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8005796:	69bb      	ldr	r3, [r7, #24]
 8005798:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800579a:	69fa      	ldr	r2, [r7, #28]
 800579c:	429a      	cmp	r2, r3
 800579e:	d04f      	beq.n	8005840 <vTaskPriorityDisinheritAfterTimeout+0xf4>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 80057a0:	69bb      	ldr	r3, [r7, #24]
 80057a2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80057a4:	697a      	ldr	r2, [r7, #20]
 80057a6:	429a      	cmp	r2, r3
 80057a8:	d14a      	bne.n	8005840 <vTaskPriorityDisinheritAfterTimeout+0xf4>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 80057aa:	4b27      	ldr	r3, [pc, #156]	; (8005848 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 80057ac:	681b      	ldr	r3, [r3, #0]
 80057ae:	69ba      	ldr	r2, [r7, #24]
 80057b0:	429a      	cmp	r2, r3
 80057b2:	d109      	bne.n	80057c8 <vTaskPriorityDisinheritAfterTimeout+0x7c>
 80057b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80057b8:	f383 8811 	msr	BASEPRI, r3
 80057bc:	f3bf 8f6f 	isb	sy
 80057c0:	f3bf 8f4f 	dsb	sy
 80057c4:	60bb      	str	r3, [r7, #8]
 80057c6:	e7fe      	b.n	80057c6 <vTaskPriorityDisinheritAfterTimeout+0x7a>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 80057c8:	69bb      	ldr	r3, [r7, #24]
 80057ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80057cc:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 80057ce:	69bb      	ldr	r3, [r7, #24]
 80057d0:	69fa      	ldr	r2, [r7, #28]
 80057d2:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80057d4:	69bb      	ldr	r3, [r7, #24]
 80057d6:	699b      	ldr	r3, [r3, #24]
 80057d8:	2b00      	cmp	r3, #0
 80057da:	db04      	blt.n	80057e6 <vTaskPriorityDisinheritAfterTimeout+0x9a>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80057dc:	69fb      	ldr	r3, [r7, #28]
 80057de:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80057e2:	69bb      	ldr	r3, [r7, #24]
 80057e4:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 80057e6:	69bb      	ldr	r3, [r7, #24]
 80057e8:	6959      	ldr	r1, [r3, #20]
 80057ea:	693a      	ldr	r2, [r7, #16]
 80057ec:	4613      	mov	r3, r2
 80057ee:	009b      	lsls	r3, r3, #2
 80057f0:	4413      	add	r3, r2
 80057f2:	009b      	lsls	r3, r3, #2
 80057f4:	4a15      	ldr	r2, [pc, #84]	; (800584c <vTaskPriorityDisinheritAfterTimeout+0x100>)
 80057f6:	4413      	add	r3, r2
 80057f8:	4299      	cmp	r1, r3
 80057fa:	d101      	bne.n	8005800 <vTaskPriorityDisinheritAfterTimeout+0xb4>
 80057fc:	2301      	movs	r3, #1
 80057fe:	e000      	b.n	8005802 <vTaskPriorityDisinheritAfterTimeout+0xb6>
 8005800:	2300      	movs	r3, #0
 8005802:	2b00      	cmp	r3, #0
 8005804:	d01c      	beq.n	8005840 <vTaskPriorityDisinheritAfterTimeout+0xf4>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005806:	69bb      	ldr	r3, [r7, #24]
 8005808:	3304      	adds	r3, #4
 800580a:	4618      	mov	r0, r3
 800580c:	f7fe f996 	bl	8003b3c <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8005810:	69bb      	ldr	r3, [r7, #24]
 8005812:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005814:	4b0e      	ldr	r3, [pc, #56]	; (8005850 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 8005816:	681b      	ldr	r3, [r3, #0]
 8005818:	429a      	cmp	r2, r3
 800581a:	d903      	bls.n	8005824 <vTaskPriorityDisinheritAfterTimeout+0xd8>
 800581c:	69bb      	ldr	r3, [r7, #24]
 800581e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005820:	4a0b      	ldr	r2, [pc, #44]	; (8005850 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 8005822:	6013      	str	r3, [r2, #0]
 8005824:	69bb      	ldr	r3, [r7, #24]
 8005826:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005828:	4613      	mov	r3, r2
 800582a:	009b      	lsls	r3, r3, #2
 800582c:	4413      	add	r3, r2
 800582e:	009b      	lsls	r3, r3, #2
 8005830:	4a06      	ldr	r2, [pc, #24]	; (800584c <vTaskPriorityDisinheritAfterTimeout+0x100>)
 8005832:	441a      	add	r2, r3
 8005834:	69bb      	ldr	r3, [r7, #24]
 8005836:	3304      	adds	r3, #4
 8005838:	4619      	mov	r1, r3
 800583a:	4610      	mov	r0, r2
 800583c:	f7fe f921 	bl	8003a82 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8005840:	bf00      	nop
 8005842:	3720      	adds	r7, #32
 8005844:	46bd      	mov	sp, r7
 8005846:	bd80      	pop	{r7, pc}
 8005848:	200006ec 	.word	0x200006ec
 800584c:	200006f0 	.word	0x200006f0
 8005850:	20000bc8 	.word	0x20000bc8

08005854 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void *pvTaskIncrementMutexHeldCount( void )
	{
 8005854:	b480      	push	{r7}
 8005856:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8005858:	4b07      	ldr	r3, [pc, #28]	; (8005878 <pvTaskIncrementMutexHeldCount+0x24>)
 800585a:	681b      	ldr	r3, [r3, #0]
 800585c:	2b00      	cmp	r3, #0
 800585e:	d004      	beq.n	800586a <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8005860:	4b05      	ldr	r3, [pc, #20]	; (8005878 <pvTaskIncrementMutexHeldCount+0x24>)
 8005862:	681b      	ldr	r3, [r3, #0]
 8005864:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8005866:	3201      	adds	r2, #1
 8005868:	651a      	str	r2, [r3, #80]	; 0x50
		}

		return pxCurrentTCB;
 800586a:	4b03      	ldr	r3, [pc, #12]	; (8005878 <pvTaskIncrementMutexHeldCount+0x24>)
 800586c:	681b      	ldr	r3, [r3, #0]
	}
 800586e:	4618      	mov	r0, r3
 8005870:	46bd      	mov	sp, r7
 8005872:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005876:	4770      	bx	lr
 8005878:	200006ec 	.word	0x200006ec

0800587c <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800587c:	b580      	push	{r7, lr}
 800587e:	b084      	sub	sp, #16
 8005880:	af00      	add	r7, sp, #0
 8005882:	6078      	str	r0, [r7, #4]
 8005884:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8005886:	4b21      	ldr	r3, [pc, #132]	; (800590c <prvAddCurrentTaskToDelayedList+0x90>)
 8005888:	681b      	ldr	r3, [r3, #0]
 800588a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800588c:	4b20      	ldr	r3, [pc, #128]	; (8005910 <prvAddCurrentTaskToDelayedList+0x94>)
 800588e:	681b      	ldr	r3, [r3, #0]
 8005890:	3304      	adds	r3, #4
 8005892:	4618      	mov	r0, r3
 8005894:	f7fe f952 	bl	8003b3c <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800589e:	d10a      	bne.n	80058b6 <prvAddCurrentTaskToDelayedList+0x3a>
 80058a0:	683b      	ldr	r3, [r7, #0]
 80058a2:	2b00      	cmp	r3, #0
 80058a4:	d007      	beq.n	80058b6 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80058a6:	4b1a      	ldr	r3, [pc, #104]	; (8005910 <prvAddCurrentTaskToDelayedList+0x94>)
 80058a8:	681b      	ldr	r3, [r3, #0]
 80058aa:	3304      	adds	r3, #4
 80058ac:	4619      	mov	r1, r3
 80058ae:	4819      	ldr	r0, [pc, #100]	; (8005914 <prvAddCurrentTaskToDelayedList+0x98>)
 80058b0:	f7fe f8e7 	bl	8003a82 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80058b4:	e026      	b.n	8005904 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80058b6:	68fa      	ldr	r2, [r7, #12]
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	4413      	add	r3, r2
 80058bc:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80058be:	4b14      	ldr	r3, [pc, #80]	; (8005910 <prvAddCurrentTaskToDelayedList+0x94>)
 80058c0:	681b      	ldr	r3, [r3, #0]
 80058c2:	68ba      	ldr	r2, [r7, #8]
 80058c4:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80058c6:	68ba      	ldr	r2, [r7, #8]
 80058c8:	68fb      	ldr	r3, [r7, #12]
 80058ca:	429a      	cmp	r2, r3
 80058cc:	d209      	bcs.n	80058e2 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80058ce:	4b12      	ldr	r3, [pc, #72]	; (8005918 <prvAddCurrentTaskToDelayedList+0x9c>)
 80058d0:	681a      	ldr	r2, [r3, #0]
 80058d2:	4b0f      	ldr	r3, [pc, #60]	; (8005910 <prvAddCurrentTaskToDelayedList+0x94>)
 80058d4:	681b      	ldr	r3, [r3, #0]
 80058d6:	3304      	adds	r3, #4
 80058d8:	4619      	mov	r1, r3
 80058da:	4610      	mov	r0, r2
 80058dc:	f7fe f8f5 	bl	8003aca <vListInsert>
}
 80058e0:	e010      	b.n	8005904 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80058e2:	4b0e      	ldr	r3, [pc, #56]	; (800591c <prvAddCurrentTaskToDelayedList+0xa0>)
 80058e4:	681a      	ldr	r2, [r3, #0]
 80058e6:	4b0a      	ldr	r3, [pc, #40]	; (8005910 <prvAddCurrentTaskToDelayedList+0x94>)
 80058e8:	681b      	ldr	r3, [r3, #0]
 80058ea:	3304      	adds	r3, #4
 80058ec:	4619      	mov	r1, r3
 80058ee:	4610      	mov	r0, r2
 80058f0:	f7fe f8eb 	bl	8003aca <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80058f4:	4b0a      	ldr	r3, [pc, #40]	; (8005920 <prvAddCurrentTaskToDelayedList+0xa4>)
 80058f6:	681b      	ldr	r3, [r3, #0]
 80058f8:	68ba      	ldr	r2, [r7, #8]
 80058fa:	429a      	cmp	r2, r3
 80058fc:	d202      	bcs.n	8005904 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 80058fe:	4a08      	ldr	r2, [pc, #32]	; (8005920 <prvAddCurrentTaskToDelayedList+0xa4>)
 8005900:	68bb      	ldr	r3, [r7, #8]
 8005902:	6013      	str	r3, [r2, #0]
}
 8005904:	bf00      	nop
 8005906:	3710      	adds	r7, #16
 8005908:	46bd      	mov	sp, r7
 800590a:	bd80      	pop	{r7, pc}
 800590c:	20000bc4 	.word	0x20000bc4
 8005910:	200006ec 	.word	0x200006ec
 8005914:	20000bac 	.word	0x20000bac
 8005918:	20000b7c 	.word	0x20000b7c
 800591c:	20000b78 	.word	0x20000b78
 8005920:	20000be0 	.word	0x20000be0

08005924 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8005924:	b580      	push	{r7, lr}
 8005926:	b08a      	sub	sp, #40	; 0x28
 8005928:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800592a:	2300      	movs	r3, #0
 800592c:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800592e:	f000 fac3 	bl	8005eb8 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8005932:	4b1c      	ldr	r3, [pc, #112]	; (80059a4 <xTimerCreateTimerTask+0x80>)
 8005934:	681b      	ldr	r3, [r3, #0]
 8005936:	2b00      	cmp	r3, #0
 8005938:	d021      	beq.n	800597e <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800593a:	2300      	movs	r3, #0
 800593c:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800593e:	2300      	movs	r3, #0
 8005940:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8005942:	1d3a      	adds	r2, r7, #4
 8005944:	f107 0108 	add.w	r1, r7, #8
 8005948:	f107 030c 	add.w	r3, r7, #12
 800594c:	4618      	mov	r0, r3
 800594e:	f7fe f851 	bl	80039f4 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8005952:	6879      	ldr	r1, [r7, #4]
 8005954:	68bb      	ldr	r3, [r7, #8]
 8005956:	68fa      	ldr	r2, [r7, #12]
 8005958:	9202      	str	r2, [sp, #8]
 800595a:	9301      	str	r3, [sp, #4]
 800595c:	2302      	movs	r3, #2
 800595e:	9300      	str	r3, [sp, #0]
 8005960:	2300      	movs	r3, #0
 8005962:	460a      	mov	r2, r1
 8005964:	4910      	ldr	r1, [pc, #64]	; (80059a8 <xTimerCreateTimerTask+0x84>)
 8005966:	4811      	ldr	r0, [pc, #68]	; (80059ac <xTimerCreateTimerTask+0x88>)
 8005968:	f7fe ff74 	bl	8004854 <xTaskCreateStatic>
 800596c:	4602      	mov	r2, r0
 800596e:	4b10      	ldr	r3, [pc, #64]	; (80059b0 <xTimerCreateTimerTask+0x8c>)
 8005970:	601a      	str	r2, [r3, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8005972:	4b0f      	ldr	r3, [pc, #60]	; (80059b0 <xTimerCreateTimerTask+0x8c>)
 8005974:	681b      	ldr	r3, [r3, #0]
 8005976:	2b00      	cmp	r3, #0
 8005978:	d001      	beq.n	800597e <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800597a:	2301      	movs	r3, #1
 800597c:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800597e:	697b      	ldr	r3, [r7, #20]
 8005980:	2b00      	cmp	r3, #0
 8005982:	d109      	bne.n	8005998 <xTimerCreateTimerTask+0x74>
 8005984:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005988:	f383 8811 	msr	BASEPRI, r3
 800598c:	f3bf 8f6f 	isb	sy
 8005990:	f3bf 8f4f 	dsb	sy
 8005994:	613b      	str	r3, [r7, #16]
 8005996:	e7fe      	b.n	8005996 <xTimerCreateTimerTask+0x72>
	return xReturn;
 8005998:	697b      	ldr	r3, [r7, #20]
}
 800599a:	4618      	mov	r0, r3
 800599c:	3718      	adds	r7, #24
 800599e:	46bd      	mov	sp, r7
 80059a0:	bd80      	pop	{r7, pc}
 80059a2:	bf00      	nop
 80059a4:	20000c1c 	.word	0x20000c1c
 80059a8:	0800683c 	.word	0x0800683c
 80059ac:	08005acd 	.word	0x08005acd
 80059b0:	20000c20 	.word	0x20000c20

080059b4 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 80059b4:	b580      	push	{r7, lr}
 80059b6:	b08a      	sub	sp, #40	; 0x28
 80059b8:	af00      	add	r7, sp, #0
 80059ba:	60f8      	str	r0, [r7, #12]
 80059bc:	60b9      	str	r1, [r7, #8]
 80059be:	607a      	str	r2, [r7, #4]
 80059c0:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 80059c2:	2300      	movs	r3, #0
 80059c4:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 80059c6:	68fb      	ldr	r3, [r7, #12]
 80059c8:	2b00      	cmp	r3, #0
 80059ca:	d109      	bne.n	80059e0 <xTimerGenericCommand+0x2c>
 80059cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80059d0:	f383 8811 	msr	BASEPRI, r3
 80059d4:	f3bf 8f6f 	isb	sy
 80059d8:	f3bf 8f4f 	dsb	sy
 80059dc:	623b      	str	r3, [r7, #32]
 80059de:	e7fe      	b.n	80059de <xTimerGenericCommand+0x2a>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 80059e0:	4b19      	ldr	r3, [pc, #100]	; (8005a48 <xTimerGenericCommand+0x94>)
 80059e2:	681b      	ldr	r3, [r3, #0]
 80059e4:	2b00      	cmp	r3, #0
 80059e6:	d02a      	beq.n	8005a3e <xTimerGenericCommand+0x8a>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 80059e8:	68bb      	ldr	r3, [r7, #8]
 80059ea:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
 80059f0:	68fb      	ldr	r3, [r7, #12]
 80059f2:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 80059f4:	68bb      	ldr	r3, [r7, #8]
 80059f6:	2b05      	cmp	r3, #5
 80059f8:	dc18      	bgt.n	8005a2c <xTimerGenericCommand+0x78>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 80059fa:	f7ff fdaf 	bl	800555c <xTaskGetSchedulerState>
 80059fe:	4603      	mov	r3, r0
 8005a00:	2b02      	cmp	r3, #2
 8005a02:	d109      	bne.n	8005a18 <xTimerGenericCommand+0x64>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8005a04:	4b10      	ldr	r3, [pc, #64]	; (8005a48 <xTimerGenericCommand+0x94>)
 8005a06:	6818      	ldr	r0, [r3, #0]
 8005a08:	f107 0110 	add.w	r1, r7, #16
 8005a0c:	2300      	movs	r3, #0
 8005a0e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005a10:	f7fe fa2a 	bl	8003e68 <xQueueGenericSend>
 8005a14:	6278      	str	r0, [r7, #36]	; 0x24
 8005a16:	e012      	b.n	8005a3e <xTimerGenericCommand+0x8a>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8005a18:	4b0b      	ldr	r3, [pc, #44]	; (8005a48 <xTimerGenericCommand+0x94>)
 8005a1a:	6818      	ldr	r0, [r3, #0]
 8005a1c:	f107 0110 	add.w	r1, r7, #16
 8005a20:	2300      	movs	r3, #0
 8005a22:	2200      	movs	r2, #0
 8005a24:	f7fe fa20 	bl	8003e68 <xQueueGenericSend>
 8005a28:	6278      	str	r0, [r7, #36]	; 0x24
 8005a2a:	e008      	b.n	8005a3e <xTimerGenericCommand+0x8a>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8005a2c:	4b06      	ldr	r3, [pc, #24]	; (8005a48 <xTimerGenericCommand+0x94>)
 8005a2e:	6818      	ldr	r0, [r3, #0]
 8005a30:	f107 0110 	add.w	r1, r7, #16
 8005a34:	2300      	movs	r3, #0
 8005a36:	683a      	ldr	r2, [r7, #0]
 8005a38:	f7fe fb10 	bl	800405c <xQueueGenericSendFromISR>
 8005a3c:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8005a3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8005a40:	4618      	mov	r0, r3
 8005a42:	3728      	adds	r7, #40	; 0x28
 8005a44:	46bd      	mov	sp, r7
 8005a46:	bd80      	pop	{r7, pc}
 8005a48:	20000c1c 	.word	0x20000c1c

08005a4c <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8005a4c:	b580      	push	{r7, lr}
 8005a4e:	b088      	sub	sp, #32
 8005a50:	af02      	add	r7, sp, #8
 8005a52:	6078      	str	r0, [r7, #4]
 8005a54:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 8005a56:	4b1c      	ldr	r3, [pc, #112]	; (8005ac8 <prvProcessExpiredTimer+0x7c>)
 8005a58:	681b      	ldr	r3, [r3, #0]
 8005a5a:	68db      	ldr	r3, [r3, #12]
 8005a5c:	68db      	ldr	r3, [r3, #12]
 8005a5e:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005a60:	697b      	ldr	r3, [r7, #20]
 8005a62:	3304      	adds	r3, #4
 8005a64:	4618      	mov	r0, r3
 8005a66:	f7fe f869 	bl	8003b3c <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8005a6a:	697b      	ldr	r3, [r7, #20]
 8005a6c:	69db      	ldr	r3, [r3, #28]
 8005a6e:	2b01      	cmp	r3, #1
 8005a70:	d121      	bne.n	8005ab6 <prvProcessExpiredTimer+0x6a>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8005a72:	697b      	ldr	r3, [r7, #20]
 8005a74:	699a      	ldr	r2, [r3, #24]
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	18d1      	adds	r1, r2, r3
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	683a      	ldr	r2, [r7, #0]
 8005a7e:	6978      	ldr	r0, [r7, #20]
 8005a80:	f000 f8c8 	bl	8005c14 <prvInsertTimerInActiveList>
 8005a84:	4603      	mov	r3, r0
 8005a86:	2b00      	cmp	r3, #0
 8005a88:	d015      	beq.n	8005ab6 <prvProcessExpiredTimer+0x6a>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8005a8a:	2300      	movs	r3, #0
 8005a8c:	9300      	str	r3, [sp, #0]
 8005a8e:	2300      	movs	r3, #0
 8005a90:	687a      	ldr	r2, [r7, #4]
 8005a92:	2100      	movs	r1, #0
 8005a94:	6978      	ldr	r0, [r7, #20]
 8005a96:	f7ff ff8d 	bl	80059b4 <xTimerGenericCommand>
 8005a9a:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8005a9c:	693b      	ldr	r3, [r7, #16]
 8005a9e:	2b00      	cmp	r3, #0
 8005aa0:	d109      	bne.n	8005ab6 <prvProcessExpiredTimer+0x6a>
 8005aa2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005aa6:	f383 8811 	msr	BASEPRI, r3
 8005aaa:	f3bf 8f6f 	isb	sy
 8005aae:	f3bf 8f4f 	dsb	sy
 8005ab2:	60fb      	str	r3, [r7, #12]
 8005ab4:	e7fe      	b.n	8005ab4 <prvProcessExpiredTimer+0x68>
	{
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8005ab6:	697b      	ldr	r3, [r7, #20]
 8005ab8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005aba:	6978      	ldr	r0, [r7, #20]
 8005abc:	4798      	blx	r3
}
 8005abe:	bf00      	nop
 8005ac0:	3718      	adds	r7, #24
 8005ac2:	46bd      	mov	sp, r7
 8005ac4:	bd80      	pop	{r7, pc}
 8005ac6:	bf00      	nop
 8005ac8:	20000c14 	.word	0x20000c14

08005acc <prvTimerTask>:
/*-----------------------------------------------------------*/

static void prvTimerTask( void *pvParameters )
{
 8005acc:	b580      	push	{r7, lr}
 8005ace:	b084      	sub	sp, #16
 8005ad0:	af00      	add	r7, sp, #0
 8005ad2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8005ad4:	f107 0308 	add.w	r3, r7, #8
 8005ad8:	4618      	mov	r0, r3
 8005ada:	f000 f857 	bl	8005b8c <prvGetNextExpireTime>
 8005ade:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8005ae0:	68bb      	ldr	r3, [r7, #8]
 8005ae2:	4619      	mov	r1, r3
 8005ae4:	68f8      	ldr	r0, [r7, #12]
 8005ae6:	f000 f803 	bl	8005af0 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8005aea:	f000 f8d5 	bl	8005c98 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8005aee:	e7f1      	b.n	8005ad4 <prvTimerTask+0x8>

08005af0 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8005af0:	b580      	push	{r7, lr}
 8005af2:	b084      	sub	sp, #16
 8005af4:	af00      	add	r7, sp, #0
 8005af6:	6078      	str	r0, [r7, #4]
 8005af8:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8005afa:	f7ff f951 	bl	8004da0 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8005afe:	f107 0308 	add.w	r3, r7, #8
 8005b02:	4618      	mov	r0, r3
 8005b04:	f000 f866 	bl	8005bd4 <prvSampleTimeNow>
 8005b08:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8005b0a:	68bb      	ldr	r3, [r7, #8]
 8005b0c:	2b00      	cmp	r3, #0
 8005b0e:	d130      	bne.n	8005b72 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8005b10:	683b      	ldr	r3, [r7, #0]
 8005b12:	2b00      	cmp	r3, #0
 8005b14:	d10a      	bne.n	8005b2c <prvProcessTimerOrBlockTask+0x3c>
 8005b16:	687a      	ldr	r2, [r7, #4]
 8005b18:	68fb      	ldr	r3, [r7, #12]
 8005b1a:	429a      	cmp	r2, r3
 8005b1c:	d806      	bhi.n	8005b2c <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8005b1e:	f7ff f94d 	bl	8004dbc <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8005b22:	68f9      	ldr	r1, [r7, #12]
 8005b24:	6878      	ldr	r0, [r7, #4]
 8005b26:	f7ff ff91 	bl	8005a4c <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8005b2a:	e024      	b.n	8005b76 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8005b2c:	683b      	ldr	r3, [r7, #0]
 8005b2e:	2b00      	cmp	r3, #0
 8005b30:	d008      	beq.n	8005b44 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8005b32:	4b13      	ldr	r3, [pc, #76]	; (8005b80 <prvProcessTimerOrBlockTask+0x90>)
 8005b34:	681b      	ldr	r3, [r3, #0]
 8005b36:	681b      	ldr	r3, [r3, #0]
 8005b38:	2b00      	cmp	r3, #0
 8005b3a:	bf0c      	ite	eq
 8005b3c:	2301      	moveq	r3, #1
 8005b3e:	2300      	movne	r3, #0
 8005b40:	b2db      	uxtb	r3, r3
 8005b42:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8005b44:	4b0f      	ldr	r3, [pc, #60]	; (8005b84 <prvProcessTimerOrBlockTask+0x94>)
 8005b46:	6818      	ldr	r0, [r3, #0]
 8005b48:	687a      	ldr	r2, [r7, #4]
 8005b4a:	68fb      	ldr	r3, [r7, #12]
 8005b4c:	1ad3      	subs	r3, r2, r3
 8005b4e:	683a      	ldr	r2, [r7, #0]
 8005b50:	4619      	mov	r1, r3
 8005b52:	f7fe fe4b 	bl	80047ec <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8005b56:	f7ff f931 	bl	8004dbc <xTaskResumeAll>
 8005b5a:	4603      	mov	r3, r0
 8005b5c:	2b00      	cmp	r3, #0
 8005b5e:	d10a      	bne.n	8005b76 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8005b60:	4b09      	ldr	r3, [pc, #36]	; (8005b88 <prvProcessTimerOrBlockTask+0x98>)
 8005b62:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005b66:	601a      	str	r2, [r3, #0]
 8005b68:	f3bf 8f4f 	dsb	sy
 8005b6c:	f3bf 8f6f 	isb	sy
}
 8005b70:	e001      	b.n	8005b76 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8005b72:	f7ff f923 	bl	8004dbc <xTaskResumeAll>
}
 8005b76:	bf00      	nop
 8005b78:	3710      	adds	r7, #16
 8005b7a:	46bd      	mov	sp, r7
 8005b7c:	bd80      	pop	{r7, pc}
 8005b7e:	bf00      	nop
 8005b80:	20000c18 	.word	0x20000c18
 8005b84:	20000c1c 	.word	0x20000c1c
 8005b88:	e000ed04 	.word	0xe000ed04

08005b8c <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8005b8c:	b480      	push	{r7}
 8005b8e:	b085      	sub	sp, #20
 8005b90:	af00      	add	r7, sp, #0
 8005b92:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8005b94:	4b0e      	ldr	r3, [pc, #56]	; (8005bd0 <prvGetNextExpireTime+0x44>)
 8005b96:	681b      	ldr	r3, [r3, #0]
 8005b98:	681b      	ldr	r3, [r3, #0]
 8005b9a:	2b00      	cmp	r3, #0
 8005b9c:	bf0c      	ite	eq
 8005b9e:	2301      	moveq	r3, #1
 8005ba0:	2300      	movne	r3, #0
 8005ba2:	b2db      	uxtb	r3, r3
 8005ba4:	461a      	mov	r2, r3
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	681b      	ldr	r3, [r3, #0]
 8005bae:	2b00      	cmp	r3, #0
 8005bb0:	d105      	bne.n	8005bbe <prvGetNextExpireTime+0x32>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8005bb2:	4b07      	ldr	r3, [pc, #28]	; (8005bd0 <prvGetNextExpireTime+0x44>)
 8005bb4:	681b      	ldr	r3, [r3, #0]
 8005bb6:	68db      	ldr	r3, [r3, #12]
 8005bb8:	681b      	ldr	r3, [r3, #0]
 8005bba:	60fb      	str	r3, [r7, #12]
 8005bbc:	e001      	b.n	8005bc2 <prvGetNextExpireTime+0x36>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8005bbe:	2300      	movs	r3, #0
 8005bc0:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8005bc2:	68fb      	ldr	r3, [r7, #12]
}
 8005bc4:	4618      	mov	r0, r3
 8005bc6:	3714      	adds	r7, #20
 8005bc8:	46bd      	mov	sp, r7
 8005bca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bce:	4770      	bx	lr
 8005bd0:	20000c14 	.word	0x20000c14

08005bd4 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8005bd4:	b580      	push	{r7, lr}
 8005bd6:	b084      	sub	sp, #16
 8005bd8:	af00      	add	r7, sp, #0
 8005bda:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8005bdc:	f7ff f98a 	bl	8004ef4 <xTaskGetTickCount>
 8005be0:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8005be2:	4b0b      	ldr	r3, [pc, #44]	; (8005c10 <prvSampleTimeNow+0x3c>)
 8005be4:	681b      	ldr	r3, [r3, #0]
 8005be6:	68fa      	ldr	r2, [r7, #12]
 8005be8:	429a      	cmp	r2, r3
 8005bea:	d205      	bcs.n	8005bf8 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8005bec:	f000 f904 	bl	8005df8 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	2201      	movs	r2, #1
 8005bf4:	601a      	str	r2, [r3, #0]
 8005bf6:	e002      	b.n	8005bfe <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	2200      	movs	r2, #0
 8005bfc:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8005bfe:	4a04      	ldr	r2, [pc, #16]	; (8005c10 <prvSampleTimeNow+0x3c>)
 8005c00:	68fb      	ldr	r3, [r7, #12]
 8005c02:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8005c04:	68fb      	ldr	r3, [r7, #12]
}
 8005c06:	4618      	mov	r0, r3
 8005c08:	3710      	adds	r7, #16
 8005c0a:	46bd      	mov	sp, r7
 8005c0c:	bd80      	pop	{r7, pc}
 8005c0e:	bf00      	nop
 8005c10:	20000c24 	.word	0x20000c24

08005c14 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8005c14:	b580      	push	{r7, lr}
 8005c16:	b086      	sub	sp, #24
 8005c18:	af00      	add	r7, sp, #0
 8005c1a:	60f8      	str	r0, [r7, #12]
 8005c1c:	60b9      	str	r1, [r7, #8]
 8005c1e:	607a      	str	r2, [r7, #4]
 8005c20:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8005c22:	2300      	movs	r3, #0
 8005c24:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8005c26:	68fb      	ldr	r3, [r7, #12]
 8005c28:	68ba      	ldr	r2, [r7, #8]
 8005c2a:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8005c2c:	68fb      	ldr	r3, [r7, #12]
 8005c2e:	68fa      	ldr	r2, [r7, #12]
 8005c30:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8005c32:	68ba      	ldr	r2, [r7, #8]
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	429a      	cmp	r2, r3
 8005c38:	d812      	bhi.n	8005c60 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005c3a:	687a      	ldr	r2, [r7, #4]
 8005c3c:	683b      	ldr	r3, [r7, #0]
 8005c3e:	1ad2      	subs	r2, r2, r3
 8005c40:	68fb      	ldr	r3, [r7, #12]
 8005c42:	699b      	ldr	r3, [r3, #24]
 8005c44:	429a      	cmp	r2, r3
 8005c46:	d302      	bcc.n	8005c4e <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8005c48:	2301      	movs	r3, #1
 8005c4a:	617b      	str	r3, [r7, #20]
 8005c4c:	e01b      	b.n	8005c86 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8005c4e:	4b10      	ldr	r3, [pc, #64]	; (8005c90 <prvInsertTimerInActiveList+0x7c>)
 8005c50:	681a      	ldr	r2, [r3, #0]
 8005c52:	68fb      	ldr	r3, [r7, #12]
 8005c54:	3304      	adds	r3, #4
 8005c56:	4619      	mov	r1, r3
 8005c58:	4610      	mov	r0, r2
 8005c5a:	f7fd ff36 	bl	8003aca <vListInsert>
 8005c5e:	e012      	b.n	8005c86 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8005c60:	687a      	ldr	r2, [r7, #4]
 8005c62:	683b      	ldr	r3, [r7, #0]
 8005c64:	429a      	cmp	r2, r3
 8005c66:	d206      	bcs.n	8005c76 <prvInsertTimerInActiveList+0x62>
 8005c68:	68ba      	ldr	r2, [r7, #8]
 8005c6a:	683b      	ldr	r3, [r7, #0]
 8005c6c:	429a      	cmp	r2, r3
 8005c6e:	d302      	bcc.n	8005c76 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8005c70:	2301      	movs	r3, #1
 8005c72:	617b      	str	r3, [r7, #20]
 8005c74:	e007      	b.n	8005c86 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8005c76:	4b07      	ldr	r3, [pc, #28]	; (8005c94 <prvInsertTimerInActiveList+0x80>)
 8005c78:	681a      	ldr	r2, [r3, #0]
 8005c7a:	68fb      	ldr	r3, [r7, #12]
 8005c7c:	3304      	adds	r3, #4
 8005c7e:	4619      	mov	r1, r3
 8005c80:	4610      	mov	r0, r2
 8005c82:	f7fd ff22 	bl	8003aca <vListInsert>
		}
	}

	return xProcessTimerNow;
 8005c86:	697b      	ldr	r3, [r7, #20]
}
 8005c88:	4618      	mov	r0, r3
 8005c8a:	3718      	adds	r7, #24
 8005c8c:	46bd      	mov	sp, r7
 8005c8e:	bd80      	pop	{r7, pc}
 8005c90:	20000c18 	.word	0x20000c18
 8005c94:	20000c14 	.word	0x20000c14

08005c98 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8005c98:	b580      	push	{r7, lr}
 8005c9a:	b08e      	sub	sp, #56	; 0x38
 8005c9c:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8005c9e:	e099      	b.n	8005dd4 <prvProcessReceivedCommands+0x13c>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	2b00      	cmp	r3, #0
 8005ca4:	da17      	bge.n	8005cd6 <prvProcessReceivedCommands+0x3e>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8005ca6:	1d3b      	adds	r3, r7, #4
 8005ca8:	3304      	adds	r3, #4
 8005caa:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8005cac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005cae:	2b00      	cmp	r3, #0
 8005cb0:	d109      	bne.n	8005cc6 <prvProcessReceivedCommands+0x2e>
 8005cb2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005cb6:	f383 8811 	msr	BASEPRI, r3
 8005cba:	f3bf 8f6f 	isb	sy
 8005cbe:	f3bf 8f4f 	dsb	sy
 8005cc2:	61fb      	str	r3, [r7, #28]
 8005cc4:	e7fe      	b.n	8005cc4 <prvProcessReceivedCommands+0x2c>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8005cc6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005cc8:	681b      	ldr	r3, [r3, #0]
 8005cca:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005ccc:	6850      	ldr	r0, [r2, #4]
 8005cce:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005cd0:	6892      	ldr	r2, [r2, #8]
 8005cd2:	4611      	mov	r1, r2
 8005cd4:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	2b00      	cmp	r3, #0
 8005cda:	db7a      	blt.n	8005dd2 <prvProcessReceivedCommands+0x13a>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8005cdc:	68fb      	ldr	r3, [r7, #12]
 8005cde:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8005ce0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ce2:	695b      	ldr	r3, [r3, #20]
 8005ce4:	2b00      	cmp	r3, #0
 8005ce6:	d004      	beq.n	8005cf2 <prvProcessReceivedCommands+0x5a>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005ce8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005cea:	3304      	adds	r3, #4
 8005cec:	4618      	mov	r0, r3
 8005cee:	f7fd ff25 	bl	8003b3c <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8005cf2:	463b      	mov	r3, r7
 8005cf4:	4618      	mov	r0, r3
 8005cf6:	f7ff ff6d 	bl	8005bd4 <prvSampleTimeNow>
 8005cfa:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	2b09      	cmp	r3, #9
 8005d00:	d868      	bhi.n	8005dd4 <prvProcessReceivedCommands+0x13c>
 8005d02:	a201      	add	r2, pc, #4	; (adr r2, 8005d08 <prvProcessReceivedCommands+0x70>)
 8005d04:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005d08:	08005d31 	.word	0x08005d31
 8005d0c:	08005d31 	.word	0x08005d31
 8005d10:	08005d31 	.word	0x08005d31
 8005d14:	08005dd5 	.word	0x08005dd5
 8005d18:	08005d8b 	.word	0x08005d8b
 8005d1c:	08005dc1 	.word	0x08005dc1
 8005d20:	08005d31 	.word	0x08005d31
 8005d24:	08005d31 	.word	0x08005d31
 8005d28:	08005dd5 	.word	0x08005dd5
 8005d2c:	08005d8b 	.word	0x08005d8b
			    case tmrCOMMAND_START_FROM_ISR :
			    case tmrCOMMAND_RESET :
			    case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8005d30:	68ba      	ldr	r2, [r7, #8]
 8005d32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d34:	699b      	ldr	r3, [r3, #24]
 8005d36:	18d1      	adds	r1, r2, r3
 8005d38:	68bb      	ldr	r3, [r7, #8]
 8005d3a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005d3c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005d3e:	f7ff ff69 	bl	8005c14 <prvInsertTimerInActiveList>
 8005d42:	4603      	mov	r3, r0
 8005d44:	2b00      	cmp	r3, #0
 8005d46:	d045      	beq.n	8005dd4 <prvProcessReceivedCommands+0x13c>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8005d48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d4c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005d4e:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8005d50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d52:	69db      	ldr	r3, [r3, #28]
 8005d54:	2b01      	cmp	r3, #1
 8005d56:	d13d      	bne.n	8005dd4 <prvProcessReceivedCommands+0x13c>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8005d58:	68ba      	ldr	r2, [r7, #8]
 8005d5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d5c:	699b      	ldr	r3, [r3, #24]
 8005d5e:	441a      	add	r2, r3
 8005d60:	2300      	movs	r3, #0
 8005d62:	9300      	str	r3, [sp, #0]
 8005d64:	2300      	movs	r3, #0
 8005d66:	2100      	movs	r1, #0
 8005d68:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005d6a:	f7ff fe23 	bl	80059b4 <xTimerGenericCommand>
 8005d6e:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8005d70:	6a3b      	ldr	r3, [r7, #32]
 8005d72:	2b00      	cmp	r3, #0
 8005d74:	d12e      	bne.n	8005dd4 <prvProcessReceivedCommands+0x13c>
 8005d76:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d7a:	f383 8811 	msr	BASEPRI, r3
 8005d7e:	f3bf 8f6f 	isb	sy
 8005d82:	f3bf 8f4f 	dsb	sy
 8005d86:	61bb      	str	r3, [r7, #24]
 8005d88:	e7fe      	b.n	8005d88 <prvProcessReceivedCommands+0xf0>
					There is nothing to do here. */
					break;

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8005d8a:	68ba      	ldr	r2, [r7, #8]
 8005d8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d8e:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8005d90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d92:	699b      	ldr	r3, [r3, #24]
 8005d94:	2b00      	cmp	r3, #0
 8005d96:	d109      	bne.n	8005dac <prvProcessReceivedCommands+0x114>
 8005d98:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d9c:	f383 8811 	msr	BASEPRI, r3
 8005da0:	f3bf 8f6f 	isb	sy
 8005da4:	f3bf 8f4f 	dsb	sy
 8005da8:	617b      	str	r3, [r7, #20]
 8005daa:	e7fe      	b.n	8005daa <prvProcessReceivedCommands+0x112>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8005dac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005dae:	699a      	ldr	r2, [r3, #24]
 8005db0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005db2:	18d1      	adds	r1, r2, r3
 8005db4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005db6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005db8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005dba:	f7ff ff2b 	bl	8005c14 <prvInsertTimerInActiveList>
					break;
 8005dbe:	e009      	b.n	8005dd4 <prvProcessReceivedCommands+0x13c>
					#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
					{
						/* The timer could have been allocated statically or
						dynamically, so check before attempting to free the
						memory. */
						if( pxTimer->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8005dc0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005dc2:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8005dc6:	2b00      	cmp	r3, #0
 8005dc8:	d104      	bne.n	8005dd4 <prvProcessReceivedCommands+0x13c>
						{
							vPortFree( pxTimer );
 8005dca:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005dcc:	f000 fbba 	bl	8006544 <vPortFree>
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8005dd0:	e000      	b.n	8005dd4 <prvProcessReceivedCommands+0x13c>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8005dd2:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8005dd4:	4b07      	ldr	r3, [pc, #28]	; (8005df4 <prvProcessReceivedCommands+0x15c>)
 8005dd6:	681b      	ldr	r3, [r3, #0]
 8005dd8:	1d39      	adds	r1, r7, #4
 8005dda:	2200      	movs	r2, #0
 8005ddc:	4618      	mov	r0, r3
 8005dde:	f7fe f9d1 	bl	8004184 <xQueueReceive>
 8005de2:	4603      	mov	r3, r0
 8005de4:	2b00      	cmp	r3, #0
 8005de6:	f47f af5b 	bne.w	8005ca0 <prvProcessReceivedCommands+0x8>
	}
}
 8005dea:	bf00      	nop
 8005dec:	3730      	adds	r7, #48	; 0x30
 8005dee:	46bd      	mov	sp, r7
 8005df0:	bd80      	pop	{r7, pc}
 8005df2:	bf00      	nop
 8005df4:	20000c1c 	.word	0x20000c1c

08005df8 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8005df8:	b580      	push	{r7, lr}
 8005dfa:	b088      	sub	sp, #32
 8005dfc:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8005dfe:	e044      	b.n	8005e8a <prvSwitchTimerLists+0x92>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8005e00:	4b2b      	ldr	r3, [pc, #172]	; (8005eb0 <prvSwitchTimerLists+0xb8>)
 8005e02:	681b      	ldr	r3, [r3, #0]
 8005e04:	68db      	ldr	r3, [r3, #12]
 8005e06:	681b      	ldr	r3, [r3, #0]
 8005e08:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 8005e0a:	4b29      	ldr	r3, [pc, #164]	; (8005eb0 <prvSwitchTimerLists+0xb8>)
 8005e0c:	681b      	ldr	r3, [r3, #0]
 8005e0e:	68db      	ldr	r3, [r3, #12]
 8005e10:	68db      	ldr	r3, [r3, #12]
 8005e12:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005e14:	68fb      	ldr	r3, [r7, #12]
 8005e16:	3304      	adds	r3, #4
 8005e18:	4618      	mov	r0, r3
 8005e1a:	f7fd fe8f 	bl	8003b3c <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8005e1e:	68fb      	ldr	r3, [r7, #12]
 8005e20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e22:	68f8      	ldr	r0, [r7, #12]
 8005e24:	4798      	blx	r3

		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8005e26:	68fb      	ldr	r3, [r7, #12]
 8005e28:	69db      	ldr	r3, [r3, #28]
 8005e2a:	2b01      	cmp	r3, #1
 8005e2c:	d12d      	bne.n	8005e8a <prvSwitchTimerLists+0x92>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8005e2e:	68fb      	ldr	r3, [r7, #12]
 8005e30:	699b      	ldr	r3, [r3, #24]
 8005e32:	693a      	ldr	r2, [r7, #16]
 8005e34:	4413      	add	r3, r2
 8005e36:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8005e38:	68ba      	ldr	r2, [r7, #8]
 8005e3a:	693b      	ldr	r3, [r7, #16]
 8005e3c:	429a      	cmp	r2, r3
 8005e3e:	d90e      	bls.n	8005e5e <prvSwitchTimerLists+0x66>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8005e40:	68fb      	ldr	r3, [r7, #12]
 8005e42:	68ba      	ldr	r2, [r7, #8]
 8005e44:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8005e46:	68fb      	ldr	r3, [r7, #12]
 8005e48:	68fa      	ldr	r2, [r7, #12]
 8005e4a:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8005e4c:	4b18      	ldr	r3, [pc, #96]	; (8005eb0 <prvSwitchTimerLists+0xb8>)
 8005e4e:	681a      	ldr	r2, [r3, #0]
 8005e50:	68fb      	ldr	r3, [r7, #12]
 8005e52:	3304      	adds	r3, #4
 8005e54:	4619      	mov	r1, r3
 8005e56:	4610      	mov	r0, r2
 8005e58:	f7fd fe37 	bl	8003aca <vListInsert>
 8005e5c:	e015      	b.n	8005e8a <prvSwitchTimerLists+0x92>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8005e5e:	2300      	movs	r3, #0
 8005e60:	9300      	str	r3, [sp, #0]
 8005e62:	2300      	movs	r3, #0
 8005e64:	693a      	ldr	r2, [r7, #16]
 8005e66:	2100      	movs	r1, #0
 8005e68:	68f8      	ldr	r0, [r7, #12]
 8005e6a:	f7ff fda3 	bl	80059b4 <xTimerGenericCommand>
 8005e6e:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	2b00      	cmp	r3, #0
 8005e74:	d109      	bne.n	8005e8a <prvSwitchTimerLists+0x92>
 8005e76:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e7a:	f383 8811 	msr	BASEPRI, r3
 8005e7e:	f3bf 8f6f 	isb	sy
 8005e82:	f3bf 8f4f 	dsb	sy
 8005e86:	603b      	str	r3, [r7, #0]
 8005e88:	e7fe      	b.n	8005e88 <prvSwitchTimerLists+0x90>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8005e8a:	4b09      	ldr	r3, [pc, #36]	; (8005eb0 <prvSwitchTimerLists+0xb8>)
 8005e8c:	681b      	ldr	r3, [r3, #0]
 8005e8e:	681b      	ldr	r3, [r3, #0]
 8005e90:	2b00      	cmp	r3, #0
 8005e92:	d1b5      	bne.n	8005e00 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8005e94:	4b06      	ldr	r3, [pc, #24]	; (8005eb0 <prvSwitchTimerLists+0xb8>)
 8005e96:	681b      	ldr	r3, [r3, #0]
 8005e98:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8005e9a:	4b06      	ldr	r3, [pc, #24]	; (8005eb4 <prvSwitchTimerLists+0xbc>)
 8005e9c:	681b      	ldr	r3, [r3, #0]
 8005e9e:	4a04      	ldr	r2, [pc, #16]	; (8005eb0 <prvSwitchTimerLists+0xb8>)
 8005ea0:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8005ea2:	4a04      	ldr	r2, [pc, #16]	; (8005eb4 <prvSwitchTimerLists+0xbc>)
 8005ea4:	697b      	ldr	r3, [r7, #20]
 8005ea6:	6013      	str	r3, [r2, #0]
}
 8005ea8:	bf00      	nop
 8005eaa:	3718      	adds	r7, #24
 8005eac:	46bd      	mov	sp, r7
 8005eae:	bd80      	pop	{r7, pc}
 8005eb0:	20000c14 	.word	0x20000c14
 8005eb4:	20000c18 	.word	0x20000c18

08005eb8 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8005eb8:	b580      	push	{r7, lr}
 8005eba:	b082      	sub	sp, #8
 8005ebc:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8005ebe:	f000 f965 	bl	800618c <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8005ec2:	4b15      	ldr	r3, [pc, #84]	; (8005f18 <prvCheckForValidListAndQueue+0x60>)
 8005ec4:	681b      	ldr	r3, [r3, #0]
 8005ec6:	2b00      	cmp	r3, #0
 8005ec8:	d120      	bne.n	8005f0c <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8005eca:	4814      	ldr	r0, [pc, #80]	; (8005f1c <prvCheckForValidListAndQueue+0x64>)
 8005ecc:	f7fd fdac 	bl	8003a28 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8005ed0:	4813      	ldr	r0, [pc, #76]	; (8005f20 <prvCheckForValidListAndQueue+0x68>)
 8005ed2:	f7fd fda9 	bl	8003a28 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8005ed6:	4b13      	ldr	r3, [pc, #76]	; (8005f24 <prvCheckForValidListAndQueue+0x6c>)
 8005ed8:	4a10      	ldr	r2, [pc, #64]	; (8005f1c <prvCheckForValidListAndQueue+0x64>)
 8005eda:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8005edc:	4b12      	ldr	r3, [pc, #72]	; (8005f28 <prvCheckForValidListAndQueue+0x70>)
 8005ede:	4a10      	ldr	r2, [pc, #64]	; (8005f20 <prvCheckForValidListAndQueue+0x68>)
 8005ee0:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8005ee2:	2300      	movs	r3, #0
 8005ee4:	9300      	str	r3, [sp, #0]
 8005ee6:	4b11      	ldr	r3, [pc, #68]	; (8005f2c <prvCheckForValidListAndQueue+0x74>)
 8005ee8:	4a11      	ldr	r2, [pc, #68]	; (8005f30 <prvCheckForValidListAndQueue+0x78>)
 8005eea:	2110      	movs	r1, #16
 8005eec:	200a      	movs	r0, #10
 8005eee:	f7fd feb7 	bl	8003c60 <xQueueGenericCreateStatic>
 8005ef2:	4602      	mov	r2, r0
 8005ef4:	4b08      	ldr	r3, [pc, #32]	; (8005f18 <prvCheckForValidListAndQueue+0x60>)
 8005ef6:	601a      	str	r2, [r3, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8005ef8:	4b07      	ldr	r3, [pc, #28]	; (8005f18 <prvCheckForValidListAndQueue+0x60>)
 8005efa:	681b      	ldr	r3, [r3, #0]
 8005efc:	2b00      	cmp	r3, #0
 8005efe:	d005      	beq.n	8005f0c <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8005f00:	4b05      	ldr	r3, [pc, #20]	; (8005f18 <prvCheckForValidListAndQueue+0x60>)
 8005f02:	681b      	ldr	r3, [r3, #0]
 8005f04:	490b      	ldr	r1, [pc, #44]	; (8005f34 <prvCheckForValidListAndQueue+0x7c>)
 8005f06:	4618      	mov	r0, r3
 8005f08:	f7fe fc48 	bl	800479c <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8005f0c:	f000 f96c 	bl	80061e8 <vPortExitCritical>
}
 8005f10:	bf00      	nop
 8005f12:	46bd      	mov	sp, r7
 8005f14:	bd80      	pop	{r7, pc}
 8005f16:	bf00      	nop
 8005f18:	20000c1c 	.word	0x20000c1c
 8005f1c:	20000bec 	.word	0x20000bec
 8005f20:	20000c00 	.word	0x20000c00
 8005f24:	20000c14 	.word	0x20000c14
 8005f28:	20000c18 	.word	0x20000c18
 8005f2c:	20000cc8 	.word	0x20000cc8
 8005f30:	20000c28 	.word	0x20000c28
 8005f34:	08006844 	.word	0x08006844

08005f38 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8005f38:	b480      	push	{r7}
 8005f3a:	b085      	sub	sp, #20
 8005f3c:	af00      	add	r7, sp, #0
 8005f3e:	60f8      	str	r0, [r7, #12]
 8005f40:	60b9      	str	r1, [r7, #8]
 8005f42:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8005f44:	68fb      	ldr	r3, [r7, #12]
 8005f46:	3b04      	subs	r3, #4
 8005f48:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8005f4a:	68fb      	ldr	r3, [r7, #12]
 8005f4c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8005f50:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8005f52:	68fb      	ldr	r3, [r7, #12]
 8005f54:	3b04      	subs	r3, #4
 8005f56:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8005f58:	68bb      	ldr	r3, [r7, #8]
 8005f5a:	f023 0201 	bic.w	r2, r3, #1
 8005f5e:	68fb      	ldr	r3, [r7, #12]
 8005f60:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8005f62:	68fb      	ldr	r3, [r7, #12]
 8005f64:	3b04      	subs	r3, #4
 8005f66:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8005f68:	4a0c      	ldr	r2, [pc, #48]	; (8005f9c <pxPortInitialiseStack+0x64>)
 8005f6a:	68fb      	ldr	r3, [r7, #12]
 8005f6c:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8005f6e:	68fb      	ldr	r3, [r7, #12]
 8005f70:	3b14      	subs	r3, #20
 8005f72:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8005f74:	687a      	ldr	r2, [r7, #4]
 8005f76:	68fb      	ldr	r3, [r7, #12]
 8005f78:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8005f7a:	68fb      	ldr	r3, [r7, #12]
 8005f7c:	3b04      	subs	r3, #4
 8005f7e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8005f80:	68fb      	ldr	r3, [r7, #12]
 8005f82:	f06f 0202 	mvn.w	r2, #2
 8005f86:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8005f88:	68fb      	ldr	r3, [r7, #12]
 8005f8a:	3b20      	subs	r3, #32
 8005f8c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8005f8e:	68fb      	ldr	r3, [r7, #12]
}
 8005f90:	4618      	mov	r0, r3
 8005f92:	3714      	adds	r7, #20
 8005f94:	46bd      	mov	sp, r7
 8005f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f9a:	4770      	bx	lr
 8005f9c:	08005fa1 	.word	0x08005fa1

08005fa0 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8005fa0:	b480      	push	{r7}
 8005fa2:	b085      	sub	sp, #20
 8005fa4:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8005fa6:	2300      	movs	r3, #0
 8005fa8:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8005faa:	4b11      	ldr	r3, [pc, #68]	; (8005ff0 <prvTaskExitError+0x50>)
 8005fac:	681b      	ldr	r3, [r3, #0]
 8005fae:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005fb2:	d009      	beq.n	8005fc8 <prvTaskExitError+0x28>
 8005fb4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005fb8:	f383 8811 	msr	BASEPRI, r3
 8005fbc:	f3bf 8f6f 	isb	sy
 8005fc0:	f3bf 8f4f 	dsb	sy
 8005fc4:	60fb      	str	r3, [r7, #12]
 8005fc6:	e7fe      	b.n	8005fc6 <prvTaskExitError+0x26>
 8005fc8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005fcc:	f383 8811 	msr	BASEPRI, r3
 8005fd0:	f3bf 8f6f 	isb	sy
 8005fd4:	f3bf 8f4f 	dsb	sy
 8005fd8:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8005fda:	bf00      	nop
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	2b00      	cmp	r3, #0
 8005fe0:	d0fc      	beq.n	8005fdc <prvTaskExitError+0x3c>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8005fe2:	bf00      	nop
 8005fe4:	3714      	adds	r7, #20
 8005fe6:	46bd      	mov	sp, r7
 8005fe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fec:	4770      	bx	lr
 8005fee:	bf00      	nop
 8005ff0:	2000000c 	.word	0x2000000c
	...

08006000 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8006000:	4b07      	ldr	r3, [pc, #28]	; (8006020 <pxCurrentTCBConst2>)
 8006002:	6819      	ldr	r1, [r3, #0]
 8006004:	6808      	ldr	r0, [r1, #0]
 8006006:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800600a:	f380 8809 	msr	PSP, r0
 800600e:	f3bf 8f6f 	isb	sy
 8006012:	f04f 0000 	mov.w	r0, #0
 8006016:	f380 8811 	msr	BASEPRI, r0
 800601a:	4770      	bx	lr
 800601c:	f3af 8000 	nop.w

08006020 <pxCurrentTCBConst2>:
 8006020:	200006ec 	.word	0x200006ec
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8006024:	bf00      	nop
 8006026:	bf00      	nop

08006028 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8006028:	4808      	ldr	r0, [pc, #32]	; (800604c <prvPortStartFirstTask+0x24>)
 800602a:	6800      	ldr	r0, [r0, #0]
 800602c:	6800      	ldr	r0, [r0, #0]
 800602e:	f380 8808 	msr	MSP, r0
 8006032:	f04f 0000 	mov.w	r0, #0
 8006036:	f380 8814 	msr	CONTROL, r0
 800603a:	b662      	cpsie	i
 800603c:	b661      	cpsie	f
 800603e:	f3bf 8f4f 	dsb	sy
 8006042:	f3bf 8f6f 	isb	sy
 8006046:	df00      	svc	0
 8006048:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800604a:	bf00      	nop
 800604c:	e000ed08 	.word	0xe000ed08

08006050 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8006050:	b580      	push	{r7, lr}
 8006052:	b086      	sub	sp, #24
 8006054:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8006056:	4b44      	ldr	r3, [pc, #272]	; (8006168 <xPortStartScheduler+0x118>)
 8006058:	681b      	ldr	r3, [r3, #0]
 800605a:	4a44      	ldr	r2, [pc, #272]	; (800616c <xPortStartScheduler+0x11c>)
 800605c:	4293      	cmp	r3, r2
 800605e:	d109      	bne.n	8006074 <xPortStartScheduler+0x24>
 8006060:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006064:	f383 8811 	msr	BASEPRI, r3
 8006068:	f3bf 8f6f 	isb	sy
 800606c:	f3bf 8f4f 	dsb	sy
 8006070:	613b      	str	r3, [r7, #16]
 8006072:	e7fe      	b.n	8006072 <xPortStartScheduler+0x22>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8006074:	4b3c      	ldr	r3, [pc, #240]	; (8006168 <xPortStartScheduler+0x118>)
 8006076:	681b      	ldr	r3, [r3, #0]
 8006078:	4a3d      	ldr	r2, [pc, #244]	; (8006170 <xPortStartScheduler+0x120>)
 800607a:	4293      	cmp	r3, r2
 800607c:	d109      	bne.n	8006092 <xPortStartScheduler+0x42>
 800607e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006082:	f383 8811 	msr	BASEPRI, r3
 8006086:	f3bf 8f6f 	isb	sy
 800608a:	f3bf 8f4f 	dsb	sy
 800608e:	60fb      	str	r3, [r7, #12]
 8006090:	e7fe      	b.n	8006090 <xPortStartScheduler+0x40>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8006092:	4b38      	ldr	r3, [pc, #224]	; (8006174 <xPortStartScheduler+0x124>)
 8006094:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8006096:	697b      	ldr	r3, [r7, #20]
 8006098:	781b      	ldrb	r3, [r3, #0]
 800609a:	b2db      	uxtb	r3, r3
 800609c:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800609e:	697b      	ldr	r3, [r7, #20]
 80060a0:	22ff      	movs	r2, #255	; 0xff
 80060a2:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80060a4:	697b      	ldr	r3, [r7, #20]
 80060a6:	781b      	ldrb	r3, [r3, #0]
 80060a8:	b2db      	uxtb	r3, r3
 80060aa:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80060ac:	78fb      	ldrb	r3, [r7, #3]
 80060ae:	b2db      	uxtb	r3, r3
 80060b0:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80060b4:	b2da      	uxtb	r2, r3
 80060b6:	4b30      	ldr	r3, [pc, #192]	; (8006178 <xPortStartScheduler+0x128>)
 80060b8:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80060ba:	4b30      	ldr	r3, [pc, #192]	; (800617c <xPortStartScheduler+0x12c>)
 80060bc:	2207      	movs	r2, #7
 80060be:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80060c0:	e009      	b.n	80060d6 <xPortStartScheduler+0x86>
		{
			ulMaxPRIGROUPValue--;
 80060c2:	4b2e      	ldr	r3, [pc, #184]	; (800617c <xPortStartScheduler+0x12c>)
 80060c4:	681b      	ldr	r3, [r3, #0]
 80060c6:	3b01      	subs	r3, #1
 80060c8:	4a2c      	ldr	r2, [pc, #176]	; (800617c <xPortStartScheduler+0x12c>)
 80060ca:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80060cc:	78fb      	ldrb	r3, [r7, #3]
 80060ce:	b2db      	uxtb	r3, r3
 80060d0:	005b      	lsls	r3, r3, #1
 80060d2:	b2db      	uxtb	r3, r3
 80060d4:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80060d6:	78fb      	ldrb	r3, [r7, #3]
 80060d8:	b2db      	uxtb	r3, r3
 80060da:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80060de:	2b80      	cmp	r3, #128	; 0x80
 80060e0:	d0ef      	beq.n	80060c2 <xPortStartScheduler+0x72>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80060e2:	4b26      	ldr	r3, [pc, #152]	; (800617c <xPortStartScheduler+0x12c>)
 80060e4:	681b      	ldr	r3, [r3, #0]
 80060e6:	f1c3 0307 	rsb	r3, r3, #7
 80060ea:	2b04      	cmp	r3, #4
 80060ec:	d009      	beq.n	8006102 <xPortStartScheduler+0xb2>
 80060ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80060f2:	f383 8811 	msr	BASEPRI, r3
 80060f6:	f3bf 8f6f 	isb	sy
 80060fa:	f3bf 8f4f 	dsb	sy
 80060fe:	60bb      	str	r3, [r7, #8]
 8006100:	e7fe      	b.n	8006100 <xPortStartScheduler+0xb0>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8006102:	4b1e      	ldr	r3, [pc, #120]	; (800617c <xPortStartScheduler+0x12c>)
 8006104:	681b      	ldr	r3, [r3, #0]
 8006106:	021b      	lsls	r3, r3, #8
 8006108:	4a1c      	ldr	r2, [pc, #112]	; (800617c <xPortStartScheduler+0x12c>)
 800610a:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800610c:	4b1b      	ldr	r3, [pc, #108]	; (800617c <xPortStartScheduler+0x12c>)
 800610e:	681b      	ldr	r3, [r3, #0]
 8006110:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8006114:	4a19      	ldr	r2, [pc, #100]	; (800617c <xPortStartScheduler+0x12c>)
 8006116:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	b2da      	uxtb	r2, r3
 800611c:	697b      	ldr	r3, [r7, #20]
 800611e:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8006120:	4b17      	ldr	r3, [pc, #92]	; (8006180 <xPortStartScheduler+0x130>)
 8006122:	681b      	ldr	r3, [r3, #0]
 8006124:	4a16      	ldr	r2, [pc, #88]	; (8006180 <xPortStartScheduler+0x130>)
 8006126:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800612a:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800612c:	4b14      	ldr	r3, [pc, #80]	; (8006180 <xPortStartScheduler+0x130>)
 800612e:	681b      	ldr	r3, [r3, #0]
 8006130:	4a13      	ldr	r2, [pc, #76]	; (8006180 <xPortStartScheduler+0x130>)
 8006132:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8006136:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8006138:	f000 f8d6 	bl	80062e8 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800613c:	4b11      	ldr	r3, [pc, #68]	; (8006184 <xPortStartScheduler+0x134>)
 800613e:	2200      	movs	r2, #0
 8006140:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8006142:	f000 f8f5 	bl	8006330 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8006146:	4b10      	ldr	r3, [pc, #64]	; (8006188 <xPortStartScheduler+0x138>)
 8006148:	681b      	ldr	r3, [r3, #0]
 800614a:	4a0f      	ldr	r2, [pc, #60]	; (8006188 <xPortStartScheduler+0x138>)
 800614c:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8006150:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8006152:	f7ff ff69 	bl	8006028 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8006156:	f7fe ff9b 	bl	8005090 <vTaskSwitchContext>
	prvTaskExitError();
 800615a:	f7ff ff21 	bl	8005fa0 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800615e:	2300      	movs	r3, #0
}
 8006160:	4618      	mov	r0, r3
 8006162:	3718      	adds	r7, #24
 8006164:	46bd      	mov	sp, r7
 8006166:	bd80      	pop	{r7, pc}
 8006168:	e000ed00 	.word	0xe000ed00
 800616c:	410fc271 	.word	0x410fc271
 8006170:	410fc270 	.word	0x410fc270
 8006174:	e000e400 	.word	0xe000e400
 8006178:	20000d18 	.word	0x20000d18
 800617c:	20000d1c 	.word	0x20000d1c
 8006180:	e000ed20 	.word	0xe000ed20
 8006184:	2000000c 	.word	0x2000000c
 8006188:	e000ef34 	.word	0xe000ef34

0800618c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800618c:	b480      	push	{r7}
 800618e:	b083      	sub	sp, #12
 8006190:	af00      	add	r7, sp, #0
 8006192:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006196:	f383 8811 	msr	BASEPRI, r3
 800619a:	f3bf 8f6f 	isb	sy
 800619e:	f3bf 8f4f 	dsb	sy
 80061a2:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80061a4:	4b0e      	ldr	r3, [pc, #56]	; (80061e0 <vPortEnterCritical+0x54>)
 80061a6:	681b      	ldr	r3, [r3, #0]
 80061a8:	3301      	adds	r3, #1
 80061aa:	4a0d      	ldr	r2, [pc, #52]	; (80061e0 <vPortEnterCritical+0x54>)
 80061ac:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80061ae:	4b0c      	ldr	r3, [pc, #48]	; (80061e0 <vPortEnterCritical+0x54>)
 80061b0:	681b      	ldr	r3, [r3, #0]
 80061b2:	2b01      	cmp	r3, #1
 80061b4:	d10e      	bne.n	80061d4 <vPortEnterCritical+0x48>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80061b6:	4b0b      	ldr	r3, [pc, #44]	; (80061e4 <vPortEnterCritical+0x58>)
 80061b8:	681b      	ldr	r3, [r3, #0]
 80061ba:	b2db      	uxtb	r3, r3
 80061bc:	2b00      	cmp	r3, #0
 80061be:	d009      	beq.n	80061d4 <vPortEnterCritical+0x48>
 80061c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80061c4:	f383 8811 	msr	BASEPRI, r3
 80061c8:	f3bf 8f6f 	isb	sy
 80061cc:	f3bf 8f4f 	dsb	sy
 80061d0:	603b      	str	r3, [r7, #0]
 80061d2:	e7fe      	b.n	80061d2 <vPortEnterCritical+0x46>
	}
}
 80061d4:	bf00      	nop
 80061d6:	370c      	adds	r7, #12
 80061d8:	46bd      	mov	sp, r7
 80061da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061de:	4770      	bx	lr
 80061e0:	2000000c 	.word	0x2000000c
 80061e4:	e000ed04 	.word	0xe000ed04

080061e8 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80061e8:	b480      	push	{r7}
 80061ea:	b083      	sub	sp, #12
 80061ec:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80061ee:	4b11      	ldr	r3, [pc, #68]	; (8006234 <vPortExitCritical+0x4c>)
 80061f0:	681b      	ldr	r3, [r3, #0]
 80061f2:	2b00      	cmp	r3, #0
 80061f4:	d109      	bne.n	800620a <vPortExitCritical+0x22>
 80061f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80061fa:	f383 8811 	msr	BASEPRI, r3
 80061fe:	f3bf 8f6f 	isb	sy
 8006202:	f3bf 8f4f 	dsb	sy
 8006206:	607b      	str	r3, [r7, #4]
 8006208:	e7fe      	b.n	8006208 <vPortExitCritical+0x20>
	uxCriticalNesting--;
 800620a:	4b0a      	ldr	r3, [pc, #40]	; (8006234 <vPortExitCritical+0x4c>)
 800620c:	681b      	ldr	r3, [r3, #0]
 800620e:	3b01      	subs	r3, #1
 8006210:	4a08      	ldr	r2, [pc, #32]	; (8006234 <vPortExitCritical+0x4c>)
 8006212:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8006214:	4b07      	ldr	r3, [pc, #28]	; (8006234 <vPortExitCritical+0x4c>)
 8006216:	681b      	ldr	r3, [r3, #0]
 8006218:	2b00      	cmp	r3, #0
 800621a:	d104      	bne.n	8006226 <vPortExitCritical+0x3e>
 800621c:	2300      	movs	r3, #0
 800621e:	603b      	str	r3, [r7, #0]
	__asm volatile
 8006220:	683b      	ldr	r3, [r7, #0]
 8006222:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 8006226:	bf00      	nop
 8006228:	370c      	adds	r7, #12
 800622a:	46bd      	mov	sp, r7
 800622c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006230:	4770      	bx	lr
 8006232:	bf00      	nop
 8006234:	2000000c 	.word	0x2000000c
	...

08006240 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8006240:	f3ef 8009 	mrs	r0, PSP
 8006244:	f3bf 8f6f 	isb	sy
 8006248:	4b15      	ldr	r3, [pc, #84]	; (80062a0 <pxCurrentTCBConst>)
 800624a:	681a      	ldr	r2, [r3, #0]
 800624c:	f01e 0f10 	tst.w	lr, #16
 8006250:	bf08      	it	eq
 8006252:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8006256:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800625a:	6010      	str	r0, [r2, #0]
 800625c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8006260:	f04f 0050 	mov.w	r0, #80	; 0x50
 8006264:	f380 8811 	msr	BASEPRI, r0
 8006268:	f3bf 8f4f 	dsb	sy
 800626c:	f3bf 8f6f 	isb	sy
 8006270:	f7fe ff0e 	bl	8005090 <vTaskSwitchContext>
 8006274:	f04f 0000 	mov.w	r0, #0
 8006278:	f380 8811 	msr	BASEPRI, r0
 800627c:	bc09      	pop	{r0, r3}
 800627e:	6819      	ldr	r1, [r3, #0]
 8006280:	6808      	ldr	r0, [r1, #0]
 8006282:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006286:	f01e 0f10 	tst.w	lr, #16
 800628a:	bf08      	it	eq
 800628c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8006290:	f380 8809 	msr	PSP, r0
 8006294:	f3bf 8f6f 	isb	sy
 8006298:	4770      	bx	lr
 800629a:	bf00      	nop
 800629c:	f3af 8000 	nop.w

080062a0 <pxCurrentTCBConst>:
 80062a0:	200006ec 	.word	0x200006ec
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80062a4:	bf00      	nop
 80062a6:	bf00      	nop

080062a8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80062a8:	b580      	push	{r7, lr}
 80062aa:	b082      	sub	sp, #8
 80062ac:	af00      	add	r7, sp, #0
	__asm volatile
 80062ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80062b2:	f383 8811 	msr	BASEPRI, r3
 80062b6:	f3bf 8f6f 	isb	sy
 80062ba:	f3bf 8f4f 	dsb	sy
 80062be:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80062c0:	f7fe fe28 	bl	8004f14 <xTaskIncrementTick>
 80062c4:	4603      	mov	r3, r0
 80062c6:	2b00      	cmp	r3, #0
 80062c8:	d003      	beq.n	80062d2 <SysTick_Handler+0x2a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80062ca:	4b06      	ldr	r3, [pc, #24]	; (80062e4 <SysTick_Handler+0x3c>)
 80062cc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80062d0:	601a      	str	r2, [r3, #0]
 80062d2:	2300      	movs	r3, #0
 80062d4:	603b      	str	r3, [r7, #0]
	__asm volatile
 80062d6:	683b      	ldr	r3, [r7, #0]
 80062d8:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 80062dc:	bf00      	nop
 80062de:	3708      	adds	r7, #8
 80062e0:	46bd      	mov	sp, r7
 80062e2:	bd80      	pop	{r7, pc}
 80062e4:	e000ed04 	.word	0xe000ed04

080062e8 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80062e8:	b480      	push	{r7}
 80062ea:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80062ec:	4b0b      	ldr	r3, [pc, #44]	; (800631c <vPortSetupTimerInterrupt+0x34>)
 80062ee:	2200      	movs	r2, #0
 80062f0:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80062f2:	4b0b      	ldr	r3, [pc, #44]	; (8006320 <vPortSetupTimerInterrupt+0x38>)
 80062f4:	2200      	movs	r2, #0
 80062f6:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80062f8:	4b0a      	ldr	r3, [pc, #40]	; (8006324 <vPortSetupTimerInterrupt+0x3c>)
 80062fa:	681b      	ldr	r3, [r3, #0]
 80062fc:	4a0a      	ldr	r2, [pc, #40]	; (8006328 <vPortSetupTimerInterrupt+0x40>)
 80062fe:	fba2 2303 	umull	r2, r3, r2, r3
 8006302:	099b      	lsrs	r3, r3, #6
 8006304:	4a09      	ldr	r2, [pc, #36]	; (800632c <vPortSetupTimerInterrupt+0x44>)
 8006306:	3b01      	subs	r3, #1
 8006308:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800630a:	4b04      	ldr	r3, [pc, #16]	; (800631c <vPortSetupTimerInterrupt+0x34>)
 800630c:	2207      	movs	r2, #7
 800630e:	601a      	str	r2, [r3, #0]
}
 8006310:	bf00      	nop
 8006312:	46bd      	mov	sp, r7
 8006314:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006318:	4770      	bx	lr
 800631a:	bf00      	nop
 800631c:	e000e010 	.word	0xe000e010
 8006320:	e000e018 	.word	0xe000e018
 8006324:	20000000 	.word	0x20000000
 8006328:	10624dd3 	.word	0x10624dd3
 800632c:	e000e014 	.word	0xe000e014

08006330 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8006330:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8006340 <vPortEnableVFP+0x10>
 8006334:	6801      	ldr	r1, [r0, #0]
 8006336:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800633a:	6001      	str	r1, [r0, #0]
 800633c:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800633e:	bf00      	nop
 8006340:	e000ed88 	.word	0xe000ed88

08006344 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8006344:	b480      	push	{r7}
 8006346:	b085      	sub	sp, #20
 8006348:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800634a:	f3ef 8305 	mrs	r3, IPSR
 800634e:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8006350:	68fb      	ldr	r3, [r7, #12]
 8006352:	2b0f      	cmp	r3, #15
 8006354:	d913      	bls.n	800637e <vPortValidateInterruptPriority+0x3a>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8006356:	4a16      	ldr	r2, [pc, #88]	; (80063b0 <vPortValidateInterruptPriority+0x6c>)
 8006358:	68fb      	ldr	r3, [r7, #12]
 800635a:	4413      	add	r3, r2
 800635c:	781b      	ldrb	r3, [r3, #0]
 800635e:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8006360:	4b14      	ldr	r3, [pc, #80]	; (80063b4 <vPortValidateInterruptPriority+0x70>)
 8006362:	781b      	ldrb	r3, [r3, #0]
 8006364:	7afa      	ldrb	r2, [r7, #11]
 8006366:	429a      	cmp	r2, r3
 8006368:	d209      	bcs.n	800637e <vPortValidateInterruptPriority+0x3a>
	__asm volatile
 800636a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800636e:	f383 8811 	msr	BASEPRI, r3
 8006372:	f3bf 8f6f 	isb	sy
 8006376:	f3bf 8f4f 	dsb	sy
 800637a:	607b      	str	r3, [r7, #4]
 800637c:	e7fe      	b.n	800637c <vPortValidateInterruptPriority+0x38>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800637e:	4b0e      	ldr	r3, [pc, #56]	; (80063b8 <vPortValidateInterruptPriority+0x74>)
 8006380:	681b      	ldr	r3, [r3, #0]
 8006382:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8006386:	4b0d      	ldr	r3, [pc, #52]	; (80063bc <vPortValidateInterruptPriority+0x78>)
 8006388:	681b      	ldr	r3, [r3, #0]
 800638a:	429a      	cmp	r2, r3
 800638c:	d909      	bls.n	80063a2 <vPortValidateInterruptPriority+0x5e>
 800638e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006392:	f383 8811 	msr	BASEPRI, r3
 8006396:	f3bf 8f6f 	isb	sy
 800639a:	f3bf 8f4f 	dsb	sy
 800639e:	603b      	str	r3, [r7, #0]
 80063a0:	e7fe      	b.n	80063a0 <vPortValidateInterruptPriority+0x5c>
	}
 80063a2:	bf00      	nop
 80063a4:	3714      	adds	r7, #20
 80063a6:	46bd      	mov	sp, r7
 80063a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063ac:	4770      	bx	lr
 80063ae:	bf00      	nop
 80063b0:	e000e3f0 	.word	0xe000e3f0
 80063b4:	20000d18 	.word	0x20000d18
 80063b8:	e000ed0c 	.word	0xe000ed0c
 80063bc:	20000d1c 	.word	0x20000d1c

080063c0 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80063c0:	b580      	push	{r7, lr}
 80063c2:	b08a      	sub	sp, #40	; 0x28
 80063c4:	af00      	add	r7, sp, #0
 80063c6:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80063c8:	2300      	movs	r3, #0
 80063ca:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80063cc:	f7fe fce8 	bl	8004da0 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80063d0:	4b57      	ldr	r3, [pc, #348]	; (8006530 <pvPortMalloc+0x170>)
 80063d2:	681b      	ldr	r3, [r3, #0]
 80063d4:	2b00      	cmp	r3, #0
 80063d6:	d101      	bne.n	80063dc <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80063d8:	f000 f90c 	bl	80065f4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80063dc:	4b55      	ldr	r3, [pc, #340]	; (8006534 <pvPortMalloc+0x174>)
 80063de:	681a      	ldr	r2, [r3, #0]
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	4013      	ands	r3, r2
 80063e4:	2b00      	cmp	r3, #0
 80063e6:	f040 808c 	bne.w	8006502 <pvPortMalloc+0x142>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	2b00      	cmp	r3, #0
 80063ee:	d01c      	beq.n	800642a <pvPortMalloc+0x6a>
			{
				xWantedSize += xHeapStructSize;
 80063f0:	2208      	movs	r2, #8
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	4413      	add	r3, r2
 80063f6:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	f003 0307 	and.w	r3, r3, #7
 80063fe:	2b00      	cmp	r3, #0
 8006400:	d013      	beq.n	800642a <pvPortMalloc+0x6a>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	f023 0307 	bic.w	r3, r3, #7
 8006408:	3308      	adds	r3, #8
 800640a:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	f003 0307 	and.w	r3, r3, #7
 8006412:	2b00      	cmp	r3, #0
 8006414:	d009      	beq.n	800642a <pvPortMalloc+0x6a>
 8006416:	f04f 0350 	mov.w	r3, #80	; 0x50
 800641a:	f383 8811 	msr	BASEPRI, r3
 800641e:	f3bf 8f6f 	isb	sy
 8006422:	f3bf 8f4f 	dsb	sy
 8006426:	617b      	str	r3, [r7, #20]
 8006428:	e7fe      	b.n	8006428 <pvPortMalloc+0x68>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	2b00      	cmp	r3, #0
 800642e:	d068      	beq.n	8006502 <pvPortMalloc+0x142>
 8006430:	4b41      	ldr	r3, [pc, #260]	; (8006538 <pvPortMalloc+0x178>)
 8006432:	681b      	ldr	r3, [r3, #0]
 8006434:	687a      	ldr	r2, [r7, #4]
 8006436:	429a      	cmp	r2, r3
 8006438:	d863      	bhi.n	8006502 <pvPortMalloc+0x142>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800643a:	4b40      	ldr	r3, [pc, #256]	; (800653c <pvPortMalloc+0x17c>)
 800643c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800643e:	4b3f      	ldr	r3, [pc, #252]	; (800653c <pvPortMalloc+0x17c>)
 8006440:	681b      	ldr	r3, [r3, #0]
 8006442:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8006444:	e004      	b.n	8006450 <pvPortMalloc+0x90>
				{
					pxPreviousBlock = pxBlock;
 8006446:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006448:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800644a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800644c:	681b      	ldr	r3, [r3, #0]
 800644e:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8006450:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006452:	685b      	ldr	r3, [r3, #4]
 8006454:	687a      	ldr	r2, [r7, #4]
 8006456:	429a      	cmp	r2, r3
 8006458:	d903      	bls.n	8006462 <pvPortMalloc+0xa2>
 800645a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800645c:	681b      	ldr	r3, [r3, #0]
 800645e:	2b00      	cmp	r3, #0
 8006460:	d1f1      	bne.n	8006446 <pvPortMalloc+0x86>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8006462:	4b33      	ldr	r3, [pc, #204]	; (8006530 <pvPortMalloc+0x170>)
 8006464:	681b      	ldr	r3, [r3, #0]
 8006466:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006468:	429a      	cmp	r2, r3
 800646a:	d04a      	beq.n	8006502 <pvPortMalloc+0x142>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800646c:	6a3b      	ldr	r3, [r7, #32]
 800646e:	681b      	ldr	r3, [r3, #0]
 8006470:	2208      	movs	r2, #8
 8006472:	4413      	add	r3, r2
 8006474:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8006476:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006478:	681a      	ldr	r2, [r3, #0]
 800647a:	6a3b      	ldr	r3, [r7, #32]
 800647c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800647e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006480:	685a      	ldr	r2, [r3, #4]
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	1ad2      	subs	r2, r2, r3
 8006486:	2308      	movs	r3, #8
 8006488:	005b      	lsls	r3, r3, #1
 800648a:	429a      	cmp	r2, r3
 800648c:	d91e      	bls.n	80064cc <pvPortMalloc+0x10c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800648e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	4413      	add	r3, r2
 8006494:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006496:	69bb      	ldr	r3, [r7, #24]
 8006498:	f003 0307 	and.w	r3, r3, #7
 800649c:	2b00      	cmp	r3, #0
 800649e:	d009      	beq.n	80064b4 <pvPortMalloc+0xf4>
 80064a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80064a4:	f383 8811 	msr	BASEPRI, r3
 80064a8:	f3bf 8f6f 	isb	sy
 80064ac:	f3bf 8f4f 	dsb	sy
 80064b0:	613b      	str	r3, [r7, #16]
 80064b2:	e7fe      	b.n	80064b2 <pvPortMalloc+0xf2>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80064b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064b6:	685a      	ldr	r2, [r3, #4]
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	1ad2      	subs	r2, r2, r3
 80064bc:	69bb      	ldr	r3, [r7, #24]
 80064be:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80064c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064c2:	687a      	ldr	r2, [r7, #4]
 80064c4:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80064c6:	69b8      	ldr	r0, [r7, #24]
 80064c8:	f000 f8f6 	bl	80066b8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80064cc:	4b1a      	ldr	r3, [pc, #104]	; (8006538 <pvPortMalloc+0x178>)
 80064ce:	681a      	ldr	r2, [r3, #0]
 80064d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064d2:	685b      	ldr	r3, [r3, #4]
 80064d4:	1ad3      	subs	r3, r2, r3
 80064d6:	4a18      	ldr	r2, [pc, #96]	; (8006538 <pvPortMalloc+0x178>)
 80064d8:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80064da:	4b17      	ldr	r3, [pc, #92]	; (8006538 <pvPortMalloc+0x178>)
 80064dc:	681a      	ldr	r2, [r3, #0]
 80064de:	4b18      	ldr	r3, [pc, #96]	; (8006540 <pvPortMalloc+0x180>)
 80064e0:	681b      	ldr	r3, [r3, #0]
 80064e2:	429a      	cmp	r2, r3
 80064e4:	d203      	bcs.n	80064ee <pvPortMalloc+0x12e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80064e6:	4b14      	ldr	r3, [pc, #80]	; (8006538 <pvPortMalloc+0x178>)
 80064e8:	681b      	ldr	r3, [r3, #0]
 80064ea:	4a15      	ldr	r2, [pc, #84]	; (8006540 <pvPortMalloc+0x180>)
 80064ec:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80064ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064f0:	685a      	ldr	r2, [r3, #4]
 80064f2:	4b10      	ldr	r3, [pc, #64]	; (8006534 <pvPortMalloc+0x174>)
 80064f4:	681b      	ldr	r3, [r3, #0]
 80064f6:	431a      	orrs	r2, r3
 80064f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064fa:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80064fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064fe:	2200      	movs	r2, #0
 8006500:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8006502:	f7fe fc5b 	bl	8004dbc <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8006506:	69fb      	ldr	r3, [r7, #28]
 8006508:	f003 0307 	and.w	r3, r3, #7
 800650c:	2b00      	cmp	r3, #0
 800650e:	d009      	beq.n	8006524 <pvPortMalloc+0x164>
 8006510:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006514:	f383 8811 	msr	BASEPRI, r3
 8006518:	f3bf 8f6f 	isb	sy
 800651c:	f3bf 8f4f 	dsb	sy
 8006520:	60fb      	str	r3, [r7, #12]
 8006522:	e7fe      	b.n	8006522 <pvPortMalloc+0x162>
	return pvReturn;
 8006524:	69fb      	ldr	r3, [r7, #28]
}
 8006526:	4618      	mov	r0, r3
 8006528:	3728      	adds	r7, #40	; 0x28
 800652a:	46bd      	mov	sp, r7
 800652c:	bd80      	pop	{r7, pc}
 800652e:	bf00      	nop
 8006530:	200018e0 	.word	0x200018e0
 8006534:	200018ec 	.word	0x200018ec
 8006538:	200018e4 	.word	0x200018e4
 800653c:	200018d8 	.word	0x200018d8
 8006540:	200018e8 	.word	0x200018e8

08006544 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8006544:	b580      	push	{r7, lr}
 8006546:	b086      	sub	sp, #24
 8006548:	af00      	add	r7, sp, #0
 800654a:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	2b00      	cmp	r3, #0
 8006554:	d046      	beq.n	80065e4 <vPortFree+0xa0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8006556:	2308      	movs	r3, #8
 8006558:	425b      	negs	r3, r3
 800655a:	697a      	ldr	r2, [r7, #20]
 800655c:	4413      	add	r3, r2
 800655e:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8006560:	697b      	ldr	r3, [r7, #20]
 8006562:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8006564:	693b      	ldr	r3, [r7, #16]
 8006566:	685a      	ldr	r2, [r3, #4]
 8006568:	4b20      	ldr	r3, [pc, #128]	; (80065ec <vPortFree+0xa8>)
 800656a:	681b      	ldr	r3, [r3, #0]
 800656c:	4013      	ands	r3, r2
 800656e:	2b00      	cmp	r3, #0
 8006570:	d109      	bne.n	8006586 <vPortFree+0x42>
 8006572:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006576:	f383 8811 	msr	BASEPRI, r3
 800657a:	f3bf 8f6f 	isb	sy
 800657e:	f3bf 8f4f 	dsb	sy
 8006582:	60fb      	str	r3, [r7, #12]
 8006584:	e7fe      	b.n	8006584 <vPortFree+0x40>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8006586:	693b      	ldr	r3, [r7, #16]
 8006588:	681b      	ldr	r3, [r3, #0]
 800658a:	2b00      	cmp	r3, #0
 800658c:	d009      	beq.n	80065a2 <vPortFree+0x5e>
 800658e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006592:	f383 8811 	msr	BASEPRI, r3
 8006596:	f3bf 8f6f 	isb	sy
 800659a:	f3bf 8f4f 	dsb	sy
 800659e:	60bb      	str	r3, [r7, #8]
 80065a0:	e7fe      	b.n	80065a0 <vPortFree+0x5c>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80065a2:	693b      	ldr	r3, [r7, #16]
 80065a4:	685a      	ldr	r2, [r3, #4]
 80065a6:	4b11      	ldr	r3, [pc, #68]	; (80065ec <vPortFree+0xa8>)
 80065a8:	681b      	ldr	r3, [r3, #0]
 80065aa:	4013      	ands	r3, r2
 80065ac:	2b00      	cmp	r3, #0
 80065ae:	d019      	beq.n	80065e4 <vPortFree+0xa0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80065b0:	693b      	ldr	r3, [r7, #16]
 80065b2:	681b      	ldr	r3, [r3, #0]
 80065b4:	2b00      	cmp	r3, #0
 80065b6:	d115      	bne.n	80065e4 <vPortFree+0xa0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80065b8:	693b      	ldr	r3, [r7, #16]
 80065ba:	685a      	ldr	r2, [r3, #4]
 80065bc:	4b0b      	ldr	r3, [pc, #44]	; (80065ec <vPortFree+0xa8>)
 80065be:	681b      	ldr	r3, [r3, #0]
 80065c0:	43db      	mvns	r3, r3
 80065c2:	401a      	ands	r2, r3
 80065c4:	693b      	ldr	r3, [r7, #16]
 80065c6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80065c8:	f7fe fbea 	bl	8004da0 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80065cc:	693b      	ldr	r3, [r7, #16]
 80065ce:	685a      	ldr	r2, [r3, #4]
 80065d0:	4b07      	ldr	r3, [pc, #28]	; (80065f0 <vPortFree+0xac>)
 80065d2:	681b      	ldr	r3, [r3, #0]
 80065d4:	4413      	add	r3, r2
 80065d6:	4a06      	ldr	r2, [pc, #24]	; (80065f0 <vPortFree+0xac>)
 80065d8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80065da:	6938      	ldr	r0, [r7, #16]
 80065dc:	f000 f86c 	bl	80066b8 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 80065e0:	f7fe fbec 	bl	8004dbc <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80065e4:	bf00      	nop
 80065e6:	3718      	adds	r7, #24
 80065e8:	46bd      	mov	sp, r7
 80065ea:	bd80      	pop	{r7, pc}
 80065ec:	200018ec 	.word	0x200018ec
 80065f0:	200018e4 	.word	0x200018e4

080065f4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80065f4:	b480      	push	{r7}
 80065f6:	b085      	sub	sp, #20
 80065f8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80065fa:	f640 33b8 	movw	r3, #3000	; 0xbb8
 80065fe:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8006600:	4b27      	ldr	r3, [pc, #156]	; (80066a0 <prvHeapInit+0xac>)
 8006602:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8006604:	68fb      	ldr	r3, [r7, #12]
 8006606:	f003 0307 	and.w	r3, r3, #7
 800660a:	2b00      	cmp	r3, #0
 800660c:	d00c      	beq.n	8006628 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800660e:	68fb      	ldr	r3, [r7, #12]
 8006610:	3307      	adds	r3, #7
 8006612:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006614:	68fb      	ldr	r3, [r7, #12]
 8006616:	f023 0307 	bic.w	r3, r3, #7
 800661a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800661c:	68ba      	ldr	r2, [r7, #8]
 800661e:	68fb      	ldr	r3, [r7, #12]
 8006620:	1ad3      	subs	r3, r2, r3
 8006622:	4a1f      	ldr	r2, [pc, #124]	; (80066a0 <prvHeapInit+0xac>)
 8006624:	4413      	add	r3, r2
 8006626:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8006628:	68fb      	ldr	r3, [r7, #12]
 800662a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800662c:	4a1d      	ldr	r2, [pc, #116]	; (80066a4 <prvHeapInit+0xb0>)
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8006632:	4b1c      	ldr	r3, [pc, #112]	; (80066a4 <prvHeapInit+0xb0>)
 8006634:	2200      	movs	r2, #0
 8006636:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	68ba      	ldr	r2, [r7, #8]
 800663c:	4413      	add	r3, r2
 800663e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8006640:	2208      	movs	r2, #8
 8006642:	68fb      	ldr	r3, [r7, #12]
 8006644:	1a9b      	subs	r3, r3, r2
 8006646:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006648:	68fb      	ldr	r3, [r7, #12]
 800664a:	f023 0307 	bic.w	r3, r3, #7
 800664e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8006650:	68fb      	ldr	r3, [r7, #12]
 8006652:	4a15      	ldr	r2, [pc, #84]	; (80066a8 <prvHeapInit+0xb4>)
 8006654:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8006656:	4b14      	ldr	r3, [pc, #80]	; (80066a8 <prvHeapInit+0xb4>)
 8006658:	681b      	ldr	r3, [r3, #0]
 800665a:	2200      	movs	r2, #0
 800665c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800665e:	4b12      	ldr	r3, [pc, #72]	; (80066a8 <prvHeapInit+0xb4>)
 8006660:	681b      	ldr	r3, [r3, #0]
 8006662:	2200      	movs	r2, #0
 8006664:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800666a:	683b      	ldr	r3, [r7, #0]
 800666c:	68fa      	ldr	r2, [r7, #12]
 800666e:	1ad2      	subs	r2, r2, r3
 8006670:	683b      	ldr	r3, [r7, #0]
 8006672:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8006674:	4b0c      	ldr	r3, [pc, #48]	; (80066a8 <prvHeapInit+0xb4>)
 8006676:	681a      	ldr	r2, [r3, #0]
 8006678:	683b      	ldr	r3, [r7, #0]
 800667a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800667c:	683b      	ldr	r3, [r7, #0]
 800667e:	685b      	ldr	r3, [r3, #4]
 8006680:	4a0a      	ldr	r2, [pc, #40]	; (80066ac <prvHeapInit+0xb8>)
 8006682:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006684:	683b      	ldr	r3, [r7, #0]
 8006686:	685b      	ldr	r3, [r3, #4]
 8006688:	4a09      	ldr	r2, [pc, #36]	; (80066b0 <prvHeapInit+0xbc>)
 800668a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800668c:	4b09      	ldr	r3, [pc, #36]	; (80066b4 <prvHeapInit+0xc0>)
 800668e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8006692:	601a      	str	r2, [r3, #0]
}
 8006694:	bf00      	nop
 8006696:	3714      	adds	r7, #20
 8006698:	46bd      	mov	sp, r7
 800669a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800669e:	4770      	bx	lr
 80066a0:	20000d20 	.word	0x20000d20
 80066a4:	200018d8 	.word	0x200018d8
 80066a8:	200018e0 	.word	0x200018e0
 80066ac:	200018e8 	.word	0x200018e8
 80066b0:	200018e4 	.word	0x200018e4
 80066b4:	200018ec 	.word	0x200018ec

080066b8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80066b8:	b480      	push	{r7}
 80066ba:	b085      	sub	sp, #20
 80066bc:	af00      	add	r7, sp, #0
 80066be:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80066c0:	4b28      	ldr	r3, [pc, #160]	; (8006764 <prvInsertBlockIntoFreeList+0xac>)
 80066c2:	60fb      	str	r3, [r7, #12]
 80066c4:	e002      	b.n	80066cc <prvInsertBlockIntoFreeList+0x14>
 80066c6:	68fb      	ldr	r3, [r7, #12]
 80066c8:	681b      	ldr	r3, [r3, #0]
 80066ca:	60fb      	str	r3, [r7, #12]
 80066cc:	68fb      	ldr	r3, [r7, #12]
 80066ce:	681b      	ldr	r3, [r3, #0]
 80066d0:	687a      	ldr	r2, [r7, #4]
 80066d2:	429a      	cmp	r2, r3
 80066d4:	d8f7      	bhi.n	80066c6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80066d6:	68fb      	ldr	r3, [r7, #12]
 80066d8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80066da:	68fb      	ldr	r3, [r7, #12]
 80066dc:	685b      	ldr	r3, [r3, #4]
 80066de:	68ba      	ldr	r2, [r7, #8]
 80066e0:	4413      	add	r3, r2
 80066e2:	687a      	ldr	r2, [r7, #4]
 80066e4:	429a      	cmp	r2, r3
 80066e6:	d108      	bne.n	80066fa <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80066e8:	68fb      	ldr	r3, [r7, #12]
 80066ea:	685a      	ldr	r2, [r3, #4]
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	685b      	ldr	r3, [r3, #4]
 80066f0:	441a      	add	r2, r3
 80066f2:	68fb      	ldr	r3, [r7, #12]
 80066f4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80066f6:	68fb      	ldr	r3, [r7, #12]
 80066f8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	685b      	ldr	r3, [r3, #4]
 8006702:	68ba      	ldr	r2, [r7, #8]
 8006704:	441a      	add	r2, r3
 8006706:	68fb      	ldr	r3, [r7, #12]
 8006708:	681b      	ldr	r3, [r3, #0]
 800670a:	429a      	cmp	r2, r3
 800670c:	d118      	bne.n	8006740 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800670e:	68fb      	ldr	r3, [r7, #12]
 8006710:	681a      	ldr	r2, [r3, #0]
 8006712:	4b15      	ldr	r3, [pc, #84]	; (8006768 <prvInsertBlockIntoFreeList+0xb0>)
 8006714:	681b      	ldr	r3, [r3, #0]
 8006716:	429a      	cmp	r2, r3
 8006718:	d00d      	beq.n	8006736 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	685a      	ldr	r2, [r3, #4]
 800671e:	68fb      	ldr	r3, [r7, #12]
 8006720:	681b      	ldr	r3, [r3, #0]
 8006722:	685b      	ldr	r3, [r3, #4]
 8006724:	441a      	add	r2, r3
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800672a:	68fb      	ldr	r3, [r7, #12]
 800672c:	681b      	ldr	r3, [r3, #0]
 800672e:	681a      	ldr	r2, [r3, #0]
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	601a      	str	r2, [r3, #0]
 8006734:	e008      	b.n	8006748 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8006736:	4b0c      	ldr	r3, [pc, #48]	; (8006768 <prvInsertBlockIntoFreeList+0xb0>)
 8006738:	681a      	ldr	r2, [r3, #0]
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	601a      	str	r2, [r3, #0]
 800673e:	e003      	b.n	8006748 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8006740:	68fb      	ldr	r3, [r7, #12]
 8006742:	681a      	ldr	r2, [r3, #0]
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8006748:	68fa      	ldr	r2, [r7, #12]
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	429a      	cmp	r2, r3
 800674e:	d002      	beq.n	8006756 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8006750:	68fb      	ldr	r3, [r7, #12]
 8006752:	687a      	ldr	r2, [r7, #4]
 8006754:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006756:	bf00      	nop
 8006758:	3714      	adds	r7, #20
 800675a:	46bd      	mov	sp, r7
 800675c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006760:	4770      	bx	lr
 8006762:	bf00      	nop
 8006764:	200018d8 	.word	0x200018d8
 8006768:	200018e0 	.word	0x200018e0

0800676c <__libc_init_array>:
 800676c:	b570      	push	{r4, r5, r6, lr}
 800676e:	4e0d      	ldr	r6, [pc, #52]	; (80067a4 <__libc_init_array+0x38>)
 8006770:	4c0d      	ldr	r4, [pc, #52]	; (80067a8 <__libc_init_array+0x3c>)
 8006772:	1ba4      	subs	r4, r4, r6
 8006774:	10a4      	asrs	r4, r4, #2
 8006776:	2500      	movs	r5, #0
 8006778:	42a5      	cmp	r5, r4
 800677a:	d109      	bne.n	8006790 <__libc_init_array+0x24>
 800677c:	4e0b      	ldr	r6, [pc, #44]	; (80067ac <__libc_init_array+0x40>)
 800677e:	4c0c      	ldr	r4, [pc, #48]	; (80067b0 <__libc_init_array+0x44>)
 8006780:	f000 f82c 	bl	80067dc <_init>
 8006784:	1ba4      	subs	r4, r4, r6
 8006786:	10a4      	asrs	r4, r4, #2
 8006788:	2500      	movs	r5, #0
 800678a:	42a5      	cmp	r5, r4
 800678c:	d105      	bne.n	800679a <__libc_init_array+0x2e>
 800678e:	bd70      	pop	{r4, r5, r6, pc}
 8006790:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8006794:	4798      	blx	r3
 8006796:	3501      	adds	r5, #1
 8006798:	e7ee      	b.n	8006778 <__libc_init_array+0xc>
 800679a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800679e:	4798      	blx	r3
 80067a0:	3501      	adds	r5, #1
 80067a2:	e7f2      	b.n	800678a <__libc_init_array+0x1e>
 80067a4:	0800689c 	.word	0x0800689c
 80067a8:	0800689c 	.word	0x0800689c
 80067ac:	0800689c 	.word	0x0800689c
 80067b0:	080068a0 	.word	0x080068a0

080067b4 <memcpy>:
 80067b4:	b510      	push	{r4, lr}
 80067b6:	1e43      	subs	r3, r0, #1
 80067b8:	440a      	add	r2, r1
 80067ba:	4291      	cmp	r1, r2
 80067bc:	d100      	bne.n	80067c0 <memcpy+0xc>
 80067be:	bd10      	pop	{r4, pc}
 80067c0:	f811 4b01 	ldrb.w	r4, [r1], #1
 80067c4:	f803 4f01 	strb.w	r4, [r3, #1]!
 80067c8:	e7f7      	b.n	80067ba <memcpy+0x6>

080067ca <memset>:
 80067ca:	4402      	add	r2, r0
 80067cc:	4603      	mov	r3, r0
 80067ce:	4293      	cmp	r3, r2
 80067d0:	d100      	bne.n	80067d4 <memset+0xa>
 80067d2:	4770      	bx	lr
 80067d4:	f803 1b01 	strb.w	r1, [r3], #1
 80067d8:	e7f9      	b.n	80067ce <memset+0x4>
	...

080067dc <_init>:
 80067dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80067de:	bf00      	nop
 80067e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80067e2:	bc08      	pop	{r3}
 80067e4:	469e      	mov	lr, r3
 80067e6:	4770      	bx	lr

080067e8 <_fini>:
 80067e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80067ea:	bf00      	nop
 80067ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80067ee:	bc08      	pop	{r3}
 80067f0:	469e      	mov	lr, r3
 80067f2:	4770      	bx	lr
